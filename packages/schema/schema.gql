# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AddHoldingInput {
  assetClass: AssetClass!
  averagePrice: Float!
  currency: String!
  direction: HoldingDirection!
  quantity: Float!
  security: String!
  transactionDate: DateTime
}

type Aggregate {
  av: Float
  c: Float
  h: Float
  l: Float
  n: Float
  o: Float
  sym: String
  t: Float
  v: Float
  vw: Float
}

enum AscDesc {
  asc
  desc
}

enum AssetClass {
  cash
  cryptocurrency
  derivative
  fx
  stock
}

input ChartPriceRangeOptions {
  from: String!
  sort: AscDesc
  timespan: Timespan!
  to: String!
}

input CreateUserInput {
  _id: String!
  displayName: String!
  emails: [String!]
  photos: [String!]
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Holding {
  _id: ObjectId!
  assetClass: AssetClass!
  averagePrice: Float!
  costBasis: Float!
  createdAt: DateTime
  currency: String!
  dailyProfitLossUsd: Float!
  direction: HoldingDirection
  exposure: Float!
  importedSecurity: ImportedSecurity
  institutionValue: Float
  marketValue: Float!
  plaidAccountId: String
  profitLossPercent: Float!
  profitLossUsd: Float!
  quantity: Float!
  security: Security
  source: HoldingSource!
  updatedAt: DateTime
}

enum HoldingDirection {
  long
  short
}

type HoldingFromDb {
  _id: ObjectId!
  assetClass: AssetClass!
  averagePrice: Float!
  costBasis: Float!
  createdAt: DateTime
  currency: String!
  direction: HoldingDirection
  importedSecurity: ImportedSecurity
  institutionValue: Float
  plaidAccountId: String
  quantity: Float!
  security: Security
  source: HoldingSource!
  updatedAt: DateTime
}

enum HoldingSource {
  broker
  direct
  transactions
}

type ImportResponse {
  importedIds: [ObjectId!]!
}

type ImportedSecurity {
  assetClass: AssetClass!
  close_price_as_of: String
  currency: String
  cusip: String
  institution_id: String
  institution_security_id: String
  isImported: Boolean
  is_cash_equivalent: Boolean
  isin: String
  latestPrice: Float
  name: String
  proxy_security_id: String
  security_id: String!
  sedol: String
  ticker_symbol: String
  unofficial_currency_code: String
  update_datetime: String
}

type Institution {
  _id: String!
  logo: String
  name: String!
  url: String
}

type Mutation {
  addAlphaTesterEmail(email: String!): RecordId!
  portfoliosAddHolding(_id: ObjectId!, input: AddHoldingInput!): PortfolioFromDb!
  portfoliosBeginImport(publicToken: String!): ImportResponse!
  portfoliosInitEmpty: RecordId!
  portfoliosRemoveHolding(holdingId: ObjectId!, portfolioId: ObjectId!): ObjectId!
  portfoliosRemoveMultiple(_ids: [ObjectId!]!): RemoveMultipleResponse!
  portfoliosRemoveOne(_id: ObjectId!): RecordId!
  portfoliosUpdateOne(_id: ObjectId!, input: UpdatePortfolioInput!): PortfolioFromDb!
  usersFindOrCreate(input: CreateUserInput!): User!
  usersRemoveOne(_id: ID!): User!
  usersUpdateOne(input: UpdateUserInput!): User!
}

"""Mongo object id scalar type"""
scalar ObjectId

type PlaidAccount {
  account_id: String!
  balances: PlaidAccountBalance!
  name: String
  official_name: String
  subtype: String
  type: PlaidAccountType
}

type PlaidAccountBalance {
  available: Float
  current: Float
  iso_currency_code: String
  last_updated_datetime: String
  limit: Float
  unofficial_currency_code: String
}

enum PlaidAccountType {
  brokerage
  credit
  depository
  investment
  loan
  other
}

type PlaidItem {
  _id: String!
  accessToken: String!
  error: PlaidItemError
  institution: Institution!
  lastWebhookTime: DateTime!
  owner: User!
}

type PlaidItemError {
  displayMessage: String!
  documentationUrl: String!
  errorCode: Float!
  errorMessage: String!
  errorType: String!
  suggestedAction: String!
}

type PopulatedHolding {
  _id: ObjectId!
  assetClass: AssetClass!
  averagePrice: Float!
  costBasis: Float!
  createdAt: DateTime
  currency: String!
  direction: HoldingDirection
  importedSecurity: ImportedSecurity
  institutionValue: Float
  plaidAccountId: String
  quantity: Float!
  security: Security
  source: HoldingSource!
  updatedAt: DateTime
}

type Portfolio {
  _id: ObjectId!
  cash: Float!
  createdAt: DateTime
  description: String
  holdings: [Holding!]!
  name: String!
  owner: User!
  plaidAccount: PlaidAccount
  plaidItem: PlaidItem
  private: Boolean!
  totalValue: Float!
  transactions: [Transaction!]!
  updatedAt: DateTime
}

type PortfolioFromDb {
  _id: ObjectId!
  createdAt: DateTime
  description: String
  holdings: [HoldingFromDb!]!
  name: String!
  owner: User!
  plaidAccount: PlaidAccount
  plaidItem: PlaidItem
  private: Boolean!
  transactions: [TransactionFromDb!]!
  updatedAt: DateTime
}

type PortfolioSummary {
  _id: ObjectId!
  cash: Float!
  createdAt: DateTime
  description: String
  name: String!
  owner: User!
  plaidAccount: PlaidAccount
  plaidItem: PlaidItem
  private: Boolean!
  totalValue: Float!
  updatedAt: DateTime
}

type Query {
  chartSecurityPrice(options: ChartPriceRangeOptions!, ticker: String!): [Aggregate!]!
  plaidLinkToken: String!
  portfoliosCreated: [PortfolioSummary!]!
  portfoliosFindById(_id: ObjectId!): Portfolio!
  securitiesFindById(_id: String!): Security!
  securitiesSearch(searchTerm: String!): [Security!]!
  usersFindById(_id: ID!): User!
}

type RecordId {
  _id: String!
}

type RemoveMultipleResponse {
  acknowledged: Boolean!
  deletedCount: Float!
}

type Security {
  _id: String!
  assetClass: AssetClass!
  currency: String
  exchange: String
  figi: String
  isImported: Boolean
  latestPrice: Float
  name: String
  region: String
  tickerDetails: TickerDetails
  todaysChange: Float
  todaysChangePercent: Float
}

type Subscription {
  chartRealtime(ticker: String!): Aggregate!
  portfoliosSubscribeToMarketData(_id: ObjectId!): Portfolio
}

type TickerDetails {
  active: Boolean
  cik: String
  currencyName: String
  description: String
  homepageUrl: String
  iconUrl: String
  listDate: String
  logoUrl: String
  market: String
  marketCap: Float
  name: String
  phoneNumber: String
  shareClassOutstanding: Float
  sicCode: Float
  sicDescription: String
  totalEmployees: Float
  type: TickerType
  weightedSharesOutstanding: Float
}

enum TickerType {
  Adrc
  Adrr
  Adrw
  Agen
  Basket
  Bond
  Cs
  Eqlk
  Etf
  Etn
  Etv
  Fund
  Gdr
  Lt
  Nyrs
  Os
  Other
  Pfd
  Right
  Sp
  Unit
  Warrant
}

enum Timespan {
  day
  hour
  minute
  month
  quarter
  week
  year
}

type Transaction {
  _id: ObjectId!
  amount: Float!
  assetClass: AssetClass!
  createdBy: User
  currency: String!
  date: DateTime!
  fees: Float!
  importedSecurity: ImportedSecurity
  name: String!

  """This is the account_id from plaid"""
  plaidAccountId: String

  """This is the transaction_id from plaid"""
  plaidTransactionId: String
  price: Float
  quantity: Float!
  security: Security
  subType: TransactionSubtype!
  type: TransactionType!
}

type TransactionFromDb {
  _id: ObjectId!
  amount: Float!
  assetClass: AssetClass!
  createdBy: User
  currency: String!
  date: DateTime!
  fees: Float!
  importedSecurity: ImportedSecurity
  name: String!

  """This is the account_id from plaid"""
  plaidAccountId: String

  """This is the transaction_id from plaid"""
  plaidTransactionId: String
  price: Float
  quantity: Float!
  security: Security
  subType: TransactionSubtype!
  type: TransactionType!
}

enum TransactionSubtype {
  AccountFee
  Adjustment
  Assignment
  Buy
  BuyToCover
  Contribution
  Deposit
  Distribution
  Dividend
  DividendReinvestment
  Exercise
  Expire
  FundFee
  Interest
  InterestReceivable
  InterestReinvestment
  LegalFee
  LoanPayment
  LongTermCapitalGain
  LongTermCapitalGainReinvestment
  ManagementFee
  MarginExpense
  Merger
  MiscellaneousFee
  NonQualifiedDividend
  NonResidentTax
  PendingCredit
  PendingDebit
  QualifiedDividend
  Rebalance
  Request
  ReturnOfPrincipal
  Sell
  SellShort
  Send
  ShortTermCapitalGain
  ShortTermCapitalGainReinvestment
  SpinOff
  Split
  StockDistribution
  Tax
  TaxWithheld
  Transfer
  TransferFee
  TrustFee
  UnqualifiedGain
  Withdrawal
}

enum TransactionType {
  Buy
  Cancel
  Cash
  Fee
  Sell
  Transfer
}

input UpdatePortfolioInput {
  cash: Float
  description: String
  name: String
  private: Boolean
}

input UpdateUserInput {
  _id: String
  displayName: String
  emails: [String!]
  id: Int!
  photos: [String!]
}

type User {
  _id: String!
  createdAt: DateTime
  displayName: String!
  emails: [String!]
  photos: [String!]!
  updatedAt: DateTime
}