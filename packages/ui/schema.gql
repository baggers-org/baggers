# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

input AddHoldingInput {
  averagePrice: Float!
  brokerFees: Float
  currency: String
  direction: HoldingDirection!
  holdingType: HoldingType!
  quantity: Float!
  symbol: ObjectId!
}

type AddHoldingPayload {
  record: Portfolio!
  recordId: ObjectId!
}

type ClearImportError {
  record: Portfolio!
  recordId: ObjectId!
}

type CreatePortfolioPayload {
  record: Portfolio!
  recordId: ObjectId!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input FindOrCreateUserInput {
  _id: String!
  displayName: String
  emails: [String!]
  photos: [String!]
}

type FindOrCreateUserPayload {
  record: User!
  recordId: ObjectId!
}

type Holding {
  _id: ObjectId!
  averagePrice: Float!
  brokerFees: Float!
  costBasis: Float!
  currency: String!
  dailyProfitLossUsd: Float!
  exposure: Float!
  holdingType: HoldingType!
  marketValue: Float!
  profitLossPercent: Float!
  profitLossUsd: Float!
  quantity: Float!
  symbol: Symbol!
}

"""Buying vs selling"""
enum HoldingDirection {
  long
  short
}

"""Shares, calls, puts"""
enum HoldingType {
  calls
  puts
  shares
}

type MissingSymbol {
  exchange: String!
  figi: String!
  name: String!
  symbol: String!
}

type Mutation {
  addHolding(id: ObjectId!, record: AddHoldingInput!): AddHoldingPayload!
  clearImportError(portfolio_id: ObjectId!): ClearImportError!

  """Create a portfolio under your username"""
  createPortfolio: CreatePortfolioPayload!

  """Delete the specified portfolio if you have permission to do so"""
  deletePortfolio(_id: ObjectId!): CreatePortfolioPayload!
  findOrCreateUser(record: FindOrCreateUserInput!): FindOrCreateUserPayload!
  plaidCreateLinkToken: PlaidCreateLinkTokenResponse!

  """Uses the public_token from the link process to import portfolios"""
  plaidImportPortfolios(input: PlaidImportPortfoliosInput!): PlaidImportPortfolioPayload!
  removeHolding(holding_id: ObjectId!, portfolio_id: ObjectId!): RemoveHoldingPayload!

  """Update portfolio details"""
  updatePortfolio(_id: ObjectId!, input: UpdatePortfolioInput!): UpdatePortfolioPayload!
}

"""Mongo object id scalar type"""
scalar ObjectId

type PlaidCreateLinkTokenResponse {
  expiration: String!
  link_token: String!
  request_id: String!
}

type PlaidImportPortfolioPayload {
  ok: Boolean!
}

input PlaidImportPortfoliosInput {
  public_token: String!
}

type PlaidItem {
  access_token: String
  isLinked: Boolean
  item_id: String
  linkedAccountId: String
  missingSecuritiesError: PlaidMissingSecuritiesError
}

type PlaidMissingSecuritiesError {
  message: String!
  missingSymbols: [MissingSymbol!]
}

type Portfolio {
  _id: ObjectId!
  cash: Float!
  description: String!
  holdings: [Holding!]!
  name: String!
  owner: User!
  plaid: PlaidItem
  private: Boolean!
  totalValue: Float!
  transactions: [Transaction!]!
}

type Query {
  myPortfolios: [Portfolio!]!
  portfolio(portfolioId: ObjectId!): Portfolio!
  searchSymbols(search: String!): [Symbol!]!
}

type Quote {
  avgTotalVolume: Float
  calculationPrice: String
  change: Float
  changePercent: Float
  close: Float
  closeSource: String
  closeTime: Float
  companyName: String
  currency: String
  delayedPrice: Float
  delayedPriceTime: Float
  extendedChange: Float
  extendedChangePercent: Float
  extendedPrice: Float
  extendedPriceTime: Float
  high: Float
  highSource: String
  highTime: Float
  iexAskPrice: Float
  iexAskSize: Float
  iexBidPrice: Float
  iexBidSize: Float
  iexClose: Float
  iexCloseTime: Float
  iexLastUpdated: Float
  iexMarketPercent: Float
  iexOpen: Float
  iexOpenTime: Float
  iexRealtimePrice: Float
  iexRealtimeSize: Float
  iexVolume: Float
  isUSMarketOpen: Boolean
  lastTradeTime: Float
  latestPrice: Float
  latestSource: String
  latestTime: String
  latestUpdate: Float
  latestVolume: Float
  low: Float
  lowSource: String
  lowTime: Float
  marketCap: Float
  oddLotDelayedPrice: Float
  oddLotDelayedPriceTime: Float
  open: Float
  openSource: String
  openTime: Float
  peRatio: Float
  previousClose: Float
  previousVolume: Float
  primaryExchange: String
  symbol: String
  volume: Float
  week52High: Float
  week52Low: Float
  ytdChange: Float
}

type RemoveHoldingPayload {
  recordId: ObjectId!
}

type Symbol {
  _id: ObjectId!
  cik: String!
  currency: String!
  exchange: String!
  exchangeName: String!
  figi: String!
  iexId: String!
  name: String!
  quote: Quote!
  region: String!
  symbol: String!
  symbolType: String!
}

type Transaction {
  currency: String!
  date: DateTime!
  name: String!
  price: Float!
  quantity: Float!
  subType: TransactionSubtype!
  type: TransactionType!
}

enum TransactionSubtype {
  AccountFee
  Adjustment
  Assignment
  Buy
  BuyToCover
  Contribution
  Deposit
  Distribution
  Dividend
  DividendReinvestment
  Exercise
  Expire
  FundFee
  Interest
  InterestReceivable
  InterestReinvestment
  LegalFee
  LoanPayment
  LongTermCapitalGain
  LongTermCapitalGainReinvestment
  ManagementFee
  MarginExpense
  Merger
  MiscellaneousFee
  NonQualifiedDividend
  NonResidentTax
  PendingCredit
  PendingDebit
  QualifiedDividend
  Rebalance
  ReturnOfPrincipal
  Sell
  SellShort
  ShortTermCapitalGain
  ShortTermCapitalGainReinvestment
  SpinOff
  Split
  StockDistribution
  Tax
  TaxWithheld
  Transfer
  TransferFee
  TrustFee
  UnqualifiedGain
  Withdrawal
}

enum TransactionType {
  Buy
  Cancel
  Cash
  Fee
  Sell
  Transfer
}

input UpdatePortfolioInput {
  cash: Float
  description: String
  name: String
  private: Boolean
}

type UpdatePortfolioPayload {
  record: Portfolio!
  recordId: ObjectId!
}

type User {
  _id: String!
  displayName: String!
  emails: [String!]
  photos: [String!]!
}
