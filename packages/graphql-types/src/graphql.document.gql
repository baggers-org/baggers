

mutation addAlphaTesterEmail($email: String!) {
  addAlphaTesterEmail(email: $email) {
    _id
  }
}


query chartSecurityPrice($ticker: String!, $options: ChartPriceRangeOptions!) {
  chartSecurityPrice(options: $options, ticker: $ticker) {
    c
    h
    l
    n
    o
    t
    v
    vw
  }
}


query plaidLinkToken {
  plaidLinkToken
}


fragment AllHoldingData on Holding {
  _id
  # Market data fields
  marketValue
  exposure
  profitLossUsd
  profitLossPercent
  dailyProfitLossUsd
  #

  averagePrice
  costBasis
  institutionValue
  direction
  quantity
  assetClass
  source
  currency
  importedSecurity {
    ...AllImportedSecurityData
  }
  security {
    ...AllSecurityData
  }
}


fragment FullPlaidAccount on PlaidAccount {
  type
  name
  subtype
  official_name
  account_id
  balances {
    current
    available
  }
}


fragment FullPortfolioSummary on PortfolioSummary {
  _id
  cash
  owner {
    ...FullUser
  }
  name
  description
  private
  createdAt
  updatedAt
  plaidAccount {
    ...FullPlaidAccount
  }
  totalValue
}

fragment PortfolioTransactions on Portfolio {
  transactions {
    ...AllTransactionData
  }
}
fragment PortfolioHoldings on Portfolio {
  holdings {
    ...AllHoldingData
  }
}

fragment AllPortfolioData on Portfolio {
  _id
  cash
  owner {
    ...FullUser
  }
  name
  description
  private
  createdAt
  updatedAt
  plaidAccount {
    ...FullPlaidAccount
  }
  totalValue
  ...PortfolioHoldings
  ...PortfolioTransactions
}


fragment AllTransactionData on Transaction {
  _id
  name
  date
  currency
  security {
    ...AllSecurityData
  }
  importedSecurity {
    ...AllImportedSecurityData
  }
  quantity
  amount
  fees
  price
  type
  subType
}


mutation portfoliosAddTransaction($input: AddTransactionInput!) {
  portfoliosAddTransaction(input: $input) {
    _id
  }
}


mutation portfoliosBeginImport($publicToken: String!) {
  portfoliosBeginImport(publicToken: $publicToken) {
    importedIds
  }
}


query portfoliosCreated {
  portfoliosCreated {
    ...FullPortfolioSummary
  }
}


mutation portfoliosCreateOne($input: CreatePortfolioInput!) {
  portfoliosCreateOne(input: $input) {
    _id
  }
}



query portfoliosFindById($_id: ObjectId!) {
  portfoliosFindById(_id: $_id) {
    _id
    ...AllPortfolioData
  }
}

mutation portfoliosInitEmpty {
  portfoliosInitEmpty {
    _id
  }
}


mutation portfoliosRemoveMultiple($_ids: [ObjectId!]!) {
  portfoliosRemoveMultiple(_ids: $_ids) {
    acknowledged
    deletedCount
  }
}


mutation portfoliosRemoveOne($_id: ObjectId!) {
  portfoliosRemoveOne(_id: $_id) {
    _id
  }
}


subscription portfoliosSubscribeToMarketData($id: ObjectId!) {
  portfoliosSubscribeToMarketData(_id: $id) {
    _id
    ...AllPortfolioData
  }
}


mutation portfoliosUpdateOne($_id: ObjectId!, $input: UpdatePortfolioInput!) {
  portfoliosUpdateOne(_id: $_id, input: $input) {
    _id
    createdAt
    description
    name
    private
    updatedAt
  }
}


fragment AllSecurityData on Security {
  _id
  currency
  exchange
  assetClass
  figi
  name
  region
  latestPrice
  todaysChange
  todaysChangePercent
  tickerDetails {
    ...AllTickerDetails
  }
}

fragment AllImportedSecurityData on ImportedSecurity {
  latestPrice
  name
  ticker_symbol
  currency
  assetClass
}

fragment SecuritySummary on Security {
  _id
  name
  region
  latestPrice
}


fragment AllTickerDetails on TickerDetails {
  active
  cik
  currencyName
  description
  homepageUrl
  iconUrl
  listDate
  logoUrl
  market
  marketCap
  name
  phoneNumber
  shareClassOutstanding
  sicCode
  sicDescription
  totalEmployees
  type
  weightedSharesOutstanding
}


query securitiesFindById($_id: String!) {
  securitiesFindById(_id: $_id) {
    _id
    ...AllSecurityData
  }
}


query securitiesSearch($searchTerm: String!) {
  securitiesSearch(searchTerm: $searchTerm) {
    _id
    ...AllSecurityData
  }
}


fragment FullUser on User {
  _id
  displayName
  emails
  photos
  createdAt
  updatedAt
}


query usersFindById($_id: ID!) {
  usersFindById(_id: $_id) {
    _id
    ...FullUser
  }
}


mutation usersFindOrCreate($input: CreateUserInput!) {
  usersFindOrCreate(input: $input) {
    _id
    ...FullUser
  }
}
