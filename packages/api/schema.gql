# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

input AddPositionInput {
  brokerFees: Float
  closeDate: DateTime
  costBasis: Float!
  isShort: Boolean!
  openDate: DateTime
  portfolio_id: ObjectId!
  positionSize: Float!
  symbol_id: ObjectId!
}

type AddPositionPayload {
  record: Portfolio!
  recordId: ObjectId!
}

type CreatePortfolioPayload {
  record: Portfolio!
  recordId: ObjectId!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input FindOrCreateUserInput {
  displayName: String
  emails: [String!]
  photos: [String!]
  sub: String!
}

type FindOrCreateUserPayload {
  record: User!
  recordId: ObjectId!
}

type Mutation {
  addPosition(record: AddPositionInput!): AddPositionPayload!

  """Create a portfolio under your username"""
  createPortfolio: CreatePortfolioPayload!

  """Delete the specified portfolio if you have permission to do so"""
  deletePortfolio(_id: ObjectId!): CreatePortfolioPayload!
  findOrCreateUser(record: FindOrCreateUserInput!): FindOrCreateUserPayload!

  """Set portfolio name"""
  portfolioSetName(_id: ObjectId!, name: String!): UpdatePortfolioPayload!
  removePosition(portfolio_id: ObjectId!, position_id: ObjectId!): RemovePositionPayload!
}

"""Mongo object id scalar type"""
scalar ObjectId

type Portfolio {
  _id: ObjectId!
  cash: Float!
  description: String!
  name: String!
  owner: User!
  positions: [Position!]!
  private: Boolean!
  totalValue: Float!
}

type Position {
  _id: ObjectId!
  averagePrice: Float!
  brokerFees: Float!
  closeDate: DateTime
  costBasis: Float!
  dailyProfitLossUsd: Float!
  exposure: Float!
  isShort: Boolean!
  marketValue: Float!
  openDate: DateTime
  positionSize: Float!
  profitLossPercent: Float!
  profitLossUsd: Float!
  symbol: Symbol!
}

type Query {
  myPortfolios: [Portfolio!]!
  portfolio(portfolioId: ObjectId!): Portfolio!
  searchSymbols(search: String!): [Symbol!]!
}

type Quote {
  avgTotalVolume: Float!
  calculationPrice: String!
  change: Float!
  changePercent: Float!
  close: Float!
  closeSource: String!
  closeTime: Float!
  companyName: String!
  currency: String!
  delayedPrice: Float!
  delayedPriceTime: Float!
  extendedChange: Float!
  extendedChangePercent: Float!
  extendedPrice: Float!
  extendedPriceTime: Float!
  high: Float!
  highSource: String!
  highTime: Float!
  iexAskPrice: Float!
  iexAskSize: Float!
  iexBidPrice: Float!
  iexBidSize: Float!
  iexClose: Float!
  iexCloseTime: Float!
  iexLastUpdated: Float!
  iexMarketPercent: Float!
  iexOpen: Float!
  iexOpenTime: Float!
  iexRealtimePrice: Float!
  iexRealtimeSize: Float!
  iexVolume: Float!
  isUSMarketOpen: Boolean!
  lastTradeTime: Float!
  latestPrice: Float!
  latestSource: String!
  latestTime: String!
  latestUpdate: Float!
  latestVolume: Float!
  low: Float!
  lowSource: String!
  lowTime: Float!
  marketCap: Float!
  oddLotDelayedPrice: Float!
  oddLotDelayedPriceTime: Float!
  open: Float!
  openSource: String!
  openTime: Float!
  peRatio: Float!
  previousClose: Float!
  previousVolume: Float!
  primaryExchange: String!
  symbol: String!
  volume: Float!
  week52High: Float!
  week52Low: Float!
  ytdChange: Float!
}

type RemovePositionPayload {
  record: Portfolio!
  recordId: ObjectId!
}

type Symbol {
  _id: ObjectId!
  currency: String!
  exchange: String!
  exchangeName: String!
  name: String!
  quote: Quote!
  region: String!
  symbol: String!
  symbolType: String!
}

type UpdatePortfolioPayload {
  record: Portfolio!
  recordId: ObjectId!
}

type User {
  _id: ObjectId!
  displayName: String!
  emails: [String!]!
  photos: [String!]!
  sub: String!
}
