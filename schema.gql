# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AddHoldingInput {
  averagePrice: Float!
  brokerFees: Float = 0
  currency: String!
  direction: HoldingDirection!
  quantity: Float!
  security: ObjectId!
  securityType: SecurityType!
}

enum AscDesc {
  asc
  desc
}

type Chart {
  change: Float!
  changeOverTime: Float!
  changePercent: Float!
  close: Float!
  date: String!
  fClose: Float!
  fHigh: Float!
  fLow: Float!
  fOpen: Float!
  fVolume: Float!
  high: Float!
  id: String!
  key: String!
  label: String!
  low: Float!
  marketChangeOverTime: Float!
  open: Float!
  subkey: String!
  symbol: String!
  uClose: Float!
  uHigh: Float!
  uLow: Float!
  uOpen: Float!
  uVolume: Float!
  updated: Float!
  volume: Float!
}

input ChartPriceRangeOptions {
  chartByDay: Boolean
  chartCloseOnly: Boolean
  chartInterval: Float
  chartLast: Float
  chartSimplify: Boolean
  displayPercent: Float
  includeToday: Boolean
  sort: AscDesc
}

input CreateUserInput {
  _id: String!
  displayName: String!
  emails: [String!]
  photos: [String!]
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum HistoricalRange {
  Last2Years
  Last3Months
  Last5Days
  Last5Days10MinuteIntervals
  Last5Years
  Last6Months
  LastMonth
  LastMonth30MinuteIntervals
  LastYear
  YearToDate
  date
  dynamic
  max
}

type Holding {
  _id: ObjectId!
  averagePrice: Float
  brokerFees: Float
  costBasis: Float
  createdAt: DateTime
  currency: String!
  dailyProfitLossUsd: Float
  direction: HoldingDirection
  exposure: Float!
  importedSecurity: ImportedSecurity
  institutionValue: Float
  marketValue: Float
  plaidAccountId: String
  profitLossPercent: Float
  profitLossUsd: Float
  quantity: Float!
  security: Security
  securityType: SecurityType!
  source: HoldingSource!
  updatedAt: DateTime
}

enum HoldingDirection {
  long
  short
}

type HoldingFromDb {
  _id: ObjectId!
  averagePrice: Float
  brokerFees: Float
  costBasis: Float
  createdAt: DateTime
  currency: String!
  direction: HoldingDirection
  importedSecurity: ImportedSecurity
  institutionValue: Float
  plaidAccountId: String
  quantity: Float!
  security: Security
  securityType: SecurityType!
  source: HoldingSource!
  updatedAt: DateTime
}

enum HoldingSource {
  broker
  direct
  transactions
}

type ImportResponse {
  importedIds: [ObjectId!]!
}

type ImportedSecurity {
  close_price: Float
  close_price_as_of: String
  cusip: String
  institution_id: String
  institution_security_id: String
  is_cash_equivalent: Boolean
  isin: String
  iso_currency_code: String
  name: String
  proxy_security_id: String

  """
  A unique, Plaid-specific identifier for the security, used to associate securities with holdings. Like all Plaid identifiers, the `security_id` is case sensitive.
  """
  security_id: String!
  sedol: String
  ticker_symbol: String
  type: SecurityType
  unofficial_currency_code: String
  update_datetime: String
}

type Institution {
  _id: String!
  logo: String
  name: String!
  url: String
}

type Mutation {
  portfoliosAddHolding(_id: ObjectId!, input: AddHoldingInput!): PortfolioFromDb!
  portfoliosBeginImport(publicToken: String!): ImportResponse!
  portfoliosInitEmpty: RecordId!
  portfoliosRemoveHolding(holdingId: ObjectId!, portfolioId: ObjectId!): ObjectId!
  portfoliosRemoveMultiple(_ids: [ObjectId!]!): RemoveMultipleResponse!
  portfoliosRemoveOne(_id: ObjectId!): RecordId!
  portfoliosUpdateOne(_id: ObjectId!, input: UpdatePortfolioInput!): PortfolioFromDb!
  usersFindOrCreate(input: CreateUserInput!): User!
  usersRemoveOne(_id: ID!): User!
  usersUpdateOne(input: UpdateUserInput!): User!
}

"""Mongo object id scalar type"""
scalar ObjectId

type PlaidAccount {
  """
  Plaidâ€™s unique identifier for the account. This value will not change unless Plaid can\'t reconcile the account with the data returned by the financial institution. This may occur, for example, when the name of the account changes. If this happens a new `account_id` will be assigned to the account.  The `account_id` can also change if the `access_token` is deleted and the same credentials that were used to generate that `access_token` are used to generate a new `access_token` on a later date. In that case, the new `account_id` will be different from the old `account_id`.  If an account with a specific `account_id` disappears instead of changing, the account is likely closed. Closed accounts are not returned by the Plaid API.  Like all Plaid identifiers, the `account_id` is case sensitive.
  """
  account_id: String!
  balances: PlaidAccountBalance!

  """
  The name of the account, either assigned by the user or by the financial institution itself
  """
  name: String

  """The official name of the account as given by the financial institution"""
  official_name: String
  subtype: String
  type: PlaidAccountType
}

type PlaidAccountBalance {
  """
  The amount of funds available to be withdrawn from the account, as determined by the financial institution.  For `credit`-type accounts, the `available` balance typically equals the `limit` less the `current` balance, less any pending outflows plus any pending inflows.  For `depository`-type accounts, the `available` balance typically equals the `current` balance less any pending outflows plus any pending inflows. For `depository`-type accounts, the `available` balance does not include the overdraft limit.  For `investment`-type accounts (or `brokerage`-type accounts for API versions 2018-05-22 and earlier), the `available` balance is the total cash available to withdraw as presented by the institution.  Note that not all institutions calculate the `available`  balance. In the event that `available` balance is unavailable, Plaid will return an `available` balance value of `null`.  Available balance may be cached and is not guaranteed to be up-to-date in realtime unless the value was returned by `/accounts/balance/get`.  If `current` is `null` this field is guaranteed not to be `null`.
  """
  available: Float

  """
  The total amount of funds in or owed by the account.  For `credit`-type accounts, a positive balance indicates the amount owed; a negative amount indicates the lender owing the account holder.  For `loan`-type accounts, the current balance is the principal remaining on the loan, except in the case of student loan accounts at Sallie Mae (`ins_116944`). For Sallie Mae student loans, the account\'s balance includes both principal and any outstanding interest.  For `investment`-type accounts (or `brokerage`-type accounts for API versions 2018-05-22 and earlier), the current balance is the total value of assets as presented by the institution.  Note that balance information may be cached unless the value was returned by `/accounts/balance/get`; if the Item is enabled for Transactions, the balance will be at least as recent as the most recent Transaction update. If you require realtime balance information, use the `available` balance as provided by `/accounts/balance/get`.  When returned by `/accounts/balance/get`, this field may be `null`. When this happens, `available` is guaranteed not to be `null`.
  """
  current: Float

  """
  The ISO-4217 currency code of the balance. Always null if `unofficial_currency_code` is non-null.
  """
  iso_currency_code: String

  """
  Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:mm:ssZ`) indicating the last time that the balance for the given account has been updated  This is currently only provided when the `min_last_updated_datetime` is passed when calling `/accounts/balance/get` for `ins_128026` (Capital One).
  """
  last_updated_datetime: String

  """
  For `credit`-type accounts, this represents the credit limit.  For `depository`-type accounts, this represents the pre-arranged overdraft limit, which is common for current (checking) accounts in Europe.  In North America, this field is typically only available for `credit`-type accounts.
  """
  limit: Float

  """
  The unofficial currency code associated with the balance. Always null if `iso_currency_code` is non-null. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `unofficial_currency_code`s.
  """
  unofficial_currency_code: String
}

enum PlaidAccountType {
  brokerage
  credit
  depository
  investment
  loan
  other
}

type PlaidItem {
  _id: String!
  accessToken: String
  error: PlaidItemError
  institution: Institution!
  lastWebhookTime: DateTime!
  owner: User!
}

type PlaidItemError {
  displayMessage: String!
  documentationUrl: String!
  errorCode: Float!
  errorMessage: String!
  errorType: String!
  suggestedAction: String!
}

type PopulatedHolding {
  _id: ObjectId!
  averagePrice: Float
  brokerFees: Float
  costBasis: Float
  createdAt: DateTime
  currency: String!
  direction: HoldingDirection
  importedSecurity: ImportedSecurity
  institutionValue: Float
  plaidAccountId: String
  quantity: Float!
  security: Security
  securityType: SecurityType!
  source: HoldingSource!
  updatedAt: DateTime
}

type Portfolio {
  _id: ObjectId!
  cash: Float!
  createdAt: DateTime
  description: String
  holdings: [Holding!]!
  name: String!
  owner: User!
  plaidAccount: PlaidAccount
  plaidItem: PlaidItem
  private: Boolean!
  totalValue: Float!
  transactions: [Transaction!]!
  updatedAt: DateTime
}

type PortfolioFromDb {
  _id: ObjectId!
  createdAt: DateTime
  description: String
  holdings: [HoldingFromDb!]!
  name: String!
  owner: User!
  plaidAccount: PlaidAccount
  plaidItem: PlaidItem
  private: Boolean!
  transactions: [TransactionFromDb!]!
  updatedAt: DateTime
}

type PortfolioSummary {
  _id: ObjectId!
  cash: Float!
  createdAt: DateTime
  description: String
  name: String!
  owner: User!
  plaidAccount: PlaidAccount
  plaidItem: PlaidItem
  private: Boolean!
  top5Holdings: [Holding!]!
  totalValue: Float!
  updatedAt: DateTime
}

type Query {
  chartSecurityPrice(options: ChartPriceRangeOptions, range: HistoricalRange!, securityId: ObjectId!): [Chart!]!
  plaidLinkToken: String!
  portfoliosCreated: [PortfolioSummary!]!
  portfoliosFindById(_id: ObjectId!): Portfolio!
  securitiesFindById(_id: ObjectId!): Security!
  securitiesSearch(searchTerm: String!): [Security!]!
  usersFindById(_id: ID!): User!
}

type Quote {
  avgTotalVolume: Float
  calculationPrice: String
  change: Float
  changePercent: Float
  close: Float
  closeSource: String
  closeTime: Float
  companyName: String!
  currency: String
  delayedPrice: Float
  delayedPriceTime: Float
  extendedChange: Float
  extendedChangePercent: Float
  extendedPrice: Float
  extendedPriceTime: Float
  high: Float
  highSource: String
  highTime: Float
  iexAskPrice: Float
  iexAskSize: Float
  iexBidPrice: Float
  iexBidSize: Float
  iexClose: Float
  iexCloseTime: Float
  iexLastUpdated: Float
  iexMarketPercent: Float
  iexOpen: Float
  iexOpenTime: Float
  iexRealtimePrice: Float
  iexRealtimeSize: Float
  iexVolume: Float
  isUSMarketOpen: Boolean
  lastTradeTime: Float
  latestPrice: Float
  latestSource: String
  latestTime: String
  latestUpdate: Float
  latestVolume: Float
  low: Float
  lowSource: String
  lowTime: Float
  marketCap: Float
  oddLotDelayedPrice: Float
  oddLotDelayedPriceTime: Float
  open: Float
  openSource: String
  openTime: Float
  peRatio: Float
  previousClose: Float
  previousVolume: Float
  primaryExchange: String
  symbol: String
  volume: Float
  week52High: Float
  week52Low: Float
  ytdChange: Float
}

type RecordId {
  _id: String!
}

type RemoveMultipleResponse {
  acknowledged: Boolean!
  deletedCount: Float!
}

type Security {
  _id: ObjectId!
  cik: String
  close_price: Float
  createdAt: DateTime
  currency: String
  exchange: String
  exchangeName: String
  figi: String
  iexId: String
  name: String
  quote: Quote
  region: String
  symbol: String
  type: SecurityType!
  updatedAt: DateTime
}

enum SecurityType {
  cash
  cryptocurrency
  derivative
  equity
  etf
  fixed_income
  loan
  mutual_fund
  other
}

type Transaction {
  amount: Float!
  createdBy: User
  currency: String!
  date: DateTime!
  fees: Float!
  importedSecurity: ImportedSecurity!
  name: String!

  """This is the account_id from plaid"""
  plaidAccountId: String!

  """This is the transaction_id from plaid"""
  plaidTransactionId: String!
  price: Float!
  quantity: Float!
  security: Security
  securityType: SecurityType!
  subType: TransactionSubtype!
  type: TransactionType!
}

type TransactionFromDb {
  amount: Float!
  createdBy: User
  currency: String!
  date: DateTime!
  fees: Float!
  importedSecurity: ImportedSecurity!
  name: String!

  """This is the account_id from plaid"""
  plaidAccountId: String!

  """This is the transaction_id from plaid"""
  plaidTransactionId: String!
  price: Float!
  quantity: Float!
  security: Security
  securityType: SecurityType!
  subType: TransactionSubtype!
  type: TransactionType!
}

enum TransactionSubtype {
  AccountFee
  Adjustment
  Assignment
  Buy
  BuyToCover
  Contribution
  Deposit
  Distribution
  Dividend
  DividendReinvestment
  Exercise
  Expire
  FundFee
  Interest
  InterestReceivable
  InterestReinvestment
  LegalFee
  LoanPayment
  LongTermCapitalGain
  LongTermCapitalGainReinvestment
  ManagementFee
  MarginExpense
  Merger
  MiscellaneousFee
  NonQualifiedDividend
  NonResidentTax
  PendingCredit
  PendingDebit
  QualifiedDividend
  Rebalance
  Request
  ReturnOfPrincipal
  Sell
  SellShort
  Send
  ShortTermCapitalGain
  ShortTermCapitalGainReinvestment
  SpinOff
  Split
  StockDistribution
  Tax
  TaxWithheld
  Transfer
  TransferFee
  TrustFee
  UnqualifiedGain
  Withdrawal
}

enum TransactionType {
  Buy
  Cancel
  Cash
  Fee
  Sell
  Transfer
}

input UpdatePortfolioInput {
  cash: Float
  description: String
  name: String
  private: Boolean
}

input UpdateUserInput {
  _id: String
  displayName: String
  emails: [String!]
  id: Int!
  photos: [String!]
}

type User {
  _id: String!
  createdAt: DateTime
  displayName: String!
  emails: [String!]
  photos: [String!]!
  updatedAt: DateTime
}