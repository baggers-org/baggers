# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AddHoldingInput {
  averagePrice: Float!
  brokerFees: Float = 0
  currency: String = "USD"
  direction: HoldingDirection!
  quantity: Float!
  security: ObjectId!
  type: HoldingType = shares
}

input CreateUserInput {
  _id: String!
  displayName: String!
  emails: [String!]!
  photos: [String!]!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Holding {
  averagePrice: Float!
  brokerFees: Float
  costBasis: Float!
  currency: String
  dailyProfitLossUsd: Float!
  direction: HoldingDirection
  exposure: Float!
  marketValue: Float!
  profitLossPercent: Float!
  profitLossUsd: Float!
  quantity: Float!
  security: Security!
  source: HoldingSource!
  type: HoldingType
}

enum HoldingDirection {
  long
  short
}

enum HoldingSource {
  broker
  direct
  transactions
}

enum HoldingType {
  calls
  puts
  shares
}

type HoldingWithoutMarketData {
  averagePrice: Float!
  brokerFees: Float
  costBasis: Float!
  currency: String
  direction: HoldingDirection
  quantity: Float!
  security: Security!
  source: HoldingSource!
  type: HoldingType
}

type ImportResponse {
  importedIds: [ObjectId!]!
}

type ImportedSecurity {
  close_price: Float!
  close_price_as_of: String!
  cusip: String!
  institution_id: String!
  institution_security_id: String!
  is_cash_equivalent: Boolean!
  isin: String!
  iso_currency_code: String!
  name: String!
  proxy_security_id: String!
  security_id: String!
  sedol: String!
  ticker_symbol: String!
  type: String!
  unofficial_currency_code: String!
  update_datetime: String
}

type Institution {
  _id: String!
  logo: String
  name: String!
  url: String
}

type Mutation {
  portfoliosAddHolding(_id: ObjectId!, input: AddHoldingInput!): PortfolioWithoutMarketData!
  portfoliosBeginImport(publicToken: String!): ImportResponse!
  portfoliosInitEmpty: RecordId!
  portfoliosRemoveMultiple(_ids: [ObjectId!]!): RemoveMultipleResponse!
  portfoliosRemoveOne(_id: ObjectId!): RecordId!
  portfoliosUpdateOne(_id: ObjectId!, input: UpdatePortfolioInput!): PortfolioWithoutMarketData!
  usersFindOrCreate(input: CreateUserInput!): User!
  usersRemoveOne(_id: ID!): User!
  usersUpdateOne(input: UpdateUserInput!): User!
}

"""Mongo object id scalar type"""
scalar ObjectId

type PlaidItem {
  _id: String!
  accessToken: String
  createdAt: DateTime
  error: PlaidItemError
  institution: Institution!
  lastWebhookTime: DateTime!
  owner: User!
  updatedAt: DateTime
}

type PlaidItemError {
  displayMessage: String!
  documentationUrl: String!
  errorCode: Float!
  errorMessage: String!
  errorType: String!
  suggestedAction: String!
}

type PopulatedHolding {
  averagePrice: Float!
  brokerFees: Float
  costBasis: Float!
  currency: String
  direction: HoldingDirection
  quantity: Float!
  security: Security!
  source: HoldingSource!
  type: HoldingType
}

type Portfolio {
  _id: ObjectId!
  cash: Float!
  createdAt: DateTime
  description: String
  holdings: [Holding!]!
  name: String!
  owner: User!
  plaidAccountId: String
  plaidItem: PlaidItem
  private: Boolean!
  totalValue: Float!
  transactions: [Transaction!]!
  updatedAt: DateTime
}

type PortfolioSummary {
  _id: ObjectId!
  cash: Float!
  createdAt: DateTime
  description: String
  name: String!
  owner: User!
  plaidAccountId: String
  plaidItem: PlaidItem
  private: Boolean!
  top5Holdings: [Holding!]!
  totalValue: Float!
  updatedAt: DateTime
}

type PortfolioWithoutMarketData {
  _id: ObjectId!
  cash: Float!
  createdAt: DateTime
  description: String
  holdings: [HoldingWithoutMarketData!]!
  name: String!
  owner: User!
  plaidAccountId: String
  plaidItem: PlaidItem
  private: Boolean!
  transactions: [Transaction!]!
  updatedAt: DateTime
}

type Query {
  plaidLinkToken: String!
  portfoliosCreated: [PortfolioSummary!]!
  portfoliosFindById(_id: ObjectId!): Portfolio!
  securitiesFindById(_id: ObjectId!): Security!
  securitiesSearch(searchTerm: String!): [Security!]!
  usersFindById(_id: ID!): User!
}

type Quote {
  avgTotalVolume: Float
  calculationPrice: String
  change: Float
  changePercent: Float
  close: Float
  closeSource: String
  closeTime: Float
  companyName: String!
  currency: String
  delayedPrice: Float
  delayedPriceTime: Float
  extendedChange: Float
  extendedChangePercent: Float
  extendedPrice: Float
  extendedPriceTime: Float
  high: Float
  highSource: String
  highTime: Float
  iexAskPrice: Float
  iexAskSize: Float
  iexBidPrice: Float
  iexBidSize: Float
  iexClose: Float
  iexCloseTime: Float
  iexLastUpdated: Float
  iexMarketPercent: Float
  iexOpen: Float
  iexOpenTime: Float
  iexRealtimePrice: Float
  iexRealtimeSize: Float
  iexVolume: Float
  isUSMarketOpen: Boolean
  lastTradeTime: Float
  latestPrice: Float
  latestSource: String
  latestTime: String
  latestUpdate: Float
  latestVolume: Float
  low: Float
  lowSource: String
  lowTime: Float
  marketCap: Float
  oddLotDelayedPrice: Float
  oddLotDelayedPriceTime: Float
  open: Float
  openSource: String
  openTime: Float
  peRatio: Float
  previousClose: Float
  previousVolume: Float
  primaryExchange: String
  symbol: String
  volume: Float
  week52High: Float
  week52Low: Float
  ytdChange: Float
}

type RecordId {
  _id: String!
}

type RemoveMultipleResponse {
  acknowledged: Boolean!
  deletedCount: Float!
}

type Security {
  _id: ObjectId!
  cik: String
  createdAt: DateTime
  currency: String!
  exchange: String!
  exchangeName: String!
  figi: String
  iexId: String
  name: String!
  quote: Quote
  region: String!
  symbol: String!
  symbolType: String!
  updatedAt: DateTime
}

type Transaction {
  amount: Float!
  baggersSecurity: Security
  createdBy: User
  currency: String!
  date: DateTime!
  fees: Float!
  importedSecurity: ImportedSecurity!
  name: String!

  """This is the account_id from plaid"""
  plaidAccountId: String!

  """This is the transaction_id from plaid"""
  plaidTransactionId: String!
  price: Float!
  quantity: Float!
  subType: TransactionSubtype!
  type: TransactionType!
}

enum TransactionSubtype {
  AccountFee
  Adjustment
  Assignment
  Buy
  BuyToCover
  Contribution
  Deposit
  Distribution
  Dividend
  DividendReinvestment
  Exercise
  Expire
  FundFee
  Interest
  InterestReceivable
  InterestReinvestment
  LegalFee
  LoanPayment
  LongTermCapitalGain
  LongTermCapitalGainReinvestment
  ManagementFee
  MarginExpense
  Merger
  MiscellaneousFee
  NonQualifiedDividend
  NonResidentTax
  PendingCredit
  PendingDebit
  QualifiedDividend
  Rebalance
  Request
  ReturnOfPrincipal
  Sell
  SellShort
  Send
  ShortTermCapitalGain
  ShortTermCapitalGainReinvestment
  SpinOff
  Split
  StockDistribution
  Tax
  TaxWithheld
  Transfer
  TransferFee
  TrustFee
  UnqualifiedGain
  Withdrawal
}

enum TransactionType {
  Buy
  Cancel
  Cash
  Fee
  Sell
  Transfer
}

input UpdatePortfolioInput {
  cash: Float
  description: String
  name: String
  private: Boolean
}

input UpdateUserInput {
  _id: String
  displayName: String
  emails: [String!]
  id: Int!
  photos: [String!]
}

type User {
  _id: String!
  createdAt: DateTime
  displayName: String!
  emails: [String!]
  photos: [String!]!
  updatedAt: DateTime
}