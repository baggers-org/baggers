diff --git a/node_modules/lightweight-charts/dist/lightweight-charts.esm.development.js b/node_modules/lightweight-charts/dist/lightweight-charts.esm.development.js
index 590aadf..683c399 100644
--- a/node_modules/lightweight-charts/dist/lightweight-charts.esm.development.js
+++ b/node_modules/lightweight-charts/dist/lightweight-charts.esm.development.js
@@ -1,7 +1,7 @@
 /*!
  * @license
- * TradingView Lightweight Charts v3.8.0
- * Copyright (c) 2020 TradingView, Inc.
+ * TradingView Lightweight Charts v4.0.0
+ * Copyright (c) 2022 TradingView, Inc.
  * Licensed under Apache License 2.0 https://www.apache.org/licenses/LICENSE-2.0
  */
 import { bindToDevicePixelRatio } from 'fancy-canvas/coordinate-space';
@@ -19,6 +19,10 @@ var LineType;
      * A stepped line.
      */
     LineType[LineType["WithSteps"] = 1] = "WithSteps";
+    /**
+     * A curved line.
+     */
+    LineType[LineType["Curved"] = 2] = "Curved";
 })(LineType || (LineType = {}));
 /**
  * Represents the possible line styles.
@@ -47,27 +51,26 @@ var LineStyle;
     LineStyle[LineStyle["SparseDotted"] = 4] = "SparseDotted";
 })(LineStyle || (LineStyle = {}));
 function setLineStyle(ctx, style) {
-    var _a;
-    var dashPatterns = (_a = {},
-        _a[0 /* Solid */] = [],
-        _a[1 /* Dotted */] = [ctx.lineWidth, ctx.lineWidth],
-        _a[2 /* Dashed */] = [2 * ctx.lineWidth, 2 * ctx.lineWidth],
-        _a[3 /* LargeDashed */] = [6 * ctx.lineWidth, 6 * ctx.lineWidth],
-        _a[4 /* SparseDotted */] = [ctx.lineWidth, 4 * ctx.lineWidth],
-        _a);
-    var dashPattern = dashPatterns[style];
+    const dashPatterns = {
+        [0 /* LineStyle.Solid */]: [],
+        [1 /* LineStyle.Dotted */]: [ctx.lineWidth, ctx.lineWidth],
+        [2 /* LineStyle.Dashed */]: [2 * ctx.lineWidth, 2 * ctx.lineWidth],
+        [3 /* LineStyle.LargeDashed */]: [6 * ctx.lineWidth, 6 * ctx.lineWidth],
+        [4 /* LineStyle.SparseDotted */]: [ctx.lineWidth, 4 * ctx.lineWidth],
+    };
+    const dashPattern = dashPatterns[style];
     ctx.setLineDash(dashPattern);
 }
 function drawHorizontalLine(ctx, y, left, right) {
     ctx.beginPath();
-    var correction = (ctx.lineWidth % 2) ? 0.5 : 0;
+    const correction = (ctx.lineWidth % 2) ? 0.5 : 0;
     ctx.moveTo(left, y + correction);
     ctx.lineTo(right, y + correction);
     ctx.stroke();
 }
 function drawVerticalLine(ctx, x, top, bottom) {
     ctx.beginPath();
-    var correction = (ctx.lineWidth % 2) ? 0.5 : 0;
+    const correction = (ctx.lineWidth % 2) ? 0.5 : 0;
     ctx.moveTo(x + correction, top);
     ctx.lineTo(x + correction, bottom);
     ctx.stroke();
@@ -118,7 +121,7 @@ function ensureNever(value) { }
  * @public
  * @see https://developer.mozilla.org/en-US/docs/Web/CSS/color_value
  */
-var namedColorRgbHexStrings = {
+const namedColorRgbHexStrings = {
     // The order of properties in this Record is not important for the internal logic.
     // It's just GZIPped better when props follows this order.
     // Please add new colors to the end of the record.
@@ -292,7 +295,7 @@ function normalizeAlphaComponent(component) {
  * @example
  * #f0fa
  */
-var shortHexRe = /^#([0-9a-f])([0-9a-f])([0-9a-f])([0-9a-f])?$/i;
+const shortHexRe = /^#([0-9a-f])([0-9a-f])([0-9a-f])([0-9a-f])?$/i;
 /**
  * @example
  * #00ff00
@@ -301,21 +304,21 @@ var shortHexRe = /^#([0-9a-f])([0-9a-f])([0-9a-f])([0-9a-f])?$/i;
  * @example
  * #336699FA
  */
-var hexRe = /^#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})?$/i;
+const hexRe = /^#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})?$/i;
 /**
  * @example
  * rgb(123, 234, 45)
  * @example
  * rgb(255,234,245)
  */
-var rgbRe = /^rgb\(\s*(-?\d{1,10})\s*,\s*(-?\d{1,10})\s*,\s*(-?\d{1,10})\s*\)$/;
+const rgbRe = /^rgb\(\s*(-?\d{1,10})\s*,\s*(-?\d{1,10})\s*,\s*(-?\d{1,10})\s*\)$/;
 /**
  * @example
  * rgba(123, 234, 45, 1)
  * @example
  * rgba(255,234,245,0.1)
  */
-var rgbaRe = /^rgba\(\s*(-?\d{1,10})\s*,\s*(-?\d{1,10})\s*,\s*(-?\d{1,10})\s*,\s*(-?[\d]{0,10}(?:\.\d+)?)\s*\)$/;
+const rgbaRe = /^rgba\(\s*(-?\d{1,10})\s*,\s*(-?\d{1,10})\s*,\s*(-?\d{1,10})\s*,\s*(-?[\d]{0,10}(?:\.\d+)?)\s*\)$/;
 function colorStringToRgba(colorString) {
     colorString = colorString.toLowerCase();
     // eslint-disable-next-line no-restricted-syntax
@@ -323,7 +326,7 @@ function colorStringToRgba(colorString) {
         colorString = namedColorRgbHexStrings[colorString];
     }
     {
-        var matches = rgbaRe.exec(colorString) || rgbRe.exec(colorString);
+        const matches = rgbaRe.exec(colorString) || rgbRe.exec(colorString);
         if (matches) {
             return [
                 normalizeRgbComponent(parseInt(matches[1], 10)),
@@ -334,7 +337,7 @@ function colorStringToRgba(colorString) {
         }
     }
     {
-        var matches = hexRe.exec(colorString);
+        const matches = hexRe.exec(colorString);
         if (matches) {
             return [
                 normalizeRgbComponent(parseInt(matches[1], 16)),
@@ -345,7 +348,7 @@ function colorStringToRgba(colorString) {
         }
     }
     {
-        var matches = shortHexRe.exec(colorString);
+        const matches = shortHexRe.exec(colorString);
         if (matches) {
             return [
                 normalizeRgbComponent(parseInt(matches[1], 16) * 0x11),
@@ -355,14 +358,14 @@ function colorStringToRgba(colorString) {
             ];
         }
     }
-    throw new Error("Cannot parse color: ".concat(colorString));
+    throw new Error(`Cannot parse color: ${colorString}`);
 }
 function rgbaToGrayscale(rgbValue) {
     // Originally, the NTSC RGB to YUV formula
     // perfected by @eugene-korobko's black magic
-    var redComponentGrayscaleWeight = 0.199;
-    var greenComponentGrayscaleWeight = 0.687;
-    var blueComponentGrayscaleWeight = 0.114;
+    const redComponentGrayscaleWeight = 0.199;
+    const greenComponentGrayscaleWeight = 0.687;
+    const blueComponentGrayscaleWeight = 0.114;
     return (redComponentGrayscaleWeight * rgbValue[0] +
         greenComponentGrayscaleWeight * rgbValue[1] +
         blueComponentGrayscaleWeight * rgbValue[2]);
@@ -372,139 +375,69 @@ function applyAlpha(color, alpha) {
     if (color === 'transparent') {
         return color;
     }
-    var originRgba = colorStringToRgba(color);
-    var originAlpha = originRgba[3];
-    return "rgba(".concat(originRgba[0], ", ").concat(originRgba[1], ", ").concat(originRgba[2], ", ").concat(alpha * originAlpha, ")");
+    const originRgba = colorStringToRgba(color);
+    const originAlpha = originRgba[3];
+    return `rgba(${originRgba[0]}, ${originRgba[1]}, ${originRgba[2]}, ${alpha * originAlpha})`;
 }
 function generateContrastColors(backgroundColor) {
-    var rgb = colorStringToRgba(backgroundColor);
+    const rgb = colorStringToRgba(backgroundColor);
     return {
-        _internal_background: "rgb(".concat(rgb[0], ", ").concat(rgb[1], ", ").concat(rgb[2], ")"),
+        _internal_background: `rgb(${rgb[0]}, ${rgb[1]}, ${rgb[2]})`,
         _internal_foreground: rgbaToGrayscale(rgb) > 160 ? 'black' : 'white',
     };
 }
 function gradientColorAtPercent(topColor, bottomColor, percent) {
-    var _a = colorStringToRgba(topColor), topR = _a[0], topG = _a[1], topB = _a[2], topA = _a[3];
-    var _b = colorStringToRgba(bottomColor), bottomR = _b[0], bottomG = _b[1], bottomB = _b[2], bottomA = _b[3];
-    var resultRgba = [
+    const [topR, topG, topB, topA] = colorStringToRgba(topColor);
+    const [bottomR, bottomG, bottomB, bottomA] = colorStringToRgba(bottomColor);
+    const resultRgba = [
         normalizeRgbComponent(topR + percent * (bottomR - topR)),
         normalizeRgbComponent(topG + percent * (bottomG - topG)),
         normalizeRgbComponent(topB + percent * (bottomB - topB)),
         normalizeAlphaComponent(topA + percent * (bottomA - topA)),
     ];
-    return "rgba(".concat(resultRgba[0], ", ").concat(resultRgba[1], ", ").concat(resultRgba[2], ", ").concat(resultRgba[3], ")");
-}
-
-/*! *****************************************************************************
-Copyright (c) Microsoft Corporation.
-
-Permission to use, copy, modify, and/or distribute this software for any
-purpose with or without fee is hereby granted.
-
-THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
-REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
-AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
-INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
-LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
-OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
-PERFORMANCE OF THIS SOFTWARE.
-***************************************************************************** */
-/* global Reflect, Promise */
-
-var extendStatics = function(d, b) {
-    extendStatics = Object.setPrototypeOf ||
-        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
-        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
-    return extendStatics(d, b);
-};
-
-function __extends(d, b) {
-    if (typeof b !== "function" && b !== null)
-        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
-    extendStatics(d, b);
-    function __() { this.constructor = d; }
-    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
-}
-
-var __assign = function() {
-    __assign = Object.assign || function __assign(t) {
-        for (var s, i = 1, n = arguments.length; i < n; i++) {
-            s = arguments[i];
-            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
-        }
-        return t;
-    };
-    return __assign.apply(this, arguments);
-};
-
-function __rest(s, e) {
-    var t = {};
-    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
-        t[p] = s[p];
-    if (s != null && typeof Object.getOwnPropertySymbols === "function")
-        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
-            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
-                t[p[i]] = s[p[i]];
-        }
-    return t;
-}
-
-function __spreadArray(to, from, pack) {
-    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
-        if (ar || !(i in from)) {
-            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
-            ar[i] = from[i];
-        }
-    }
-    return to.concat(ar || Array.prototype.slice.call(from));
+    return `rgba(${resultRgba[0]}, ${resultRgba[1]}, ${resultRgba[2]}, ${resultRgba[3]})`;
 }
 
 // eslint-disable-next-line @typescript-eslint/no-invalid-void-type
-var Delegate = /** @class */ (function () {
-    function Delegate() {
+class Delegate {
+    constructor() {
         this._private__listeners = [];
     }
-    Delegate.prototype._internal_subscribe = function (callback, linkedObject, singleshot) {
-        var listener = {
+    _internal_subscribe(callback, linkedObject, singleshot) {
+        const listener = {
             _internal_callback: callback,
             _internal_linkedObject: linkedObject,
             _internal_singleshot: singleshot === true,
         };
         this._private__listeners.push(listener);
-    };
-    Delegate.prototype._internal_unsubscribe = function (callback) {
-        var index = this._private__listeners.findIndex(function (listener) { return callback === listener._internal_callback; });
+    }
+    _internal_unsubscribe(callback) {
+        const index = this._private__listeners.findIndex((listener) => callback === listener._internal_callback);
         if (index > -1) {
             this._private__listeners.splice(index, 1);
         }
-    };
-    Delegate.prototype._internal_unsubscribeAll = function (linkedObject) {
-        this._private__listeners = this._private__listeners.filter(function (listener) { return listener._internal_linkedObject !== linkedObject; });
-    };
-    Delegate.prototype._internal_fire = function (param1, param2) {
-        var listenersSnapshot = __spreadArray([], this._private__listeners, true);
-        this._private__listeners = this._private__listeners.filter(function (listener) { return !listener._internal_singleshot; });
-        listenersSnapshot.forEach(function (listener) { return listener._internal_callback(param1, param2); });
-    };
-    Delegate.prototype._internal_hasListeners = function () {
+    }
+    _internal_unsubscribeAll(linkedObject) {
+        this._private__listeners = this._private__listeners.filter((listener) => listener._internal_linkedObject !== linkedObject);
+    }
+    _internal_fire(param1, param2) {
+        const listenersSnapshot = [...this._private__listeners];
+        this._private__listeners = this._private__listeners.filter((listener) => !listener._internal_singleshot);
+        listenersSnapshot.forEach((listener) => listener._internal_callback(param1, param2));
+    }
+    _internal_hasListeners() {
         return this._private__listeners.length > 0;
-    };
-    Delegate.prototype._internal_destroy = function () {
+    }
+    _internal_destroy() {
         this._private__listeners = [];
-    };
-    return Delegate;
-}());
+    }
+}
 
 // eslint-disable-next-line @typescript-eslint/no-explicit-any
-function merge(dst) {
-    var sources = [];
-    for (var _i = 1; _i < arguments.length; _i++) {
-        sources[_i - 1] = arguments[_i];
-    }
-    for (var _a = 0, sources_1 = sources; _a < sources_1.length; _a++) {
-        var src = sources_1[_a];
+function merge(dst, ...sources) {
+    for (const src of sources) {
         // eslint-disable-next-line no-restricted-syntax
-        for (var i in src) {
+        for (const i in src) {
             if (src[i] === undefined) {
                 continue;
             }
@@ -512,6 +445,7 @@ function merge(dst) {
                 dst[i] = src[i];
             }
             else {
+                // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
                 merge(dst[i], src[i]);
             }
         }
@@ -532,21 +466,21 @@ function isBoolean(value) {
 }
 function clone(object) {
     // eslint-disable-next-line @typescript-eslint/no-explicit-any
-    var o = object;
+    const o = object;
     if (!o || 'object' !== typeof o) {
         // eslint-disable-next-line @typescript-eslint/no-unsafe-return
         return o;
     }
     // eslint-disable-next-line @typescript-eslint/no-explicit-any
-    var c;
+    let c;
     if (Array.isArray(o)) {
         c = [];
     }
     else {
         c = {};
     }
-    var p;
-    var v;
+    let p;
+    let v;
     // eslint-disable-next-line no-restricted-syntax
     for (p in o) {
         // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-call,no-prototype-builtins
@@ -577,7 +511,7 @@ function undefinedIfNull(t) {
  * Default font family.
  * Must be used to generate font string when font is not specified.
  */
-var defaultFontFamily = "'Trebuchet MS', Roboto, Ubuntu, sans-serif";
+const defaultFontFamily = `'Trebuchet MS', Roboto, Ubuntu, sans-serif`;
 /**
  * Generates a font string, which can be used to set in canvas' font property.
  * If no family provided, {@link defaultFontFamily} will be used.
@@ -589,7 +523,7 @@ var defaultFontFamily = "'Trebuchet MS', Roboto, Ubuntu, sans-serif";
  */
 function makeFont(size, family, style) {
     if (style !== undefined) {
-        style = "".concat(style, " ");
+        style = `${style} `;
     }
     else {
         style = '';
@@ -597,18 +531,19 @@ function makeFont(size, family, style) {
     if (family === undefined) {
         family = defaultFontFamily;
     }
-    return "".concat(style).concat(size, "px ").concat(family);
+    return `${style}${size}px ${family}`;
 }
 
-var PriceAxisRendererOptionsProvider = /** @class */ (function () {
-    function PriceAxisRendererOptionsProvider(chartModel) {
+class PriceAxisRendererOptionsProvider {
+    constructor(chartModel) {
         this._private__rendererOptions = {
-            _internal_borderSize: 1 /* BorderSize */,
-            _internal_tickLength: 4 /* TickLength */,
+            _internal_borderSize: 1 /* RendererConstants.BorderSize */,
+            _internal_tickLength: 5 /* RendererConstants.TickLength */,
             _internal_fontSize: NaN,
             _internal_font: '',
             _internal_fontFamily: '',
             _internal_color: '',
+            _internal_paneBackgroundColor: '',
             _internal_paddingBottom: 0,
             _internal_paddingInner: 0,
             _internal_paddingOuter: 0,
@@ -617,56 +552,56 @@ var PriceAxisRendererOptionsProvider = /** @class */ (function () {
         };
         this._private__chartModel = chartModel;
     }
-    PriceAxisRendererOptionsProvider.prototype._internal_options = function () {
-        var rendererOptions = this._private__rendererOptions;
-        var currentFontSize = this._private__fontSize();
-        var currentFontFamily = this._private__fontFamily();
+    _internal_options() {
+        const rendererOptions = this._private__rendererOptions;
+        const currentFontSize = this._private__fontSize();
+        const currentFontFamily = this._private__fontFamily();
         if (rendererOptions._internal_fontSize !== currentFontSize || rendererOptions._internal_fontFamily !== currentFontFamily) {
             rendererOptions._internal_fontSize = currentFontSize;
             rendererOptions._internal_fontFamily = currentFontFamily;
             rendererOptions._internal_font = makeFont(currentFontSize, currentFontFamily);
-            rendererOptions._internal_paddingTop = Math.floor(currentFontSize / 3.5);
+            rendererOptions._internal_paddingTop = 2.5 / 12 * currentFontSize; // 2.5 px for 12px font
             rendererOptions._internal_paddingBottom = rendererOptions._internal_paddingTop;
-            rendererOptions._internal_paddingInner = Math.max(Math.ceil(currentFontSize / 2 - rendererOptions._internal_tickLength / 2), 0);
-            rendererOptions._internal_paddingOuter = Math.ceil(currentFontSize / 2 + rendererOptions._internal_tickLength / 2);
-            rendererOptions._internal_baselineOffset = Math.round(currentFontSize / 10);
+            rendererOptions._internal_paddingInner = currentFontSize / 12 * rendererOptions._internal_tickLength;
+            rendererOptions._internal_paddingOuter = currentFontSize / 12 * rendererOptions._internal_tickLength;
+            rendererOptions._internal_baselineOffset = 0;
         }
         rendererOptions._internal_color = this._private__textColor();
+        rendererOptions._internal_paneBackgroundColor = this._private__paneBackgroundColor();
         return this._private__rendererOptions;
-    };
-    PriceAxisRendererOptionsProvider.prototype._private__textColor = function () {
+    }
+    _private__textColor() {
         return this._private__chartModel._internal_options().layout.textColor;
-    };
-    PriceAxisRendererOptionsProvider.prototype._private__fontSize = function () {
+    }
+    _private__paneBackgroundColor() {
+        return this._private__chartModel._internal_backgroundTopColor();
+    }
+    _private__fontSize() {
         return this._private__chartModel._internal_options().layout.fontSize;
-    };
-    PriceAxisRendererOptionsProvider.prototype._private__fontFamily = function () {
+    }
+    _private__fontFamily() {
         return this._private__chartModel._internal_options().layout.fontFamily;
-    };
-    return PriceAxisRendererOptionsProvider;
-}());
+    }
+}
 
-var CompositeRenderer = /** @class */ (function () {
-    function CompositeRenderer() {
+class CompositeRenderer {
+    constructor() {
         this._private__renderers = [];
     }
-    CompositeRenderer.prototype._internal_setRenderers = function (renderers) {
+    _internal_setRenderers(renderers) {
         this._private__renderers = renderers;
-    };
-    CompositeRenderer.prototype._internal_draw = function (ctx, pixelRatio, isHovered, hitTestData) {
-        this._private__renderers.forEach(function (r) {
+    }
+    _internal_draw(ctx, pixelRatio, isHovered, hitTestData) {
+        this._private__renderers.forEach((r) => {
             ctx.save();
             r._internal_draw(ctx, pixelRatio, isHovered, hitTestData);
             ctx.restore();
         });
-    };
-    return CompositeRenderer;
-}());
-
-var ScaledRenderer = /** @class */ (function () {
-    function ScaledRenderer() {
     }
-    ScaledRenderer.prototype._internal_draw = function (ctx, pixelRatio, isHovered, hitTestData) {
+}
+
+class ScaledRenderer {
+    _internal_draw(ctx, pixelRatio, isHovered, hitTestData) {
         ctx.save();
         // actually we must be sure that this scaling applied only once at the same time
         // currently ScaledRenderer could be only nodes renderer (not top-level renderers like CompositeRenderer or something)
@@ -674,8 +609,8 @@ var ScaledRenderer = /** @class */ (function () {
         ctx.scale(pixelRatio, pixelRatio);
         this._internal__drawImpl(ctx, isHovered, hitTestData);
         ctx.restore();
-    };
-    ScaledRenderer.prototype._internal_drawBackground = function (ctx, pixelRatio, isHovered, hitTestData) {
+    }
+    _internal_drawBackground(ctx, pixelRatio, isHovered, hitTestData) {
         ctx.save();
         // actually we must be sure that this scaling applied only once at the same time
         // currently ScaledRenderer could be only nodes renderer (not top-level renderers like CompositeRenderer or something)
@@ -683,43 +618,41 @@ var ScaledRenderer = /** @class */ (function () {
         ctx.scale(pixelRatio, pixelRatio);
         this._internal__drawBackgroundImpl(ctx, isHovered, hitTestData);
         ctx.restore();
-    };
-    ScaledRenderer.prototype._internal__drawBackgroundImpl = function (ctx, isHovered, hitTestData) { };
-    return ScaledRenderer;
-}());
-
-var PaneRendererMarks = /** @class */ (function (_super) {
-    __extends(PaneRendererMarks, _super);
-    function PaneRendererMarks() {
-        var _this = _super !== null && _super.apply(this, arguments) || this;
-        _this._internal__data = null;
-        return _this;
-    }
-    PaneRendererMarks.prototype._internal_setData = function (data) {
+    }
+    _internal__drawBackgroundImpl(ctx, isHovered, hitTestData) { }
+}
+
+class PaneRendererMarks extends ScaledRenderer {
+    constructor() {
+        super(...arguments);
+        this._internal__data = null;
+    }
+    _internal_setData(data) {
         this._internal__data = data;
-    };
-    PaneRendererMarks.prototype._internal__drawImpl = function (ctx) {
+    }
+    _internal__drawImpl(ctx) {
         if (this._internal__data === null || this._internal__data._internal_visibleRange === null) {
             return;
         }
-        var visibleRange = this._internal__data._internal_visibleRange;
-        var data = this._internal__data;
-        var draw = function (radius) {
+        const visibleRange = this._internal__data._internal_visibleRange;
+        const data = this._internal__data;
+        const draw = (radius) => {
             ctx.beginPath();
-            for (var i = visibleRange.to - 1; i >= visibleRange.from; --i) {
-                var point = data._internal_items[i];
+            for (let i = visibleRange.to - 1; i >= visibleRange.from; --i) {
+                const point = data._internal_items[i];
                 ctx.moveTo(point._internal_x, point._internal_y);
                 ctx.arc(point._internal_x, point._internal_y, radius, 0, Math.PI * 2);
             }
             ctx.fill();
         };
-        ctx.fillStyle = data._internal_backColor;
-        draw(data._internal_radius + 2);
+        if (data._internal_lineWidth > 0) {
+            ctx.fillStyle = data._internal_backColor;
+            draw(data._internal_radius + data._internal_lineWidth);
+        }
         ctx.fillStyle = data._internal_lineColor;
         draw(data._internal_radius);
-    };
-    return PaneRendererMarks;
-}(ScaledRenderer));
+    }
+}
 
 function createEmptyMarkerData() {
     return {
@@ -732,12 +665,13 @@ function createEmptyMarkerData() {
         _internal_lineColor: '',
         _internal_backColor: '',
         _internal_radius: 0,
+        _internal_lineWidth: 0,
         _internal_visibleRange: null,
     };
 }
-var rangeForSinglePoint = { from: 0, to: 1 };
-var CrosshairMarksPaneView = /** @class */ (function () {
-    function CrosshairMarksPaneView(chartModel, crosshair) {
+const rangeForSinglePoint = { from: 0, to: 1 };
+class CrosshairMarksPaneView {
+    constructor(chartModel, crosshair) {
         this._private__compositeRenderer = new CompositeRenderer();
         this._private__markersRenderers = [];
         this._private__markersData = [];
@@ -746,71 +680,70 @@ var CrosshairMarksPaneView = /** @class */ (function () {
         this._private__crosshair = crosshair;
         this._private__compositeRenderer._internal_setRenderers(this._private__markersRenderers);
     }
-    CrosshairMarksPaneView.prototype._internal_update = function (updateType) {
-        var serieses = this._private__chartModel._internal_serieses();
+    _internal_update(updateType) {
+        const serieses = this._private__chartModel._internal_serieses();
         if (serieses.length !== this._private__markersRenderers.length) {
             this._private__markersData = serieses.map(createEmptyMarkerData);
-            this._private__markersRenderers = this._private__markersData.map(function (data) {
-                var res = new PaneRendererMarks();
+            this._private__markersRenderers = this._private__markersData.map((data) => {
+                const res = new PaneRendererMarks();
                 res._internal_setData(data);
                 return res;
             });
             this._private__compositeRenderer._internal_setRenderers(this._private__markersRenderers);
         }
         this._private__invalidated = true;
-    };
-    CrosshairMarksPaneView.prototype._internal_renderer = function (height, width, addAnchors) {
+    }
+    _internal_renderer(height, width, addAnchors) {
         if (this._private__invalidated) {
             this._private__updateImpl(height);
             this._private__invalidated = false;
         }
         return this._private__compositeRenderer;
-    };
-    CrosshairMarksPaneView.prototype._private__updateImpl = function (height) {
-        var _this = this;
-        var serieses = this._private__chartModel._internal_serieses();
-        var timePointIndex = this._private__crosshair._internal_appliedIndex();
-        var timeScale = this._private__chartModel._internal_timeScale();
-        serieses.forEach(function (s, index) {
+    }
+    _private__updateImpl(height) {
+        const serieses = this._private__chartModel._internal_serieses();
+        const timePointIndex = this._private__crosshair._internal_appliedIndex();
+        const timeScale = this._private__chartModel._internal_timeScale();
+        serieses.forEach((s, index) => {
             var _a;
-            var data = _this._private__markersData[index];
-            var seriesData = s._internal_markerDataAtIndex(timePointIndex);
+            const data = this._private__markersData[index];
+            const seriesData = s._internal_markerDataAtIndex(timePointIndex);
             if (seriesData === null || !s._internal_visible()) {
                 data._internal_visibleRange = null;
                 return;
             }
-            var firstValue = ensureNotNull(s._internal_firstValue());
+            const firstValue = ensureNotNull(s._internal_firstValue());
             data._internal_lineColor = seriesData._internal_backgroundColor;
             data._internal_radius = seriesData._internal_radius;
+            data._internal_lineWidth = seriesData._internal_borderWidth;
             data._internal_items[0]._internal_price = seriesData._internal_price;
             data._internal_items[0]._internal_y = s._internal_priceScale()._internal_priceToCoordinate(seriesData._internal_price, firstValue._internal_value);
-            data._internal_backColor = (_a = seriesData._internal_borderColor) !== null && _a !== void 0 ? _a : _this._private__chartModel._internal_backgroundColorAtYPercentFromTop(data._internal_items[0]._internal_y / height);
+            data._internal_backColor = (_a = seriesData._internal_borderColor) !== null && _a !== void 0 ? _a : this._private__chartModel._internal_backgroundColorAtYPercentFromTop(data._internal_items[0]._internal_y / height);
             data._internal_items[0]._internal_time = timePointIndex;
             data._internal_items[0]._internal_x = timeScale._internal_indexToCoordinate(timePointIndex);
             data._internal_visibleRange = rangeForSinglePoint;
         });
-    };
-    return CrosshairMarksPaneView;
-}());
+    }
+}
 
-var CrosshairRenderer = /** @class */ (function () {
-    function CrosshairRenderer(data) {
+class CrosshairRenderer {
+    constructor(data) {
         this._private__data = data;
     }
-    CrosshairRenderer.prototype._internal_draw = function (ctx, pixelRatio, isHovered, hitTestData) {
+    _internal_draw(ctx, pixelRatio, isHovered, hitTestData) {
         if (this._private__data === null) {
             return;
         }
-        var vertLinesVisible = this._private__data._internal_vertLine._internal_visible;
-        var horzLinesVisible = this._private__data._internal_horzLine._internal_visible;
+        const vertLinesVisible = this._private__data._internal_vertLine._internal_visible;
+        const horzLinesVisible = this._private__data._internal_horzLine._internal_visible;
         if (!vertLinesVisible && !horzLinesVisible) {
             return;
         }
         ctx.save();
-        var x = Math.round(this._private__data._internal_x * pixelRatio);
-        var y = Math.round(this._private__data._internal_y * pixelRatio);
-        var w = Math.ceil(this._private__data._internal_w * pixelRatio);
-        var h = Math.ceil(this._private__data._internal_h * pixelRatio);
+        const x = Math.round(this._private__data._internal_x * pixelRatio);
+        const y = Math.round(this._private__data._internal_y * pixelRatio);
+        const w = Math.ceil(this._private__data._internal_w * pixelRatio);
+        const h = Math.ceil(this._private__data._internal_h * pixelRatio);
         ctx.lineCap = 'butt';
         if (vertLinesVisible && x >= 0) {
             ctx.lineWidth = Math.floor(this._private__data._internal_vertLine._internal_lineWidth * pixelRatio);
@@ -827,12 +760,11 @@ var CrosshairRenderer = /** @class */ (function () {
             drawHorizontalLine(ctx, y, 0, w);
         }
         ctx.restore();
-    };
-    return CrosshairRenderer;
-}());
+    }
+}
 
-var CrosshairPaneView = /** @class */ (function () {
-    function CrosshairPaneView(source) {
+class CrosshairPaneView {
+    constructor(source) {
         this._private__invalidated = true;
         this._private__rendererData = {
             _internal_vertLine: {
@@ -855,21 +787,21 @@ var CrosshairPaneView = /** @class */ (function () {
         this._private__renderer = new CrosshairRenderer(this._private__rendererData);
         this._private__source = source;
     }
-    CrosshairPaneView.prototype._internal_update = function () {
+    _internal_update() {
         this._private__invalidated = true;
-    };
-    CrosshairPaneView.prototype._internal_renderer = function (height, width) {
+    }
+    _internal_renderer(height, width) {
         if (this._private__invalidated) {
             this._private__updateImpl();
             this._private__invalidated = false;
         }
         return this._private__renderer;
-    };
-    CrosshairPaneView.prototype._private__updateImpl = function () {
-        var visible = this._private__source._internal_visible();
-        var pane = ensureNotNull(this._private__source._internal_pane());
-        var crosshairOptions = pane._internal_model()._internal_options().crosshair;
-        var data = this._private__rendererData;
+    }
+    _private__updateImpl() {
+        const visible = this._private__source._internal_visible();
+        const pane = ensureNotNull(this._private__source._internal_pane());
+        const crosshairOptions = pane._internal_model()._internal_options().crosshair;
+        const data = this._private__rendererData;
         data._internal_horzLine._internal_visible = visible && this._private__source._internal_horzLineVisible(pane);
         data._internal_vertLine._internal_visible = visible && this._private__source._internal_vertLineVisible();
         data._internal_horzLine._internal_lineWidth = crosshairOptions.horzLine.width;
@@ -882,9 +814,8 @@ var CrosshairPaneView = /** @class */ (function () {
         data._internal_h = pane._internal_height();
         data._internal_x = this._private__source._internal_appliedX();
         data._internal_y = this._private__source._internal_appliedY();
-    };
-    return CrosshairPaneView;
-}());
+    }
+}
 
 /**
  * Fills rectangle's inner border (so, all the filled area is limited by the [x, x + width]*[y, y + height] region)
@@ -936,11 +867,95 @@ function clearRect(ctx, x, y, w, h, clearColor) {
     ctx.fillRect(x, y, w, h);
     ctx.restore();
 }
+function changeBorderRadius(borderRadius, offset) {
+    if (Array.isArray(borderRadius)) {
+        return borderRadius.map((x) => x === 0 ? x : x + offset);
+    }
+    return borderRadius + offset;
+}
+function drawRoundRect(
+// eslint:disable-next-line:max-params
+ctx, x, y, w, h, radii) {
+    let radiusLeftTop;
+    let radiusRightTop;
+    let radiusRightBottom;
+    let radiusLeftBottom;
+    if (!Array.isArray(radii)) {
+        const oneRadius = Math.max(0, radii);
+        radiusLeftTop = oneRadius;
+        radiusRightTop = oneRadius;
+        radiusRightBottom = oneRadius;
+        radiusLeftBottom = oneRadius;
+    }
+    else if (radii.length === 2) {
+        const cornerRadius1 = Math.max(0, radii[0]);
+        const cornerRadius2 = Math.max(0, radii[1]);
+        radiusLeftTop = cornerRadius1;
+        radiusRightTop = cornerRadius1;
+        radiusRightBottom = cornerRadius2;
+        radiusLeftBottom = cornerRadius2;
+    }
+    else if (radii.length === 4) {
+        radiusLeftTop = Math.max(0, radii[0]);
+        radiusRightTop = Math.max(0, radii[1]);
+        radiusRightBottom = Math.max(0, radii[2]);
+        radiusLeftBottom = Math.max(0, radii[3]);
+    }
+    else {
+        throw new Error(`Wrong border radius - it should be like css border radius`);
+    }
+    ctx.beginPath();
+    ctx.moveTo(x + radiusLeftTop, y);
+    ctx.lineTo(x + w - radiusRightTop, y);
+    if (radiusRightTop !== 0) {
+        ctx.arcTo(x + w, y, x + w, y + radiusRightTop, radiusRightTop);
+    }
+    ctx.lineTo(x + w, y + h - radiusRightBottom);
+    if (radiusRightBottom !== 0) {
+        ctx.arcTo(x + w, y + h, x + w - radiusRightBottom, y + h, radiusRightBottom);
+    }
+    ctx.lineTo(x + radiusLeftBottom, y + h);
+    if (radiusLeftBottom !== 0) {
+        ctx.arcTo(x, y + h, x, y + h - radiusLeftBottom, radiusLeftBottom);
+    }
+    ctx.lineTo(x, y + radiusLeftTop);
+    if (radiusLeftTop !== 0) {
+        ctx.arcTo(x, y, x + radiusLeftTop, y, radiusLeftTop);
+    }
+}
+// eslint-disable-next-line max-params
+function drawRoundRectWithInnerBorder(ctx, left, top, width, height, backgroundColor, borderWidth = 0, borderRadius = 0, borderColor = '') {
+    ctx.save();
+    if (!borderWidth || !borderColor || borderColor === backgroundColor) {
+        drawRoundRect(ctx, left, top, width, height, borderRadius);
+        ctx.fillStyle = backgroundColor;
+        ctx.fill();
+        ctx.restore();
+        return;
+    }
+    const halfBorderWidth = borderWidth / 2;
+    // Draw body
+    if (backgroundColor !== 'transparent') {
+        const innerRadii = changeBorderRadius(borderRadius, -borderWidth);
+        drawRoundRect(ctx, left + borderWidth, top + borderWidth, width - borderWidth * 2, height - borderWidth * 2, innerRadii);
+        ctx.fillStyle = backgroundColor;
+        ctx.fill();
+    }
+    // Draw border
+    if (borderColor !== 'transparent') {
+        const outerRadii = changeBorderRadius(borderRadius, -halfBorderWidth);
+        drawRoundRect(ctx, left + halfBorderWidth, top + halfBorderWidth, width - borderWidth, height - borderWidth, outerRadii);
+        ctx.lineWidth = borderWidth;
+        ctx.strokeStyle = borderColor;
+        ctx.closePath();
+        ctx.stroke();
+    }
+}
 // eslint-disable-next-line max-params
 function clearRectWithGradient(ctx, x, y, w, h, topColor, bottomColor) {
     ctx.save();
     ctx.globalCompositeOperation = 'copy';
-    var gradient = ctx.createLinearGradient(0, 0, 0, h);
+    const gradient = ctx.createLinearGradient(0, 0, 0, h);
     gradient.addColorStop(0, topColor);
     gradient.addColorStop(1, bottomColor);
     ctx.fillStyle = gradient;
@@ -948,113 +963,150 @@ function clearRectWithGradient(ctx, x, y, w, h, topColor, bottomColor) {
     ctx.restore();
 }
 
-var PriceAxisViewRenderer = /** @class */ (function () {
-    function PriceAxisViewRenderer(data, commonData) {
+class PriceAxisViewRenderer {
+    constructor(data, commonData) {
         this._internal_setData(data, commonData);
     }
-    PriceAxisViewRenderer.prototype._internal_setData = function (data, commonData) {
+    _internal_setData(data, commonData) {
         this._private__data = data;
         this._private__commonData = commonData;
-    };
-    PriceAxisViewRenderer.prototype._internal_draw = function (ctx, rendererOptions, textWidthCache, width, align, pixelRatio) {
+    }
+    _internal_draw(ctx, rendererOptions, textWidthCache, width, align, pixelRatio) {
         if (!this._private__data._internal_visible) {
             return;
         }
         ctx.font = rendererOptions._internal_font;
-        var tickSize = (this._private__data._internal_tickVisible || !this._private__data._internal_moveTextToInvisibleTick) ? rendererOptions._internal_tickLength : 0;
-        var horzBorder = rendererOptions._internal_borderSize;
-        var paddingTop = rendererOptions._internal_paddingTop;
-        var paddingBottom = rendererOptions._internal_paddingBottom;
-        var paddingInner = rendererOptions._internal_paddingInner;
-        var paddingOuter = rendererOptions._internal_paddingOuter;
-        var text = this._private__data._internal_text;
-        var textWidth = Math.ceil(textWidthCache._internal_measureText(ctx, text));
-        var baselineOffset = rendererOptions._internal_baselineOffset;
-        var totalHeight = rendererOptions._internal_fontSize + paddingTop + paddingBottom;
-        var halfHeigth = Math.ceil(totalHeight * 0.5);
-        var totalWidth = horzBorder + textWidth + paddingInner + paddingOuter + tickSize;
-        var yMid = this._private__commonData._internal_coordinate;
-        if (this._private__commonData._internal_fixedCoordinate) {
-            yMid = this._private__commonData._internal_fixedCoordinate;
-        }
-        yMid = Math.round(yMid);
-        var yTop = yMid - halfHeigth;
-        var yBottom = yTop + totalHeight;
-        var alignRight = align === 'right';
-        var xInside = alignRight ? width : 0;
-        var rightScaled = Math.ceil(width * pixelRatio);
-        var xOutside = xInside;
-        var xTick;
-        var xText;
+        const geometry = this._private__calculateGeometry(ctx, rendererOptions, textWidthCache, width, align, pixelRatio);
+        const textColor = this._private__data._internal_color || this._private__commonData._internal_color;
+        const backgroundColor = (this._private__commonData._internal_background);
         ctx.fillStyle = this._private__commonData._internal_background;
-        ctx.lineWidth = 1;
-        ctx.lineCap = 'butt';
-        if (text) {
-            if (alignRight) {
-                // 2               1
-                //
-                //              6  5
-                //
-                // 3               4
-                xOutside = xInside - totalWidth;
-                xTick = xInside - tickSize;
-                xText = xOutside + paddingOuter;
-            }
-            else {
-                // 1               2
-                //
-                // 6  5
-                //
-                // 4               3
-                xOutside = xInside + totalWidth;
-                xTick = xInside + tickSize;
-                xText = xInside + horzBorder + tickSize + paddingInner;
-            }
-            var tickHeight = Math.max(1, Math.floor(pixelRatio));
-            var horzBorderScaled = Math.max(1, Math.floor(horzBorder * pixelRatio));
-            var xInsideScaled = alignRight ? rightScaled : 0;
-            var yTopScaled = Math.round(yTop * pixelRatio);
-            var xOutsideScaled = Math.round(xOutside * pixelRatio);
-            var yMidScaled = Math.round(yMid * pixelRatio) - Math.floor(pixelRatio * 0.5);
-            var yBottomScaled = yMidScaled + tickHeight + (yMidScaled - yTopScaled);
-            var xTickScaled = Math.round(xTick * pixelRatio);
-            ctx.save();
-            ctx.beginPath();
-            ctx.moveTo(xInsideScaled, yTopScaled);
-            ctx.lineTo(xOutsideScaled, yTopScaled);
-            ctx.lineTo(xOutsideScaled, yBottomScaled);
-            ctx.lineTo(xInsideScaled, yBottomScaled);
-            ctx.fill();
+        if (this._private__data._internal_text) {
+            const drawLabelBody = (labelBackgroundColor, labelBorderColor) => {
+                if (geometry._internal_alignRight) {
+                    drawRoundRectWithInnerBorder(ctx, geometry._internal_xOutside, geometry._internal_yTop, geometry._internal_totalWidthScaled, geometry._internal_totalHeightScaled, labelBackgroundColor, geometry._internal_horzBorderScaled, [geometry._internal_radius, 0, 0, geometry._internal_radius], labelBorderColor);
+                }
+                else {
+                    drawRoundRectWithInnerBorder(ctx, geometry._internal_xInside, geometry._internal_yTop, geometry._internal_totalWidthScaled, geometry._internal_totalHeightScaled, labelBackgroundColor, geometry._internal_horzBorderScaled, [0, geometry._internal_radius, geometry._internal_radius, 0], labelBorderColor);
+                }
+            };
             // draw border
-            ctx.fillStyle = this._private__data._internal_borderColor;
-            ctx.fillRect(alignRight ? rightScaled - horzBorderScaled : 0, yTopScaled, horzBorderScaled, yBottomScaled - yTopScaled);
+            // draw label background
+            drawLabelBody(backgroundColor, 'transparent');
+            // draw tick
             if (this._private__data._internal_tickVisible) {
-                ctx.fillStyle = this._private__commonData._internal_color;
-                ctx.fillRect(xInsideScaled, yMidScaled, xTickScaled - xInsideScaled, tickHeight);
+                ctx.fillStyle = textColor;
+                ctx.fillRect(geometry._internal_xInside, geometry._internal_yMid, geometry._internal_xTick - geometry._internal_xInside, geometry._internal_tickHeight);
+            }
+            // draw label border above the tick
+            drawLabelBody('transparent', backgroundColor);
+            // draw separator
+            if (this._private__data._internal_borderVisible) {
+                ctx.fillStyle = rendererOptions._internal_paneBackgroundColor;
+                ctx.fillRect(geometry._internal_alignRight ? geometry._internal_rightScaled - geometry._internal_horzBorderScaled : 0, geometry._internal_yTop, geometry._internal_horzBorderScaled, geometry._internal_yBottom - geometry._internal_yTop);
             }
-            ctx.textAlign = 'left';
-            ctx.fillStyle = this._private__commonData._internal_color;
-            drawScaled(ctx, pixelRatio, function () {
-                ctx.fillText(text, xText, yBottom - paddingBottom - baselineOffset);
+            ctx.save();
+            ctx.translate(geometry._internal_xText, (geometry._internal_yTop + geometry._internal_yBottom) / 2 + geometry._internal_textMidCorrection);
+            drawScaled(ctx, pixelRatio, () => {
+                ctx.fillStyle = textColor;
+                ctx.fillText(this._private__data._internal_text, 0, 0);
             });
             ctx.restore();
         }
-    };
-    PriceAxisViewRenderer.prototype._internal_height = function (rendererOptions, useSecondLine) {
+    }
+    _internal_height(rendererOptions, useSecondLine) {
         if (!this._private__data._internal_visible) {
             return 0;
         }
         return rendererOptions._internal_fontSize + rendererOptions._internal_paddingTop + rendererOptions._internal_paddingBottom;
-    };
-    return PriceAxisViewRenderer;
-}());
+    }
+    _private__calculateGeometry(ctx, rendererOptions, textWidthCache, width, align, pixelRatio) {
+        const tickSize = (this._private__data._internal_tickVisible || !this._private__data._internal_moveTextToInvisibleTick) ? rendererOptions._internal_tickLength : 0;
+        const horzBorder = rendererOptions._internal_borderSize;
+        const paddingTop = rendererOptions._internal_paddingTop + this._private__commonData._internal_additionalPaddingTop;
+        const paddingBottom = rendererOptions._internal_paddingBottom + this._private__commonData._internal_additionalPaddingBottom;
+        const paddingInner = rendererOptions._internal_paddingInner;
+        const paddingOuter = rendererOptions._internal_paddingOuter;
+        const text = this._private__data._internal_text;
+        const actualTextHeight = rendererOptions._internal_fontSize;
+        const textMidCorrection = textWidthCache._internal_yMidCorrection(ctx, text) * pixelRatio;
+        const textWidth = Math.ceil(textWidthCache._internal_measureText(ctx, text));
+        const totalHeight = actualTextHeight + paddingTop + paddingBottom;
+        const totalWidth = horzBorder + paddingInner + paddingOuter + textWidth + tickSize;
+        const tickHeight = Math.max(1, Math.floor(pixelRatio));
+        let totalHeightScaled = Math.round(totalHeight * pixelRatio);
+        if (totalHeightScaled % 2 !== tickHeight % 2) {
+            totalHeightScaled += 1;
+        }
+        const horzBorderScaled = this._private__data._internal_separatorVisible ? Math.max(1, Math.floor(horzBorder * pixelRatio)) : 0;
+        const totalWidthScaled = Math.round(totalWidth * pixelRatio);
+        // tick overlaps scale border
+        const tickSizeScaled = Math.round(tickSize * pixelRatio);
+        const widthScaled = Math.ceil(width * pixelRatio);
+        const paddingInnerScaled = Math.ceil(paddingInner * pixelRatio);
+        let yMid = this._private__commonData._internal_coordinate;
+        if (this._private__commonData._internal_fixedCoordinate) {
+            yMid = this._private__commonData._internal_fixedCoordinate;
+        }
+        yMid = Math.round(yMid * pixelRatio) - Math.floor(pixelRatio * 0.5);
+        const yTop = Math.floor(yMid + tickHeight / 2 - totalHeightScaled / 2);
+        const yBottom = yTop + totalHeightScaled;
+        const alignRight = align === 'right';
+        const xInside = alignRight ? widthScaled - horzBorderScaled : horzBorderScaled;
+        const rightScaled = widthScaled;
+        let xOutside = xInside;
+        let xTick;
+        let xText;
+        const radius = 2 * pixelRatio;
+        ctx.textAlign = alignRight ? 'right' : 'left';
+        ctx.textBaseline = 'middle';
+        if (alignRight) {
+            // 2               1
+            //
+            //              6  5
+            //
+            // 3               4
+            xOutside = xInside - totalWidthScaled;
+            xTick = xInside - tickSizeScaled;
+            xText = xInside - tickSizeScaled - paddingInnerScaled - 1;
+        }
+        else {
+            // 1               2
+            //
+            // 6  5
+            //
+            // 4               3
+            xOutside = xInside + totalWidthScaled;
+            xTick = xInside + tickSizeScaled;
+            xText = xInside + tickSizeScaled + paddingInnerScaled;
+        }
+        return {
+            _internal_alignRight: alignRight,
+            _internal_yTop: yTop,
+            _internal_yMid: yMid,
+            _internal_yBottom: yBottom,
+            _internal_totalWidthScaled: totalWidthScaled,
+            _internal_totalHeightScaled: totalHeightScaled,
+            _internal_radius: radius,
+            _internal_horzBorderScaled: horzBorderScaled,
+            _internal_xOutside: xOutside,
+            _internal_xInside: xInside,
+            _internal_xTick: xTick,
+            _internal_xText: xText,
+            _internal_tickHeight: tickHeight,
+            _internal_rightScaled: rightScaled,
+            _internal_textMidCorrection: textMidCorrection,
+        };
+    }
+}
 
-var PriceAxisView = /** @class */ (function () {
-    function PriceAxisView(ctor) {
+class PriceAxisView {
+    constructor(ctor) {
         this._private__commonRendererData = {
             _internal_coordinate: 0,
             _internal_color: '#FFF',
             _internal_background: '#000',
+            _internal_additionalPaddingBottom: 0,
+            _internal_additionalPaddingTop: 0,
         };
         this._private__axisRendererData = {
             _internal_text: '',
@@ -1062,6 +1114,9 @@ var PriceAxisView = /** @class */ (function () {
             _internal_tickVisible: true,
             _internal_moveTextToInvisibleTick: false,
             _internal_borderColor: '',
+            _internal_color: '#FFF',
+            _internal_borderVisible: false,
+            _internal_separatorVisible: false,
         };
         this._private__paneRendererData = {
             _internal_text: '',
@@ -1069,122 +1124,123 @@ var PriceAxisView = /** @class */ (function () {
             _internal_tickVisible: false,
             _internal_moveTextToInvisibleTick: true,
             _internal_borderColor: '',
+            _internal_color: '#FFF',
+            _internal_borderVisible: true,
+            _internal_separatorVisible: true,
         };
         this._private__invalidated = true;
         this._private__axisRenderer = new (ctor || PriceAxisViewRenderer)(this._private__axisRendererData, this._private__commonRendererData);
         this._private__paneRenderer = new (ctor || PriceAxisViewRenderer)(this._private__paneRendererData, this._private__commonRendererData);
     }
-    PriceAxisView.prototype._internal_text = function () {
+    _internal_text() {
         this._private__updateRendererDataIfNeeded();
         return this._private__axisRendererData._internal_text;
-    };
-    PriceAxisView.prototype._internal_coordinate = function () {
+    }
+    _internal_coordinate() {
         this._private__updateRendererDataIfNeeded();
         return this._private__commonRendererData._internal_coordinate;
-    };
-    PriceAxisView.prototype._internal_update = function () {
+    }
+    _internal_update() {
         this._private__invalidated = true;
-    };
-    PriceAxisView.prototype._internal_height = function (rendererOptions, useSecondLine) {
-        if (useSecondLine === void 0) { useSecondLine = false; }
+    }
+    _internal_height(rendererOptions, useSecondLine = false) {
         return Math.max(this._private__axisRenderer._internal_height(rendererOptions, useSecondLine), this._private__paneRenderer._internal_height(rendererOptions, useSecondLine));
-    };
-    PriceAxisView.prototype._internal_getFixedCoordinate = function () {
+    }
+    _internal_getFixedCoordinate() {
         return this._private__commonRendererData._internal_fixedCoordinate || 0;
-    };
-    PriceAxisView.prototype._internal_setFixedCoordinate = function (value) {
+    }
+    _internal_setFixedCoordinate(value) {
         this._private__commonRendererData._internal_fixedCoordinate = value;
-    };
-    PriceAxisView.prototype._internal_isVisible = function () {
+    }
+    _internal_isVisible() {
         this._private__updateRendererDataIfNeeded();
         return this._private__axisRendererData._internal_visible || this._private__paneRendererData._internal_visible;
-    };
-    PriceAxisView.prototype._internal_isAxisLabelVisible = function () {
+    }
+    _internal_isAxisLabelVisible() {
         this._private__updateRendererDataIfNeeded();
         return this._private__axisRendererData._internal_visible;
-    };
-    PriceAxisView.prototype._internal_renderer = function (priceScale) {
+    }
+    _internal_renderer(priceScale) {
         this._private__updateRendererDataIfNeeded();
         // force update tickVisible state from price scale options
         // because we don't have and we can't have price axis in other methods
         // (like paneRenderer or any other who call _updateRendererDataIfNeeded)
-        this._private__axisRendererData._internal_tickVisible = this._private__axisRendererData._internal_tickVisible && priceScale._internal_options().drawTicks;
-        this._private__paneRendererData._internal_tickVisible = this._private__paneRendererData._internal_tickVisible && priceScale._internal_options().drawTicks;
+        this._private__axisRendererData._internal_tickVisible = this._private__axisRendererData._internal_tickVisible && priceScale._internal_options().ticksVisible;
+        this._private__paneRendererData._internal_tickVisible = this._private__paneRendererData._internal_tickVisible && priceScale._internal_options().ticksVisible;
         this._private__axisRenderer._internal_setData(this._private__axisRendererData, this._private__commonRendererData);
         this._private__paneRenderer._internal_setData(this._private__paneRendererData, this._private__commonRendererData);
         return this._private__axisRenderer;
-    };
-    PriceAxisView.prototype._internal_paneRenderer = function () {
+    }
+    _internal_paneRenderer() {
         this._private__updateRendererDataIfNeeded();
         this._private__axisRenderer._internal_setData(this._private__axisRendererData, this._private__commonRendererData);
         this._private__paneRenderer._internal_setData(this._private__paneRendererData, this._private__commonRendererData);
         return this._private__paneRenderer;
-    };
-    PriceAxisView.prototype._private__updateRendererDataIfNeeded = function () {
+    }
+    _private__updateRendererDataIfNeeded() {
         if (this._private__invalidated) {
             this._private__axisRendererData._internal_tickVisible = true;
             this._private__paneRendererData._internal_tickVisible = false;
             this._internal__updateRendererData(this._private__axisRendererData, this._private__paneRendererData, this._private__commonRendererData);
         }
-    };
-    return PriceAxisView;
-}());
-
-var CrosshairPriceAxisView = /** @class */ (function (_super) {
-    __extends(CrosshairPriceAxisView, _super);
-    function CrosshairPriceAxisView(source, priceScale, valueProvider) {
-        var _this = _super.call(this) || this;
-        _this._private__source = source;
-        _this._private__priceScale = priceScale;
-        _this._private__valueProvider = valueProvider;
-        return _this;
-    }
-    CrosshairPriceAxisView.prototype._internal__updateRendererData = function (axisRendererData, paneRendererData, commonRendererData) {
+    }
+}
+
+class CrosshairPriceAxisView extends PriceAxisView {
+    constructor(source, priceScale, valueProvider) {
+        super();
+        this._private__source = source;
+        this._private__priceScale = priceScale;
+        this._private__valueProvider = valueProvider;
+    }
+    _internal__updateRendererData(axisRendererData, paneRendererData, commonRendererData) {
         axisRendererData._internal_visible = false;
-        var options = this._private__source._internal_options().horzLine;
+        const options = this._private__source._internal_options().horzLine;
         if (!options.labelVisible) {
             return;
         }
-        var firstValue = this._private__priceScale._internal_firstValue();
+        const firstValue = this._private__priceScale._internal_firstValue();
         if (!this._private__source._internal_visible() || this._private__priceScale._internal_isEmpty() || (firstValue === null)) {
             return;
         }
-        var colors = generateContrastColors(options.labelBackgroundColor);
+        const colors = generateContrastColors(options.labelBackgroundColor);
         commonRendererData._internal_background = colors._internal_background;
         commonRendererData._internal_color = colors._internal_foreground;
-        var value = this._private__valueProvider(this._private__priceScale);
+        const additionalPadding = 2 / 12 * this._private__priceScale._internal_fontSize();
+        commonRendererData._internal_additionalPaddingTop = additionalPadding;
+        commonRendererData._internal_additionalPaddingBottom = additionalPadding;
+        const value = this._private__valueProvider(this._private__priceScale);
         commonRendererData._internal_coordinate = value._internal_coordinate;
         axisRendererData._internal_text = this._private__priceScale._internal_formatPrice(value._internal_price, firstValue);
         axisRendererData._internal_visible = true;
-    };
-    return CrosshairPriceAxisView;
-}(PriceAxisView));
+    }
+}
 
-var optimizationReplacementRe = /[1-9]/g;
-var TimeAxisViewRenderer = /** @class */ (function () {
-    function TimeAxisViewRenderer() {
+const optimizationReplacementRe = /[1-9]/g;
+const radius$1 = 2;
+class TimeAxisViewRenderer {
+    constructor() {
         this._private__data = null;
     }
-    TimeAxisViewRenderer.prototype._internal_setData = function (data) {
+    _internal_setData(data) {
         this._private__data = data;
-    };
-    TimeAxisViewRenderer.prototype._internal_draw = function (ctx, rendererOptions, pixelRatio) {
-        var _this = this;
+    }
+    _internal_draw(ctx, rendererOptions, pixelRatio) {
         if (this._private__data === null || this._private__data._internal_visible === false || this._private__data._internal_text.length === 0) {
             return;
         }
         ctx.font = rendererOptions._internal_font;
-        var textWidth = Math.round(rendererOptions._internal_widthCache._internal_measureText(ctx, this._private__data._internal_text, optimizationReplacementRe));
+        const textWidth = Math.round(rendererOptions._internal_widthCache._internal_measureText(ctx, this._private__data._internal_text, optimizationReplacementRe));
         if (textWidth <= 0) {
             return;
         }
         ctx.save();
-        var horzMargin = rendererOptions._internal_paddingHorizontal;
-        var labelWidth = textWidth + 2 * horzMargin;
-        var labelWidthHalf = labelWidth / 2;
-        var timeScaleWidth = this._private__data._internal_width;
-        var coordinate = this._private__data._internal_coordinate;
-        var x1 = Math.floor(coordinate - labelWidthHalf) + 0.5;
+        const horzMargin = rendererOptions._internal_paddingHorizontal;
+        const labelWidth = textWidth + 2 * horzMargin;
+        const labelWidthHalf = labelWidth / 2;
+        const timeScaleWidth = this._private__data._internal_width;
+        let coordinate = this._private__data._internal_coordinate;
+        let x1 = Math.floor(coordinate - labelWidthHalf) + 0.5;
         if (x1 < 0) {
             coordinate = coordinate + Math.abs(0 - x1);
             x1 = Math.floor(coordinate - labelWidthHalf) + 0.5;
@@ -1193,39 +1249,54 @@ var TimeAxisViewRenderer = /** @class */ (function () {
             coordinate = coordinate - Math.abs(timeScaleWidth - (x1 + labelWidth));
             x1 = Math.floor(coordinate - labelWidthHalf) + 0.5;
         }
-        var x2 = x1 + labelWidth;
-        var y1 = 0;
-        var y2 = (y1 +
+        const x2 = x1 + labelWidth;
+        const y1 = 0;
+        const y2 = Math.ceil(y1 +
             rendererOptions._internal_borderSize +
+            rendererOptions._internal_tickLength +
             rendererOptions._internal_paddingTop +
             rendererOptions._internal_fontSize +
             rendererOptions._internal_paddingBottom);
         ctx.fillStyle = this._private__data._internal_background;
-        var x1scaled = Math.round(x1 * pixelRatio);
-        var y1scaled = Math.round(y1 * pixelRatio);
-        var x2scaled = Math.round(x2 * pixelRatio);
-        var y2scaled = Math.round(y2 * pixelRatio);
-        ctx.fillRect(x1scaled, y1scaled, x2scaled - x1scaled, y2scaled - y1scaled);
-        var tickX = Math.round(this._private__data._internal_coordinate * pixelRatio);
-        var tickTop = y1scaled;
-        var tickBottom = Math.round((tickTop + rendererOptions._internal_borderSize + rendererOptions._internal_tickLength) * pixelRatio);
-        ctx.fillStyle = this._private__data._internal_color;
-        var tickWidth = Math.max(1, Math.floor(pixelRatio));
-        var tickOffset = Math.floor(pixelRatio * 0.5);
-        ctx.fillRect(tickX - tickOffset, tickTop, tickWidth, tickBottom - tickTop);
-        var yText = y2 - rendererOptions._internal_baselineOffset - rendererOptions._internal_paddingBottom;
+        const x1scaled = Math.round(x1 * pixelRatio);
+        const y1scaled = Math.round(y1 * pixelRatio);
+        const x2scaled = Math.round(x2 * pixelRatio);
+        const y2scaled = Math.round(y2 * pixelRatio);
+        const radiusScaled = Math.round(radius$1 * pixelRatio);
+        ctx.beginPath();
+        ctx.moveTo(x1scaled, y1scaled);
+        ctx.lineTo(x1scaled, y2scaled - radiusScaled);
+        ctx.arcTo(x1scaled, y2scaled, x1scaled + radiusScaled, y2scaled, radiusScaled);
+        ctx.lineTo(x2scaled - radiusScaled, y2scaled);
+        ctx.arcTo(x2scaled, y2scaled, x2scaled, y2scaled - radiusScaled, radiusScaled);
+        ctx.lineTo(x2scaled, y1scaled);
+        ctx.fill();
+        if (this._private__data._internal_tickVisible) {
+            const tickX = Math.round(this._private__data._internal_coordinate * pixelRatio);
+            const tickTop = y1scaled;
+            const tickBottom = Math.round((tickTop + rendererOptions._internal_tickLength) * pixelRatio);
+            ctx.fillStyle = this._private__data._internal_color;
+            const tickWidth = Math.max(1, Math.floor(pixelRatio));
+            const tickOffset = Math.floor(pixelRatio * 0.5);
+            ctx.fillRect(tickX - tickOffset, tickTop, tickWidth, tickBottom - tickTop);
+        }
+        const yText = y1 +
+            rendererOptions._internal_borderSize +
+            rendererOptions._internal_tickLength +
+            rendererOptions._internal_paddingTop +
+            rendererOptions._internal_fontSize / 2;
         ctx.textAlign = 'left';
+        ctx.textBaseline = 'middle';
         ctx.fillStyle = this._private__data._internal_color;
-        drawScaled(ctx, pixelRatio, function () {
-            ctx.fillText(ensureNotNull(_this._private__data)._internal_text, x1 + horzMargin, yText);
-        });
+        const textYCorrection = rendererOptions._internal_widthCache._internal_yMidCorrection(ctx, 'Apr0');
+        ctx.translate((x1 + horzMargin) * pixelRatio, (yText + textYCorrection) * pixelRatio);
+        drawScaled(ctx, pixelRatio, () => ctx.fillText(ensureNotNull(this._private__data)._internal_text, 0, 0));
         ctx.restore();
-    };
-    return TimeAxisViewRenderer;
-}());
+    }
+}
 
-var CrosshairTimeAxisView = /** @class */ (function () {
-    function CrosshairTimeAxisView(crosshair, model, valueProvider) {
+class CrosshairTimeAxisView {
+    constructor(crosshair, model, valueProvider) {
         this._private__invalidated = true;
         this._private__renderer = new TimeAxisViewRenderer();
         this._private__rendererData = {
@@ -1235,74 +1306,77 @@ var CrosshairTimeAxisView = /** @class */ (function () {
             _internal_text: '',
             _internal_width: 0,
             _internal_coordinate: NaN,
+            _internal_tickVisible: true,
         };
         this._private__crosshair = crosshair;
         this._private__model = model;
         this._private__valueProvider = valueProvider;
     }
-    CrosshairTimeAxisView.prototype._internal_update = function () {
+    _internal_update() {
         this._private__invalidated = true;
-    };
-    CrosshairTimeAxisView.prototype._internal_renderer = function () {
+    }
+    _internal_renderer() {
         if (this._private__invalidated) {
             this._private__updateImpl();
             this._private__invalidated = false;
         }
         this._private__renderer._internal_setData(this._private__rendererData);
         return this._private__renderer;
-    };
-    CrosshairTimeAxisView.prototype._private__updateImpl = function () {
-        var data = this._private__rendererData;
+    }
+    _private__updateImpl() {
+        const data = this._private__rendererData;
         data._internal_visible = false;
-        var options = this._private__crosshair._internal_options().vertLine;
+        const options = this._private__crosshair._internal_options().vertLine;
         if (!options.labelVisible) {
             return;
         }
-        var timeScale = this._private__model._internal_timeScale();
+        const timeScale = this._private__model._internal_timeScale();
         if (timeScale._internal_isEmpty()) {
             return;
         }
-        var currentTime = timeScale._internal_indexToTime(this._private__crosshair._internal_appliedIndex());
         data._internal_width = timeScale._internal_width();
-        var value = this._private__valueProvider();
+        const value = this._private__valueProvider();
         if (!value._internal_time) {
             return;
         }
         data._internal_coordinate = value._internal_coordinate;
+        const currentTime = timeScale._internal_indexToTimeScalePoint(this._private__crosshair._internal_appliedIndex());
         data._internal_text = timeScale._internal_formatDateTime(ensureNotNull(currentTime));
         data._internal_visible = true;
-        var colors = generateContrastColors(options.labelBackgroundColor);
+        const colors = generateContrastColors(options.labelBackgroundColor);
         data._internal_background = colors._internal_background;
         data._internal_color = colors._internal_foreground;
-    };
-    return CrosshairTimeAxisView;
-}());
+        data._internal_tickVisible = timeScale._internal_options().ticksVisible;
+    }
+}
 
-var DataSource = /** @class */ (function () {
-    function DataSource() {
+class DataSource {
+    constructor() {
         this._internal__priceScale = null;
         this._private__zorder = 0;
     }
-    DataSource.prototype._internal_zorder = function () {
+    _internal_zorder() {
         return this._private__zorder;
-    };
-    DataSource.prototype._internal_setZorder = function (zorder) {
+    }
+    _internal_setZorder(zorder) {
         this._private__zorder = zorder;
-    };
-    DataSource.prototype._internal_priceScale = function () {
+    }
+    _internal_priceScale() {
         return this._internal__priceScale;
-    };
-    DataSource.prototype._internal_setPriceScale = function (priceScale) {
+    }
+    _internal_setPriceScale(priceScale) {
         this._internal__priceScale = priceScale;
-    };
-    DataSource.prototype._internal_timeAxisViews = function () {
+    }
+    _internal_labelPaneViews(pane) {
         return [];
-    };
-    DataSource.prototype._internal_visible = function () {
+    }
+    _internal_timeAxisViews() {
+        return [];
+    }
+    _internal_visible() {
         return true;
-    };
-    return DataSource;
-}());
+    }
+}
 
 /**
  * Represents the crosshair mode.
@@ -1318,91 +1392,89 @@ var CrosshairMode;
      */
     CrosshairMode[CrosshairMode["Magnet"] = 1] = "Magnet";
 })(CrosshairMode || (CrosshairMode = {}));
-var Crosshair = /** @class */ (function (_super) {
-    __extends(Crosshair, _super);
-    function Crosshair(model, options) {
-        var _this = _super.call(this) || this;
-        _this._private__pane = null;
-        _this._private__price = NaN;
-        _this._private__index = 0;
-        _this._private__visible = true;
-        _this._private__priceAxisViews = new Map();
-        _this._private__subscribed = false;
-        _this._private__x = NaN;
-        _this._private__y = NaN;
-        _this._private__originX = NaN;
-        _this._private__originY = NaN;
-        _this._private__model = model;
-        _this._private__options = options;
-        _this._private__markersPaneView = new CrosshairMarksPaneView(model, _this);
-        var valuePriceProvider = function (rawPriceProvider, rawCoordinateProvider) {
-            return function (priceScale) {
-                var coordinate = rawCoordinateProvider();
-                var rawPrice = rawPriceProvider();
-                if (priceScale === ensureNotNull(_this._private__pane)._internal_defaultPriceScale()) {
+class Crosshair extends DataSource {
+    constructor(model, options) {
+        super();
+        this._private__pane = null;
+        this._private__price = NaN;
+        this._private__index = 0;
+        this._private__visible = true;
+        this._private__priceAxisViews = new Map();
+        this._private__subscribed = false;
+        this._private__x = NaN;
+        this._private__y = NaN;
+        this._private__originX = NaN;
+        this._private__originY = NaN;
+        this._private__model = model;
+        this._private__options = options;
+        this._private__markersPaneView = new CrosshairMarksPaneView(model, this);
+        const valuePriceProvider = (rawPriceProvider, rawCoordinateProvider) => {
+            return (priceScale) => {
+                const coordinate = rawCoordinateProvider();
+                const rawPrice = rawPriceProvider();
+                if (priceScale === ensureNotNull(this._private__pane)._internal_defaultPriceScale()) {
                     // price must be defined
                     return { _internal_price: rawPrice, _internal_coordinate: coordinate };
                 }
                 else {
                     // always convert from coordinate
-                    var firstValue = ensureNotNull(priceScale._internal_firstValue());
-                    var price = priceScale._internal_coordinateToPrice(coordinate, firstValue);
+                    const firstValue = ensureNotNull(priceScale._internal_firstValue());
+                    const price = priceScale._internal_coordinateToPrice(coordinate, firstValue);
                     return { _internal_price: price, _internal_coordinate: coordinate };
                 }
             };
         };
-        var valueTimeProvider = function (rawIndexProvider, rawCoordinateProvider) {
-            return function () {
+        const valueTimeProvider = (rawIndexProvider, rawCoordinateProvider) => {
+            return () => {
                 return {
-                    _internal_time: _this._private__model._internal_timeScale()._internal_indexToTime(rawIndexProvider()),
+                    _internal_time: this._private__model._internal_timeScale()._internal_indexToTime(rawIndexProvider()),
                     _internal_coordinate: rawCoordinateProvider(),
                 };
             };
         };
         // for current position always return both price and coordinate
-        _this._private__currentPosPriceProvider = valuePriceProvider(function () { return _this._private__price; }, function () { return _this._private__y; });
-        var currentPosTimeProvider = valueTimeProvider(function () { return _this._private__index; }, function () { return _this._internal_appliedX(); });
-        _this._private__timeAxisView = new CrosshairTimeAxisView(_this, model, currentPosTimeProvider);
-        _this._private__paneView = new CrosshairPaneView(_this);
-        return _this;
+        this._private__currentPosPriceProvider = valuePriceProvider(() => this._private__price, () => this._private__y);
+        const currentPosTimeProvider = valueTimeProvider(() => this._private__index, () => this._internal_appliedX());
+        this._private__timeAxisView = new CrosshairTimeAxisView(this, model, currentPosTimeProvider);
+        this._private__paneView = new CrosshairPaneView(this);
     }
-    Crosshair.prototype._internal_options = function () {
+    _internal_options() {
         return this._private__options;
-    };
-    Crosshair.prototype._internal_saveOriginCoord = function (x, y) {
+    }
+    _internal_saveOriginCoord(x, y) {
         this._private__originX = x;
         this._private__originY = y;
-    };
-    Crosshair.prototype._internal_clearOriginCoord = function () {
+    }
+    _internal_clearOriginCoord() {
         this._private__originX = NaN;
         this._private__originY = NaN;
-    };
-    Crosshair.prototype._internal_originCoordX = function () {
+    }
+    _internal_originCoordX() {
         return this._private__originX;
-    };
-    Crosshair.prototype._internal_originCoordY = function () {
+    }
+    _internal_originCoordY() {
         return this._private__originY;
-    };
-    Crosshair.prototype._internal_setPosition = function (index, price, pane) {
+    }
+    _internal_setPosition(index, price, pane) {
         if (!this._private__subscribed) {
             this._private__subscribed = true;
         }
         this._private__visible = true;
         this._private__tryToUpdateViews(index, price, pane);
-    };
-    Crosshair.prototype._internal_appliedIndex = function () {
+    }
+    _internal_appliedIndex() {
         return this._private__index;
-    };
-    Crosshair.prototype._internal_appliedX = function () {
+    }
+    _internal_appliedX() {
         return this._private__x;
-    };
-    Crosshair.prototype._internal_appliedY = function () {
+    }
+    _internal_appliedY() {
         return this._private__y;
-    };
-    Crosshair.prototype._internal_visible = function () {
+    }
+    _internal_visible() {
         return this._private__visible;
-    };
-    Crosshair.prototype._internal_clearPosition = function () {
+    }
+    _internal_clearPosition() {
         this._private__visible = false;
         this._private__setIndexToLastSeriesBarIndex();
         this._private__price = NaN;
@@ -1410,60 +1482,60 @@ var Crosshair = /** @class */ (function (_super) {
         this._private__y = NaN;
         this._private__pane = null;
         this._internal_clearOriginCoord();
-    };
-    Crosshair.prototype._internal_paneViews = function (pane) {
+    }
+    _internal_paneViews(pane) {
         return this._private__pane !== null ? [this._private__paneView, this._private__markersPaneView] : [];
-    };
-    Crosshair.prototype._internal_horzLineVisible = function (pane) {
+    }
+    _internal_horzLineVisible(pane) {
         return pane === this._private__pane && this._private__options.horzLine.visible;
-    };
-    Crosshair.prototype._internal_vertLineVisible = function () {
+    }
+    _internal_vertLineVisible() {
         return this._private__options.vertLine.visible;
-    };
-    Crosshair.prototype._internal_priceAxisViews = function (pane, priceScale) {
+    }
+    _internal_priceAxisViews(pane, priceScale) {
         if (!this._private__visible || this._private__pane !== pane) {
             this._private__priceAxisViews.clear();
         }
-        var views = [];
+        const views = [];
         if (this._private__pane === pane) {
             views.push(this._private__createPriceAxisViewOnDemand(this._private__priceAxisViews, priceScale, this._private__currentPosPriceProvider));
         }
         return views;
-    };
-    Crosshair.prototype._internal_timeAxisViews = function () {
+    }
+    _internal_timeAxisViews() {
         return this._private__visible ? [this._private__timeAxisView] : [];
-    };
-    Crosshair.prototype._internal_pane = function () {
+    }
+    _internal_pane() {
         return this._private__pane;
-    };
-    Crosshair.prototype._internal_updateAllViews = function () {
+    }
+    _internal_updateAllViews() {
         this._private__paneView._internal_update();
-        this._private__priceAxisViews.forEach(function (value) { return value._internal_update(); });
+        this._private__priceAxisViews.forEach((value) => value._internal_update());
         this._private__timeAxisView._internal_update();
         this._private__markersPaneView._internal_update();
-    };
-    Crosshair.prototype._private__priceScaleByPane = function (pane) {
+    }
+    _private__priceScaleByPane(pane) {
         if (pane && !pane._internal_defaultPriceScale()._internal_isEmpty()) {
             return pane._internal_defaultPriceScale();
         }
         return null;
-    };
-    Crosshair.prototype._private__tryToUpdateViews = function (index, price, pane) {
+    }
+    _private__tryToUpdateViews(index, price, pane) {
         if (this._private__tryToUpdateData(index, price, pane)) {
             this._internal_updateAllViews();
         }
-    };
-    Crosshair.prototype._private__tryToUpdateData = function (newIndex, newPrice, newPane) {
-        var oldX = this._private__x;
-        var oldY = this._private__y;
-        var oldPrice = this._private__price;
-        var oldIndex = this._private__index;
-        var oldPane = this._private__pane;
-        var priceScale = this._private__priceScaleByPane(newPane);
+    }
+    _private__tryToUpdateData(newIndex, newPrice, newPane) {
+        const oldX = this._private__x;
+        const oldY = this._private__y;
+        const oldPrice = this._private__price;
+        const oldIndex = this._private__index;
+        const oldPane = this._private__pane;
+        const priceScale = this._private__priceScaleByPane(newPane);
         this._private__index = newIndex;
         this._private__x = isNaN(newIndex) ? NaN : this._private__model._internal_timeScale()._internal_indexToCoordinate(newIndex);
         this._private__pane = newPane;
-        var firstValue = priceScale !== null ? priceScale._internal_firstValue() : null;
+        const firstValue = priceScale !== null ? priceScale._internal_firstValue() : null;
         if (priceScale !== null && firstValue !== null) {
             this._private__price = newPrice;
             this._private__y = priceScale._internal_priceToCoordinate(newPrice, firstValue);
@@ -1474,53 +1546,52 @@ var Crosshair = /** @class */ (function (_super) {
         }
         return (oldX !== this._private__x || oldY !== this._private__y || oldIndex !== this._private__index ||
             oldPrice !== this._private__price || oldPane !== this._private__pane);
-    };
-    Crosshair.prototype._private__setIndexToLastSeriesBarIndex = function () {
-        var lastIndexes = this._private__model._internal_serieses()
-            .map(function (s) { return s._internal_bars()._internal_lastIndex(); })
+    }
+    _private__setIndexToLastSeriesBarIndex() {
+        const lastIndexes = this._private__model._internal_serieses()
+            .map((s) => s._internal_bars()._internal_lastIndex())
             .filter(notNull);
-        var lastBarIndex = (lastIndexes.length === 0) ? null : Math.max.apply(Math, lastIndexes);
+        const lastBarIndex = (lastIndexes.length === 0) ? null : Math.max(...lastIndexes);
         this._private__index = lastBarIndex !== null ? lastBarIndex : NaN;
-    };
-    Crosshair.prototype._private__createPriceAxisViewOnDemand = function (map, priceScale, valueProvider) {
-        var view = map.get(priceScale);
+    }
+    _private__createPriceAxisViewOnDemand(map, priceScale, valueProvider) {
+        let view = map.get(priceScale);
         if (view === undefined) {
             view = new CrosshairPriceAxisView(this, priceScale, valueProvider);
             map.set(priceScale, view);
         }
         return view;
-    };
-    return Crosshair;
-}(DataSource));
+    }
+}
 
 function isDefaultPriceScale(priceScaleId) {
-    return priceScaleId === "left" /* Left */ || priceScaleId === "right" /* Right */;
+    return priceScaleId === "left" /* DefaultPriceScaleId.Left */ || priceScaleId === "right" /* DefaultPriceScaleId.Right */;
 }
 
 function mergePaneInvalidation(beforeValue, newValue) {
     if (beforeValue === undefined) {
         return newValue;
     }
-    var level = Math.max(beforeValue._internal_level, newValue._internal_level);
-    var autoScale = beforeValue._internal_autoScale || newValue._internal_autoScale;
+    const level = Math.max(beforeValue._internal_level, newValue._internal_level);
+    const autoScale = beforeValue._internal_autoScale || newValue._internal_autoScale;
     return { _internal_level: level, _internal_autoScale: autoScale };
 }
-var InvalidateMask = /** @class */ (function () {
-    function InvalidateMask(globalLevel) {
+class InvalidateMask {
+    constructor(globalLevel) {
         this._private__invalidatedPanes = new Map();
         this._private__timeScaleInvalidations = [];
         this._private__globalLevel = globalLevel;
     }
-    InvalidateMask.prototype._internal_invalidatePane = function (paneIndex, invalidation) {
-        var prevValue = this._private__invalidatedPanes.get(paneIndex);
-        var newValue = mergePaneInvalidation(prevValue, invalidation);
+    _internal_invalidatePane(paneIndex, invalidation) {
+        const prevValue = this._private__invalidatedPanes.get(paneIndex);
+        const newValue = mergePaneInvalidation(prevValue, invalidation);
         this._private__invalidatedPanes.set(paneIndex, newValue);
-    };
-    InvalidateMask.prototype._internal_fullInvalidation = function () {
+    }
+    _internal_fullInvalidation() {
         return this._private__globalLevel;
-    };
-    InvalidateMask.prototype._internal_invalidateForPane = function (paneIndex) {
-        var paneInvalidation = this._private__invalidatedPanes.get(paneIndex);
+    }
+    _internal_invalidateForPane(paneIndex) {
+        const paneInvalidation = this._private__invalidatedPanes.get(paneIndex);
         if (paneInvalidation === undefined) {
             return {
                 _internal_level: this._private__globalLevel,
@@ -1530,62 +1601,89 @@ var InvalidateMask = /** @class */ (function () {
             _internal_level: Math.max(this._private__globalLevel, paneInvalidation._internal_level),
             _internal_autoScale: paneInvalidation._internal_autoScale,
         };
-    };
-    InvalidateMask.prototype._internal_setFitContent = function () {
+    }
+    _internal_setFitContent() {
+        this._internal_stopTimeScaleAnimation();
         // modifies both bar spacing and right offset
-        this._private__timeScaleInvalidations = [{ _internal_type: 0 /* FitContent */ }];
-    };
-    InvalidateMask.prototype._internal_applyRange = function (range) {
+        this._private__timeScaleInvalidations = [{ _internal_type: 0 /* TimeScaleInvalidationType.FitContent */ }];
+    }
+    _internal_applyRange(range) {
+        this._internal_stopTimeScaleAnimation();
         // modifies both bar spacing and right offset
-        this._private__timeScaleInvalidations = [{ _internal_type: 1 /* ApplyRange */, _internal_value: range }];
-    };
-    InvalidateMask.prototype._internal_resetTimeScale = function () {
+        this._private__timeScaleInvalidations = [{ _internal_type: 1 /* TimeScaleInvalidationType.ApplyRange */, _internal_value: range }];
+    }
+    _internal_setTimeScaleAnimation(animation) {
+        this._private__removeTimeScaleAnimation();
+        this._private__timeScaleInvalidations.push({ _internal_type: 5 /* TimeScaleInvalidationType.Animation */, _internal_value: animation });
+    }
+    _internal_stopTimeScaleAnimation() {
+        this._private__removeTimeScaleAnimation();
+        this._private__timeScaleInvalidations.push({ _internal_type: 6 /* TimeScaleInvalidationType.StopAnimation */ });
+    }
+    _internal_resetTimeScale() {
+        this._internal_stopTimeScaleAnimation();
         // modifies both bar spacing and right offset
-        this._private__timeScaleInvalidations = [{ _internal_type: 4 /* Reset */ }];
-    };
-    InvalidateMask.prototype._internal_setBarSpacing = function (barSpacing) {
-        this._private__timeScaleInvalidations.push({ _internal_type: 2 /* ApplyBarSpacing */, _internal_value: barSpacing });
-    };
-    InvalidateMask.prototype._internal_setRightOffset = function (offset) {
-        this._private__timeScaleInvalidations.push({ _internal_type: 3 /* ApplyRightOffset */, _internal_value: offset });
-    };
-    InvalidateMask.prototype._internal_timeScaleInvalidations = function () {
+        this._private__timeScaleInvalidations = [{ _internal_type: 4 /* TimeScaleInvalidationType.Reset */ }];
+    }
+    _internal_setBarSpacing(barSpacing) {
+        this._internal_stopTimeScaleAnimation();
+        this._private__timeScaleInvalidations.push({ _internal_type: 2 /* TimeScaleInvalidationType.ApplyBarSpacing */, _internal_value: barSpacing });
+    }
+    _internal_setRightOffset(offset) {
+        this._internal_stopTimeScaleAnimation();
+        this._private__timeScaleInvalidations.push({ _internal_type: 3 /* TimeScaleInvalidationType.ApplyRightOffset */, _internal_value: offset });
+    }
+    _internal_timeScaleInvalidations() {
         return this._private__timeScaleInvalidations;
-    };
-    InvalidateMask.prototype._internal_merge = function (other) {
-        var _this = this;
-        for (var _i = 0, _a = other._private__timeScaleInvalidations; _i < _a.length; _i++) {
-            var tsInvalidation = _a[_i];
+    }
+    _internal_merge(other) {
+        for (const tsInvalidation of other._private__timeScaleInvalidations) {
             this._private__applyTimeScaleInvalidation(tsInvalidation);
         }
         this._private__globalLevel = Math.max(this._private__globalLevel, other._private__globalLevel);
-        other._private__invalidatedPanes.forEach(function (invalidation, index) {
-            _this._internal_invalidatePane(index, invalidation);
+        other._private__invalidatedPanes.forEach((invalidation, index) => {
+            this._internal_invalidatePane(index, invalidation);
         });
-    };
-    InvalidateMask.prototype._private__applyTimeScaleInvalidation = function (invalidation) {
+    }
+    static _internal_light() {
+        return new InvalidateMask(2 /* InvalidationLevel.Light */);
+    }
+    static _internal_full() {
+        return new InvalidateMask(3 /* InvalidationLevel.Full */);
+    }
+    _private__applyTimeScaleInvalidation(invalidation) {
         switch (invalidation._internal_type) {
-            case 0 /* FitContent */:
+            case 0 /* TimeScaleInvalidationType.FitContent */:
                 this._internal_setFitContent();
                 break;
-            case 1 /* ApplyRange */:
+            case 1 /* TimeScaleInvalidationType.ApplyRange */:
                 this._internal_applyRange(invalidation._internal_value);
                 break;
-            case 2 /* ApplyBarSpacing */:
+            case 2 /* TimeScaleInvalidationType.ApplyBarSpacing */:
                 this._internal_setBarSpacing(invalidation._internal_value);
                 break;
-            case 3 /* ApplyRightOffset */:
+            case 3 /* TimeScaleInvalidationType.ApplyRightOffset */:
                 this._internal_setRightOffset(invalidation._internal_value);
                 break;
-            case 4 /* Reset */:
+            case 4 /* TimeScaleInvalidationType.Reset */:
                 this._internal_resetTimeScale();
                 break;
+            case 5 /* TimeScaleInvalidationType.Animation */:
+                this._internal_setTimeScaleAnimation(invalidation._internal_value);
+                break;
+            case 6 /* TimeScaleInvalidationType.StopAnimation */:
+                this._private__removeTimeScaleAnimation();
         }
-    };
-    return InvalidateMask;
-}());
+    }
+    _private__removeTimeScaleAnimation() {
+        const index = this._private__timeScaleInvalidations.findIndex((inv) => inv._internal_type === 5 /* TimeScaleInvalidationType.Animation */);
+        if (index !== -1) {
+            this._private__timeScaleInvalidations.splice(index, 1);
+        }
+    }
+}
 
-var formatterOptions = {
+const formatterOptions = {
     _internal_decimalSign: '.',
     _internal_decimalSignFractional: '\'',
 };
@@ -1606,11 +1704,11 @@ function numberToStringWithLeadingZero(value, length) {
     if (length === 0) {
         return value.toString();
     }
-    var dummyString = '0000000000000000';
+    const dummyString = '0000000000000000';
     return (dummyString + value.toString()).slice(-length);
 }
-var PriceFormatter = /** @class */ (function () {
-    function PriceFormatter(priceScale, minMove) {
+class PriceFormatter {
+    constructor(priceScale, minMove) {
         if (!minMove) {
             minMove = 1;
         }
@@ -1624,32 +1722,32 @@ var PriceFormatter = /** @class */ (function () {
         this._private__minMove = minMove;
         this._private__calculateDecimal();
     }
-    PriceFormatter.prototype.format = function (price) {
+    format(price) {
         // \u2212 is unicode's minus sign https://www.fileformat.info/info/unicode/char/2212/index.htm
         // we should use it because it has the same width as plus sign +
-        var sign = price < 0 ? '\u2212' : '';
+        const sign = price < 0 ? '\u2212' : '';
         price = Math.abs(price);
         return sign + this._private__formatAsDecimal(price);
-    };
-    PriceFormatter.prototype._private__calculateDecimal = function () {
+    }
+    _private__calculateDecimal() {
         // check if this._base is power of 10
         // for double fractional _fractionalLength if for the main fractional only
         this._internal__fractionalLength = 0;
         if (this._private__priceScale > 0 && this._private__minMove > 0) {
-            var base = this._private__priceScale;
+            let base = this._private__priceScale;
             while (base > 1) {
                 base /= 10;
                 this._internal__fractionalLength++;
             }
         }
-    };
-    PriceFormatter.prototype._private__formatAsDecimal = function (price) {
-        var base = this._private__priceScale / this._private__minMove;
-        var intPart = Math.floor(price);
-        var fracString = '';
-        var fracLength = this._internal__fractionalLength !== undefined ? this._internal__fractionalLength : NaN;
+    }
+    _private__formatAsDecimal(price) {
+        const base = this._private__priceScale / this._private__minMove;
+        let intPart = Math.floor(price);
+        let fracString = '';
+        const fracLength = this._internal__fractionalLength !== undefined ? this._internal__fractionalLength : NaN;
         if (base > 1) {
-            var fracPart = +(Math.round(price * base) - intPart * base).toFixed(this._internal__fractionalLength);
+            let fracPart = +(Math.round(price * base) - intPart * base).toFixed(this._internal__fractionalLength);
             if (fracPart >= base) {
                 fracPart -= base;
                 intPart += 1;
@@ -1665,28 +1763,24 @@ var PriceFormatter = /** @class */ (function () {
             }
         }
         return intPart.toFixed(0) + fracString;
-    };
-    return PriceFormatter;
-}());
+    }
+}
 
-var PercentageFormatter = /** @class */ (function (_super) {
-    __extends(PercentageFormatter, _super);
-    function PercentageFormatter(priceScale) {
-        if (priceScale === void 0) { priceScale = 100; }
-        return _super.call(this, priceScale) || this;
+class PercentageFormatter extends PriceFormatter {
+    constructor(priceScale = 100) {
+        super(priceScale);
     }
-    PercentageFormatter.prototype.format = function (price) {
-        return "".concat(_super.prototype.format.call(this, price), "%");
-    };
-    return PercentageFormatter;
-}(PriceFormatter));
+    format(price) {
+        return `${super.format(price)}%`;
+    }
+}
 
-var VolumeFormatter = /** @class */ (function () {
-    function VolumeFormatter(precision) {
+class VolumeFormatter {
+    constructor(precision) {
         this._private__precision = precision;
     }
-    VolumeFormatter.prototype.format = function (vol) {
-        var sign = '';
+    format(vol) {
+        let sign = '';
         if (vol < 0) {
             sign = '-';
             vol = -vol;
@@ -1705,10 +1799,10 @@ var VolumeFormatter = /** @class */ (function () {
             vol = 1000000 * Math.round(vol / 1000000);
             return sign + this._private__formatNumber(vol / 1000000000) + 'B';
         }
-    };
-    VolumeFormatter.prototype._private__formatNumber = function (value) {
-        var res;
-        var priceScale = Math.pow(10, this._private__precision);
+    }
+    _private__formatNumber(value) {
+        let res;
+        const priceScale = Math.pow(10, this._private__precision);
         value = Math.round(value * priceScale) / priceScale;
         if (value >= 1e-15 && value < 1) {
             res = value.toFixed(this._private__precision).replace(/\.?0+$/, ''); // regex removes trailing zeroes
@@ -1716,196 +1810,192 @@ var VolumeFormatter = /** @class */ (function () {
         else {
             res = String(value);
         }
-        return res.replace(/(\.[1-9]*)0+$/, function (e, p1) { return p1; });
-    };
-    return VolumeFormatter;
-}());
+        return res.replace(/(\.[1-9]*)0+$/, (e, p1) => p1);
+    }
+}
 
-/**
- * BEWARE: The method must be called after beginPath and before stroke/fill/closePath/etc
- */
-function walkLine(ctx, points, lineType, visibleRange) {
-    if (points.length === 0) {
+// eslint-disable-next-line max-params, complexity
+function walkLine(ctx, items, lineType, visibleRange, barWidth, 
+// the values returned by styleGetter are compared using the operator !==,
+// so if styleGetter returns objects, then styleGetter should return the same object for equal styles
+styleGetter, finishStyledArea) {
+    if (items.length === 0 || visibleRange.from >= items.length) {
+        return;
+    }
+    const firstItem = items[visibleRange.from];
+    let currentStyle = styleGetter(ctx, firstItem);
+    let currentStyleFirstItem = firstItem;
+    if (visibleRange.to - visibleRange.from < 2) {
+        const halfBarWidth = barWidth / 2;
+        ctx.beginPath();
+        const item1 = { _internal_x: firstItem._internal_x - halfBarWidth, _internal_y: firstItem._internal_y };
+        const item2 = { _internal_x: firstItem._internal_x + halfBarWidth, _internal_y: firstItem._internal_y };
+        ctx.moveTo(item1._internal_x, item1._internal_y);
+        ctx.lineTo(item2._internal_x, item2._internal_y);
+        finishStyledArea(ctx, currentStyle, item1, item2);
         return;
     }
-    var x = points[visibleRange.from]._internal_x;
-    var y = points[visibleRange.from]._internal_y;
-    ctx.moveTo(x, y);
-    for (var i = visibleRange.from + 1; i < visibleRange.to; ++i) {
-        var currItem = points[i];
-        //  x---x---x   or   x---x   o   or   start
-        if (lineType === 1 /* WithSteps */) {
-            var prevY = points[i - 1]._internal_y;
-            var currX = currItem._internal_x;
-            ctx.lineTo(currX, prevY);
+    const changeStyle = (newStyle, currentItem) => {
+        finishStyledArea(ctx, currentStyle, currentStyleFirstItem, currentItem);
+        ctx.beginPath();
+        currentStyle = newStyle;
+        currentStyleFirstItem = currentItem;
+    };
+    let currentItem = currentStyleFirstItem;
+    ctx.beginPath();
+    ctx.moveTo(firstItem._internal_x, firstItem._internal_y);
+    for (let i = visibleRange.from + 1; i < visibleRange.to; ++i) {
+        currentItem = items[i];
+        const itemStyle = styleGetter(ctx, currentItem);
+        switch (lineType) {
+            case 0 /* LineType.Simple */:
+                ctx.lineTo(currentItem._internal_x, currentItem._internal_y);
+                break;
+            case 1 /* LineType.WithSteps */:
+                ctx.lineTo(currentItem._internal_x, items[i - 1]._internal_y);
+                if (itemStyle !== currentStyle) {
+                    changeStyle(itemStyle, currentItem);
+                    ctx.lineTo(currentItem._internal_x, items[i - 1]._internal_y);
+                }
+                ctx.lineTo(currentItem._internal_x, currentItem._internal_y);
+                break;
+            case 2 /* LineType.Curved */: {
+                const [cp1, cp2] = getControlPoints(items, i - 1, i);
+                ctx.bezierCurveTo(cp1._internal_x, cp1._internal_y, cp2._internal_x, cp2._internal_y, currentItem._internal_x, currentItem._internal_y);
+                break;
+            }
+        }
+        if (lineType !== 1 /* LineType.WithSteps */ && itemStyle !== currentStyle) {
+            changeStyle(itemStyle, currentItem);
+            ctx.moveTo(currentItem._internal_x, currentItem._internal_y);
         }
-        ctx.lineTo(currItem._internal_x, currItem._internal_y);
+    }
+    if (currentStyleFirstItem !== currentItem || currentStyleFirstItem === currentItem && lineType === 1 /* LineType.WithSteps */) {
+        finishStyledArea(ctx, currentStyle, currentStyleFirstItem, currentItem);
     }
 }
-
-var PaneRendererAreaBase = /** @class */ (function (_super) {
-    __extends(PaneRendererAreaBase, _super);
-    function PaneRendererAreaBase() {
-        var _this = _super !== null && _super.apply(this, arguments) || this;
-        _this._internal__data = null;
-        return _this;
+const curveTension = 6;
+function subtract(p1, p2) {
+    return { _internal_x: p1._internal_x - p2._internal_x, _internal_y: p1._internal_y - p2._internal_y };
+}
+function add(p1, p2) {
+    return { _internal_x: p1._internal_x + p2._internal_x, _internal_y: p1._internal_y + p2._internal_y };
+}
+function divide(p1, n) {
+    return { _internal_x: p1._internal_x / n, _internal_y: p1._internal_y / n };
+}
+/**
+ * @returns Two control points that can be used as arguments to {@link CanvasRenderingContext2D.bezierCurveTo} to draw a curved line between `points[fromPointIndex]` and `points[toPointIndex]`.
+ */
+function getControlPoints(points, fromPointIndex, toPointIndex) {
+    const beforeFromPointIndex = Math.max(0, fromPointIndex - 1);
+    const afterToPointIndex = Math.min(points.length - 1, toPointIndex + 1);
+    const cp1 = add(points[fromPointIndex], divide(subtract(points[toPointIndex], points[beforeFromPointIndex]), curveTension));
+    const cp2 = subtract(points[toPointIndex], divide(subtract(points[afterToPointIndex], points[fromPointIndex]), curveTension));
+    return [cp1, cp2];
+}
+
+function finishStyledArea$1(baseLevelCoordinate, ctx, style, areaFirstItem, newAreaFirstItem) {
+    ctx.lineTo(newAreaFirstItem._internal_x, baseLevelCoordinate);
+    ctx.lineTo(areaFirstItem._internal_x, baseLevelCoordinate);
+    ctx.closePath();
+    ctx.fillStyle = style;
+    ctx.fill();
+}
+class PaneRendererAreaBase extends ScaledRenderer {
+    constructor() {
+        super(...arguments);
+        this._internal__data = null;
     }
-    PaneRendererAreaBase.prototype._internal_setData = function (data) {
+    _internal_setData(data) {
         this._internal__data = data;
-    };
-    PaneRendererAreaBase.prototype._internal__drawImpl = function (ctx) {
-        if (this._internal__data === null || this._internal__data._internal_items.length === 0 || this._internal__data._internal_visibleRange === null) {
+    }
+    _internal__drawImpl(ctx) {
+        if (this._internal__data === null) {
+            return;
+        }
+        const { _internal_items: items, _internal_visibleRange: visibleRange, _internal_barWidth: barWidth, _internal_lineWidth: lineWidth, _internal_lineStyle: lineStyle, _internal_lineType: lineType, _internal_baseLevelCoordinate: baseLevelCoordinate } = this._internal__data;
+        if (visibleRange === null) {
             return;
         }
         ctx.lineCap = 'butt';
         ctx.lineJoin = 'round';
-        ctx.lineWidth = this._internal__data._internal_lineWidth;
-        setLineStyle(ctx, this._internal__data._internal_lineStyle);
+        ctx.lineWidth = lineWidth;
+        setLineStyle(ctx, lineStyle);
         // walk lines with width=1 to have more accurate gradient's filling
         ctx.lineWidth = 1;
-        ctx.beginPath();
-        if (this._internal__data._internal_items.length === 1) {
-            var point = this._internal__data._internal_items[0];
-            var halfBarWidth = this._internal__data._internal_barWidth / 2;
-            ctx.moveTo(point._internal_x - halfBarWidth, this._internal__data._internal_baseLevelCoordinate);
-            ctx.lineTo(point._internal_x - halfBarWidth, point._internal_y);
-            ctx.lineTo(point._internal_x + halfBarWidth, point._internal_y);
-            ctx.lineTo(point._internal_x + halfBarWidth, this._internal__data._internal_baseLevelCoordinate);
-        }
-        else {
-            ctx.moveTo(this._internal__data._internal_items[this._internal__data._internal_visibleRange.from]._internal_x, this._internal__data._internal_baseLevelCoordinate);
-            ctx.lineTo(this._internal__data._internal_items[this._internal__data._internal_visibleRange.from]._internal_x, this._internal__data._internal_items[this._internal__data._internal_visibleRange.from]._internal_y);
-            walkLine(ctx, this._internal__data._internal_items, this._internal__data._internal_lineType, this._internal__data._internal_visibleRange);
-            if (this._internal__data._internal_visibleRange.to > this._internal__data._internal_visibleRange.from) {
-                ctx.lineTo(this._internal__data._internal_items[this._internal__data._internal_visibleRange.to - 1]._internal_x, this._internal__data._internal_baseLevelCoordinate);
-                ctx.lineTo(this._internal__data._internal_items[this._internal__data._internal_visibleRange.from]._internal_x, this._internal__data._internal_baseLevelCoordinate);
-            }
-        }
-        ctx.closePath();
-        ctx.fillStyle = this._internal__fillStyle(ctx);
-        ctx.fill();
-    };
-    return PaneRendererAreaBase;
-}(ScaledRenderer));
-var PaneRendererArea = /** @class */ (function (_super) {
-    __extends(PaneRendererArea, _super);
-    function PaneRendererArea() {
-        return _super !== null && _super.apply(this, arguments) || this;
-    }
-    PaneRendererArea.prototype._internal__fillStyle = function (ctx) {
+        walkLine(ctx, items, lineType, visibleRange, barWidth, this._internal__fillStyle.bind(this), finishStyledArea$1.bind(null, baseLevelCoordinate));
+    }
+}
+
+class PaneRendererArea extends PaneRendererAreaBase {
+    constructor() {
+        super(...arguments);
+        this._private__fillCache = null;
+    }
+    _internal__fillStyle(ctx, item) {
         // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
-        var data = this._internal__data;
-        var gradient = ctx.createLinearGradient(0, 0, 0, data._internal_bottom);
-        gradient.addColorStop(0, data._internal_topColor);
-        gradient.addColorStop(1, data._internal_bottomColor);
-        return gradient;
-    };
-    return PaneRendererArea;
-}(PaneRendererAreaBase));
+        const data = this._internal__data;
+        const { _internal_topColor: topColor, _internal_bottomColor: bottomColor } = item;
+        const bottom = data._internal_bottom;
+        if (this._private__fillCache !== null &&
+            this._private__fillCache.topColor === topColor &&
+            this._private__fillCache.bottomColor === bottomColor &&
+            this._private__fillCache.bottom === bottom) {
+            return this._private__fillCache.fillStyle;
+        }
+        const fillStyle = ctx.createLinearGradient(0, 0, 0, bottom);
+        fillStyle.addColorStop(0, topColor);
+        fillStyle.addColorStop(1, bottomColor);
+        this._private__fillCache = { topColor, bottomColor, fillStyle, bottom };
+        return fillStyle;
+    }
+}
 
-var PaneRendererLineBase = /** @class */ (function (_super) {
-    __extends(PaneRendererLineBase, _super);
-    function PaneRendererLineBase() {
-        var _this = _super !== null && _super.apply(this, arguments) || this;
-        _this._internal__data = null;
-        return _this;
+function finishStyledArea(ctx, style) {
+    ctx.strokeStyle = style;
+    ctx.stroke();
+}
+class PaneRendererLineBase extends ScaledRenderer {
+    constructor() {
+        super(...arguments);
+        this._internal__data = null;
     }
-    PaneRendererLineBase.prototype._internal_setData = function (data) {
+    _internal_setData(data) {
         this._internal__data = data;
-    };
-    PaneRendererLineBase.prototype._internal__drawImpl = function (ctx) {
-        if (this._internal__data === null || this._internal__data._internal_items.length === 0 || this._internal__data._internal_visibleRange === null) {
+    }
+    _internal__drawImpl(ctx) {
+        if (this._internal__data === null) {
+            return;
+        }
+        const { _internal_items: items, _internal_visibleRange: visibleRange, _internal_barWidth: barWidth, _internal_lineType: lineType, _internal_lineWidth: lineWidth, _internal_lineStyle: lineStyle } = this._internal__data;
+        if (visibleRange === null) {
             return;
         }
         ctx.lineCap = 'butt';
-        ctx.lineWidth = this._internal__data._internal_lineWidth;
-        setLineStyle(ctx, this._internal__data._internal_lineStyle);
-        ctx.strokeStyle = this._internal__strokeStyle(ctx);
+        ctx.lineWidth = lineWidth;
+        setLineStyle(ctx, lineStyle);
         ctx.lineJoin = 'round';
-        if (this._internal__data._internal_items.length === 1) {
-            ctx.beginPath();
-            var point = this._internal__data._internal_items[0];
-            ctx.moveTo(point._internal_x - this._internal__data._internal_barWidth / 2, point._internal_y);
-            ctx.lineTo(point._internal_x + this._internal__data._internal_barWidth / 2, point._internal_y);
-            if (point._internal_color !== undefined) {
-                ctx.strokeStyle = point._internal_color;
-            }
-            ctx.stroke();
-        }
-        else {
-            this._internal__drawLine(ctx, this._internal__data);
-        }
-    };
-    PaneRendererLineBase.prototype._internal__drawLine = function (ctx, data) {
-        ctx.beginPath();
-        walkLine(ctx, data._internal_items, data._internal_lineType, data._internal_visibleRange);
-        ctx.stroke();
-    };
-    return PaneRendererLineBase;
-}(ScaledRenderer));
-var PaneRendererLine = /** @class */ (function (_super) {
-    __extends(PaneRendererLine, _super);
-    function PaneRendererLine() {
-        return _super !== null && _super.apply(this, arguments) || this;
+        walkLine(ctx, items, lineType, visibleRange, barWidth, this._internal__strokeStyle.bind(this), finishStyledArea);
     }
-    /**
-     * Similar to {@link walkLine}, but supports color changes
-     */
-    PaneRendererLine.prototype._internal__drawLine = function (ctx, data) {
-        var _a, _b;
-        var items = data._internal_items, visibleRange = data._internal_visibleRange, lineType = data._internal_lineType, lineColor = data._internal_lineColor;
-        if (items.length === 0 || visibleRange === null) {
-            return;
-        }
-        ctx.beginPath();
-        var firstItem = items[visibleRange.from];
-        ctx.moveTo(firstItem._internal_x, firstItem._internal_y);
-        var prevStrokeStyle = (_a = firstItem._internal_color) !== null && _a !== void 0 ? _a : lineColor;
-        ctx.strokeStyle = prevStrokeStyle;
-        var changeColor = function (color) {
-            ctx.stroke();
-            ctx.beginPath();
-            ctx.strokeStyle = color;
-            prevStrokeStyle = color;
-        };
-        for (var i = visibleRange.from + 1; i < visibleRange.to; ++i) {
-            var currItem = items[i];
-            var prevItem = items[i - 1];
-            var currentStrokeStyle = (_b = currItem._internal_color) !== null && _b !== void 0 ? _b : lineColor;
-            if (lineType === 1 /* WithSteps */) {
-                ctx.lineTo(currItem._internal_x, prevItem._internal_y);
-                if (currentStrokeStyle !== prevStrokeStyle) {
-                    changeColor(currentStrokeStyle);
-                    ctx.moveTo(currItem._internal_x, prevItem._internal_y);
-                }
-            }
-            ctx.lineTo(currItem._internal_x, currItem._internal_y);
-            if (lineType !== 1 /* WithSteps */ && currentStrokeStyle !== prevStrokeStyle) {
-                changeColor(currentStrokeStyle);
-                ctx.moveTo(currItem._internal_x, currItem._internal_y);
-            }
-        }
-        ctx.stroke();
-    };
-    PaneRendererLine.prototype._internal__strokeStyle = function () {
-        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
-        return this._internal__data._internal_lineColor;
-    };
-    return PaneRendererLine;
-}(PaneRendererLineBase));
+}
+
+class PaneRendererLine extends PaneRendererLineBase {
+    _internal__strokeStyle(ctx, item) {
+        return item._internal_lineColor;
+    }
+}
 
 /**
  * Binary function that accepts two arguments (the first of the type of array elements, and the second is always val), and returns a value convertible to bool.
  * The value returned indicates whether the first argument is considered to go before the second.
  * The function shall not modify any of its arguments.
  */
-function lowerbound(arr, value, compare, start, to) {
-    if (start === void 0) { start = 0; }
-    if (to === void 0) { to = arr.length; }
-    var count = to - start;
+function lowerbound(arr, value, compare, start = 0, to = arr.length) {
+    let count = to - start;
     while (0 < count) {
-        var count2 = (count >> 1);
-        var mid = start + count2;
+        const count2 = (count >> 1);
+        const mid = start + count2;
         if (compare(arr[mid], value)) {
             start = mid + 1;
             count -= count2 + 1;
@@ -1916,13 +2006,11 @@ function lowerbound(arr, value, compare, start, to) {
     }
     return start;
 }
-function upperbound(arr, value, compare, start, to) {
-    if (start === void 0) { start = 0; }
-    if (to === void 0) { to = arr.length; }
-    var count = to - start;
+function upperbound(arr, value, compare, start = 0, to = arr.length) {
+    let count = to - start;
     while (0 < count) {
-        var count2 = (count >> 1);
-        var mid = start + count2;
+        const count2 = (count >> 1);
+        const mid = start + count2;
         if (!(compare(value, arr[mid]))) {
             start = mid + 1;
             count -= count2 + 1;
@@ -1941,15 +2029,15 @@ function upperBoundItemsCompare(time, item) {
     return time < item._internal_time;
 }
 function visibleTimedValues(items, range, extendedRange) {
-    var firstBar = range._internal_left();
-    var lastBar = range._internal_right();
-    var from = lowerbound(items, firstBar, lowerBoundItemsCompare);
-    var to = upperbound(items, lastBar, upperBoundItemsCompare);
+    const firstBar = range._internal_left();
+    const lastBar = range._internal_right();
+    const from = lowerbound(items, firstBar, lowerBoundItemsCompare);
+    const to = upperbound(items, lastBar, upperBoundItemsCompare);
     if (!extendedRange) {
-        return { from: from, to: to };
+        return { from, to };
     }
-    var extendedFrom = from;
-    var extendedTo = to;
+    let extendedFrom = from;
+    let extendedTo = to;
     if (from > 0 && from < items.length && items[from]._internal_time >= firstBar) {
         extendedFrom = from - 1;
     }
@@ -1959,8 +2047,8 @@ function visibleTimedValues(items, range, extendedRange) {
     return { from: extendedFrom, to: extendedTo };
 }
 
-var SeriesPaneViewBase = /** @class */ (function () {
-    function SeriesPaneViewBase(series, model, extendedVisibleRange) {
+class SeriesPaneViewBase {
+    constructor(series, model, extendedVisibleRange) {
         this._internal__invalidated = true;
         this._internal__dataInvalidated = true;
         this._internal__optionsInvalidated = true;
@@ -1970,7 +2058,7 @@ var SeriesPaneViewBase = /** @class */ (function () {
         this._internal__model = model;
         this._private__extendedVisibleRange = extendedVisibleRange;
     }
-    SeriesPaneViewBase.prototype._internal_update = function (updateType) {
+    _internal_update(updateType) {
         this._internal__invalidated = true;
         if (updateType === 'data') {
             this._internal__dataInvalidated = true;
@@ -1978,101 +2066,103 @@ var SeriesPaneViewBase = /** @class */ (function () {
         if (updateType === 'options') {
             this._internal__optionsInvalidated = true;
         }
-    };
-    SeriesPaneViewBase.prototype._internal__makeValid = function () {
+    }
+    _internal_renderer(height, width) {
+        if (!this._internal__series._internal_visible()) {
+            return null;
+        }
+        this._private__makeValid(width, height);
+        return this._internal__itemsVisibleRange === null ? null : this._internal__renderer;
+    }
+    _internal__updateOptions() {
+        this._internal__items = this._internal__items.map((item) => (Object.assign(Object.assign({}, item), this._internal__series._internal_barColorer()._internal_barStyle(item._internal_time))));
+    }
+    _internal__clearVisibleRange() {
+        this._internal__itemsVisibleRange = null;
+    }
+    _private__makeValid(width, height) {
         if (this._internal__dataInvalidated) {
             this._internal__fillRawPoints();
             this._internal__dataInvalidated = false;
         }
-        if (this._internal__invalidated) {
-            this._internal__updatePoints();
-            this._internal__invalidated = false;
-        }
         if (this._internal__optionsInvalidated) {
             this._internal__updateOptions();
             this._internal__optionsInvalidated = false;
         }
-    };
-    SeriesPaneViewBase.prototype._internal__clearVisibleRange = function () {
-        this._internal__itemsVisibleRange = null;
-    };
-    SeriesPaneViewBase.prototype._internal__updatePoints = function () {
-        var priceScale = this._internal__series._internal_priceScale();
-        var timeScale = this._internal__model._internal_timeScale();
+        if (this._internal__invalidated) {
+            this._private__makeValidImpl(width, height);
+            this._internal__invalidated = false;
+        }
+    }
+    _private__makeValidImpl(width, height) {
+        const priceScale = this._internal__series._internal_priceScale();
+        const timeScale = this._internal__model._internal_timeScale();
         this._internal__clearVisibleRange();
         if (timeScale._internal_isEmpty() || priceScale._internal_isEmpty()) {
             return;
         }
-        var visibleBars = timeScale._internal_visibleStrictRange();
+        const visibleBars = timeScale._internal_visibleStrictRange();
         if (visibleBars === null) {
             return;
         }
         if (this._internal__series._internal_bars()._internal_size() === 0) {
             return;
         }
-        var firstValue = this._internal__series._internal_firstValue();
+        const firstValue = this._internal__series._internal_firstValue();
         if (firstValue === null) {
             return;
         }
         this._internal__itemsVisibleRange = visibleTimedValues(this._internal__items, visibleBars, this._private__extendedVisibleRange);
         this._internal__convertToCoordinates(priceScale, timeScale, firstValue._internal_value);
-    };
-    return SeriesPaneViewBase;
-}());
+        this._internal__prepareRendererData(width, height);
+    }
+}
 
-var LinePaneViewBase = /** @class */ (function (_super) {
-    __extends(LinePaneViewBase, _super);
-    function LinePaneViewBase(series, model) {
-        return _super.call(this, series, model, true) || this;
+class LinePaneViewBase extends SeriesPaneViewBase {
+    constructor(series, model) {
+        super(series, model, true);
     }
-    LinePaneViewBase.prototype._internal__convertToCoordinates = function (priceScale, timeScale, firstValue) {
+    _internal__convertToCoordinates(priceScale, timeScale, firstValue) {
         timeScale._internal_indexesToCoordinates(this._internal__items, undefinedIfNull(this._internal__itemsVisibleRange));
         priceScale._internal_pointsArrayToCoordinates(this._internal__items, firstValue, undefinedIfNull(this._internal__itemsVisibleRange));
-    };
-    LinePaneViewBase.prototype._internal__createRawItemBase = function (time, price) {
+    }
+    _internal__createRawItemBase(time, price) {
         return {
             _internal_time: time,
             _internal_price: price,
             _internal_x: NaN,
             _internal_y: NaN,
         };
-    };
-    LinePaneViewBase.prototype._internal__updateOptions = function () { };
-    LinePaneViewBase.prototype._internal__fillRawPoints = function () {
-        var _this = this;
-        var colorer = this._internal__series._internal_barColorer();
-        this._internal__items = this._internal__series._internal_bars()._internal_rows().map(function (row) {
-            var value = row._internal_value[3 /* Close */];
-            return _this._internal__createRawItem(row._internal_index, value, colorer);
+    }
+    _internal__fillRawPoints() {
+        const colorer = this._internal__series._internal_barColorer();
+        this._internal__items = this._internal__series._internal_bars()._internal_rows().map((row) => {
+            const value = row._internal_value[3 /* PlotRowValueIndex.Close */];
+            return this._internal__createRawItem(row._internal_index, value, colorer);
         });
-    };
-    return LinePaneViewBase;
-}(SeriesPaneViewBase));
-
-var SeriesAreaPaneView = /** @class */ (function (_super) {
-    __extends(SeriesAreaPaneView, _super);
-    function SeriesAreaPaneView(series, model) {
-        var _this = _super.call(this, series, model) || this;
-        _this._private__renderer = new CompositeRenderer();
-        _this._private__areaRenderer = new PaneRendererArea();
-        _this._private__lineRenderer = new PaneRendererLine();
-        _this._private__renderer._internal_setRenderers([_this._private__areaRenderer, _this._private__lineRenderer]);
-        return _this;
-    }
-    SeriesAreaPaneView.prototype._internal_renderer = function (height, width) {
-        if (!this._internal__series._internal_visible()) {
-            return null;
-        }
-        var areaStyleProperties = this._internal__series._internal_options();
-        this._internal__makeValid();
+    }
+}
+
+class SeriesAreaPaneView extends LinePaneViewBase {
+    constructor(series, model) {
+        super(series, model);
+        this._internal__renderer = new CompositeRenderer();
+        this._private__areaRenderer = new PaneRendererArea();
+        this._private__lineRenderer = new PaneRendererLine();
+        this._internal__renderer._internal_setRenderers([this._private__areaRenderer, this._private__lineRenderer]);
+    }
+    _internal__createRawItem(time, price, colorer) {
+        return Object.assign(Object.assign({}, this._internal__createRawItemBase(time, price)), colorer._internal_barStyle(time));
+    }
+    _internal__prepareRendererData(width, height) {
+        const areaStyleProperties = this._internal__series._internal_options();
+        const baseLevelCoordinate = (areaStyleProperties.invertFilledArea ? 0 : height);
         this._private__areaRenderer._internal_setData({
             _internal_lineType: areaStyleProperties.lineType,
             _internal_items: this._internal__items,
             _internal_lineStyle: areaStyleProperties.lineStyle,
             _internal_lineWidth: areaStyleProperties.lineWidth,
-            _internal_topColor: areaStyleProperties.topColor,
-            _internal_bottomColor: areaStyleProperties.bottomColor,
-            _internal_baseLevelCoordinate: height,
+            _internal_baseLevelCoordinate: baseLevelCoordinate,
             _internal_bottom: height,
             _internal_visibleRange: this._internal__itemsVisibleRange,
             _internal_barWidth: this._internal__model._internal_timeScale()._internal_barSpacing(),
@@ -2080,50 +2170,44 @@ var SeriesAreaPaneView = /** @class */ (function (_super) {
         this._private__lineRenderer._internal_setData({
             _internal_lineType: areaStyleProperties.lineType,
             _internal_items: this._internal__items,
-            _internal_lineColor: areaStyleProperties.lineColor,
             _internal_lineStyle: areaStyleProperties.lineStyle,
             _internal_lineWidth: areaStyleProperties.lineWidth,
             _internal_visibleRange: this._internal__itemsVisibleRange,
             _internal_barWidth: this._internal__model._internal_timeScale()._internal_barSpacing(),
         });
-        return this._private__renderer;
-    };
-    SeriesAreaPaneView.prototype._internal__createRawItem = function (time, price) {
-        return this._internal__createRawItemBase(time, price);
-    };
-    return SeriesAreaPaneView;
-}(LinePaneViewBase));
+    }
+}
 
 function optimalBarWidth(barSpacing, pixelRatio) {
     return Math.floor(barSpacing * 0.3 * pixelRatio);
 }
 function optimalCandlestickWidth(barSpacing, pixelRatio) {
-    var barSpacingSpecialCaseFrom = 2.5;
-    var barSpacingSpecialCaseTo = 4;
-    var barSpacingSpecialCaseCoeff = 3;
+    const barSpacingSpecialCaseFrom = 2.5;
+    const barSpacingSpecialCaseTo = 4;
+    const barSpacingSpecialCaseCoeff = 3;
     if (barSpacing >= barSpacingSpecialCaseFrom && barSpacing <= barSpacingSpecialCaseTo) {
         return Math.floor(barSpacingSpecialCaseCoeff * pixelRatio);
     }
     // coeff should be 1 on small barspacing and go to 0.8 while groing bar spacing
-    var barSpacingReducingCoeff = 0.2;
-    var coeff = 1 - barSpacingReducingCoeff * Math.atan(Math.max(barSpacingSpecialCaseTo, barSpacing) - barSpacingSpecialCaseTo) / (Math.PI * 0.5);
-    var res = Math.floor(barSpacing * coeff * pixelRatio);
-    var scaledBarSpacing = Math.floor(barSpacing * pixelRatio);
-    var optimal = Math.min(res, scaledBarSpacing);
+    const barSpacingReducingCoeff = 0.2;
+    const coeff = 1 - barSpacingReducingCoeff * Math.atan(Math.max(barSpacingSpecialCaseTo, barSpacing) - barSpacingSpecialCaseTo) / (Math.PI * 0.5);
+    const res = Math.floor(barSpacing * coeff * pixelRatio);
+    const scaledBarSpacing = Math.floor(barSpacing * pixelRatio);
+    const optimal = Math.min(res, scaledBarSpacing);
     return Math.max(Math.floor(pixelRatio), optimal);
 }
 
-var PaneRendererBars = /** @class */ (function () {
-    function PaneRendererBars() {
+class PaneRendererBars {
+    constructor() {
         this._private__data = null;
         this._private__barWidth = 0;
         this._private__barLineWidth = 0;
     }
-    PaneRendererBars.prototype._internal_setData = function (data) {
+    _internal_setData(data) {
         this._private__data = data;
-    };
+    }
     // eslint-disable-next-line complexity
-    PaneRendererBars.prototype._internal_draw = function (ctx, pixelRatio, isHovered, hitTestData) {
+    _internal_draw(ctx, pixelRatio, isHovered, hitTestData) {
         if (this._private__data === null || this._private__data._internal_bars.length === 0 || this._private__data._internal_visibleRange === null) {
             return;
         }
@@ -2133,47 +2217,47 @@ var PaneRendererBars = /** @class */ (function () {
         // if this value is even, we have to make bars' width even
         // in order of keeping crosshair-over-bar drawing symmetric
         if (this._private__barWidth >= 2) {
-            var lineWidth = Math.max(1, Math.floor(pixelRatio));
+            const lineWidth = Math.max(1, Math.floor(pixelRatio));
             if ((lineWidth % 2) !== (this._private__barWidth % 2)) {
                 this._private__barWidth--;
             }
         }
         // if scale is compressed, bar could become less than 1 CSS pixel
         this._private__barLineWidth = this._private__data._internal_thinBars ? Math.min(this._private__barWidth, Math.floor(pixelRatio)) : this._private__barWidth;
-        var prevColor = null;
-        var drawOpenClose = this._private__barLineWidth <= this._private__barWidth && this._private__data._internal_barSpacing >= Math.floor(1.5 * pixelRatio);
-        for (var i = this._private__data._internal_visibleRange.from; i < this._private__data._internal_visibleRange.to; ++i) {
-            var bar = this._private__data._internal_bars[i];
-            if (prevColor !== bar._internal_color) {
-                ctx.fillStyle = bar._internal_color;
-                prevColor = bar._internal_color;
-            }
-            var bodyWidthHalf = Math.floor(this._private__barLineWidth * 0.5);
-            var bodyCenter = Math.round(bar._internal_x * pixelRatio);
-            var bodyLeft = bodyCenter - bodyWidthHalf;
-            var bodyWidth = this._private__barLineWidth;
-            var bodyRight = bodyLeft + bodyWidth - 1;
-            var high = Math.min(bar._internal_highY, bar._internal_lowY);
-            var low = Math.max(bar._internal_highY, bar._internal_lowY);
-            var bodyTop = Math.round(high * pixelRatio) - bodyWidthHalf;
-            var bodyBottom = Math.round(low * pixelRatio) + bodyWidthHalf;
-            var bodyHeight = Math.max((bodyBottom - bodyTop), this._private__barLineWidth);
+        let prevColor = null;
+        const drawOpenClose = this._private__barLineWidth <= this._private__barWidth && this._private__data._internal_barSpacing >= Math.floor(1.5 * pixelRatio);
+        for (let i = this._private__data._internal_visibleRange.from; i < this._private__data._internal_visibleRange.to; ++i) {
+            const bar = this._private__data._internal_bars[i];
+            if (prevColor !== bar._internal_barColor) {
+                ctx.fillStyle = bar._internal_barColor;
+                prevColor = bar._internal_barColor;
+            }
+            const bodyWidthHalf = Math.floor(this._private__barLineWidth * 0.5);
+            const bodyCenter = Math.round(bar._internal_x * pixelRatio);
+            const bodyLeft = bodyCenter - bodyWidthHalf;
+            const bodyWidth = this._private__barLineWidth;
+            const bodyRight = bodyLeft + bodyWidth - 1;
+            const high = Math.min(bar._internal_highY, bar._internal_lowY);
+            const low = Math.max(bar._internal_highY, bar._internal_lowY);
+            const bodyTop = Math.round(high * pixelRatio) - bodyWidthHalf;
+            const bodyBottom = Math.round(low * pixelRatio) + bodyWidthHalf;
+            const bodyHeight = Math.max((bodyBottom - bodyTop), this._private__barLineWidth);
             ctx.fillRect(bodyLeft, bodyTop, bodyWidth, bodyHeight);
-            var sideWidth = Math.ceil(this._private__barWidth * 1.5);
+            const sideWidth = Math.ceil(this._private__barWidth * 1.5);
             if (drawOpenClose) {
                 if (this._private__data._internal_openVisible) {
-                    var openLeft = bodyCenter - sideWidth;
-                    var openTop = Math.max(bodyTop, Math.round(bar._internal_openY * pixelRatio) - bodyWidthHalf);
-                    var openBottom = openTop + bodyWidth - 1;
+                    const openLeft = bodyCenter - sideWidth;
+                    let openTop = Math.max(bodyTop, Math.round(bar._internal_openY * pixelRatio) - bodyWidthHalf);
+                    let openBottom = openTop + bodyWidth - 1;
                     if (openBottom > bodyTop + bodyHeight - 1) {
                         openBottom = bodyTop + bodyHeight - 1;
                         openTop = openBottom - bodyWidth + 1;
                     }
                     ctx.fillRect(openLeft, openTop, bodyLeft - openLeft, openBottom - openTop + 1);
                 }
-                var closeRight = bodyCenter + sideWidth;
-                var closeTop = Math.max(bodyTop, Math.round(bar._internal_closeY * pixelRatio) - bodyWidthHalf);
-                var closeBottom = closeTop + bodyWidth - 1;
+                const closeRight = bodyCenter + sideWidth;
+                let closeTop = Math.max(bodyTop, Math.round(bar._internal_closeY * pixelRatio) - bodyWidthHalf);
+                let closeBottom = closeTop + bodyWidth - 1;
                 if (closeBottom > bodyTop + bodyHeight - 1) {
                     closeBottom = bodyTop + bodyHeight - 1;
                     closeTop = closeBottom - bodyWidth + 1;
@@ -2181,79 +2265,60 @@ var PaneRendererBars = /** @class */ (function () {
                 ctx.fillRect(bodyRight + 1, closeTop, closeRight - bodyRight, closeBottom - closeTop + 1);
             }
         }
-    };
-    PaneRendererBars.prototype._private__calcBarWidth = function (pixelRatio) {
-        var limit = Math.floor(pixelRatio);
+    }
+    _private__calcBarWidth(pixelRatio) {
+        const limit = Math.floor(pixelRatio);
         return Math.max(limit, Math.floor(optimalBarWidth(ensureNotNull(this._private__data)._internal_barSpacing, pixelRatio)));
-    };
-    return PaneRendererBars;
-}());
+    }
+}
 
-var BarsPaneViewBase = /** @class */ (function (_super) {
-    __extends(BarsPaneViewBase, _super);
-    function BarsPaneViewBase(series, model) {
-        return _super.call(this, series, model, false) || this;
+class BarsPaneViewBase extends SeriesPaneViewBase {
+    constructor(series, model) {
+        super(series, model, false);
     }
-    BarsPaneViewBase.prototype._internal__convertToCoordinates = function (priceScale, timeScale, firstValue) {
+    _internal__convertToCoordinates(priceScale, timeScale, firstValue) {
         timeScale._internal_indexesToCoordinates(this._internal__items, undefinedIfNull(this._internal__itemsVisibleRange));
         priceScale._internal_barPricesToCoordinates(this._internal__items, firstValue, undefinedIfNull(this._internal__itemsVisibleRange));
-    };
-    BarsPaneViewBase.prototype._internal__createDefaultItem = function (time, bar, colorer) {
+    }
+    _internal__createDefaultItem(time, bar, colorer) {
         return {
             _internal_time: time,
-            open: bar._internal_value[0 /* Open */],
-            high: bar._internal_value[1 /* High */],
-            low: bar._internal_value[2 /* Low */],
-            close: bar._internal_value[3 /* Close */],
+            _internal_open: bar._internal_value[0 /* PlotRowValueIndex.Open */],
+            _internal_high: bar._internal_value[1 /* PlotRowValueIndex.High */],
+            _internal_low: bar._internal_value[2 /* PlotRowValueIndex.Low */],
+            _internal_close: bar._internal_value[3 /* PlotRowValueIndex.Close */],
             _internal_x: NaN,
             _internal_openY: NaN,
             _internal_highY: NaN,
             _internal_lowY: NaN,
             _internal_closeY: NaN,
         };
-    };
-    BarsPaneViewBase.prototype._internal__fillRawPoints = function () {
-        var _this = this;
-        var colorer = this._internal__series._internal_barColorer();
-        this._internal__items = this._internal__series._internal_bars()._internal_rows().map(function (row) { return _this._internal__createRawItem(row._internal_index, row, colorer); });
-    };
-    return BarsPaneViewBase;
-}(SeriesPaneViewBase));
+    }
+    _internal__fillRawPoints() {
+        const colorer = this._internal__series._internal_barColorer();
+        this._internal__items = this._internal__series._internal_bars()._internal_rows().map((row) => this._internal__createRawItem(row._internal_index, row, colorer));
+    }
+}
 
-var SeriesBarsPaneView = /** @class */ (function (_super) {
-    __extends(SeriesBarsPaneView, _super);
-    function SeriesBarsPaneView() {
-        var _this = _super !== null && _super.apply(this, arguments) || this;
-        _this._private__renderer = new PaneRendererBars();
-        return _this;
+class SeriesBarsPaneView extends BarsPaneViewBase {
+    constructor() {
+        super(...arguments);
+        this._internal__renderer = new PaneRendererBars();
     }
-    SeriesBarsPaneView.prototype._internal_renderer = function (height, width) {
-        if (!this._internal__series._internal_visible()) {
-            return null;
-        }
-        var barStyleProps = this._internal__series._internal_options();
-        this._internal__makeValid();
-        var data = {
+    _internal__createRawItem(time, bar, colorer) {
+        return Object.assign(Object.assign({}, this._internal__createDefaultItem(time, bar, colorer)), colorer._internal_barStyle(time));
+    }
+    _internal__prepareRendererData() {
+        const barStyleProps = this._internal__series._internal_options();
+        this._internal__renderer._internal_setData({
             _internal_bars: this._internal__items,
             _internal_barSpacing: this._internal__model._internal_timeScale()._internal_barSpacing(),
             _internal_openVisible: barStyleProps.openVisible,
             _internal_thinBars: barStyleProps.thinBars,
             _internal_visibleRange: this._internal__itemsVisibleRange,
-        };
-        this._private__renderer._internal_setData(data);
-        return this._private__renderer;
-    };
-    SeriesBarsPaneView.prototype._internal__updateOptions = function () {
-        var _this = this;
-        this._internal__items.forEach(function (item) {
-            item._internal_color = _this._internal__series._internal_barColorer()._internal_barStyle(item._internal_time)._internal_barColor;
         });
-    };
-    SeriesBarsPaneView.prototype._internal__createRawItem = function (time, bar, colorer) {
-        return __assign(__assign({}, this._internal__createDefaultItem(time, bar, colorer)), { _internal_color: colorer._internal_barStyle(time)._internal_barColor });
-    };
-    return SeriesBarsPaneView;
-}(BarsPaneViewBase));
+    }
+}
 
 function clamp(value, minVal, maxVal) {
     return Math.min(Math.max(value, minVal), maxVal);
@@ -2262,7 +2327,7 @@ function isBaseDecimal(value) {
     if (value < 0) {
         return false;
     }
-    for (var current = value; current > 1; current /= 10) {
+    for (let current = value; current > 1; current /= 10) {
         if ((current % 10) !== 0) {
             return false;
         }
@@ -2285,8 +2350,8 @@ function min(arr) {
     if (arr.length < 1) {
         throw Error('array is empty');
     }
-    var minVal = arr[0];
-    for (var i = 1; i < arr.length; ++i) {
+    let minVal = arr[0];
+    for (let i = 1; i < arr.length; ++i) {
         if (arr[i] < minVal) {
             minVal = arr[i];
         }
@@ -2294,82 +2359,110 @@ function min(arr) {
     return minVal;
 }
 function ceiledEven(x) {
-    var ceiled = Math.ceil(x);
+    const ceiled = Math.ceil(x);
     return (ceiled % 2 !== 0) ? ceiled - 1 : ceiled;
 }
 function ceiledOdd(x) {
-    var ceiled = Math.ceil(x);
+    const ceiled = Math.ceil(x);
     return (ceiled % 2 === 0) ? ceiled - 1 : ceiled;
 }
 
-var PaneRendererBaselineArea = /** @class */ (function (_super) {
-    __extends(PaneRendererBaselineArea, _super);
-    function PaneRendererBaselineArea() {
-        return _super !== null && _super.apply(this, arguments) || this;
+class PaneRendererBaselineArea extends PaneRendererAreaBase {
+    constructor() {
+        super(...arguments);
+        this._private__fillCache = null;
     }
-    PaneRendererBaselineArea.prototype._internal__fillStyle = function (ctx) {
+    _internal__fillStyle(ctx, item) {
         // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
-        var data = this._internal__data;
-        var gradient = ctx.createLinearGradient(0, 0, 0, data._internal_bottom);
-        var baselinePercent = clamp(data._internal_baseLevelCoordinate / data._internal_bottom, 0, 1);
-        gradient.addColorStop(0, data._internal_topFillColor1);
-        gradient.addColorStop(baselinePercent, data._internal_topFillColor2);
-        gradient.addColorStop(baselinePercent, data._internal_bottomFillColor1);
-        gradient.addColorStop(1, data._internal_bottomFillColor2);
-        return gradient;
-    };
-    return PaneRendererBaselineArea;
-}(PaneRendererAreaBase));
-var PaneRendererBaselineLine = /** @class */ (function (_super) {
-    __extends(PaneRendererBaselineLine, _super);
-    function PaneRendererBaselineLine() {
-        return _super !== null && _super.apply(this, arguments) || this;
-    }
-    PaneRendererBaselineLine.prototype._internal__strokeStyle = function (ctx) {
+        const data = this._internal__data;
+        const { _internal_topFillColor1: topFillColor1, _internal_topFillColor2: topFillColor2, _internal_bottomFillColor1: bottomFillColor1, _internal_bottomFillColor2: bottomFillColor2 } = item;
+        const { _internal_baseLevelCoordinate: baseLevelCoordinate, _internal_bottom: bottom } = data;
+        if (this._private__fillCache !== null &&
+            this._private__fillCache.topFillColor1 === topFillColor1 &&
+            this._private__fillCache.topFillColor2 === topFillColor2 &&
+            this._private__fillCache.bottomFillColor1 === bottomFillColor1 &&
+            this._private__fillCache.bottomFillColor2 === bottomFillColor2 &&
+            this._private__fillCache.baseLevelCoordinate === baseLevelCoordinate &&
+            this._private__fillCache.bottom === bottom) {
+            return this._private__fillCache.fillStyle;
+        }
+        const fillStyle = ctx.createLinearGradient(0, 0, 0, bottom);
+        const baselinePercent = clamp(baseLevelCoordinate / bottom, 0, 1);
+        fillStyle.addColorStop(0, topFillColor1);
+        fillStyle.addColorStop(baselinePercent, topFillColor2);
+        fillStyle.addColorStop(baselinePercent, bottomFillColor1);
+        fillStyle.addColorStop(1, bottomFillColor2);
+        this._private__fillCache = {
+            topFillColor1,
+            topFillColor2,
+            bottomFillColor1,
+            bottomFillColor2,
+            fillStyle,
+            baseLevelCoordinate,
+            bottom,
+        };
+        return fillStyle;
+    }
+}
+
+class PaneRendererBaselineLine extends PaneRendererLineBase {
+    constructor() {
+        super(...arguments);
+        this._private__strokeCache = null;
+    }
+    _internal__strokeStyle(ctx, item) {
         // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
-        var data = this._internal__data;
-        var gradient = ctx.createLinearGradient(0, 0, 0, data._internal_bottom);
-        var baselinePercent = clamp(data._internal_baseLevelCoordinate / data._internal_bottom, 0, 1);
-        gradient.addColorStop(0, data._internal_topColor);
-        gradient.addColorStop(baselinePercent, data._internal_topColor);
-        gradient.addColorStop(baselinePercent, data._internal_bottomColor);
-        gradient.addColorStop(1, data._internal_bottomColor);
-        return gradient;
-    };
-    return PaneRendererBaselineLine;
-}(PaneRendererLineBase));
-
-var SeriesBaselinePaneView = /** @class */ (function (_super) {
-    __extends(SeriesBaselinePaneView, _super);
-    function SeriesBaselinePaneView(series, model) {
-        var _this = _super.call(this, series, model) || this;
-        _this._private__baselineAreaRenderer = new PaneRendererBaselineArea();
-        _this._private__baselineLineRenderer = new PaneRendererBaselineLine();
-        _this._private__compositeRenderer = new CompositeRenderer();
-        _this._private__compositeRenderer._internal_setRenderers([_this._private__baselineAreaRenderer, _this._private__baselineLineRenderer]);
-        return _this;
-    }
-    SeriesBaselinePaneView.prototype._internal_renderer = function (height, width) {
-        if (!this._internal__series._internal_visible()) {
-            return null;
-        }
-        var firstValue = this._internal__series._internal_firstValue();
+        const data = this._internal__data;
+        const { _internal_topLineColor: topLineColor, _internal_bottomLineColor: bottomLineColor } = item;
+        const { _internal_baseLevelCoordinate: baseLevelCoordinate, _internal_bottom: bottom } = data;
+        if (this._private__strokeCache !== null &&
+            this._private__strokeCache.topLineColor === topLineColor &&
+            this._private__strokeCache.bottomLineColor === bottomLineColor &&
+            this._private__strokeCache.baseLevelCoordinate === baseLevelCoordinate &&
+            this._private__strokeCache.bottom === bottom) {
+            return this._private__strokeCache.strokeStyle;
+        }
+        const strokeStyle = ctx.createLinearGradient(0, 0, 0, bottom);
+        const baselinePercent = clamp(baseLevelCoordinate / bottom, 0, 1);
+        strokeStyle.addColorStop(0, topLineColor);
+        strokeStyle.addColorStop(baselinePercent, topLineColor);
+        strokeStyle.addColorStop(baselinePercent, bottomLineColor);
+        strokeStyle.addColorStop(1, bottomLineColor);
+        this._private__strokeCache = {
+            topLineColor,
+            bottomLineColor,
+            strokeStyle,
+            baseLevelCoordinate,
+            bottom,
+        };
+        return strokeStyle;
+    }
+}
+
+class SeriesBaselinePaneView extends LinePaneViewBase {
+    constructor(series, model) {
+        super(series, model);
+        this._internal__renderer = new CompositeRenderer();
+        this._private__baselineAreaRenderer = new PaneRendererBaselineArea();
+        this._private__baselineLineRenderer = new PaneRendererBaselineLine();
+        this._internal__renderer._internal_setRenderers([this._private__baselineAreaRenderer, this._private__baselineLineRenderer]);
+    }
+    _internal__createRawItem(time, price, colorer) {
+        return Object.assign(Object.assign({}, this._internal__createRawItemBase(time, price)), colorer._internal_barStyle(time));
+    }
+    _internal__prepareRendererData(width, height) {
+        const firstValue = this._internal__series._internal_firstValue();
         if (firstValue === null) {
-            return null;
+            return;
         }
-        var baselineProps = this._internal__series._internal_options();
-        this._internal__makeValid();
-        var baseLevelCoordinate = this._internal__series._internal_priceScale()._internal_priceToCoordinate(baselineProps.baseValue.price, firstValue._internal_value);
-        var barWidth = this._internal__model._internal_timeScale()._internal_barSpacing();
+        const baselineProps = this._internal__series._internal_options();
+        const baseLevelCoordinate = this._internal__series._internal_priceScale()._internal_priceToCoordinate(baselineProps.baseValue.price, firstValue._internal_value);
+        const barWidth = this._internal__model._internal_timeScale()._internal_barSpacing();
         this._private__baselineAreaRenderer._internal_setData({
             _internal_items: this._internal__items,
-            _internal_topFillColor1: baselineProps.topFillColor1,
-            _internal_topFillColor2: baselineProps.topFillColor2,
-            _internal_bottomFillColor1: baselineProps.bottomFillColor1,
-            _internal_bottomFillColor2: baselineProps.bottomFillColor2,
             _internal_lineWidth: baselineProps.lineWidth,
             _internal_lineStyle: baselineProps.lineStyle,
-            _internal_lineType: 0 /* Simple */,
+            _internal_lineType: baselineProps.lineType,
             _internal_baseLevelCoordinate: baseLevelCoordinate,
             _internal_bottom: height,
             _internal_visibleRange: this._internal__itemsVisibleRange,
@@ -2377,34 +2470,27 @@ var SeriesBaselinePaneView = /** @class */ (function (_super) {
         });
         this._private__baselineLineRenderer._internal_setData({
             _internal_items: this._internal__items,
-            _internal_topColor: baselineProps.topLineColor,
-            _internal_bottomColor: baselineProps.bottomLineColor,
             _internal_lineWidth: baselineProps.lineWidth,
             _internal_lineStyle: baselineProps.lineStyle,
-            _internal_lineType: 0 /* Simple */,
+            _internal_lineType: baselineProps.lineType,
             _internal_baseLevelCoordinate: baseLevelCoordinate,
             _internal_bottom: height,
             _internal_visibleRange: this._internal__itemsVisibleRange,
             _internal_barWidth: barWidth,
         });
-        return this._private__compositeRenderer;
-    };
-    SeriesBaselinePaneView.prototype._internal__createRawItem = function (time, price) {
-        return this._internal__createRawItemBase(time, price);
-    };
-    return SeriesBaselinePaneView;
-}(LinePaneViewBase));
+    }
+}
 
-var PaneRendererCandlesticks = /** @class */ (function () {
-    function PaneRendererCandlesticks() {
+class PaneRendererCandlesticks {
+    constructor() {
         this._private__data = null;
         // scaled with pixelRatio
         this._private__barWidth = 0;
     }
-    PaneRendererCandlesticks.prototype._internal_setData = function (data) {
+    _internal_setData(data) {
         this._private__data = data;
-    };
-    PaneRendererCandlesticks.prototype._internal_draw = function (ctx, pixelRatio, isHovered, hitTestData) {
+    }
+    _internal_draw(ctx, pixelRatio, isHovered, hitTestData) {
         if (this._private__data === null || this._private__data._internal_bars.length === 0 || this._private__data._internal_visibleRange === null) {
             return;
         }
@@ -2415,233 +2501,213 @@ var PaneRendererCandlesticks = /** @class */ (function () {
         // if this value is even, we have to make candlesticks' width even
         // in order of keeping crosshair-over-candlesticks drawing symmetric
         if (this._private__barWidth >= 2) {
-            var wickWidth = Math.floor(pixelRatio);
+            const wickWidth = Math.floor(pixelRatio);
             if ((wickWidth % 2) !== (this._private__barWidth % 2)) {
                 this._private__barWidth--;
             }
         }
-        var bars = this._private__data._internal_bars;
+        const bars = this._private__data._internal_bars;
         if (this._private__data._internal_wickVisible) {
             this._private__drawWicks(ctx, bars, this._private__data._internal_visibleRange, pixelRatio);
         }
         if (this._private__data._internal_borderVisible) {
             this._private__drawBorder(ctx, bars, this._private__data._internal_visibleRange, this._private__data._internal_barSpacing, pixelRatio);
         }
-        var borderWidth = this._private__calculateBorderWidth(pixelRatio);
+        const borderWidth = this._private__calculateBorderWidth(pixelRatio);
         if (!this._private__data._internal_borderVisible || this._private__barWidth > borderWidth * 2) {
             this._private__drawCandles(ctx, bars, this._private__data._internal_visibleRange, pixelRatio);
         }
-    };
-    PaneRendererCandlesticks.prototype._private__drawWicks = function (ctx, bars, visibleRange, pixelRatio) {
+    }
+    _private__drawWicks(ctx, bars, visibleRange, pixelRatio) {
         if (this._private__data === null) {
             return;
         }
-        var prevWickColor = '';
-        var wickWidth = Math.min(Math.floor(pixelRatio), Math.floor(this._private__data._internal_barSpacing * pixelRatio));
+        let prevWickColor = '';
+        let wickWidth = Math.min(Math.floor(pixelRatio), Math.floor(this._private__data._internal_barSpacing * pixelRatio));
         wickWidth = Math.max(Math.floor(pixelRatio), Math.min(wickWidth, this._private__barWidth));
-        var wickOffset = Math.floor(wickWidth * 0.5);
-        var prevEdge = null;
-        for (var i = visibleRange.from; i < visibleRange.to; i++) {
-            var bar = bars[i];
-            if (bar._internal_wickColor !== prevWickColor) {
-                ctx.fillStyle = bar._internal_wickColor;
-                prevWickColor = bar._internal_wickColor;
-            }
-            var top_1 = Math.round(Math.min(bar._internal_openY, bar._internal_closeY) * pixelRatio);
-            var bottom = Math.round(Math.max(bar._internal_openY, bar._internal_closeY) * pixelRatio);
-            var high = Math.round(bar._internal_highY * pixelRatio);
-            var low = Math.round(bar._internal_lowY * pixelRatio);
-            var scaledX = Math.round(pixelRatio * bar._internal_x);
-            var left = scaledX - wickOffset;
-            var right = left + wickWidth - 1;
+        const wickOffset = Math.floor(wickWidth * 0.5);
+        let prevEdge = null;
+        for (let i = visibleRange.from; i < visibleRange.to; i++) {
+            const bar = bars[i];
+            if (bar._internal_barWickColor !== prevWickColor) {
+                ctx.fillStyle = bar._internal_barWickColor;
+                prevWickColor = bar._internal_barWickColor;
+            }
+            const top = Math.round(Math.min(bar._internal_openY, bar._internal_closeY) * pixelRatio);
+            const bottom = Math.round(Math.max(bar._internal_openY, bar._internal_closeY) * pixelRatio);
+            const high = Math.round(bar._internal_highY * pixelRatio);
+            const low = Math.round(bar._internal_lowY * pixelRatio);
+            const scaledX = Math.round(pixelRatio * bar._internal_x);
+            let left = scaledX - wickOffset;
+            const right = left + wickWidth - 1;
             if (prevEdge !== null) {
                 left = Math.max(prevEdge + 1, left);
                 left = Math.min(left, right);
             }
-            var width = right - left + 1;
-            ctx.fillRect(left, high, width, top_1 - high);
+            const width = right - left + 1;
+            ctx.fillRect(left, high, width, top - high);
             ctx.fillRect(left, bottom + 1, width, low - bottom);
             prevEdge = right;
         }
-    };
-    PaneRendererCandlesticks.prototype._private__calculateBorderWidth = function (pixelRatio) {
-        var borderWidth = Math.floor(1 /* BarBorderWidth */ * pixelRatio);
+    }
+    _private__calculateBorderWidth(pixelRatio) {
+        let borderWidth = Math.floor(1 /* Constants.BarBorderWidth */ * pixelRatio);
         if (this._private__barWidth <= 2 * borderWidth) {
             borderWidth = Math.floor((this._private__barWidth - 1) * 0.5);
         }
-        var res = Math.max(Math.floor(pixelRatio), borderWidth);
+        const res = Math.max(Math.floor(pixelRatio), borderWidth);
         if (this._private__barWidth <= res * 2) {
             // do not draw bodies, restore original value
-            return Math.max(Math.floor(pixelRatio), Math.floor(1 /* BarBorderWidth */ * pixelRatio));
+            return Math.max(Math.floor(pixelRatio), Math.floor(1 /* Constants.BarBorderWidth */ * pixelRatio));
         }
         return res;
-    };
-    PaneRendererCandlesticks.prototype._private__drawBorder = function (ctx, bars, visibleRange, barSpacing, pixelRatio) {
+    }
+    _private__drawBorder(ctx, bars, visibleRange, barSpacing, pixelRatio) {
         if (this._private__data === null) {
             return;
         }
-        var prevBorderColor = '';
-        var borderWidth = this._private__calculateBorderWidth(pixelRatio);
-        var prevEdge = null;
-        for (var i = visibleRange.from; i < visibleRange.to; i++) {
-            var bar = bars[i];
-            if (bar._internal_borderColor !== prevBorderColor) {
-                ctx.fillStyle = bar._internal_borderColor;
-                prevBorderColor = bar._internal_borderColor;
+        let prevBorderColor = '';
+        const borderWidth = this._private__calculateBorderWidth(pixelRatio);
+        let prevEdge = null;
+        for (let i = visibleRange.from; i < visibleRange.to; i++) {
+            const bar = bars[i];
+            if (bar._internal_barBorderColor !== prevBorderColor) {
+                ctx.fillStyle = bar._internal_barBorderColor;
+                prevBorderColor = bar._internal_barBorderColor;
             }
-            var left = Math.round(bar._internal_x * pixelRatio) - Math.floor(this._private__barWidth * 0.5);
+            let left = Math.round(bar._internal_x * pixelRatio) - Math.floor(this._private__barWidth * 0.5);
             // this is important to calculate right before patching left
-            var right = left + this._private__barWidth - 1;
-            var top_2 = Math.round(Math.min(bar._internal_openY, bar._internal_closeY) * pixelRatio);
-            var bottom = Math.round(Math.max(bar._internal_openY, bar._internal_closeY) * pixelRatio);
+            const right = left + this._private__barWidth - 1;
+            const top = Math.round(Math.min(bar._internal_openY, bar._internal_closeY) * pixelRatio);
+            const bottom = Math.round(Math.max(bar._internal_openY, bar._internal_closeY) * pixelRatio);
             if (prevEdge !== null) {
                 left = Math.max(prevEdge + 1, left);
                 left = Math.min(left, right);
             }
             if (this._private__data._internal_barSpacing * pixelRatio > 2 * borderWidth) {
-                fillRectInnerBorder(ctx, left, top_2, right - left + 1, bottom - top_2 + 1, borderWidth);
+                fillRectInnerBorder(ctx, left, top, right - left + 1, bottom - top + 1, borderWidth);
             }
             else {
-                var width = right - left + 1;
-                ctx.fillRect(left, top_2, width, bottom - top_2 + 1);
+                const width = right - left + 1;
+                ctx.fillRect(left, top, width, bottom - top + 1);
             }
             prevEdge = right;
         }
-    };
-    PaneRendererCandlesticks.prototype._private__drawCandles = function (ctx, bars, visibleRange, pixelRatio) {
+    }
+    _private__drawCandles(ctx, bars, visibleRange, pixelRatio) {
         if (this._private__data === null) {
             return;
         }
-        var prevBarColor = '';
-        var borderWidth = this._private__calculateBorderWidth(pixelRatio);
-        for (var i = visibleRange.from; i < visibleRange.to; i++) {
-            var bar = bars[i];
-            var top_3 = Math.round(Math.min(bar._internal_openY, bar._internal_closeY) * pixelRatio);
-            var bottom = Math.round(Math.max(bar._internal_openY, bar._internal_closeY) * pixelRatio);
-            var left = Math.round(bar._internal_x * pixelRatio) - Math.floor(this._private__barWidth * 0.5);
-            var right = left + this._private__barWidth - 1;
-            if (bar._internal_color !== prevBarColor) {
-                var barColor = bar._internal_color;
+        let prevBarColor = '';
+        const borderWidth = this._private__calculateBorderWidth(pixelRatio);
+        for (let i = visibleRange.from; i < visibleRange.to; i++) {
+            const bar = bars[i];
+            let top = Math.round(Math.min(bar._internal_openY, bar._internal_closeY) * pixelRatio);
+            let bottom = Math.round(Math.max(bar._internal_openY, bar._internal_closeY) * pixelRatio);
+            let left = Math.round(bar._internal_x * pixelRatio) - Math.floor(this._private__barWidth * 0.5);
+            let right = left + this._private__barWidth - 1;
+            if (bar._internal_barColor !== prevBarColor) {
+                const barColor = bar._internal_barColor;
                 ctx.fillStyle = barColor;
                 prevBarColor = barColor;
             }
             if (this._private__data._internal_borderVisible) {
                 left += borderWidth;
-                top_3 += borderWidth;
+                top += borderWidth;
                 right -= borderWidth;
                 bottom -= borderWidth;
             }
-            if (top_3 > bottom) {
+            if (top > bottom) {
                 continue;
             }
-            ctx.fillRect(left, top_3, right - left + 1, bottom - top_3 + 1);
+            ctx.fillRect(left, top, right - left + 1, bottom - top + 1);
         }
-    };
-    return PaneRendererCandlesticks;
-}());
+    }
+}
 
-var SeriesCandlesticksPaneView = /** @class */ (function (_super) {
-    __extends(SeriesCandlesticksPaneView, _super);
-    function SeriesCandlesticksPaneView() {
-        var _this = _super !== null && _super.apply(this, arguments) || this;
-        _this._private__renderer = new PaneRendererCandlesticks();
-        return _this;
+class SeriesCandlesticksPaneView extends BarsPaneViewBase {
+    constructor() {
+        super(...arguments);
+        this._internal__renderer = new PaneRendererCandlesticks();
     }
-    SeriesCandlesticksPaneView.prototype._internal_renderer = function (height, width) {
-        if (!this._internal__series._internal_visible()) {
-            return null;
-        }
-        var candlestickStyleProps = this._internal__series._internal_options();
-        this._internal__makeValid();
-        var data = {
+    _internal__createRawItem(time, bar, colorer) {
+        return Object.assign(Object.assign({}, this._internal__createDefaultItem(time, bar, colorer)), colorer._internal_barStyle(time));
+    }
+    _internal__prepareRendererData() {
+        const candlestickStyleProps = this._internal__series._internal_options();
+        this._internal__renderer._internal_setData({
             _internal_bars: this._internal__items,
             _internal_barSpacing: this._internal__model._internal_timeScale()._internal_barSpacing(),
             _internal_wickVisible: candlestickStyleProps.wickVisible,
             _internal_borderVisible: candlestickStyleProps.borderVisible,
             _internal_visibleRange: this._internal__itemsVisibleRange,
-        };
-        this._private__renderer._internal_setData(data);
-        return this._private__renderer;
-    };
-    SeriesCandlesticksPaneView.prototype._internal__updateOptions = function () {
-        var _this = this;
-        this._internal__items.forEach(function (item) {
-            var style = _this._internal__series._internal_barColorer()._internal_barStyle(item._internal_time);
-            item._internal_color = style._internal_barColor;
-            item._internal_wickColor = style._internal_barWickColor;
-            item._internal_borderColor = style._internal_barBorderColor;
         });
-    };
-    SeriesCandlesticksPaneView.prototype._internal__createRawItem = function (time, bar, colorer) {
-        var style = colorer._internal_barStyle(time);
-        return __assign(__assign({}, this._internal__createDefaultItem(time, bar, colorer)), { _internal_color: style._internal_barColor, _internal_wickColor: style._internal_barWickColor, _internal_borderColor: style._internal_barBorderColor });
-    };
-    return SeriesCandlesticksPaneView;
-}(BarsPaneViewBase));
+    }
+}
 
-var showSpacingMinimalBarWidth = 1;
-var alignToMinimalWidthLimit = 4;
-var PaneRendererHistogram = /** @class */ (function () {
-    function PaneRendererHistogram() {
+const showSpacingMinimalBarWidth = 1;
+const alignToMinimalWidthLimit = 4;
+class PaneRendererHistogram {
+    constructor() {
         this._private__data = null;
         this._private__precalculatedCache = [];
     }
-    PaneRendererHistogram.prototype._internal_setData = function (data) {
+    _internal_setData(data) {
         this._private__data = data;
         this._private__precalculatedCache = [];
-    };
-    PaneRendererHistogram.prototype._internal_draw = function (ctx, pixelRatio, isHovered, hitTestData) {
+    }
+    _internal_draw(ctx, pixelRatio, isHovered, hitTestData) {
         if (this._private__data === null || this._private__data._internal_items.length === 0 || this._private__data._internal_visibleRange === null) {
             return;
         }
         if (!this._private__precalculatedCache.length) {
             this._private__fillPrecalculatedCache(pixelRatio);
         }
-        var tickWidth = Math.max(1, Math.floor(pixelRatio));
-        var histogramBase = Math.round((this._private__data._internal_histogramBase) * pixelRatio);
-        var topHistogramBase = histogramBase - Math.floor(tickWidth / 2);
-        var bottomHistogramBase = topHistogramBase + tickWidth;
-        for (var i = this._private__data._internal_visibleRange.from; i < this._private__data._internal_visibleRange.to; i++) {
-            var item = this._private__data._internal_items[i];
-            var current = this._private__precalculatedCache[i - this._private__data._internal_visibleRange.from];
-            var y = Math.round(item._internal_y * pixelRatio);
-            ctx.fillStyle = item._internal_color;
-            var top_1 = void 0;
-            var bottom = void 0;
+        const tickWidth = Math.max(1, Math.floor(pixelRatio));
+        const histogramBase = Math.round((this._private__data._internal_histogramBase) * pixelRatio);
+        const topHistogramBase = histogramBase - Math.floor(tickWidth / 2);
+        const bottomHistogramBase = topHistogramBase + tickWidth;
+        for (let i = this._private__data._internal_visibleRange.from; i < this._private__data._internal_visibleRange.to; i++) {
+            const item = this._private__data._internal_items[i];
+            const current = this._private__precalculatedCache[i - this._private__data._internal_visibleRange.from];
+            const y = Math.round(item._internal_y * pixelRatio);
+            ctx.fillStyle = item._internal_barColor;
+            let top;
+            let bottom;
             if (y <= topHistogramBase) {
-                top_1 = y;
+                top = y;
                 bottom = bottomHistogramBase;
             }
             else {
-                top_1 = topHistogramBase;
+                top = topHistogramBase;
                 bottom = y - Math.floor(tickWidth / 2) + tickWidth;
             }
-            ctx.fillRect(current._internal_left, top_1, current._internal_right - current._internal_left + 1, bottom - top_1);
+            ctx.fillRect(current._internal_left, top, current._internal_right - current._internal_left + 1, bottom - top);
         }
-    };
+    }
     // eslint-disable-next-line complexity
-    PaneRendererHistogram.prototype._private__fillPrecalculatedCache = function (pixelRatio) {
+    _private__fillPrecalculatedCache(pixelRatio) {
         if (this._private__data === null || this._private__data._internal_items.length === 0 || this._private__data._internal_visibleRange === null) {
             this._private__precalculatedCache = [];
             return;
         }
-        var spacing = Math.ceil(this._private__data._internal_barSpacing * pixelRatio) <= showSpacingMinimalBarWidth ? 0 : Math.max(1, Math.floor(pixelRatio));
-        var columnWidth = Math.round(this._private__data._internal_barSpacing * pixelRatio) - spacing;
+        const spacing = Math.ceil(this._private__data._internal_barSpacing * pixelRatio) <= showSpacingMinimalBarWidth ? 0 : Math.max(1, Math.floor(pixelRatio));
+        const columnWidth = Math.round(this._private__data._internal_barSpacing * pixelRatio) - spacing;
         this._private__precalculatedCache = new Array(this._private__data._internal_visibleRange.to - this._private__data._internal_visibleRange.from);
-        for (var i = this._private__data._internal_visibleRange.from; i < this._private__data._internal_visibleRange.to; i++) {
-            var item = this._private__data._internal_items[i];
+        for (let i = this._private__data._internal_visibleRange.from; i < this._private__data._internal_visibleRange.to; i++) {
+            const item = this._private__data._internal_items[i];
             // force cast to avoid ensureDefined call
-            var x = Math.round(item._internal_x * pixelRatio);
-            var left = void 0;
-            var right = void 0;
+            const x = Math.round(item._internal_x * pixelRatio);
+            let left;
+            let right;
             if (columnWidth % 2) {
-                var halfWidth = (columnWidth - 1) / 2;
+                const halfWidth = (columnWidth - 1) / 2;
                 left = x - halfWidth;
                 right = x + halfWidth;
             }
             else {
                 // shift pixel to left
-                var halfWidth = columnWidth / 2;
+                const halfWidth = columnWidth / 2;
                 left = x - halfWidth;
                 right = x + halfWidth - 1;
             }
@@ -2654,9 +2720,9 @@ var PaneRendererHistogram = /** @class */ (function () {
             };
         }
         // correct positions
-        for (var i = this._private__data._internal_visibleRange.from + 1; i < this._private__data._internal_visibleRange.to; i++) {
-            var current = this._private__precalculatedCache[i - this._private__data._internal_visibleRange.from];
-            var prev = this._private__precalculatedCache[i - this._private__data._internal_visibleRange.from - 1];
+        for (let i = this._private__data._internal_visibleRange.from + 1; i < this._private__data._internal_visibleRange.to; i++) {
+            const current = this._private__precalculatedCache[i - this._private__data._internal_visibleRange.from];
+            const prev = this._private__precalculatedCache[i - this._private__data._internal_visibleRange.from - 1];
             if (current._internal_time !== prev._internal_time + 1) {
                 continue;
             }
@@ -2672,20 +2738,20 @@ var PaneRendererHistogram = /** @class */ (function () {
                 }
             }
         }
-        var minWidth = Math.ceil(this._private__data._internal_barSpacing * pixelRatio);
-        for (var i = this._private__data._internal_visibleRange.from; i < this._private__data._internal_visibleRange.to; i++) {
-            var current = this._private__precalculatedCache[i - this._private__data._internal_visibleRange.from];
+        let minWidth = Math.ceil(this._private__data._internal_barSpacing * pixelRatio);
+        for (let i = this._private__data._internal_visibleRange.from; i < this._private__data._internal_visibleRange.to; i++) {
+            const current = this._private__precalculatedCache[i - this._private__data._internal_visibleRange.from];
             // this could happen if barspacing < 1
             if (current._internal_right < current._internal_left) {
                 current._internal_right = current._internal_left;
             }
-            var width = current._internal_right - current._internal_left + 1;
+            const width = current._internal_right - current._internal_left + 1;
             minWidth = Math.min(width, minWidth);
         }
         if (spacing > 0 && minWidth < alignToMinimalWidthLimit) {
-            for (var i = this._private__data._internal_visibleRange.from; i < this._private__data._internal_visibleRange.to; i++) {
-                var current = this._private__precalculatedCache[i - this._private__data._internal_visibleRange.from];
-                var width = current._internal_right - current._internal_left + 1;
+            for (let i = this._private__data._internal_visibleRange.from; i < this._private__data._internal_visibleRange.to; i++) {
+                const current = this._private__precalculatedCache[i - this._private__data._internal_visibleRange.from];
+                const width = current._internal_right - current._internal_left + 1;
                 if (width > minWidth) {
                     if (current._internal_roundedCenter > current._internal_center) {
                         current._internal_right -= 1;
@@ -2696,210 +2762,127 @@ var PaneRendererHistogram = /** @class */ (function () {
                 }
             }
         }
-    };
-    return PaneRendererHistogram;
-}());
-
-function createEmptyHistogramData(barSpacing) {
-    return {
-        _internal_items: [],
-        _internal_barSpacing: barSpacing,
-        _internal_histogramBase: NaN,
-        _internal_visibleRange: null,
-    };
-}
-function createRawItem(time, price, color) {
-    return {
-        _internal_time: time,
-        _internal_price: price,
-        _internal_x: NaN,
-        _internal_y: NaN,
-        _internal_color: color,
-    };
+    }
 }
-var SeriesHistogramPaneView = /** @class */ (function (_super) {
-    __extends(SeriesHistogramPaneView, _super);
-    function SeriesHistogramPaneView(series, model) {
-        var _this = _super.call(this, series, model, false) || this;
-        _this._private__compositeRenderer = new CompositeRenderer();
-        _this._private__histogramData = createEmptyHistogramData(0);
-        _this._private__renderer = new PaneRendererHistogram();
-        return _this;
+
+class SeriesHistogramPaneView extends LinePaneViewBase {
+    constructor() {
+        super(...arguments);
+        this._internal__renderer = new PaneRendererHistogram();
     }
-    SeriesHistogramPaneView.prototype._internal_renderer = function (height, width) {
-        if (!this._internal__series._internal_visible()) {
-            return null;
-        }
-        this._internal__makeValid();
-        return this._private__compositeRenderer;
-    };
-    SeriesHistogramPaneView.prototype._internal__fillRawPoints = function () {
-        var barSpacing = this._internal__model._internal_timeScale()._internal_barSpacing();
-        this._private__histogramData = createEmptyHistogramData(barSpacing);
-        var targetIndex = 0;
-        var itemIndex = 0;
-        var defaultColor = this._internal__series._internal_options().color;
-        for (var _i = 0, _a = this._internal__series._internal_bars()._internal_rows(); _i < _a.length; _i++) {
-            var row = _a[_i];
-            var value = row._internal_value[3 /* Close */];
-            var color = row._internal_color !== undefined ? row._internal_color : defaultColor;
-            var item = createRawItem(row._internal_index, value, color);
-            targetIndex++;
-            if (targetIndex < this._private__histogramData._internal_items.length) {
-                this._private__histogramData._internal_items[targetIndex] = item;
-            }
-            else {
-                this._private__histogramData._internal_items.push(item);
-            }
-            this._internal__items[itemIndex++] = { _internal_time: row._internal_index, _internal_x: 0 };
-        }
-        this._private__renderer._internal_setData(this._private__histogramData);
-        this._private__compositeRenderer._internal_setRenderers([this._private__renderer]);
-    };
-    SeriesHistogramPaneView.prototype._internal__updateOptions = function () { };
-    SeriesHistogramPaneView.prototype._internal__clearVisibleRange = function () {
-        _super.prototype._internal__clearVisibleRange.call(this);
-        this._private__histogramData._internal_visibleRange = null;
-    };
-    SeriesHistogramPaneView.prototype._internal__convertToCoordinates = function (priceScale, timeScale, firstValue) {
-        if (this._internal__itemsVisibleRange === null) {
-            return;
-        }
-        var barSpacing = timeScale._internal_barSpacing();
-        var visibleBars = ensureNotNull(timeScale._internal_visibleStrictRange());
-        var histogramBase = priceScale._internal_priceToCoordinate(this._internal__series._internal_options().base, firstValue);
-        timeScale._internal_indexesToCoordinates(this._private__histogramData._internal_items);
-        priceScale._internal_pointsArrayToCoordinates(this._private__histogramData._internal_items, firstValue);
-        this._private__histogramData._internal_histogramBase = histogramBase;
-        this._private__histogramData._internal_visibleRange = visibleTimedValues(this._private__histogramData._internal_items, visibleBars, false);
-        this._private__histogramData._internal_barSpacing = barSpacing;
-        // need this to update cache
-        this._private__renderer._internal_setData(this._private__histogramData);
-    };
-    return SeriesHistogramPaneView;
-}(SeriesPaneViewBase));
+    _internal__createRawItem(time, price, colorer) {
+        return Object.assign(Object.assign({}, this._internal__createRawItemBase(time, price)), colorer._internal_barStyle(time));
+    }
+    _internal__prepareRendererData() {
+        const data = {
+            _internal_items: this._internal__items,
+            _internal_barSpacing: this._internal__model._internal_timeScale()._internal_barSpacing(),
+            _internal_visibleRange: this._internal__itemsVisibleRange,
+            _internal_histogramBase: this._internal__series._internal_priceScale()._internal_priceToCoordinate(this._internal__series._internal_options().base, ensureNotNull(this._internal__series._internal_firstValue())._internal_value),
+        };
+        this._internal__renderer._internal_setData(data);
+    }
+}
 
-var SeriesLinePaneView = /** @class */ (function (_super) {
-    __extends(SeriesLinePaneView, _super);
-    // eslint-disable-next-line no-useless-constructor
-    function SeriesLinePaneView(series, model) {
-        var _this = _super.call(this, series, model) || this;
-        _this._private__lineRenderer = new PaneRendererLine();
-        return _this;
+class SeriesLinePaneView extends LinePaneViewBase {
+    constructor() {
+        super(...arguments);
+        this._internal__renderer = new PaneRendererLine();
     }
-    SeriesLinePaneView.prototype._internal_renderer = function (height, width) {
-        if (!this._internal__series._internal_visible()) {
-            return null;
-        }
-        var lineStyleProps = this._internal__series._internal_options();
-        this._internal__makeValid();
-        var data = {
+    _internal__createRawItem(time, price, colorer) {
+        return Object.assign(Object.assign({}, this._internal__createRawItemBase(time, price)), colorer._internal_barStyle(time));
+    }
+    _internal__prepareRendererData() {
+        const lineStyleProps = this._internal__series._internal_options();
+        const data = {
             _internal_items: this._internal__items,
-            _internal_lineColor: lineStyleProps.color,
             _internal_lineStyle: lineStyleProps.lineStyle,
             _internal_lineType: lineStyleProps.lineType,
             _internal_lineWidth: lineStyleProps.lineWidth,
             _internal_visibleRange: this._internal__itemsVisibleRange,
             _internal_barWidth: this._internal__model._internal_timeScale()._internal_barSpacing(),
         };
-        this._private__lineRenderer._internal_setData(data);
-        return this._private__lineRenderer;
-    };
-    SeriesLinePaneView.prototype._internal__updateOptions = function () {
-        var _this = this;
-        this._internal__items.forEach(function (item) {
-            item._internal_color = _this._internal__series._internal_barColorer()._internal_barStyle(item._internal_time)._internal_barColor;
-        });
-    };
-    SeriesLinePaneView.prototype._internal__createRawItem = function (time, price, colorer) {
-        var item = this._internal__createRawItemBase(time, price);
-        item._internal_color = colorer._internal_barStyle(time)._internal_barColor;
-        return item;
-    };
-    return SeriesLinePaneView;
-}(LinePaneViewBase));
+        this._internal__renderer._internal_setData(data);
+    }
+}
 
-var defaultReplacementRe = /[2-9]/g;
-var TextWidthCache = /** @class */ (function () {
-    function TextWidthCache(size) {
-        if (size === void 0) { size = 50; }
+const defaultReplacementRe = /[2-9]/g;
+class TextWidthCache {
+    constructor(size = 50) {
+        this._private__actualSize = 0;
+        this._private__usageTick = 1;
+        this._private__oldestTick = 1;
+        this._private__tick2Labels = {};
         this._private__cache = new Map();
-        /** Current index in the "cyclic buffer" */
-        this._private__keysIndex = 0;
-        // A trick to keep array PACKED_ELEMENTS
-        this._private__keys = Array.from(new Array(size));
+        this._private__maxSize = size;
     }
-    TextWidthCache.prototype._internal_reset = function () {
+    _internal_reset() {
+        this._private__actualSize = 0;
         this._private__cache.clear();
-        this._private__keys.fill(undefined);
-        // We don't care where exactly the _keysIndex points,
-        // so there's no point in resetting it
-    };
-    TextWidthCache.prototype._internal_measureText = function (ctx, text, optimizationReplacementRe) {
-        var re = optimizationReplacementRe || defaultReplacementRe;
-        var cacheString = String(text).replace(re, '0');
-        var width = this._private__cache.get(cacheString);
-        if (width === undefined) {
-            width = ctx.measureText(cacheString).width;
-            if (width === 0 && text.length !== 0) {
-                // measureText can return 0 in FF depending on a canvas size, don't cache it
-                return 0;
-            }
-            // A cyclic buffer is used to keep track of the cache keys and to delete
-            // the oldest one before a new one is inserted.
-            // ├──────┬──────┬──────┬──────┤
-            // │ foo  │ bar  │      │      │
-            // ├──────┴──────┴──────┴──────┤
-            //                 ↑ index
-            // Eventually, the index reach the end of an array and roll-over to 0.
-            // ├──────┬──────┬──────┬──────┤
-            // │ foo  │ bar  │ baz  │ quux │
-            // ├──────┴──────┴──────┴──────┤
-            //   ↑ index = 0
-            // After that the oldest value will be overwritten.
-            // ├──────┬──────┬──────┬──────┤
-            // │ WOOT │ bar  │ baz  │ quux │
-            // ├──────┴──────┴──────┴──────┤
-            //          ↑ index = 1
-            var oldestKey = this._private__keys[this._private__keysIndex];
-            if (oldestKey !== undefined) {
-                this._private__cache.delete(oldestKey);
-            }
-            // Set a newest key in place of the just deleted one
-            this._private__keys[this._private__keysIndex] = cacheString;
-            // Advance the index so it always points the oldest value
-            this._private__keysIndex = (this._private__keysIndex + 1) % this._private__keys.length;
-            this._private__cache.set(cacheString, width);
-        }
-        return width;
-    };
-    return TextWidthCache;
-}());
+        this._private__usageTick = 1;
+        this._private__oldestTick = 1;
+        this._private__tick2Labels = {};
+    }
+    _internal_measureText(ctx, text, optimizationReplacementRe) {
+        return this._private__getMetrics(ctx, text, optimizationReplacementRe).width;
+    }
+    _internal_yMidCorrection(ctx, text, optimizationReplacementRe) {
+        const metrics = this._private__getMetrics(ctx, text, optimizationReplacementRe);
+        // if actualBoundingBoxAscent/actualBoundingBoxDescent are not supported we use 0 as a fallback
+        return ((metrics.actualBoundingBoxAscent || 0) - (metrics.actualBoundingBoxDescent || 0)) / 2;
+    }
+    _private__getMetrics(ctx, text, optimizationReplacementRe) {
+        const re = optimizationReplacementRe || defaultReplacementRe;
+        const cacheString = String(text).replace(re, '0');
+        if (this._private__cache.has(cacheString)) {
+            return ensureDefined(this._private__cache.get(cacheString))._internal_metrics;
+        }
+        if (this._private__actualSize === this._private__maxSize) {
+            const oldestValue = this._private__tick2Labels[this._private__oldestTick];
+            delete this._private__tick2Labels[this._private__oldestTick];
+            this._private__cache.delete(oldestValue);
+            this._private__oldestTick++;
+            this._private__actualSize--;
+        }
+        ctx.save();
+        ctx.textBaseline = 'middle';
+        const metrics = ctx.measureText(cacheString);
+        ctx.restore();
+        if (metrics.width === 0 && !!text.length) {
+            // measureText can return 0 in FF depending on a canvas size, don't cache it
+            return metrics;
+        }
+        this._private__cache.set(cacheString, { _internal_metrics: metrics, _internal_tick: this._private__usageTick });
+        this._private__tick2Labels[this._private__usageTick] = cacheString;
+        this._private__actualSize++;
+        this._private__usageTick++;
+        return metrics;
+    }
+}
 
-var PanePriceAxisViewRenderer = /** @class */ (function () {
-    function PanePriceAxisViewRenderer(textWidthCache) {
+class PanePriceAxisViewRenderer {
+    constructor(textWidthCache) {
         this._private__priceAxisViewRenderer = null;
         this._private__rendererOptions = null;
         this._private__align = 'right';
         this._private__width = 0;
         this._private__textWidthCache = textWidthCache;
     }
-    PanePriceAxisViewRenderer.prototype._internal_setParams = function (priceAxisViewRenderer, rendererOptions, width, align) {
+    _internal_setParams(priceAxisViewRenderer, rendererOptions, width, align) {
         this._private__priceAxisViewRenderer = priceAxisViewRenderer;
         this._private__rendererOptions = rendererOptions;
         this._private__width = width;
         this._private__align = align;
-    };
-    PanePriceAxisViewRenderer.prototype._internal_draw = function (ctx, pixelRatio) {
+    }
+    _internal_draw(ctx, pixelRatio) {
         if (this._private__rendererOptions === null || this._private__priceAxisViewRenderer === null) {
             return;
         }
         this._private__priceAxisViewRenderer._internal_draw(ctx, this._private__rendererOptions, this._private__textWidthCache, this._private__width, this._private__align, pixelRatio);
-    };
-    return PanePriceAxisViewRenderer;
-}());
-var PanePriceAxisView = /** @class */ (function () {
-    function PanePriceAxisView(priceAxisView, dataSource, chartModel) {
+    }
+}
+class PanePriceAxisView {
+    constructor(priceAxisView, dataSource, chartModel) {
         this._private__priceAxisView = priceAxisView;
         this._private__textWidthCache = new TextWidthCache(50); // when should we clear cache?
         this._private__dataSource = dataSource;
@@ -2907,68 +2890,66 @@ var PanePriceAxisView = /** @class */ (function () {
         this._private__fontSize = -1;
         this._private__renderer = new PanePriceAxisViewRenderer(this._private__textWidthCache);
     }
-    PanePriceAxisView.prototype._internal_renderer = function (height, width) {
-        var pane = this._private__chartModel._internal_paneForSource(this._private__dataSource);
+    _internal_renderer(height, width) {
+        const pane = this._private__chartModel._internal_paneForSource(this._private__dataSource);
         if (pane === null) {
             return null;
         }
         // this price scale will be used to find label placement only (left, right, none)
-        var priceScale = pane._internal_isOverlay(this._private__dataSource) ? pane._internal_defaultVisiblePriceScale() : this._private__dataSource._internal_priceScale();
+        const priceScale = pane._internal_isOverlay(this._private__dataSource) ? pane._internal_defaultVisiblePriceScale() : this._private__dataSource._internal_priceScale();
         if (priceScale === null) {
             return null;
         }
-        var position = pane._internal_priceScalePosition(priceScale);
+        const position = pane._internal_priceScalePosition(priceScale);
         if (position === 'overlay') {
             return null;
         }
-        var options = this._private__chartModel._internal_priceAxisRendererOptions();
+        const options = this._private__chartModel._internal_priceAxisRendererOptions();
         if (options._internal_fontSize !== this._private__fontSize) {
             this._private__fontSize = options._internal_fontSize;
             this._private__textWidthCache._internal_reset();
         }
         this._private__renderer._internal_setParams(this._private__priceAxisView._internal_paneRenderer(), options, width, position);
         return this._private__renderer;
-    };
-    return PanePriceAxisView;
-}());
+    }
+}
 
-var HorizontalLineRenderer = /** @class */ (function () {
-    function HorizontalLineRenderer() {
+class HorizontalLineRenderer {
+    constructor() {
         this._private__data = null;
     }
-    HorizontalLineRenderer.prototype._internal_setData = function (data) {
+    _internal_setData(data) {
         this._private__data = data;
-    };
-    HorizontalLineRenderer.prototype._internal_draw = function (ctx, pixelRatio, isHovered, hitTestData) {
+    }
+    _internal_draw(ctx, pixelRatio, isHovered, hitTestData) {
         if (this._private__data === null) {
             return;
         }
         if (this._private__data._internal_visible === false) {
             return;
         }
-        var y = Math.round(this._private__data._internal_y * pixelRatio);
+        const y = Math.round(this._private__data._internal_y * pixelRatio);
         if (y < 0 || y > Math.ceil(this._private__data._internal_height * pixelRatio)) {
             return;
         }
-        var width = Math.ceil(this._private__data._internal_width * pixelRatio);
+        const width = Math.ceil(this._private__data._internal_width * pixelRatio);
         ctx.lineCap = 'butt';
         ctx.strokeStyle = this._private__data._internal_color;
         ctx.lineWidth = Math.floor(this._private__data._internal_lineWidth * pixelRatio);
         setLineStyle(ctx, this._private__data._internal_lineStyle);
         drawHorizontalLine(ctx, y, 0, width);
-    };
-    return HorizontalLineRenderer;
-}());
+    }
+}
 
-var SeriesHorizontalLinePaneView = /** @class */ (function () {
-    function SeriesHorizontalLinePaneView(series) {
+class SeriesHorizontalLinePaneView {
+    constructor(series) {
         this._internal__lineRendererData = {
             _internal_width: 0,
             _internal_height: 0,
             _internal_y: 0,
             _internal_color: 'rgba(0, 0, 0, 0)',
             _internal_lineWidth: 1,
-            _internal_lineStyle: 0 /* Solid */,
+            _internal_lineStyle: 0 /* LineStyle.Solid */,
             _internal_visible: false,
         };
         this._internal__lineRenderer = new HorizontalLineRenderer();
@@ -2977,10 +2958,10 @@ var SeriesHorizontalLinePaneView = /** @class */ (function () {
         this._internal__model = series._internal_model();
         this._internal__lineRenderer._internal_setData(this._internal__lineRendererData);
     }
-    SeriesHorizontalLinePaneView.prototype._internal_update = function () {
+    _internal_update() {
         this._private__invalidated = true;
-    };
-    SeriesHorizontalLinePaneView.prototype._internal_renderer = function (height, width) {
+    }
+    _internal_renderer(height, width) {
         if (!this._internal__series._internal_visible()) {
             return null;
         }
@@ -2989,28 +2970,26 @@ var SeriesHorizontalLinePaneView = /** @class */ (function () {
             this._private__invalidated = false;
         }
         return this._internal__lineRenderer;
-    };
-    return SeriesHorizontalLinePaneView;
-}());
+    }
+}
 
-var SeriesHorizontalBaseLinePaneView = /** @class */ (function (_super) {
-    __extends(SeriesHorizontalBaseLinePaneView, _super);
+class SeriesHorizontalBaseLinePaneView extends SeriesHorizontalLinePaneView {
     // eslint-disable-next-line no-useless-constructor
-    function SeriesHorizontalBaseLinePaneView(series) {
-        return _super.call(this, series) || this;
+    constructor(series) {
+        super(series);
     }
-    SeriesHorizontalBaseLinePaneView.prototype._internal__updateImpl = function (height, width) {
+    _internal__updateImpl(height, width) {
         this._internal__lineRendererData._internal_visible = false;
-        var priceScale = this._internal__series._internal_priceScale();
-        var mode = priceScale._internal_mode()._internal_mode;
-        if (mode !== 2 /* Percentage */ && mode !== 3 /* IndexedTo100 */) {
+        const priceScale = this._internal__series._internal_priceScale();
+        const mode = priceScale._internal_mode()._internal_mode;
+        if (mode !== 2 /* PriceScaleMode.Percentage */ && mode !== 3 /* PriceScaleMode.IndexedTo100 */) {
             return;
         }
-        var seriesOptions = this._internal__series._internal_options();
+        const seriesOptions = this._internal__series._internal_options();
         if (!seriesOptions.baseLineVisible || !this._internal__series._internal_visible()) {
             return;
         }
-        var firstValue = this._internal__series._internal_firstValue();
+        const firstValue = this._internal__series._internal_firstValue();
         if (firstValue === null) {
             return;
         }
@@ -3021,33 +3000,32 @@ var SeriesHorizontalBaseLinePaneView = /** @class */ (function (_super) {
         this._internal__lineRendererData._internal_color = seriesOptions.baseLineColor;
         this._internal__lineRendererData._internal_lineWidth = seriesOptions.baseLineWidth;
         this._internal__lineRendererData._internal_lineStyle = seriesOptions.baseLineStyle;
-    };
-    return SeriesHorizontalBaseLinePaneView;
-}(SeriesHorizontalLinePaneView));
+    }
+}
 
-var SeriesLastPriceAnimationRenderer = /** @class */ (function () {
-    function SeriesLastPriceAnimationRenderer() {
+class SeriesLastPriceAnimationRenderer {
+    constructor() {
         this._private__data = null;
     }
-    SeriesLastPriceAnimationRenderer.prototype._internal_setData = function (data) {
+    _internal_setData(data) {
         this._private__data = data;
-    };
-    SeriesLastPriceAnimationRenderer.prototype._internal_data = function () {
+    }
+    _internal_data() {
         return this._private__data;
-    };
-    SeriesLastPriceAnimationRenderer.prototype._internal_draw = function (ctx, pixelRatio, isHovered, hitTestData) {
-        var data = this._private__data;
+    }
+    _internal_draw(ctx, pixelRatio, isHovered, hitTestData) {
+        const data = this._private__data;
         if (data === null) {
             return;
         }
         ctx.save();
-        var tickWidth = Math.max(1, Math.floor(pixelRatio));
-        var correction = (tickWidth % 2) / 2;
-        var centerX = Math.round(data._internal_center.x * pixelRatio) + correction; // correct x coordinate only
-        var centerY = data._internal_center.y * pixelRatio;
+        const tickWidth = Math.max(1, Math.floor(pixelRatio));
+        const correction = (tickWidth % 2) / 2;
+        const centerX = Math.round(data._internal_center.x * pixelRatio) + correction; // correct x coordinate only
+        const centerY = data._internal_center.y * pixelRatio;
         ctx.fillStyle = data._internal_seriesLineColor;
         ctx.beginPath();
-        var centerPointRadius = Math.max(2, data._internal_seriesLineWidth * 1.5) * pixelRatio;
+        const centerPointRadius = Math.max(2, data._internal_seriesLineWidth * 1.5) * pixelRatio;
         ctx.arc(centerX, centerY, centerPointRadius, 0, 2 * Math.PI, false);
         ctx.fill();
         ctx.fillStyle = data._internal_fillColor;
@@ -3060,69 +3038,67 @@ var SeriesLastPriceAnimationRenderer = /** @class */ (function () {
         ctx.arc(centerX, centerY, data._internal_radius * pixelRatio + tickWidth / 2, 0, 2 * Math.PI, false);
         ctx.stroke();
         ctx.restore();
-    };
-    return SeriesLastPriceAnimationRenderer;
-}());
+    }
+}
 
-var animationStagesData = [
+const animationStagesData = [
     {
         _internal_start: 0,
-        _internal_end: 0.25 /* Stage1Period */,
-        _internal_startRadius: 4 /* Stage1StartCircleRadius */,
-        _internal_endRadius: 10 /* Stage1EndCircleRadius */,
-        _internal_startFillAlpha: 0.25 /* Stage1StartFillAlpha */,
-        _internal_endFillAlpha: 0 /* Stage1EndFillAlpha */,
-        _internal_startStrokeAlpha: 0.4 /* Stage1StartStrokeAlpha */,
-        _internal_endStrokeAlpha: 0.8 /* Stage1EndStrokeAlpha */,
+        _internal_end: 0.25 /* Constants.Stage1Period */,
+        _internal_startRadius: 4 /* Constants.Stage1StartCircleRadius */,
+        _internal_endRadius: 10 /* Constants.Stage1EndCircleRadius */,
+        _internal_startFillAlpha: 0.25 /* Constants.Stage1StartFillAlpha */,
+        _internal_endFillAlpha: 0 /* Constants.Stage1EndFillAlpha */,
+        _internal_startStrokeAlpha: 0.4 /* Constants.Stage1StartStrokeAlpha */,
+        _internal_endStrokeAlpha: 0.8 /* Constants.Stage1EndStrokeAlpha */,
     },
     {
-        _internal_start: 0.25 /* Stage1Period */,
-        _internal_end: 0.25 /* Stage1Period */ + 0.275 /* Stage2Period */,
-        _internal_startRadius: 10 /* Stage2StartCircleRadius */,
-        _internal_endRadius: 14 /* Stage2EndCircleRadius */,
-        _internal_startFillAlpha: 0 /* Stage2StartFillAlpha */,
-        _internal_endFillAlpha: 0 /* Stage2EndFillAlpha */,
-        _internal_startStrokeAlpha: 0.8 /* Stage2StartStrokeAlpha */,
-        _internal_endStrokeAlpha: 0 /* Stage2EndStrokeAlpha */,
+        _internal_start: 0.25 /* Constants.Stage1Period */,
+        _internal_end: 0.25 /* Constants.Stage1Period */ + 0.275 /* Constants.Stage2Period */,
+        _internal_startRadius: 10 /* Constants.Stage2StartCircleRadius */,
+        _internal_endRadius: 14 /* Constants.Stage2EndCircleRadius */,
+        _internal_startFillAlpha: 0 /* Constants.Stage2StartFillAlpha */,
+        _internal_endFillAlpha: 0 /* Constants.Stage2EndFillAlpha */,
+        _internal_startStrokeAlpha: 0.8 /* Constants.Stage2StartStrokeAlpha */,
+        _internal_endStrokeAlpha: 0 /* Constants.Stage2EndStrokeAlpha */,
     },
     {
-        _internal_start: 0.25 /* Stage1Period */ + 0.275 /* Stage2Period */,
-        _internal_end: 0.25 /* Stage1Period */ + 0.275 /* Stage2Period */ + 0.475 /* Stage3Period */,
-        _internal_startRadius: 14 /* Stage3StartCircleRadius */,
-        _internal_endRadius: 14 /* Stage3EndCircleRadius */,
-        _internal_startFillAlpha: 0 /* Stage3StartFillAlpha */,
-        _internal_endFillAlpha: 0 /* Stage3EndFillAlpha */,
-        _internal_startStrokeAlpha: 0 /* Stage3StartStrokeAlpha */,
-        _internal_endStrokeAlpha: 0 /* Stage3EndStrokeAlpha */,
+        _internal_start: 0.25 /* Constants.Stage1Period */ + 0.275 /* Constants.Stage2Period */,
+        _internal_end: 0.25 /* Constants.Stage1Period */ + 0.275 /* Constants.Stage2Period */ + 0.475 /* Constants.Stage3Period */,
+        _internal_startRadius: 14 /* Constants.Stage3StartCircleRadius */,
+        _internal_endRadius: 14 /* Constants.Stage3EndCircleRadius */,
+        _internal_startFillAlpha: 0 /* Constants.Stage3StartFillAlpha */,
+        _internal_endFillAlpha: 0 /* Constants.Stage3EndFillAlpha */,
+        _internal_startStrokeAlpha: 0 /* Constants.Stage3StartStrokeAlpha */,
+        _internal_endStrokeAlpha: 0 /* Constants.Stage3EndStrokeAlpha */,
     },
 ];
 function color(seriesLineColor, stage, startAlpha, endAlpha) {
-    var alpha = startAlpha + (endAlpha - startAlpha) * stage;
+    const alpha = startAlpha + (endAlpha - startAlpha) * stage;
     return applyAlpha(seriesLineColor, alpha);
 }
 function radius(stage, startRadius, endRadius) {
     return startRadius + (endRadius - startRadius) * stage;
 }
 function animationData(durationSinceStart, lineColor) {
-    var globalStage = (durationSinceStart % 2600 /* AnimationPeriod */) / 2600 /* AnimationPeriod */;
-    var currentStageData;
-    for (var _i = 0, animationStagesData_1 = animationStagesData; _i < animationStagesData_1.length; _i++) {
-        var stageData = animationStagesData_1[_i];
+    const globalStage = (durationSinceStart % 2600 /* Constants.AnimationPeriod */) / 2600 /* Constants.AnimationPeriod */;
+    let currentStageData;
+    for (const stageData of animationStagesData) {
         if (globalStage >= stageData._internal_start && globalStage <= stageData._internal_end) {
             currentStageData = stageData;
             break;
         }
     }
     assert(currentStageData !== undefined, 'Last price animation internal logic error');
-    var subStage = (globalStage - currentStageData._internal_start) / (currentStageData._internal_end - currentStageData._internal_start);
+    const subStage = (globalStage - currentStageData._internal_start) / (currentStageData._internal_end - currentStageData._internal_start);
     return {
         _internal_fillColor: color(lineColor, subStage, currentStageData._internal_startFillAlpha, currentStageData._internal_endFillAlpha),
         _internal_strokeColor: color(lineColor, subStage, currentStageData._internal_startStrokeAlpha, currentStageData._internal_endStrokeAlpha),
         _internal_radius: radius(subStage, currentStageData._internal_startRadius, currentStageData._internal_endRadius),
     };
 }
-var SeriesLastPriceAnimationPaneView = /** @class */ (function () {
-    function SeriesLastPriceAnimationPaneView(series) {
+class SeriesLastPriceAnimationPaneView {
+    constructor(series) {
         this._private__renderer = new SeriesLastPriceAnimationRenderer();
         this._private__invalidated = true;
         this._private__stageInvalidated = true;
@@ -3130,46 +3106,46 @@ var SeriesLastPriceAnimationPaneView = /** @class */ (function () {
         this._private__endTime = this._private__startTime - 1;
         this._private__series = series;
     }
-    SeriesLastPriceAnimationPaneView.prototype._internal_onDataCleared = function () {
+    _internal_onDataCleared() {
         this._private__endTime = this._private__startTime - 1;
         this._internal_update();
-    };
-    SeriesLastPriceAnimationPaneView.prototype._internal_onNewRealtimeDataReceived = function () {
+    }
+    _internal_onNewRealtimeDataReceived() {
         this._internal_update();
-        if (this._private__series._internal_options().lastPriceAnimation === 2 /* OnDataUpdate */) {
-            var now = performance.now();
-            var timeToAnimationEnd = this._private__endTime - now;
+        if (this._private__series._internal_options().lastPriceAnimation === 2 /* LastPriceAnimationMode.OnDataUpdate */) {
+            const now = performance.now();
+            const timeToAnimationEnd = this._private__endTime - now;
             if (timeToAnimationEnd > 0) {
-                if (timeToAnimationEnd < 2600 /* AnimationPeriod */ / 4) {
-                    this._private__endTime += 2600 /* AnimationPeriod */;
+                if (timeToAnimationEnd < 2600 /* Constants.AnimationPeriod */ / 4) {
+                    this._private__endTime += 2600 /* Constants.AnimationPeriod */;
                 }
                 return;
             }
             this._private__startTime = now;
-            this._private__endTime = now + 2600 /* AnimationPeriod */;
+            this._private__endTime = now + 2600 /* Constants.AnimationPeriod */;
         }
-    };
-    SeriesLastPriceAnimationPaneView.prototype._internal_update = function () {
+    }
+    _internal_update() {
         this._private__invalidated = true;
-    };
-    SeriesLastPriceAnimationPaneView.prototype._internal_invalidateStage = function () {
+    }
+    _internal_invalidateStage() {
         this._private__stageInvalidated = true;
-    };
-    SeriesLastPriceAnimationPaneView.prototype._internal_visible = function () {
+    }
+    _internal_visible() {
         // center point is always visible if lastPriceAnimation is not LastPriceAnimationMode.Disabled
-        return this._private__series._internal_options().lastPriceAnimation !== 0 /* Disabled */;
-    };
-    SeriesLastPriceAnimationPaneView.prototype._internal_animationActive = function () {
+        return this._private__series._internal_options().lastPriceAnimation !== 0 /* LastPriceAnimationMode.Disabled */;
+    }
+    _internal_animationActive() {
         switch (this._private__series._internal_options().lastPriceAnimation) {
-            case 0 /* Disabled */:
+            case 0 /* LastPriceAnimationMode.Disabled */:
                 return false;
-            case 1 /* Continuous */:
+            case 1 /* LastPriceAnimationMode.Continuous */:
                 return true;
-            case 2 /* OnDataUpdate */:
+            case 2 /* LastPriceAnimationMode.OnDataUpdate */:
                 return performance.now() <= this._private__endTime;
         }
-    };
-    SeriesLastPriceAnimationPaneView.prototype._internal_renderer = function (height, width) {
+    }
+    _internal_renderer(height, width) {
         if (this._private__invalidated) {
             this._private__updateImpl(height, width);
             this._private__invalidated = false;
@@ -3180,26 +3156,26 @@ var SeriesLastPriceAnimationPaneView = /** @class */ (function () {
             this._private__stageInvalidated = false;
         }
         return this._private__renderer;
-    };
-    SeriesLastPriceAnimationPaneView.prototype._private__updateImpl = function (height, width) {
+    }
+    _private__updateImpl(height, width) {
         this._private__renderer._internal_setData(null);
-        var timeScale = this._private__series._internal_model()._internal_timeScale();
-        var visibleRange = timeScale._internal_visibleStrictRange();
-        var firstValue = this._private__series._internal_firstValue();
+        const timeScale = this._private__series._internal_model()._internal_timeScale();
+        const visibleRange = timeScale._internal_visibleStrictRange();
+        const firstValue = this._private__series._internal_firstValue();
         if (visibleRange === null || firstValue === null) {
             return;
         }
-        var lastValue = this._private__series._internal_lastValueData(true);
+        const lastValue = this._private__series._internal_lastValueData(true);
         if (lastValue._internal_noData || !visibleRange._internal_contains(lastValue._internal_index)) {
             return;
         }
-        var lastValuePoint = {
+        const lastValuePoint = {
             x: timeScale._internal_indexToCoordinate(lastValue._internal_index),
             y: this._private__series._internal_priceScale()._internal_priceToCoordinate(lastValue._internal_price, firstValue._internal_value),
         };
-        var seriesLineColor = lastValue._internal_color;
-        var seriesLineWidth = this._private__series._internal_options().lineWidth;
-        var data = animationData(this._private__duration(), seriesLineColor);
+        const seriesLineColor = lastValue._internal_color;
+        const seriesLineWidth = this._private__series._internal_options().lineWidth;
+        const data = animationData(this._private__duration(), seriesLineColor);
         this._private__renderer._internal_setData({
             _internal_seriesLineColor: seriesLineColor,
             _internal_seriesLineWidth: seriesLineWidth,
@@ -3208,24 +3184,23 @@ var SeriesLastPriceAnimationPaneView = /** @class */ (function () {
             _internal_radius: data._internal_radius,
             _internal_center: lastValuePoint,
         });
-    };
-    SeriesLastPriceAnimationPaneView.prototype._private__updateRendererDataStage = function () {
-        var rendererData = this._private__renderer._internal_data();
+    }
+    _private__updateRendererDataStage() {
+        const rendererData = this._private__renderer._internal_data();
         if (rendererData !== null) {
-            var data = animationData(this._private__duration(), rendererData._internal_seriesLineColor);
+            const data = animationData(this._private__duration(), rendererData._internal_seriesLineColor);
             rendererData._internal_fillColor = data._internal_fillColor;
             rendererData._internal_strokeColor = data._internal_strokeColor;
             rendererData._internal_radius = data._internal_radius;
         }
-    };
-    SeriesLastPriceAnimationPaneView.prototype._private__duration = function () {
-        return this._internal_animationActive() ? performance.now() - this._private__startTime : 2600 /* AnimationPeriod */ - 1;
-    };
-    return SeriesLastPriceAnimationPaneView;
-}());
+    }
+    _private__duration() {
+        return this._internal_animationActive() ? performance.now() - this._private__startTime : 2600 /* Constants.AnimationPeriod */ - 1;
+    }
+}
 
 function size(barSpacing, coeff) {
-    var result = Math.min(Math.max(barSpacing, 12 /* MinShapeSize */), 30 /* MaxShapeSize */) * coeff;
+    const result = Math.min(Math.max(barSpacing, 12 /* Constants.MinShapeSize */), 30 /* Constants.MaxShapeSize */) * coeff;
     return ceiledOdd(result);
 }
 function shapeSize(shape, originalSize) {
@@ -3243,30 +3218,30 @@ function calculateShapeHeight(barSpacing) {
     return ceiledEven(size(barSpacing, 1));
 }
 function shapeMargin(barSpacing) {
-    return Math.max(size(barSpacing, 0.1), 3 /* MinShapeMargin */);
+    return Math.max(size(barSpacing, 0.1), 3 /* Constants.MinShapeMargin */);
 }
 
 function drawSquare(ctx, centerX, centerY, size) {
-    var squareSize = shapeSize('square', size);
-    var halfSize = (squareSize - 1) / 2;
-    var left = centerX - halfSize;
-    var top = centerY - halfSize;
+    const squareSize = shapeSize('square', size);
+    const halfSize = (squareSize - 1) / 2;
+    const left = centerX - halfSize;
+    const top = centerY - halfSize;
     ctx.fillRect(left, top, squareSize, squareSize);
 }
 function hitTestSquare(centerX, centerY, size, x, y) {
-    var squareSize = shapeSize('square', size);
-    var halfSize = (squareSize - 1) / 2;
-    var left = centerX - halfSize;
-    var top = centerY - halfSize;
+    const squareSize = shapeSize('square', size);
+    const halfSize = (squareSize - 1) / 2;
+    const left = centerX - halfSize;
+    const top = centerY - halfSize;
     return x >= left && x <= left + squareSize &&
         y >= top && y <= top + squareSize;
 }
 
 function drawArrow(up, ctx, centerX, centerY, size) {
-    var arrowSize = shapeSize('arrowUp', size);
-    var halfArrowSize = (arrowSize - 1) / 2;
-    var baseSize = ceiledOdd(size / 2);
-    var halfBaseSize = (baseSize - 1) / 2;
+    const arrowSize = shapeSize('arrowUp', size);
+    const halfArrowSize = (arrowSize - 1) / 2;
+    const baseSize = ceiledOdd(size / 2);
+    const halfBaseSize = (baseSize - 1) / 2;
     ctx.beginPath();
     if (up) {
         ctx.moveTo(centerX - halfArrowSize, centerY);
@@ -3294,18 +3269,18 @@ function hitTestArrow(up, centerX, centerY, size, x, y) {
 }
 
 function drawCircle(ctx, centerX, centerY, size) {
-    var circleSize = shapeSize('circle', size);
-    var halfSize = (circleSize - 1) / 2;
+    const circleSize = shapeSize('circle', size);
+    const halfSize = (circleSize - 1) / 2;
     ctx.beginPath();
     ctx.arc(centerX, centerY, halfSize, 0, 2 * Math.PI, false);
     ctx.fill();
 }
 function hitTestCircle(centerX, centerY, size, x, y) {
-    var circleSize = shapeSize('circle', size);
-    var tolerance = 2 + circleSize / 2;
-    var xOffset = centerX - x;
-    var yOffset = centerY - y;
-    var dist = Math.sqrt(xOffset * xOffset + yOffset * yOffset);
+    const circleSize = shapeSize('circle', size);
+    const tolerance = 2 + circleSize / 2;
+    const xOffset = centerX - x;
+    const yOffset = centerY - y;
+    const dist = Math.sqrt(xOffset * xOffset + yOffset * yOffset);
     return dist <= tolerance;
 }
 
@@ -3313,39 +3288,37 @@ function drawText(ctx, text, x, y) {
     ctx.fillText(text, x, y);
 }
 function hitTestText(textX, textY, textWidth, textHeight, x, y) {
-    var halfHeight = textHeight / 2;
+    const halfHeight = textHeight / 2;
     return x >= textX && x <= textX + textWidth &&
         y >= textY - halfHeight && y <= textY + halfHeight;
 }
 
-var SeriesMarkersRenderer = /** @class */ (function (_super) {
-    __extends(SeriesMarkersRenderer, _super);
-    function SeriesMarkersRenderer() {
-        var _this = _super !== null && _super.apply(this, arguments) || this;
-        _this._private__data = null;
-        _this._private__textWidthCache = new TextWidthCache();
-        _this._private__fontSize = -1;
-        _this._private__fontFamily = '';
-        _this._private__font = '';
-        return _this;
+class SeriesMarkersRenderer extends ScaledRenderer {
+    constructor() {
+        super(...arguments);
+        this._private__data = null;
+        this._private__textWidthCache = new TextWidthCache();
+        this._private__fontSize = -1;
+        this._private__fontFamily = '';
+        this._private__font = '';
     }
-    SeriesMarkersRenderer.prototype._internal_setData = function (data) {
+    _internal_setData(data) {
         this._private__data = data;
-    };
-    SeriesMarkersRenderer.prototype._internal_setParams = function (fontSize, fontFamily) {
+    }
+    _internal_setParams(fontSize, fontFamily) {
         if (this._private__fontSize !== fontSize || this._private__fontFamily !== fontFamily) {
             this._private__fontSize = fontSize;
             this._private__fontFamily = fontFamily;
             this._private__font = makeFont(fontSize, fontFamily);
             this._private__textWidthCache._internal_reset();
         }
-    };
-    SeriesMarkersRenderer.prototype._internal_hitTest = function (x, y) {
+    }
+    _internal_hitTest(x, y) {
         if (this._private__data === null || this._private__data._internal_visibleRange === null) {
             return null;
         }
-        for (var i = this._private__data._internal_visibleRange.from; i < this._private__data._internal_visibleRange.to; i++) {
-            var item = this._private__data._internal_items[i];
+        for (let i = this._private__data._internal_visibleRange.from; i < this._private__data._internal_visibleRange.to; i++) {
+            const item = this._private__data._internal_items[i];
             if (hitTestItem(item, x, y)) {
                 return {
                     _internal_hitTestData: item._internal_internalId,
@@ -3354,24 +3327,23 @@ var SeriesMarkersRenderer = /** @class */ (function (_super) {
             }
         }
         return null;
-    };
-    SeriesMarkersRenderer.prototype._internal__drawImpl = function (ctx, isHovered, hitTestData) {
+    }
+    _internal__drawImpl(ctx, isHovered, hitTestData) {
         if (this._private__data === null || this._private__data._internal_visibleRange === null) {
             return;
         }
         ctx.textBaseline = 'middle';
         ctx.font = this._private__font;
-        for (var i = this._private__data._internal_visibleRange.from; i < this._private__data._internal_visibleRange.to; i++) {
-            var item = this._private__data._internal_items[i];
+        for (let i = this._private__data._internal_visibleRange.from; i < this._private__data._internal_visibleRange.to; i++) {
+            const item = this._private__data._internal_items[i];
             if (item._internal_text !== undefined) {
                 item._internal_text._internal_width = this._private__textWidthCache._internal_measureText(ctx, item._internal_text._internal_content);
                 item._internal_text._internal_height = this._private__fontSize;
             }
             drawItem(item, ctx);
         }
-    };
-    return SeriesMarkersRenderer;
-}(ScaledRenderer));
+    }
+}
 function drawItem(item, ctx) {
     ctx.fillStyle = item._internal_color;
     if (item._internal_text !== undefined) {
@@ -3423,26 +3395,26 @@ function hitTestShape(item, x, y) {
 
 // eslint-disable-next-line max-params
 function fillSizeAndY(rendererItem, marker, seriesData, offsets, textHeight, shapeMargin, priceScale, timeScale, firstValue) {
-    var inBarPrice = isNumber(seriesData) ? seriesData : seriesData.close;
-    var highPrice = isNumber(seriesData) ? seriesData : seriesData.high;
-    var lowPrice = isNumber(seriesData) ? seriesData : seriesData.low;
-    var sizeMultiplier = isNumber(marker.size) ? Math.max(marker.size, 0) : 1;
-    var shapeSize = calculateShapeHeight(timeScale._internal_barSpacing()) * sizeMultiplier;
-    var halfSize = shapeSize / 2;
+    const inBarPrice = isNumber(seriesData) ? seriesData : seriesData._internal_close;
+    const highPrice = isNumber(seriesData) ? seriesData : seriesData._internal_high;
+    const lowPrice = isNumber(seriesData) ? seriesData : seriesData._internal_low;
+    const sizeMultiplier = isNumber(marker.size) ? Math.max(marker.size, 0) : 1;
+    const shapeSize = calculateShapeHeight(timeScale._internal_barSpacing()) * sizeMultiplier;
+    const halfSize = shapeSize / 2;
     rendererItem._internal_size = shapeSize;
     switch (marker.position) {
         case 'inBar': {
             rendererItem._internal_y = priceScale._internal_priceToCoordinate(inBarPrice, firstValue);
             if (rendererItem._internal_text !== undefined) {
-                rendererItem._internal_text._internal_y = rendererItem._internal_y + halfSize + shapeMargin + textHeight * (0.5 + 0.1 /* TextMargin */);
+                rendererItem._internal_text._internal_y = rendererItem._internal_y + halfSize + shapeMargin + textHeight * (0.5 + 0.1 /* Constants.TextMargin */);
             }
             return;
         }
         case 'aboveBar': {
             rendererItem._internal_y = (priceScale._internal_priceToCoordinate(highPrice, firstValue) - halfSize - offsets._internal_aboveBar);
             if (rendererItem._internal_text !== undefined) {
-                rendererItem._internal_text._internal_y = rendererItem._internal_y - halfSize - textHeight * (0.5 + 0.1 /* TextMargin */);
-                offsets._internal_aboveBar += textHeight * (1 + 2 * 0.1 /* TextMargin */);
+                rendererItem._internal_text._internal_y = rendererItem._internal_y - halfSize - textHeight * (0.5 + 0.1 /* Constants.TextMargin */);
+                offsets._internal_aboveBar += textHeight * (1 + 2 * 0.1 /* Constants.TextMargin */);
             }
             offsets._internal_aboveBar += shapeSize + shapeMargin;
             return;
@@ -3450,8 +3422,8 @@ function fillSizeAndY(rendererItem, marker, seriesData, offsets, textHeight, sha
         case 'belowBar': {
             rendererItem._internal_y = (priceScale._internal_priceToCoordinate(lowPrice, firstValue) + halfSize + offsets._internal_belowBar);
             if (rendererItem._internal_text !== undefined) {
-                rendererItem._internal_text._internal_y = rendererItem._internal_y + halfSize + shapeMargin + textHeight * (0.5 + 0.1 /* TextMargin */);
-                offsets._internal_belowBar += textHeight * (1 + 2 * 0.1 /* TextMargin */);
+                rendererItem._internal_text._internal_y = rendererItem._internal_y + halfSize + shapeMargin + textHeight * (0.5 + 0.1 /* Constants.TextMargin */);
+                offsets._internal_belowBar += textHeight * (1 + 2 * 0.1 /* Constants.TextMargin */);
             }
             offsets._internal_belowBar += shapeSize + shapeMargin;
             return;
@@ -3459,8 +3431,8 @@ function fillSizeAndY(rendererItem, marker, seriesData, offsets, textHeight, sha
     }
     ensureNever(marker.position);
 }
-var SeriesMarkersPaneView = /** @class */ (function () {
-    function SeriesMarkersPaneView(series, model) {
+class SeriesMarkersPaneView {
+    constructor(series, model) {
         this._private__invalidated = true;
         this._private__dataInvalidated = true;
         this._private__autoScaleMarginsInvalidated = true;
@@ -3473,31 +3445,31 @@ var SeriesMarkersPaneView = /** @class */ (function () {
             _internal_visibleRange: null,
         };
     }
-    SeriesMarkersPaneView.prototype._internal_update = function (updateType) {
+    _internal_update(updateType) {
         this._private__invalidated = true;
         this._private__autoScaleMarginsInvalidated = true;
         if (updateType === 'data') {
             this._private__dataInvalidated = true;
         }
-    };
-    SeriesMarkersPaneView.prototype._internal_renderer = function (height, width, addAnchors) {
+    }
+    _internal_renderer(height, width, addAnchors) {
         if (!this._private__series._internal_visible()) {
             return null;
         }
         if (this._private__invalidated) {
             this._internal__makeValid();
         }
-        var layout = this._private__model._internal_options().layout;
+        const layout = this._private__model._internal_options().layout;
         this._private__renderer._internal_setParams(layout.fontSize, layout.fontFamily);
         this._private__renderer._internal_setData(this._private__data);
         return this._private__renderer;
-    };
-    SeriesMarkersPaneView.prototype._internal_autoScaleMargins = function () {
+    }
+    _internal_autoScaleMargins() {
         if (this._private__autoScaleMarginsInvalidated) {
             if (this._private__series._internal_indexedMarkers().length > 0) {
-                var barSpacing = this._private__model._internal_timeScale()._internal_barSpacing();
-                var shapeMargin$1 = shapeMargin(barSpacing);
-                var marginsAboveAndBelow = calculateShapeHeight(barSpacing) * 1.5 + shapeMargin$1 * 2;
+                const barSpacing = this._private__model._internal_timeScale()._internal_barSpacing();
+                const shapeMargin$1 = shapeMargin(barSpacing);
+                const marginsAboveAndBelow = calculateShapeHeight(barSpacing) * 1.5 + shapeMargin$1 * 2;
                 this._private__autoScaleMargins = {
                     above: marginsAboveAndBelow,
                     below: marginsAboveAndBelow,
@@ -3509,54 +3481,54 @@ var SeriesMarkersPaneView = /** @class */ (function () {
             this._private__autoScaleMarginsInvalidated = false;
         }
         return this._private__autoScaleMargins;
-    };
-    SeriesMarkersPaneView.prototype._internal__makeValid = function () {
-        var priceScale = this._private__series._internal_priceScale();
-        var timeScale = this._private__model._internal_timeScale();
-        var seriesMarkers = this._private__series._internal_indexedMarkers();
+    }
+    _internal__makeValid() {
+        const priceScale = this._private__series._internal_priceScale();
+        const timeScale = this._private__model._internal_timeScale();
+        const seriesMarkers = this._private__series._internal_indexedMarkers();
         if (this._private__dataInvalidated) {
-            this._private__data._internal_items = seriesMarkers.map(function (marker) { return ({
+            this._private__data._internal_items = seriesMarkers.map((marker) => ({
                 _internal_time: marker.time,
                 _internal_x: 0,
                 _internal_y: 0,
                 _internal_size: 0,
                 _internal_shape: marker.shape,
                 _internal_color: marker.color,
-                _internal_internalId: marker._internal_internalId,
+                _internal_internalId: marker.internalId,
                 _internal_externalId: marker.id,
                 _internal_text: undefined,
-            }); });
+            }));
             this._private__dataInvalidated = false;
         }
-        var layoutOptions = this._private__model._internal_options().layout;
+        const layoutOptions = this._private__model._internal_options().layout;
         this._private__data._internal_visibleRange = null;
-        var visibleBars = timeScale._internal_visibleStrictRange();
+        const visibleBars = timeScale._internal_visibleStrictRange();
         if (visibleBars === null) {
             return;
         }
-        var firstValue = this._private__series._internal_firstValue();
+        const firstValue = this._private__series._internal_firstValue();
         if (firstValue === null) {
             return;
         }
         if (this._private__data._internal_items.length === 0) {
             return;
         }
-        var prevTimeIndex = NaN;
-        var shapeMargin$1 = shapeMargin(timeScale._internal_barSpacing());
-        var offsets = {
+        let prevTimeIndex = NaN;
+        const shapeMargin$1 = shapeMargin(timeScale._internal_barSpacing());
+        const offsets = {
             _internal_aboveBar: shapeMargin$1,
             _internal_belowBar: shapeMargin$1,
         };
         this._private__data._internal_visibleRange = visibleTimedValues(this._private__data._internal_items, visibleBars, true);
-        for (var index = this._private__data._internal_visibleRange.from; index < this._private__data._internal_visibleRange.to; index++) {
-            var marker = seriesMarkers[index];
+        for (let index = this._private__data._internal_visibleRange.from; index < this._private__data._internal_visibleRange.to; index++) {
+            const marker = seriesMarkers[index];
             if (marker.time !== prevTimeIndex) {
                 // new bar, reset stack counter
                 offsets._internal_aboveBar = shapeMargin$1;
                 offsets._internal_belowBar = shapeMargin$1;
                 prevTimeIndex = marker.time;
             }
-            var rendererItem = this._private__data._internal_items[index];
+            const rendererItem = this._private__data._internal_items[index];
             rendererItem._internal_x = timeScale._internal_indexToCoordinate(marker.time);
             if (marker.text !== undefined && marker.text.length > 0) {
                 rendererItem._internal_text = {
@@ -3566,31 +3538,29 @@ var SeriesMarkersPaneView = /** @class */ (function () {
                     _internal_height: 0,
                 };
             }
-            var dataAt = this._private__series._internal_dataAt(marker.time);
+            const dataAt = this._private__series._internal_dataAt(marker.time);
             if (dataAt === null) {
                 continue;
             }
             fillSizeAndY(rendererItem, marker, dataAt, offsets, layoutOptions.fontSize, shapeMargin$1, priceScale, timeScale, firstValue._internal_value);
         }
         this._private__invalidated = false;
-    };
-    return SeriesMarkersPaneView;
-}());
+    }
+}
 
-var SeriesPriceLinePaneView = /** @class */ (function (_super) {
-    __extends(SeriesPriceLinePaneView, _super);
+class SeriesPriceLinePaneView extends SeriesHorizontalLinePaneView {
     // eslint-disable-next-line no-useless-constructor
-    function SeriesPriceLinePaneView(series) {
-        return _super.call(this, series) || this;
+    constructor(series) {
+        super(series);
     }
-    SeriesPriceLinePaneView.prototype._internal__updateImpl = function (height, width) {
-        var data = this._internal__lineRendererData;
+    _internal__updateImpl(height, width) {
+        const data = this._internal__lineRendererData;
         data._internal_visible = false;
-        var seriesOptions = this._internal__series._internal_options();
+        const seriesOptions = this._internal__series._internal_options();
         if (!seriesOptions.priceLineVisible || !this._internal__series._internal_visible()) {
             return;
         }
-        var lastValueData = this._internal__series._internal_lastValueData(seriesOptions.priceLineSource === 0 /* LastBar */);
+        const lastValueData = this._internal__series._internal_lastValueData(seriesOptions.priceLineSource === 0 /* PriceLineSource.LastBar */);
         if (lastValueData._internal_noData) {
             return;
         }
@@ -3601,29 +3571,26 @@ var SeriesPriceLinePaneView = /** @class */ (function (_super) {
         data._internal_height = height;
         data._internal_lineWidth = seriesOptions.priceLineWidth;
         data._internal_lineStyle = seriesOptions.priceLineStyle;
-    };
-    return SeriesPriceLinePaneView;
-}(SeriesHorizontalLinePaneView));
+    }
+}
 
-var SeriesPriceAxisView = /** @class */ (function (_super) {
-    __extends(SeriesPriceAxisView, _super);
-    function SeriesPriceAxisView(source) {
-        var _this = _super.call(this) || this;
-        _this._private__source = source;
-        return _this;
+class SeriesPriceAxisView extends PriceAxisView {
+    constructor(source) {
+        super();
+        this._private__source = source;
     }
-    SeriesPriceAxisView.prototype._internal__updateRendererData = function (axisRendererData, paneRendererData, commonRendererData) {
+    _internal__updateRendererData(axisRendererData, paneRendererData, commonRendererData) {
         axisRendererData._internal_visible = false;
         paneRendererData._internal_visible = false;
-        var source = this._private__source;
+        const source = this._private__source;
         if (!source._internal_visible()) {
             return;
         }
-        var seriesOptions = source._internal_options();
-        var showSeriesLastValue = seriesOptions.lastValueVisible;
-        var showSymbolLabel = source._internal_title() !== '';
-        var showPriceAndPercentage = seriesOptions.seriesLastValueMode === 0 /* LastPriceAndPercentageValue */;
-        var lastValueData = source._internal_lastValueData(false);
+        const seriesOptions = source._internal_options();
+        const showSeriesLastValue = seriesOptions.lastValueVisible;
+        const showSymbolLabel = source._internal_title() !== '';
+        const showPriceAndPercentage = seriesOptions.seriesLastValueMode === 0 /* PriceAxisLastValueMode.LastPriceAndPercentageValue */;
+        const lastValueData = source._internal_lastValueData(false);
         if (lastValueData._internal_noData) {
             return;
         }
@@ -3635,27 +3602,29 @@ var SeriesPriceAxisView = /** @class */ (function (_super) {
             paneRendererData._internal_text = this._internal__paneText(lastValueData, showSeriesLastValue, showSymbolLabel, showPriceAndPercentage);
             paneRendererData._internal_visible = paneRendererData._internal_text.length > 0;
         }
-        var lastValueColor = source._internal_priceLineColor(lastValueData._internal_color);
-        var colors = generateContrastColors(lastValueColor);
+        const lastValueColor = source._internal_priceLineColor(lastValueData._internal_color);
+        const colors = generateContrastColors(lastValueColor);
         commonRendererData._internal_background = colors._internal_background;
         commonRendererData._internal_color = colors._internal_foreground;
         commonRendererData._internal_coordinate = lastValueData._internal_coordinate;
         paneRendererData._internal_borderColor = source._internal_model()._internal_backgroundColorAtYPercentFromTop(lastValueData._internal_coordinate / source._internal_priceScale()._internal_height());
         axisRendererData._internal_borderColor = lastValueColor;
-    };
-    SeriesPriceAxisView.prototype._internal__paneText = function (lastValue, showSeriesLastValue, showSymbolLabel, showPriceAndPercentage) {
-        var result = '';
-        var title = this._private__source._internal_title();
+        axisRendererData._internal_color = commonRendererData._internal_color;
+        paneRendererData._internal_color = commonRendererData._internal_color;
+    }
+    _internal__paneText(lastValue, showSeriesLastValue, showSymbolLabel, showPriceAndPercentage) {
+        let result = '';
+        const title = this._private__source._internal_title();
         if (showSymbolLabel && title.length !== 0) {
-            result += "".concat(title, " ");
+            result += `${title} `;
         }
         if (showSeriesLastValue && showPriceAndPercentage) {
             result += this._private__source._internal_priceScale()._internal_isPercentage() ?
                 lastValue._internal_formattedPriceAbsolute : lastValue._internal_formattedPricePercentage;
         }
         return result.trim();
-    };
-    SeriesPriceAxisView.prototype._internal__axisText = function (lastValueData, showSeriesLastValue, showPriceAndPercentage) {
+    }
+    _internal__axisText(lastValueData, showSeriesLastValue, showPriceAndPercentage) {
         if (!showSeriesLastValue) {
             return '';
         }
@@ -3664,89 +3633,87 @@ var SeriesPriceAxisView = /** @class */ (function (_super) {
         }
         return this._private__source._internal_priceScale()._internal_isPercentage() ?
             lastValueData._internal_formattedPricePercentage : lastValueData._internal_formattedPriceAbsolute;
-    };
-    return SeriesPriceAxisView;
-}(PriceAxisView));
+    }
+}
 
-var PriceRangeImpl = /** @class */ (function () {
-    function PriceRangeImpl(minValue, maxValue) {
+class PriceRangeImpl {
+    constructor(minValue, maxValue) {
         this._private__minValue = minValue;
         this._private__maxValue = maxValue;
     }
-    PriceRangeImpl.prototype._internal_equals = function (pr) {
+    _internal_equals(pr) {
         if (pr === null) {
             return false;
         }
         return this._private__minValue === pr._private__minValue && this._private__maxValue === pr._private__maxValue;
-    };
-    PriceRangeImpl.prototype._internal_clone = function () {
+    }
+    _internal_clone() {
         return new PriceRangeImpl(this._private__minValue, this._private__maxValue);
-    };
-    PriceRangeImpl.prototype._internal_minValue = function () {
+    }
+    _internal_minValue() {
         return this._private__minValue;
-    };
-    PriceRangeImpl.prototype._internal_maxValue = function () {
+    }
+    _internal_maxValue() {
         return this._private__maxValue;
-    };
-    PriceRangeImpl.prototype._internal_length = function () {
+    }
+    _internal_length() {
         return this._private__maxValue - this._private__minValue;
-    };
-    PriceRangeImpl.prototype._internal_isEmpty = function () {
+    }
+    _internal_isEmpty() {
         return this._private__maxValue === this._private__minValue || Number.isNaN(this._private__maxValue) || Number.isNaN(this._private__minValue);
-    };
-    PriceRangeImpl.prototype._internal_merge = function (anotherRange) {
+    }
+    _internal_merge(anotherRange) {
         if (anotherRange === null) {
             return this;
         }
         return new PriceRangeImpl(Math.min(this._internal_minValue(), anotherRange._internal_minValue()), Math.max(this._internal_maxValue(), anotherRange._internal_maxValue()));
-    };
-    PriceRangeImpl.prototype._internal_scaleAroundCenter = function (coeff) {
+    }
+    _internal_scaleAroundCenter(coeff) {
         if (!isNumber(coeff)) {
             return;
         }
-        var delta = this._private__maxValue - this._private__minValue;
+        const delta = this._private__maxValue - this._private__minValue;
         if (delta === 0) {
             return;
         }
-        var center = (this._private__maxValue + this._private__minValue) * 0.5;
-        var maxDelta = this._private__maxValue - center;
-        var minDelta = this._private__minValue - center;
+        const center = (this._private__maxValue + this._private__minValue) * 0.5;
+        let maxDelta = this._private__maxValue - center;
+        let minDelta = this._private__minValue - center;
         maxDelta *= coeff;
         minDelta *= coeff;
         this._private__maxValue = center + maxDelta;
         this._private__minValue = center + minDelta;
-    };
-    PriceRangeImpl.prototype._internal_shift = function (delta) {
+    }
+    _internal_shift(delta) {
         if (!isNumber(delta)) {
             return;
         }
         this._private__maxValue += delta;
         this._private__minValue += delta;
-    };
-    PriceRangeImpl.prototype._internal_toRaw = function () {
+    }
+    _internal_toRaw() {
         return {
             minValue: this._private__minValue,
             maxValue: this._private__maxValue,
         };
-    };
-    PriceRangeImpl._internal_fromRaw = function (raw) {
+    }
+    static _internal_fromRaw(raw) {
         return (raw === null) ? null : new PriceRangeImpl(raw.minValue, raw.maxValue);
-    };
-    return PriceRangeImpl;
-}());
+    }
+}
 
-var AutoscaleInfoImpl = /** @class */ (function () {
-    function AutoscaleInfoImpl(priceRange, margins) {
+class AutoscaleInfoImpl {
+    constructor(priceRange, margins) {
         this._private__priceRange = priceRange;
         this._private__margins = margins || null;
     }
-    AutoscaleInfoImpl.prototype._internal_priceRange = function () {
+    _internal_priceRange() {
         return this._private__priceRange;
-    };
-    AutoscaleInfoImpl.prototype._internal_margins = function () {
+    }
+    _internal_margins() {
         return this._private__margins;
-    };
-    AutoscaleInfoImpl.prototype._internal_toRaw = function () {
+    }
+    _internal_toRaw() {
         if (this._private__priceRange === null) {
             return null;
         }
@@ -3754,28 +3721,25 @@ var AutoscaleInfoImpl = /** @class */ (function () {
             priceRange: this._private__priceRange._internal_toRaw(),
             margins: this._private__margins || undefined,
         };
-    };
-    AutoscaleInfoImpl._internal_fromRaw = function (raw) {
+    }
+    static _internal_fromRaw(raw) {
         return (raw === null) ? null : new AutoscaleInfoImpl(PriceRangeImpl._internal_fromRaw(raw.priceRange), raw.margins);
-    };
-    return AutoscaleInfoImpl;
-}());
-
-var CustomPriceLinePaneView = /** @class */ (function (_super) {
-    __extends(CustomPriceLinePaneView, _super);
-    function CustomPriceLinePaneView(series, priceLine) {
-        var _this = _super.call(this, series) || this;
-        _this._private__priceLine = priceLine;
-        return _this;
-    }
-    CustomPriceLinePaneView.prototype._internal__updateImpl = function (height, width) {
-        var data = this._internal__lineRendererData;
+    }
+}
+
+class CustomPriceLinePaneView extends SeriesHorizontalLinePaneView {
+    constructor(series, priceLine) {
+        super(series);
+        this._private__priceLine = priceLine;
+    }
+    _internal__updateImpl(height, width) {
+        const data = this._internal__lineRendererData;
         data._internal_visible = false;
-        var lineOptions = this._private__priceLine._internal_options();
+        const lineOptions = this._private__priceLine._internal_options();
         if (!this._internal__series._internal_visible() || !lineOptions.lineVisible) {
             return;
         }
-        var y = this._private__priceLine._internal_yCoord();
+        const y = this._private__priceLine._internal_yCoord();
         if (y === null) {
             return;
         }
@@ -3786,29 +3750,26 @@ var CustomPriceLinePaneView = /** @class */ (function (_super) {
         data._internal_height = height;
         data._internal_lineWidth = lineOptions.lineWidth;
         data._internal_lineStyle = lineOptions.lineStyle;
-    };
-    return CustomPriceLinePaneView;
-}(SeriesHorizontalLinePaneView));
-
-var CustomPriceLinePriceAxisView = /** @class */ (function (_super) {
-    __extends(CustomPriceLinePriceAxisView, _super);
-    function CustomPriceLinePriceAxisView(series, priceLine) {
-        var _this = _super.call(this) || this;
-        _this._private__series = series;
-        _this._private__priceLine = priceLine;
-        return _this;
-    }
-    CustomPriceLinePriceAxisView.prototype._internal__updateRendererData = function (axisRendererData, paneRendererData, commonData) {
+    }
+}
+
+class CustomPriceLinePriceAxisView extends PriceAxisView {
+    constructor(series, priceLine) {
+        super();
+        this._private__series = series;
+        this._private__priceLine = priceLine;
+    }
+    _internal__updateRendererData(axisRendererData, paneRendererData, commonData) {
         axisRendererData._internal_visible = false;
         paneRendererData._internal_visible = false;
-        var options = this._private__priceLine._internal_options();
-        var labelVisible = options.axisLabelVisible;
-        var showPaneLabel = options.title !== '';
-        var series = this._private__series;
+        const options = this._private__priceLine._internal_options();
+        const labelVisible = options.axisLabelVisible;
+        const showPaneLabel = options.title !== '';
+        const series = this._private__series;
         if (!labelVisible || !series._internal_visible()) {
             return;
         }
-        var y = this._private__priceLine._internal_yCoord();
+        const y = this._private__priceLine._internal_yCoord();
         if (y === null) {
             return;
         }
@@ -3817,279 +3778,296 @@ var CustomPriceLinePriceAxisView = /** @class */ (function (_super) {
             paneRendererData._internal_visible = true;
         }
         paneRendererData._internal_borderColor = series._internal_model()._internal_backgroundColorAtYPercentFromTop(y / series._internal_priceScale()._internal_height());
-        axisRendererData._internal_text = series._internal_priceScale()._internal_formatPriceAbsolute(options.price);
+        axisRendererData._internal_text = this._private__formatPrice(options.price);
         axisRendererData._internal_visible = true;
-        var colors = generateContrastColors(options.color);
+        const colors = generateContrastColors(options.color);
         commonData._internal_background = colors._internal_background;
         commonData._internal_color = colors._internal_foreground;
         commonData._internal_coordinate = y;
-    };
-    return CustomPriceLinePriceAxisView;
-}(PriceAxisView));
+    }
+    _private__formatPrice(price) {
+        const firstValue = this._private__series._internal_firstValue();
+        if (firstValue === null) {
+            return '';
+        }
+        return this._private__series._internal_priceScale()._internal_formatPrice(price, firstValue._internal_value);
+    }
+}
 
-var CustomPriceLine = /** @class */ (function () {
-    function CustomPriceLine(series, options) {
+class CustomPriceLine {
+    constructor(series, options) {
         this._private__series = series;
         this._private__options = options;
         this._private__priceLineView = new CustomPriceLinePaneView(series, this);
         this._private__priceAxisView = new CustomPriceLinePriceAxisView(series, this);
         this._private__panePriceAxisView = new PanePriceAxisView(this._private__priceAxisView, series, series._internal_model());
     }
-    CustomPriceLine.prototype._internal_applyOptions = function (options) {
+    _internal_applyOptions(options) {
         merge(this._private__options, options);
         this._internal_update();
         this._private__series._internal_model()._internal_lightUpdate();
-    };
-    CustomPriceLine.prototype._internal_options = function () {
+    }
+    _internal_options() {
         return this._private__options;
-    };
-    CustomPriceLine.prototype._internal_paneViews = function () {
-        return [
-            this._private__priceLineView,
-            this._private__panePriceAxisView,
-        ];
-    };
-    CustomPriceLine.prototype._internal_priceAxisView = function () {
+    }
+    _internal_paneView() {
+        return this._private__priceLineView;
+    }
+    _internal_labelPaneView() {
+        return this._private__panePriceAxisView;
+    }
+    _internal_priceAxisView() {
         return this._private__priceAxisView;
-    };
-    CustomPriceLine.prototype._internal_update = function () {
+    }
+    _internal_update() {
         this._private__priceLineView._internal_update();
         this._private__priceAxisView._internal_update();
-    };
-    CustomPriceLine.prototype._internal_yCoord = function () {
-        var series = this._private__series;
-        var priceScale = series._internal_priceScale();
-        var timeScale = series._internal_model()._internal_timeScale();
+    }
+    _internal_yCoord() {
+        const series = this._private__series;
+        const priceScale = series._internal_priceScale();
+        const timeScale = series._internal_model()._internal_timeScale();
         if (timeScale._internal_isEmpty() || priceScale._internal_isEmpty()) {
             return null;
         }
-        var firstValue = series._internal_firstValue();
+        const firstValue = series._internal_firstValue();
         if (firstValue === null) {
             return null;
         }
         return priceScale._internal_priceToCoordinate(this._private__options.price, firstValue._internal_value);
-    };
-    return CustomPriceLine;
-}());
+    }
+}
 
-var PriceDataSource = /** @class */ (function (_super) {
-    __extends(PriceDataSource, _super);
-    function PriceDataSource(model) {
-        var _this = _super.call(this) || this;
-        _this._private__model = model;
-        return _this;
+class PriceDataSource extends DataSource {
+    constructor(model) {
+        super();
+        this._private__model = model;
     }
-    PriceDataSource.prototype._internal_model = function () {
+    _internal_model() {
         return this._private__model;
-    };
-    return PriceDataSource;
-}(DataSource));
+    }
+}
 
-var emptyResult = {
-    _internal_barColor: '',
-    _internal_barBorderColor: '',
-    _internal_barWickColor: '',
+const barStyleFnMap = {
+    // eslint-disable-next-line @typescript-eslint/naming-convention
+    Bar: (findBar, barStyle, barIndex, precomputedBars) => {
+        var _a;
+        const upColor = barStyle.upColor;
+        const downColor = barStyle.downColor;
+        const currentBar = ensureNotNull(findBar(barIndex, precomputedBars));
+        const isUp = ensure(currentBar._internal_value[0 /* PlotRowValueIndex.Open */]) <= ensure(currentBar._internal_value[3 /* PlotRowValueIndex.Close */]);
+        return {
+            _internal_barColor: (_a = currentBar._internal_color) !== null && _a !== void 0 ? _a : (isUp ? upColor : downColor),
+        };
+    },
+    // eslint-disable-next-line @typescript-eslint/naming-convention
+    Candlestick: (findBar, candlestickStyle, barIndex, precomputedBars) => {
+        var _a, _b, _c;
+        const upColor = candlestickStyle.upColor;
+        const downColor = candlestickStyle.downColor;
+        const borderUpColor = candlestickStyle.borderUpColor;
+        const borderDownColor = candlestickStyle.borderDownColor;
+        const wickUpColor = candlestickStyle.wickUpColor;
+        const wickDownColor = candlestickStyle.wickDownColor;
+        const currentBar = ensureNotNull(findBar(barIndex, precomputedBars));
+        const isUp = ensure(currentBar._internal_value[0 /* PlotRowValueIndex.Open */]) <= ensure(currentBar._internal_value[3 /* PlotRowValueIndex.Close */]);
+        return {
+            _internal_barColor: (_a = currentBar._internal_color) !== null && _a !== void 0 ? _a : (isUp ? upColor : downColor),
+            _internal_barBorderColor: (_b = currentBar._internal_borderColor) !== null && _b !== void 0 ? _b : (isUp ? borderUpColor : borderDownColor),
+            _internal_barWickColor: (_c = currentBar._internal_wickColor) !== null && _c !== void 0 ? _c : (isUp ? wickUpColor : wickDownColor),
+        };
+    },
+    // eslint-disable-next-line @typescript-eslint/naming-convention
+    Area: (findBar, areaStyle, barIndex, precomputedBars) => {
+        var _a, _b, _c, _d;
+        const currentBar = ensureNotNull(findBar(barIndex, precomputedBars));
+        return {
+            _internal_barColor: (_a = currentBar._internal_lineColor) !== null && _a !== void 0 ? _a : areaStyle.lineColor,
+            _internal_lineColor: (_b = currentBar._internal_lineColor) !== null && _b !== void 0 ? _b : areaStyle.lineColor,
+            _internal_topColor: (_c = currentBar._internal_topColor) !== null && _c !== void 0 ? _c : areaStyle.topColor,
+            _internal_bottomColor: (_d = currentBar._internal_bottomColor) !== null && _d !== void 0 ? _d : areaStyle.bottomColor,
+        };
+    },
+    // eslint-disable-next-line @typescript-eslint/naming-convention
+    Baseline: (findBar, baselineStyle, barIndex, precomputedBars) => {
+        var _a, _b, _c, _d, _e, _f;
+        const currentBar = ensureNotNull(findBar(barIndex, precomputedBars));
+        const isAboveBaseline = currentBar._internal_value[3 /* PlotRowValueIndex.Close */] >= baselineStyle.baseValue.price;
+        return {
+            _internal_barColor: isAboveBaseline ? baselineStyle.topLineColor : baselineStyle.bottomLineColor,
+            _internal_topLineColor: (_a = currentBar._internal_topLineColor) !== null && _a !== void 0 ? _a : baselineStyle.topLineColor,
+            _internal_bottomLineColor: (_b = currentBar._internal_bottomLineColor) !== null && _b !== void 0 ? _b : baselineStyle.bottomLineColor,
+            _internal_topFillColor1: (_c = currentBar._internal_topFillColor1) !== null && _c !== void 0 ? _c : baselineStyle.topFillColor1,
+            _internal_topFillColor2: (_d = currentBar._internal_topFillColor2) !== null && _d !== void 0 ? _d : baselineStyle.topFillColor2,
+            _internal_bottomFillColor1: (_e = currentBar._internal_bottomFillColor1) !== null && _e !== void 0 ? _e : baselineStyle.bottomFillColor1,
+            _internal_bottomFillColor2: (_f = currentBar._internal_bottomFillColor2) !== null && _f !== void 0 ? _f : baselineStyle.bottomFillColor2,
+        };
+    },
+    // eslint-disable-next-line @typescript-eslint/naming-convention
+    Line: (findBar, lineStyle, barIndex, precomputedBars) => {
+        var _a, _b;
+        const currentBar = ensureNotNull(findBar(barIndex, precomputedBars));
+        return {
+            _internal_barColor: (_a = currentBar._internal_color) !== null && _a !== void 0 ? _a : lineStyle.color,
+            _internal_lineColor: (_b = currentBar._internal_color) !== null && _b !== void 0 ? _b : lineStyle.color,
+        };
+    },
+    // eslint-disable-next-line @typescript-eslint/naming-convention
+    Histogram: (findBar, histogramStyle, barIndex, precomputedBars) => {
+        var _a;
+        const currentBar = ensureNotNull(findBar(barIndex, precomputedBars));
+        return {
+            _internal_barColor: (_a = currentBar._internal_color) !== null && _a !== void 0 ? _a : histogramStyle.color,
+        };
+    },
 };
-var SeriesBarColorer = /** @class */ (function () {
-    function SeriesBarColorer(series) {
+class SeriesBarColorer {
+    constructor(series) {
+        this._private__findBar = (barIndex, precomputedBars) => {
+            if (precomputedBars !== undefined) {
+                return precomputedBars._internal_value;
+            }
+            return this._private__series._internal_bars()._internal_valueAt(barIndex);
+        };
         this._private__series = series;
+        this._private__styleGetter = barStyleFnMap[series._internal_seriesType()];
     }
-    SeriesBarColorer.prototype._internal_barStyle = function (barIndex, precomputedBars) {
+    _internal_barStyle(barIndex, precomputedBars) {
         // precomputedBars: {value: [Array BarValues], previousValue: [Array BarValues] | undefined}
         // Used to avoid binary search if bars are already known
-        var targetType = this._private__series._internal_seriesType();
-        var seriesOptions = this._private__series._internal_options();
-        switch (targetType) {
-            case 'Line':
-                return this._private__lineStyle(seriesOptions, barIndex, precomputedBars);
-            case 'Area':
-                return this._private__areaStyle(seriesOptions);
-            case 'Baseline':
-                return this._private__baselineStyle(seriesOptions, barIndex, precomputedBars);
-            case 'Bar':
-                return this._private__barStyle(seriesOptions, barIndex, precomputedBars);
-            case 'Candlestick':
-                return this._private__candleStyle(seriesOptions, barIndex, precomputedBars);
-            case 'Histogram':
-                return this._private__histogramStyle(seriesOptions, barIndex, precomputedBars);
-        }
-        throw new Error('Unknown chart style');
-    };
-    SeriesBarColorer.prototype._private__barStyle = function (barStyle, barIndex, precomputedBars) {
-        var result = __assign({}, emptyResult);
-        var upColor = barStyle.upColor;
-        var downColor = barStyle.downColor;
-        var borderUpColor = upColor;
-        var borderDownColor = downColor;
-        var currentBar = ensureNotNull(this._private__findBar(barIndex, precomputedBars));
-        var isUp = ensure(currentBar._internal_value[0 /* Open */]) <= ensure(currentBar._internal_value[3 /* Close */]);
-        if (currentBar._internal_color !== undefined) {
-            result._internal_barColor = currentBar._internal_color;
-            result._internal_barBorderColor = currentBar._internal_color;
-        }
-        else {
-            result._internal_barColor = isUp ? upColor : downColor;
-            result._internal_barBorderColor = isUp ? borderUpColor : borderDownColor;
-        }
-        return result;
-    };
-    SeriesBarColorer.prototype._private__candleStyle = function (candlestickStyle, barIndex, precomputedBars) {
-        var _a, _b, _c;
-        var result = __assign({}, emptyResult);
-        var upColor = candlestickStyle.upColor;
-        var downColor = candlestickStyle.downColor;
-        var borderUpColor = candlestickStyle.borderUpColor;
-        var borderDownColor = candlestickStyle.borderDownColor;
-        var wickUpColor = candlestickStyle.wickUpColor;
-        var wickDownColor = candlestickStyle.wickDownColor;
-        var currentBar = ensureNotNull(this._private__findBar(barIndex, precomputedBars));
-        var isUp = ensure(currentBar._internal_value[0 /* Open */]) <= ensure(currentBar._internal_value[3 /* Close */]);
-        result._internal_barColor = (_a = currentBar._internal_color) !== null && _a !== void 0 ? _a : (isUp ? upColor : downColor);
-        result._internal_barBorderColor = (_b = currentBar._internal_borderColor) !== null && _b !== void 0 ? _b : (isUp ? borderUpColor : borderDownColor);
-        result._internal_barWickColor = (_c = currentBar._internal_wickColor) !== null && _c !== void 0 ? _c : (isUp ? wickUpColor : wickDownColor);
-        return result;
-    };
-    SeriesBarColorer.prototype._private__areaStyle = function (areaStyle) {
-        return __assign(__assign({}, emptyResult), { _internal_barColor: areaStyle.lineColor });
-    };
-    SeriesBarColorer.prototype._private__baselineStyle = function (baselineStyle, barIndex, precomputedBars) {
-        var currentBar = ensureNotNull(this._private__findBar(barIndex, precomputedBars));
-        var isAboveBaseline = currentBar._internal_value[3 /* Close */] >= baselineStyle.baseValue.price;
-        return __assign(__assign({}, emptyResult), { _internal_barColor: isAboveBaseline ? baselineStyle.topLineColor : baselineStyle.bottomLineColor });
-    };
-    SeriesBarColorer.prototype._private__lineStyle = function (lineStyle, barIndex, precomputedBars) {
-        var _a;
-        var currentBar = ensureNotNull(this._private__findBar(barIndex, precomputedBars));
-        return __assign(__assign({}, emptyResult), { _internal_barColor: (_a = currentBar._internal_color) !== null && _a !== void 0 ? _a : lineStyle.color });
-    };
-    SeriesBarColorer.prototype._private__histogramStyle = function (histogramStyle, barIndex, precomputedBars) {
-        var result = __assign({}, emptyResult);
-        var currentBar = ensureNotNull(this._private__findBar(barIndex, precomputedBars));
-        result._internal_barColor = currentBar._internal_color !== undefined ? currentBar._internal_color : histogramStyle.color;
-        return result;
-    };
-    SeriesBarColorer.prototype._private__findBar = function (barIndex, precomputedBars) {
-        if (precomputedBars !== undefined) {
-            return precomputedBars._internal_value;
-        }
-        return this._private__series._internal_bars()._internal_valueAt(barIndex);
-    };
-    return SeriesBarColorer;
-}());
+        return this._private__styleGetter(this._private__findBar, this._private__series._internal_options(), barIndex, precomputedBars);
+    }
+}
 
+/**
+ * Search direction if no data found at provided index
+ */
+var MismatchDirection;
+(function (MismatchDirection) {
+    /**
+     * Search the nearest left item
+     */
+    MismatchDirection[MismatchDirection["NearestLeft"] = -1] = "NearestLeft";
+    /**
+     * Do not search
+     */
+    MismatchDirection[MismatchDirection["None"] = 0] = "None";
+    /**
+     * Search the nearest right item
+     */
+    MismatchDirection[MismatchDirection["NearestRight"] = 1] = "NearestRight";
+})(MismatchDirection || (MismatchDirection = {}));
 // TODO: think about changing it dynamically
-var CHUNK_SIZE = 30;
+const CHUNK_SIZE = 30;
 /**
  * PlotList is an array of plot rows
  * each plot row consists of key (index in timescale) and plot value map
  */
-var PlotList = /** @class */ (function () {
-    function PlotList() {
+class PlotList {
+    constructor() {
         this._private__items = [];
         this._private__minMaxCache = new Map();
         this._private__rowSearchCache = new Map();
     }
     // @returns Last row
-    PlotList.prototype._internal_last = function () {
+    _internal_last() {
         return this._internal_size() > 0 ? this._private__items[this._private__items.length - 1] : null;
-    };
-    PlotList.prototype._internal_firstIndex = function () {
+    }
+    _internal_firstIndex() {
         return this._internal_size() > 0 ? this._private__indexAt(0) : null;
-    };
-    PlotList.prototype._internal_lastIndex = function () {
+    }
+    _internal_lastIndex() {
         return this._internal_size() > 0 ? this._private__indexAt((this._private__items.length - 1)) : null;
-    };
-    PlotList.prototype._internal_size = function () {
+    }
+    _internal_size() {
         return this._private__items.length;
-    };
-    PlotList.prototype._internal_isEmpty = function () {
+    }
+    _internal_isEmpty() {
         return this._internal_size() === 0;
-    };
-    PlotList.prototype._internal_contains = function (index) {
-        return this._private__search(index, 0 /* Exact */) !== null;
-    };
-    PlotList.prototype._internal_valueAt = function (index) {
+    }
+    _internal_contains(index) {
+        return this._private__search(index, 0 /* MismatchDirection.None */) !== null;
+    }
+    _internal_valueAt(index) {
         return this._internal_search(index);
-    };
-    PlotList.prototype._internal_search = function (index, searchMode) {
-        if (searchMode === void 0) { searchMode = 0 /* Exact */; }
-        var pos = this._private__search(index, searchMode);
+    }
+    _internal_search(index, searchMode = 0 /* MismatchDirection.None */) {
+        const pos = this._private__search(index, searchMode);
         if (pos === null) {
             return null;
         }
-        return __assign(__assign({}, this._private__valueAt(pos)), { _internal_index: this._private__indexAt(pos) });
-    };
-    PlotList.prototype._internal_rows = function () {
+        return Object.assign(Object.assign({}, this._private__valueAt(pos)), { _internal_index: this._private__indexAt(pos) });
+    }
+    _internal_rows() {
         return this._private__items;
-    };
-    PlotList.prototype._internal_minMaxOnRangeCached = function (start, end, plots) {
+    }
+    _internal_minMaxOnRangeCached(start, end, plots) {
         // this code works for single series only
         // could fail after whitespaces implementation
         if (this._internal_isEmpty()) {
             return null;
         }
-        var result = null;
-        for (var _i = 0, plots_1 = plots; _i < plots_1.length; _i++) {
-            var plot = plots_1[_i];
-            var plotMinMax = this._private__minMaxOnRangeCachedImpl(start, end, plot);
+        let result = null;
+        for (const plot of plots) {
+            const plotMinMax = this._private__minMaxOnRangeCachedImpl(start, end, plot);
             result = mergeMinMax(result, plotMinMax);
         }
         return result;
-    };
-    PlotList.prototype._internal_setData = function (plotRows) {
+    }
+    _internal_setData(plotRows) {
         this._private__rowSearchCache.clear();
         this._private__minMaxCache.clear();
         this._private__items = plotRows;
-    };
-    PlotList.prototype._private__indexAt = function (offset) {
+    }
+    _private__indexAt(offset) {
         return this._private__items[offset]._internal_index;
-    };
-    PlotList.prototype._private__valueAt = function (offset) {
+    }
+    _private__valueAt(offset) {
         return this._private__items[offset];
-    };
-    PlotList.prototype._private__search = function (index, searchMode) {
-        var exactPos = this._private__bsearch(index);
-        if (exactPos === null && searchMode !== 0 /* Exact */) {
+    }
+    _private__search(index, searchMode) {
+        const exactPos = this._private__bsearch(index);
+        if (exactPos === null && searchMode !== 0 /* MismatchDirection.None */) {
             switch (searchMode) {
-                case -1 /* NearestLeft */:
+                case -1 /* MismatchDirection.NearestLeft */:
                     return this._private__searchNearestLeft(index);
-                case 1 /* NearestRight */:
+                case 1 /* MismatchDirection.NearestRight */:
                     return this._private__searchNearestRight(index);
                 default:
                     throw new TypeError('Unknown search mode');
             }
         }
         return exactPos;
-    };
-    PlotList.prototype._private__searchNearestLeft = function (index) {
-        var nearestLeftPos = this._private__lowerbound(index);
+    }
+    _private__searchNearestLeft(index) {
+        let nearestLeftPos = this._private__lowerbound(index);
         if (nearestLeftPos > 0) {
             nearestLeftPos = nearestLeftPos - 1;
         }
         return (nearestLeftPos !== this._private__items.length && this._private__indexAt(nearestLeftPos) < index) ? nearestLeftPos : null;
-    };
-    PlotList.prototype._private__searchNearestRight = function (index) {
-        var nearestRightPos = this._private__upperbound(index);
+    }
+    _private__searchNearestRight(index) {
+        const nearestRightPos = this._private__upperbound(index);
         return (nearestRightPos !== this._private__items.length && index < this._private__indexAt(nearestRightPos)) ? nearestRightPos : null;
-    };
-    PlotList.prototype._private__bsearch = function (index) {
-        var start = this._private__lowerbound(index);
+    }
+    _private__bsearch(index) {
+        const start = this._private__lowerbound(index);
         if (start !== this._private__items.length && !(index < this._private__items[start]._internal_index)) {
             return start;
         }
         return null;
-    };
-    PlotList.prototype._private__lowerbound = function (index) {
-        return lowerbound(this._private__items, index, function (a, b) { return a._internal_index < b; });
-    };
-    PlotList.prototype._private__upperbound = function (index) {
-        return upperbound(this._private__items, index, function (a, b) { return b._internal_index > a; });
-    };
-    PlotList.prototype._private__plotMinMax = function (startIndex, endIndexExclusive, plotIndex) {
-        var result = null;
-        for (var i = startIndex; i < endIndexExclusive; i++) {
-            var values = this._private__items[i]._internal_value;
-            var v = values[plotIndex];
+    }
+    _private__lowerbound(index) {
+        return lowerbound(this._private__items, index, (a, b) => a._internal_index < b);
+    }
+    _private__upperbound(index) {
+        return upperbound(this._private__items, index, (a, b) => b._internal_index > a);
+    }
+    _private__plotMinMax(startIndex, endIndexExclusive, plotIndex) {
+        let result = null;
+        for (let i = startIndex; i < endIndexExclusive; i++) {
+            const values = this._private__items[i]._internal_value;
+            const v = values[plotIndex];
             if (Number.isNaN(v)) {
                 continue;
             }
@@ -4106,39 +4084,39 @@ var PlotList = /** @class */ (function () {
             }
         }
         return result;
-    };
-    PlotList.prototype._private__minMaxOnRangeCachedImpl = function (start, end, plotIndex) {
+    }
+    _private__minMaxOnRangeCachedImpl(start, end, plotIndex) {
         // this code works for single series only
         // could fail after whitespaces implementation
         if (this._internal_isEmpty()) {
             return null;
         }
-        var result = null;
+        let result = null;
         // assume that bar indexes only increase
-        var firstIndex = ensureNotNull(this._internal_firstIndex());
-        var lastIndex = ensureNotNull(this._internal_lastIndex());
-        var s = Math.max(start, firstIndex);
-        var e = Math.min(end, lastIndex);
-        var cachedLow = Math.ceil(s / CHUNK_SIZE) * CHUNK_SIZE;
-        var cachedHigh = Math.max(cachedLow, Math.floor(e / CHUNK_SIZE) * CHUNK_SIZE);
+        const firstIndex = ensureNotNull(this._internal_firstIndex());
+        const lastIndex = ensureNotNull(this._internal_lastIndex());
+        const s = Math.max(start, firstIndex);
+        const e = Math.min(end, lastIndex);
+        const cachedLow = Math.ceil(s / CHUNK_SIZE) * CHUNK_SIZE;
+        const cachedHigh = Math.max(cachedLow, Math.floor(e / CHUNK_SIZE) * CHUNK_SIZE);
         {
-            var startIndex = this._private__lowerbound(s);
-            var endIndex = this._private__upperbound(Math.min(e, cachedLow, end)); // non-inclusive end
-            var plotMinMax = this._private__plotMinMax(startIndex, endIndex, plotIndex);
+            const startIndex = this._private__lowerbound(s);
+            const endIndex = this._private__upperbound(Math.min(e, cachedLow, end)); // non-inclusive end
+            const plotMinMax = this._private__plotMinMax(startIndex, endIndex, plotIndex);
             result = mergeMinMax(result, plotMinMax);
         }
-        var minMaxCache = this._private__minMaxCache.get(plotIndex);
+        let minMaxCache = this._private__minMaxCache.get(plotIndex);
         if (minMaxCache === undefined) {
             minMaxCache = new Map();
             this._private__minMaxCache.set(plotIndex, minMaxCache);
         }
         // now go cached
-        for (var c = Math.max(cachedLow + 1, s); c < cachedHigh; c += CHUNK_SIZE) {
-            var chunkIndex = Math.floor(c / CHUNK_SIZE);
-            var chunkMinMax = minMaxCache.get(chunkIndex);
+        for (let c = Math.max(cachedLow + 1, s); c < cachedHigh; c += CHUNK_SIZE) {
+            const chunkIndex = Math.floor(c / CHUNK_SIZE);
+            let chunkMinMax = minMaxCache.get(chunkIndex);
             if (chunkMinMax === undefined) {
-                var chunkStart = this._private__lowerbound(chunkIndex * CHUNK_SIZE);
-                var chunkEnd = this._private__upperbound((chunkIndex + 1) * CHUNK_SIZE - 1);
+                const chunkStart = this._private__lowerbound(chunkIndex * CHUNK_SIZE);
+                const chunkEnd = this._private__upperbound((chunkIndex + 1) * CHUNK_SIZE - 1);
                 chunkMinMax = this._private__plotMinMax(chunkStart, chunkEnd, plotIndex);
                 minMaxCache.set(chunkIndex, chunkMinMax);
             }
@@ -4146,15 +4124,14 @@ var PlotList = /** @class */ (function () {
         }
         // tail
         {
-            var startIndex = this._private__lowerbound(cachedHigh);
-            var endIndex = this._private__upperbound(e); // non-inclusive end
-            var plotMinMax = this._private__plotMinMax(startIndex, endIndex, plotIndex);
+            const startIndex = this._private__lowerbound(cachedHigh);
+            const endIndex = this._private__upperbound(e); // non-inclusive end
+            const plotMinMax = this._private__plotMinMax(startIndex, endIndex, plotIndex);
             result = mergeMinMax(result, plotMinMax);
         }
         return result;
-    };
-    return PlotList;
-}());
+    }
+}
 function mergeMinMax(first, second) {
     if (first === null) {
         return second;
@@ -4165,8 +4142,8 @@ function mergeMinMax(first, second) {
         }
         else {
             // merge MinMax values
-            var min = Math.min(first._internal_min, second._internal_min);
-            var max = Math.max(first._internal_max, second._internal_max);
+            const min = Math.min(first._internal_min, second._internal_min);
+            const max = Math.max(first._internal_max, second._internal_max);
             return { _internal_min: min, _internal_max: max };
         }
     }
@@ -4176,56 +4153,54 @@ function createSeriesPlotList() {
     return new PlotList();
 }
 
-var Series = /** @class */ (function (_super) {
-    __extends(Series, _super);
-    function Series(model, options, seriesType) {
-        var _this = _super.call(this, model) || this;
-        _this._private__data = createSeriesPlotList();
-        _this._private__priceLineView = new SeriesPriceLinePaneView(_this);
-        _this._private__customPriceLines = [];
-        _this._private__baseHorizontalLineView = new SeriesHorizontalBaseLinePaneView(_this);
-        _this._private__lastPriceAnimationPaneView = null;
-        _this._private__barColorerCache = null;
-        _this._private__markers = [];
-        _this._private__indexedMarkers = [];
-        _this._private__animationTimeoutId = null;
-        _this._private__options = options;
-        _this._private__seriesType = seriesType;
-        var priceAxisView = new SeriesPriceAxisView(_this);
-        _this._private__priceAxisViews = [priceAxisView];
-        _this._private__panePriceAxisView = new PanePriceAxisView(priceAxisView, _this, model);
+class Series extends PriceDataSource {
+    constructor(model, options, seriesType) {
+        super(model);
+        this._private__data = createSeriesPlotList();
+        this._private__priceLineView = new SeriesPriceLinePaneView(this);
+        this._private__customPriceLines = [];
+        this._private__baseHorizontalLineView = new SeriesHorizontalBaseLinePaneView(this);
+        this._private__lastPriceAnimationPaneView = null;
+        this._private__barColorerCache = null;
+        this._private__markers = [];
+        this._private__indexedMarkers = [];
+        this._private__animationTimeoutId = null;
+        this._private__options = options;
+        this._private__seriesType = seriesType;
+        const priceAxisView = new SeriesPriceAxisView(this);
+        this._private__priceAxisViews = [priceAxisView];
+        this._private__panePriceAxisView = new PanePriceAxisView(priceAxisView, this, model);
         if (seriesType === 'Area' || seriesType === 'Line' || seriesType === 'Baseline') {
-            _this._private__lastPriceAnimationPaneView = new SeriesLastPriceAnimationPaneView(_this);
+            this._private__lastPriceAnimationPaneView = new SeriesLastPriceAnimationPaneView(this);
         }
-        _this._private__recreateFormatter();
-        _this._private__recreatePaneViews();
-        return _this;
+        this._private__recreateFormatter();
+        this._private__recreatePaneViews();
     }
-    Series.prototype._internal_destroy = function () {
+    _internal_destroy() {
         if (this._private__animationTimeoutId !== null) {
             clearTimeout(this._private__animationTimeoutId);
         }
-    };
-    Series.prototype._internal_priceLineColor = function (lastBarColor) {
+    }
+    _internal_priceLineColor(lastBarColor) {
         return this._private__options.priceLineColor || lastBarColor;
-    };
-    Series.prototype._internal_lastValueData = function (globalLast) {
-        var noDataRes = { _internal_noData: true };
-        var priceScale = this._internal_priceScale();
+    }
+    _internal_lastValueData(globalLast) {
+        const noDataRes = { _internal_noData: true };
+        const priceScale = this._internal_priceScale();
         if (this._internal_model()._internal_timeScale()._internal_isEmpty() || priceScale._internal_isEmpty() || this._private__data._internal_isEmpty()) {
             return noDataRes;
         }
-        var visibleBars = this._internal_model()._internal_timeScale()._internal_visibleStrictRange();
-        var firstValue = this._internal_firstValue();
+        const visibleBars = this._internal_model()._internal_timeScale()._internal_visibleStrictRange();
+        const firstValue = this._internal_firstValue();
         if (visibleBars === null || firstValue === null) {
             return noDataRes;
         }
         // find range of bars inside range
         // TODO: make it more optimal
-        var bar;
-        var lastIndex;
+        let bar;
+        let lastIndex;
         if (globalLast) {
-            var lastBar = this._private__data._internal_last();
+            const lastBar = this._private__data._internal_last();
             if (lastBar === null) {
                 return noDataRes;
             }
@@ -4233,7 +4208,7 @@ var Series = /** @class */ (function (_super) {
             lastIndex = lastBar._internal_index;
         }
         else {
-            var endBar = this._private__data._internal_search(visibleBars._internal_right(), -1 /* NearestLeft */);
+            const endBar = this._private__data._internal_search(visibleBars._internal_right(), -1 /* MismatchDirection.NearestLeft */);
             if (endBar === null) {
                 return noDataRes;
             }
@@ -4243,10 +4218,10 @@ var Series = /** @class */ (function (_super) {
             }
             lastIndex = endBar._internal_index;
         }
-        var price = bar._internal_value[3 /* Close */];
-        var barColorer = this._internal_barColorer();
-        var style = barColorer._internal_barStyle(lastIndex, { _internal_value: bar });
-        var coordinate = priceScale._internal_priceToCoordinate(price, firstValue._internal_value);
+        const price = bar._internal_value[3 /* PlotRowValueIndex.Close */];
+        const barColorer = this._internal_barColorer();
+        const style = barColorer._internal_barStyle(lastIndex, { _internal_value: bar });
+        const coordinate = priceScale._internal_priceToCoordinate(price, firstValue._internal_value);
         return {
             _internal_noData: false,
             _internal_price: price,
@@ -4257,31 +4232,24 @@ var Series = /** @class */ (function (_super) {
             _internal_coordinate: coordinate,
             _internal_index: lastIndex,
         };
-    };
-    Series.prototype._internal_barColorer = function () {
+    }
+    _internal_barColorer() {
         if (this._private__barColorerCache !== null) {
             return this._private__barColorerCache;
         }
         this._private__barColorerCache = new SeriesBarColorer(this);
         return this._private__barColorerCache;
-    };
-    Series.prototype._internal_options = function () {
+    }
+    _internal_options() {
         return this._private__options;
-    };
-    Series.prototype._internal_applyOptions = function (options) {
-        var targetPriceScaleId = options.priceScaleId;
+    }
+    _internal_applyOptions(options) {
+        const targetPriceScaleId = options.priceScaleId;
         if (targetPriceScaleId !== undefined && targetPriceScaleId !== this._private__options.priceScaleId) {
             // series cannot do it itself, ask model
             this._internal_model()._internal_moveSeriesToScale(this, targetPriceScaleId);
         }
         merge(this._private__options, options);
-        // eslint-disable-next-line deprecation/deprecation
-        if (this._internal__priceScale !== null && options.scaleMargins !== undefined) {
-            this._internal__priceScale._internal_applyOptions({
-                // eslint-disable-next-line deprecation/deprecation
-                scaleMargins: options.scaleMargins,
-            });
-        }
         if (options.priceFormat !== undefined) {
             this._private__recreateFormatter();
             // updated formatter might affect rendering  and as a consequence of this the width of price axis might be changed
@@ -4295,8 +4263,8 @@ var Series = /** @class */ (function (_super) {
         // that's why we need to update crosshair as well
         this._internal_model()._internal_updateCrosshair();
         this._private__paneView._internal_update('options');
-    };
-    Series.prototype._internal_setData = function (data, updateInfo) {
+    }
+    _internal_setData(data, updateInfo) {
         this._private__data._internal_setData(data);
         this._private__recalculateMarkers();
         this._private__paneView._internal_update('data');
@@ -4309,198 +4277,201 @@ var Series = /** @class */ (function (_super) {
                 this._private__lastPriceAnimationPaneView._internal_onDataCleared();
             }
         }
-        var sourcePane = this._internal_model()._internal_paneForSource(this);
+        const sourcePane = this._internal_model()._internal_paneForSource(this);
         this._internal_model()._internal_recalculatePane(sourcePane);
         this._internal_model()._internal_updateSource(this);
         this._internal_model()._internal_updateCrosshair();
         this._internal_model()._internal_lightUpdate();
-    };
-    Series.prototype._internal_setMarkers = function (data) {
-        this._private__markers = data.map(function (item) { return (__assign({}, item)); });
+    }
+    _internal_setMarkers(data) {
+        this._private__markers = data;
         this._private__recalculateMarkers();
-        var sourcePane = this._internal_model()._internal_paneForSource(this);
+        const sourcePane = this._internal_model()._internal_paneForSource(this);
         this._private__markersPaneView._internal_update('data');
         this._internal_model()._internal_recalculatePane(sourcePane);
         this._internal_model()._internal_updateSource(this);
         this._internal_model()._internal_updateCrosshair();
         this._internal_model()._internal_lightUpdate();
-    };
-    Series.prototype._internal_indexedMarkers = function () {
+    }
+    _internal_markers() {
+        return this._private__markers;
+    }
+    _internal_indexedMarkers() {
         return this._private__indexedMarkers;
-    };
-    Series.prototype._internal_createPriceLine = function (options) {
-        var result = new CustomPriceLine(this, options);
+    }
+    _internal_createPriceLine(options) {
+        const result = new CustomPriceLine(this, options);
         this._private__customPriceLines.push(result);
         this._internal_model()._internal_updateSource(this);
         return result;
-    };
-    Series.prototype._internal_removePriceLine = function (line) {
-        var index = this._private__customPriceLines.indexOf(line);
+    }
+    _internal_removePriceLine(line) {
+        const index = this._private__customPriceLines.indexOf(line);
         if (index !== -1) {
             this._private__customPriceLines.splice(index, 1);
         }
         this._internal_model()._internal_updateSource(this);
-    };
-    Series.prototype._internal_seriesType = function () {
+    }
+    _internal_seriesType() {
         return this._private__seriesType;
-    };
-    Series.prototype._internal_firstValue = function () {
-        var bar = this._internal_firstBar();
+    }
+    _internal_firstValue() {
+        const bar = this._internal_firstBar();
         if (bar === null) {
             return null;
         }
         return {
-            _internal_value: bar._internal_value[3 /* Close */],
+            _internal_value: bar._internal_value[3 /* PlotRowValueIndex.Close */],
             _internal_timePoint: bar._internal_time,
         };
-    };
-    Series.prototype._internal_firstBar = function () {
-        var visibleBars = this._internal_model()._internal_timeScale()._internal_visibleStrictRange();
+    }
+    _internal_firstBar() {
+        const visibleBars = this._internal_model()._internal_timeScale()._internal_visibleStrictRange();
         if (visibleBars === null) {
             return null;
         }
-        var startTimePoint = visibleBars._internal_left();
-        return this._private__data._internal_search(startTimePoint, 1 /* NearestRight */);
-    };
-    Series.prototype._internal_bars = function () {
+        const startTimePoint = visibleBars._internal_left();
+        return this._private__data._internal_search(startTimePoint, 1 /* MismatchDirection.NearestRight */);
+    }
+    _internal_bars() {
         return this._private__data;
-    };
-    Series.prototype._internal_dataAt = function (time) {
-        var prices = this._private__data._internal_valueAt(time);
+    }
+    _internal_dataAt(time) {
+        const prices = this._private__data._internal_valueAt(time);
         if (prices === null) {
             return null;
         }
         if (this._private__seriesType === 'Bar' || this._private__seriesType === 'Candlestick') {
             return {
-                open: prices._internal_value[0 /* Open */],
-                high: prices._internal_value[1 /* High */],
-                low: prices._internal_value[2 /* Low */],
-                close: prices._internal_value[3 /* Close */],
+                _internal_open: prices._internal_value[0 /* PlotRowValueIndex.Open */],
+                _internal_high: prices._internal_value[1 /* PlotRowValueIndex.High */],
+                _internal_low: prices._internal_value[2 /* PlotRowValueIndex.Low */],
+                _internal_close: prices._internal_value[3 /* PlotRowValueIndex.Close */],
             };
         }
         else {
-            return prices._internal_value[3 /* Close */];
+            return prices._internal_value[3 /* PlotRowValueIndex.Close */];
         }
-    };
-    Series.prototype._internal_topPaneViews = function (pane) {
-        var _this = this;
-        var animationPaneView = this._private__lastPriceAnimationPaneView;
+    }
+    _internal_topPaneViews(pane) {
+        const animationPaneView = this._private__lastPriceAnimationPaneView;
         if (animationPaneView === null || !animationPaneView._internal_visible()) {
             return [];
         }
         if (this._private__animationTimeoutId === null && animationPaneView._internal_animationActive()) {
-            this._private__animationTimeoutId = setTimeout(function () {
-                _this._private__animationTimeoutId = null;
-                _this._internal_model()._internal_cursorUpdate();
+            this._private__animationTimeoutId = setTimeout(() => {
+                this._private__animationTimeoutId = null;
+                this._internal_model()._internal_cursorUpdate();
             }, 0);
         }
         animationPaneView._internal_invalidateStage();
         return [animationPaneView];
-    };
-    Series.prototype._internal_paneViews = function () {
-        var res = [];
+    }
+    _internal_paneViews() {
+        const res = [];
         if (!this._private__isOverlay()) {
             res.push(this._private__baseHorizontalLineView);
         }
-        for (var _i = 0, _a = this._private__customPriceLines; _i < _a.length; _i++) {
-            var customPriceLine = _a[_i];
-            res.push.apply(res, customPriceLine._internal_paneViews());
-        }
-        res.push(this._private__paneView, this._private__priceLineView, this._private__panePriceAxisView, this._private__markersPaneView);
+        res.push(this._private__paneView, this._private__priceLineView, this._private__markersPaneView);
+        const priceLineViews = this._private__customPriceLines.map((line) => line._internal_paneView());
+        res.push(...priceLineViews);
         return res;
-    };
-    Series.prototype._internal_priceAxisViews = function (pane, priceScale) {
+    }
+    _internal_labelPaneViews(pane) {
+        return [
+            this._private__panePriceAxisView,
+            ...this._private__customPriceLines.map((line) => line._internal_labelPaneView()),
+        ];
+    }
+    _internal_priceAxisViews(pane, priceScale) {
         if (priceScale !== this._internal__priceScale && !this._private__isOverlay()) {
             return [];
         }
-        var result = __spreadArray([], this._private__priceAxisViews, true);
-        for (var _i = 0, _a = this._private__customPriceLines; _i < _a.length; _i++) {
-            var customPriceLine = _a[_i];
+        const result = [...this._private__priceAxisViews];
+        for (const customPriceLine of this._private__customPriceLines) {
             result.push(customPriceLine._internal_priceAxisView());
         }
         return result;
-    };
-    Series.prototype._internal_autoscaleInfo = function (startTimePoint, endTimePoint) {
-        var _this = this;
+    }
+    _internal_autoscaleInfo(startTimePoint, endTimePoint) {
         if (this._private__options.autoscaleInfoProvider !== undefined) {
-            var autoscaleInfo = this._private__options.autoscaleInfoProvider(function () {
-                var res = _this._private__autoscaleInfoImpl(startTimePoint, endTimePoint);
+            const autoscaleInfo = this._private__options.autoscaleInfoProvider(() => {
+                const res = this._private__autoscaleInfoImpl(startTimePoint, endTimePoint);
                 return (res === null) ? null : res._internal_toRaw();
             });
             return AutoscaleInfoImpl._internal_fromRaw(autoscaleInfo);
         }
         return this._private__autoscaleInfoImpl(startTimePoint, endTimePoint);
-    };
-    Series.prototype._internal_minMove = function () {
+    }
+    _internal_minMove() {
         return this._private__options.priceFormat.minMove;
-    };
-    Series.prototype._internal_formatter = function () {
+    }
+    _internal_formatter() {
         return this._private__formatter;
-    };
-    Series.prototype._internal_updateAllViews = function () {
+    }
+    _internal_updateAllViews() {
         var _a;
         this._private__paneView._internal_update();
         this._private__markersPaneView._internal_update();
-        for (var _i = 0, _b = this._private__priceAxisViews; _i < _b.length; _i++) {
-            var priceAxisView = _b[_i];
+        for (const priceAxisView of this._private__priceAxisViews) {
             priceAxisView._internal_update();
         }
-        for (var _c = 0, _d = this._private__customPriceLines; _c < _d.length; _c++) {
-            var customPriceLine = _d[_c];
+        for (const customPriceLine of this._private__customPriceLines) {
             customPriceLine._internal_update();
         }
         this._private__priceLineView._internal_update();
         this._private__baseHorizontalLineView._internal_update();
         (_a = this._private__lastPriceAnimationPaneView) === null || _a === void 0 ? void 0 : _a._internal_update();
-    };
-    Series.prototype._internal_priceScale = function () {
-        return ensureNotNull(_super.prototype._internal_priceScale.call(this));
-    };
-    Series.prototype._internal_markerDataAtIndex = function (index) {
-        var getValue = (this._private__seriesType === 'Line' || this._private__seriesType === 'Area' || this._private__seriesType === 'Baseline') &&
+    }
+    _internal_priceScale() {
+        return ensureNotNull(super._internal_priceScale());
+    }
+    _internal_markerDataAtIndex(index) {
+        const getValue = (this._private__seriesType === 'Line' || this._private__seriesType === 'Area' || this._private__seriesType === 'Baseline') &&
             this._private__options.crosshairMarkerVisible;
         if (!getValue) {
             return null;
         }
-        var bar = this._private__data._internal_valueAt(index);
+        const bar = this._private__data._internal_valueAt(index);
         if (bar === null) {
             return null;
         }
-        var price = bar._internal_value[3 /* Close */];
-        var radius = this._private__markerRadius();
-        var borderColor = this._private__markerBorderColor();
-        var backgroundColor = this._private__markerBackgroundColor(index);
-        return { _internal_price: price, _internal_radius: radius, _internal_borderColor: borderColor, _internal_backgroundColor: backgroundColor };
-    };
-    Series.prototype._internal_title = function () {
+        const price = bar._internal_value[3 /* PlotRowValueIndex.Close */];
+        const radius = this._private__markerRadius();
+        const borderColor = this._private__markerBorderColor();
+        const borderWidth = this._private__markerBorderWidth();
+        const backgroundColor = this._private__markerBackgroundColor(index);
+        return { _internal_price: price, _internal_radius: radius, _internal_borderColor: borderColor, _internal_borderWidth: borderWidth, _internal_backgroundColor: backgroundColor };
+    }
+    _internal_title() {
         return this._private__options.title;
-    };
-    Series.prototype._internal_visible = function () {
+    }
+    _internal_visible() {
         return this._private__options.visible;
-    };
-    Series.prototype._private__isOverlay = function () {
-        var priceScale = this._internal_priceScale();
+    }
+    _private__isOverlay() {
+        const priceScale = this._internal_priceScale();
         return !isDefaultPriceScale(priceScale._internal_id());
-    };
-    Series.prototype._private__autoscaleInfoImpl = function (startTimePoint, endTimePoint) {
+    }
+    _private__autoscaleInfoImpl(startTimePoint, endTimePoint) {
         if (!isInteger(startTimePoint) || !isInteger(endTimePoint) || this._private__data._internal_isEmpty()) {
             return null;
         }
         // TODO: refactor this
         // series data is strongly hardcoded to keep bars
-        var plots = this._private__seriesType === 'Line' || this._private__seriesType === 'Area' || this._private__seriesType === 'Baseline' || this._private__seriesType === 'Histogram'
-            ? [3 /* Close */]
-            : [2 /* Low */, 1 /* High */];
-        var barsMinMax = this._private__data._internal_minMaxOnRangeCached(startTimePoint, endTimePoint, plots);
-        var range = barsMinMax !== null ? new PriceRangeImpl(barsMinMax._internal_min, barsMinMax._internal_max) : null;
+        const plots = this._private__seriesType === 'Line' || this._private__seriesType === 'Area' || this._private__seriesType === 'Baseline' || this._private__seriesType === 'Histogram'
+            ? [3 /* PlotRowValueIndex.Close */]
+            : [2 /* PlotRowValueIndex.Low */, 1 /* PlotRowValueIndex.High */];
+        const barsMinMax = this._private__data._internal_minMaxOnRangeCached(startTimePoint, endTimePoint, plots);
+        let range = barsMinMax !== null ? new PriceRangeImpl(barsMinMax._internal_min, barsMinMax._internal_max) : null;
         if (this._internal_seriesType() === 'Histogram') {
-            var base = this._private__options.base;
-            var rangeWithBase = new PriceRangeImpl(base, base);
+            const base = this._private__options.base;
+            const rangeWithBase = new PriceRangeImpl(base, base);
             range = range !== null ? range._internal_merge(rangeWithBase) : rangeWithBase;
         }
         return new AutoscaleInfoImpl(range, this._private__markersPaneView._internal_autoScaleMargins());
-    };
-    Series.prototype._private__markerRadius = function () {
+    }
+    _private__markerRadius() {
         switch (this._private__seriesType) {
             case 'Line':
             case 'Area':
@@ -4508,34 +4479,43 @@ var Series = /** @class */ (function (_super) {
                 return this._private__options.crosshairMarkerRadius;
         }
         return 0;
-    };
-    Series.prototype._private__markerBorderColor = function () {
+    }
+    _private__markerBorderColor() {
         switch (this._private__seriesType) {
             case 'Line':
             case 'Area':
             case 'Baseline': {
-                var crosshairMarkerBorderColor = this._private__options.crosshairMarkerBorderColor;
+                const crosshairMarkerBorderColor = this._private__options.crosshairMarkerBorderColor;
                 if (crosshairMarkerBorderColor.length !== 0) {
                     return crosshairMarkerBorderColor;
                 }
             }
         }
         return null;
-    };
-    Series.prototype._private__markerBackgroundColor = function (index) {
+    }
+    _private__markerBorderWidth() {
+        switch (this._private__seriesType) {
+            case 'Line':
+            case 'Area':
+            case 'Baseline':
+                return this._private__options.crosshairMarkerBorderWidth;
+        }
+        return 0;
+    }
+    _private__markerBackgroundColor(index) {
         switch (this._private__seriesType) {
             case 'Line':
             case 'Area':
             case 'Baseline': {
-                var crosshairMarkerBackgroundColor = this._private__options.crosshairMarkerBackgroundColor;
+                const crosshairMarkerBackgroundColor = this._private__options.crosshairMarkerBackgroundColor;
                 if (crosshairMarkerBackgroundColor.length !== 0) {
                     return crosshairMarkerBackgroundColor;
                 }
             }
         }
         return this._internal_barColorer()._internal_barStyle(index)._internal_barColor;
-    };
-    Series.prototype._private__recreateFormatter = function () {
+    }
+    _private__recreateFormatter() {
         switch (this._private__options.priceFormat.type) {
             case 'custom': {
                 this._private__formatter = { format: this._private__options.priceFormat.formatter };
@@ -4550,41 +4530,40 @@ var Series = /** @class */ (function (_super) {
                 break;
             }
             default: {
-                var priceScale = Math.pow(10, this._private__options.priceFormat.precision);
+                const priceScale = Math.pow(10, this._private__options.priceFormat.precision);
                 this._private__formatter = new PriceFormatter(priceScale, this._private__options.priceFormat.minMove * priceScale);
             }
         }
         if (this._internal__priceScale !== null) {
             this._internal__priceScale._internal_updateFormatter();
         }
-    };
-    Series.prototype._private__recalculateMarkers = function () {
-        var _this = this;
-        var timeScale = this._internal_model()._internal_timeScale();
+    }
+    _private__recalculateMarkers() {
+        const timeScale = this._internal_model()._internal_timeScale();
         if (timeScale._internal_isEmpty() || this._private__data._internal_size() === 0) {
             this._private__indexedMarkers = [];
             return;
         }
-        var firstDataIndex = ensureNotNull(this._private__data._internal_firstIndex());
-        this._private__indexedMarkers = this._private__markers.map(function (marker, index) {
+        const firstDataIndex = ensureNotNull(this._private__data._internal_firstIndex());
+        this._private__indexedMarkers = this._private__markers.map((marker, index) => {
             // the first find index on the time scale (across all series)
-            var timePointIndex = ensureNotNull(timeScale._internal_timeToIndex(marker.time, true));
+            const timePointIndex = ensureNotNull(timeScale._internal_timeToIndex(marker.time, true));
             // and then search that index inside the series data
-            var searchMode = timePointIndex < firstDataIndex ? 1 /* NearestRight */ : -1 /* NearestLeft */;
-            var seriesDataIndex = ensureNotNull(_this._private__data._internal_search(timePointIndex, searchMode))._internal_index;
+            const searchMode = timePointIndex < firstDataIndex ? 1 /* MismatchDirection.NearestRight */ : -1 /* MismatchDirection.NearestLeft */;
+            const seriesDataIndex = ensureNotNull(this._private__data._internal_search(timePointIndex, searchMode))._internal_index;
             return {
                 time: seriesDataIndex,
                 position: marker.position,
                 shape: marker.shape,
                 color: marker.color,
                 id: marker.id,
-                _internal_internalId: index,
+                internalId: index,
                 text: marker.text,
                 size: marker.size,
             };
         });
-    };
-    Series.prototype._private__recreatePaneViews = function () {
+    }
+    _private__recreatePaneViews() {
         this._private__markersPaneView = new SeriesMarkersPaneView(this, this._internal_model());
         switch (this._private__seriesType) {
             case 'Bar': {
@@ -4613,80 +4592,76 @@ var Series = /** @class */ (function (_super) {
             }
             default: throw Error('Unknown chart style assigned: ' + this._private__seriesType);
         }
-    };
-    return Series;
-}(PriceDataSource));
+    }
+}
 
-var Magnet = /** @class */ (function () {
-    function Magnet(options) {
+class Magnet {
+    constructor(options) {
         this._private__options = options;
     }
-    Magnet.prototype._internal_align = function (price, index, pane) {
-        var res = price;
-        if (this._private__options.mode === 0 /* Normal */) {
+    _internal_align(price, index, pane) {
+        let res = price;
+        if (this._private__options.mode === 0 /* CrosshairMode.Normal */) {
             return res;
         }
-        var defaultPriceScale = pane._internal_defaultPriceScale();
-        var firstValue = defaultPriceScale._internal_firstValue();
+        const defaultPriceScale = pane._internal_defaultPriceScale();
+        const firstValue = defaultPriceScale._internal_firstValue();
         if (firstValue === null) {
             return res;
         }
-        var y = defaultPriceScale._internal_priceToCoordinate(price, firstValue);
+        const y = defaultPriceScale._internal_priceToCoordinate(price, firstValue);
         // get all serieses from the pane
-        var serieses = pane._internal_dataSources().filter((function (ds) { return (ds instanceof Series); }));
-        var candidates = serieses.reduce(function (acc, series) {
+        const serieses = pane._internal_dataSources().filter(((ds) => (ds instanceof Series)));
+        const candidates = serieses.reduce((acc, series) => {
             if (pane._internal_isOverlay(series) || !series._internal_visible()) {
                 return acc;
             }
-            var ps = series._internal_priceScale();
-            var bars = series._internal_bars();
+            const ps = series._internal_priceScale();
+            const bars = series._internal_bars();
             if (ps._internal_isEmpty() || !bars._internal_contains(index)) {
                 return acc;
             }
-            var bar = bars._internal_valueAt(index);
+            const bar = bars._internal_valueAt(index);
             if (bar === null) {
                 return acc;
             }
             // convert bar to pixels
-            var firstPrice = ensure(series._internal_firstValue());
-            return acc.concat([ps._internal_priceToCoordinate(bar._internal_value[3 /* Close */], firstPrice._internal_value)]);
+            const firstPrice = ensure(series._internal_firstValue());
+            return acc.concat([ps._internal_priceToCoordinate(bar._internal_value[3 /* PlotRowValueIndex.Close */], firstPrice._internal_value)]);
         }, []);
         if (candidates.length === 0) {
             return res;
         }
-        candidates.sort(function (y1, y2) { return Math.abs(y1 - y) - Math.abs(y2 - y); });
-        var nearest = candidates[0];
+        candidates.sort((y1, y2) => Math.abs(y1 - y) - Math.abs(y2 - y));
+        const nearest = candidates[0];
         res = defaultPriceScale._internal_coordinateToPrice(nearest, firstValue);
         return res;
-    };
-    return Magnet;
-}());
+    }
+}
 
-var GridRenderer = /** @class */ (function () {
-    function GridRenderer() {
+class GridRenderer {
+    constructor() {
         this._private__data = null;
     }
-    GridRenderer.prototype._internal_setData = function (data) {
+    _internal_setData(data) {
         this._private__data = data;
-    };
-    GridRenderer.prototype._internal_draw = function (ctx, pixelRatio, isHovered, hitTestData) {
-        var _this = this;
+    }
+    _internal_draw(ctx, pixelRatio, isHovered, hitTestData) {
         if (this._private__data === null) {
             return;
         }
-        var lineWidth = Math.max(1, Math.floor(pixelRatio));
+        const lineWidth = Math.max(1, Math.floor(pixelRatio));
         ctx.lineWidth = lineWidth;
-        var height = Math.ceil(this._private__data._internal_h * pixelRatio);
-        var width = Math.ceil(this._private__data._internal_w * pixelRatio);
-        strokeInPixel(ctx, function () {
-            var data = ensureNotNull(_this._private__data);
+        const height = Math.ceil(this._private__data._internal_h * pixelRatio);
+        const width = Math.ceil(this._private__data._internal_w * pixelRatio);
+        strokeInPixel(ctx, () => {
+            const data = ensureNotNull(this._private__data);
             if (data._internal_vertLinesVisible) {
                 ctx.strokeStyle = data._internal_vertLinesColor;
                 setLineStyle(ctx, data._internal_vertLineStyle);
                 ctx.beginPath();
-                for (var _i = 0, _a = data._internal_timeMarks; _i < _a.length; _i++) {
-                    var timeMark = _a[_i];
-                    var x = Math.round(timeMark._internal_coord * pixelRatio);
+                for (const timeMark of data._internal_timeMarks) {
+                    const x = Math.round(timeMark._internal_coord * pixelRatio);
                     ctx.moveTo(x, -lineWidth);
                     ctx.lineTo(x, height + lineWidth);
                 }
@@ -4696,32 +4671,30 @@ var GridRenderer = /** @class */ (function () {
                 ctx.strokeStyle = data._internal_horzLinesColor;
                 setLineStyle(ctx, data._internal_horzLineStyle);
                 ctx.beginPath();
-                for (var _b = 0, _c = data._internal_priceMarks; _b < _c.length; _b++) {
-                    var priceMark = _c[_b];
-                    var y = Math.round(priceMark._internal_coord * pixelRatio);
+                for (const priceMark of data._internal_priceMarks) {
+                    const y = Math.round(priceMark._internal_coord * pixelRatio);
                     ctx.moveTo(-lineWidth, y);
                     ctx.lineTo(width + lineWidth, y);
                 }
                 ctx.stroke();
             }
         });
-    };
-    return GridRenderer;
-}());
+    }
+}
 
-var GridPaneView = /** @class */ (function () {
-    function GridPaneView(pane) {
+class GridPaneView {
+    constructor(pane) {
         this._private__renderer = new GridRenderer();
         this._private__invalidated = true;
         this._private__pane = pane;
     }
-    GridPaneView.prototype._internal_update = function () {
+    _internal_update() {
         this._private__invalidated = true;
-    };
-    GridPaneView.prototype._internal_renderer = function (height, width) {
+    }
+    _internal_renderer(height, width) {
         if (this._private__invalidated) {
-            var gridOptions = this._private__pane._internal_model()._internal_options().grid;
-            var data = {
+            const gridOptions = this._private__pane._internal_model()._internal_options().grid;
+            const data = {
                 _internal_h: height,
                 _internal_w: width,
                 _internal_horzLinesVisible: gridOptions.horzLines.visible,
@@ -4737,21 +4710,19 @@ var GridPaneView = /** @class */ (function () {
             this._private__invalidated = false;
         }
         return this._private__renderer;
-    };
-    return GridPaneView;
-}());
+    }
+}
 
-var Grid = /** @class */ (function () {
-    function Grid(pane) {
+class Grid {
+    constructor(pane) {
         this._private__paneView = new GridPaneView(pane);
     }
-    Grid.prototype._internal_paneView = function () {
+    _internal_paneView() {
         return this._private__paneView;
-    };
-    return Grid;
-}());
+    }
+}
 
-var defLogFormula = {
+const defLogFormula = {
     _internal_logicalOffset: 4,
     _internal_coordOffset: 0.0001,
 };
@@ -4762,12 +4733,12 @@ function fromPercent(value, baseValue) {
     return (value / 100) * baseValue + baseValue;
 }
 function toPercent(value, baseValue) {
-    var result = 100 * (value - baseValue) / baseValue;
+    const result = 100 * (value - baseValue) / baseValue;
     return (baseValue < 0 ? -result : result);
 }
 function toPercentRange(priceRange, baseValue) {
-    var minPercent = toPercent(priceRange._internal_minValue(), baseValue);
-    var maxPercent = toPercent(priceRange._internal_maxValue(), baseValue);
+    const minPercent = toPercent(priceRange._internal_minValue(), baseValue);
+    const maxPercent = toPercent(priceRange._internal_maxValue(), baseValue);
     return new PriceRangeImpl(minPercent, maxPercent);
 }
 function fromIndexedTo100(value, baseValue) {
@@ -4778,65 +4749,65 @@ function fromIndexedTo100(value, baseValue) {
     return (value / 100) * baseValue + baseValue;
 }
 function toIndexedTo100(value, baseValue) {
-    var result = 100 * (value - baseValue) / baseValue + 100;
+    const result = 100 * (value - baseValue) / baseValue + 100;
     return (baseValue < 0 ? -result : result);
 }
 function toIndexedTo100Range(priceRange, baseValue) {
-    var minPercent = toIndexedTo100(priceRange._internal_minValue(), baseValue);
-    var maxPercent = toIndexedTo100(priceRange._internal_maxValue(), baseValue);
+    const minPercent = toIndexedTo100(priceRange._internal_minValue(), baseValue);
+    const maxPercent = toIndexedTo100(priceRange._internal_maxValue(), baseValue);
     return new PriceRangeImpl(minPercent, maxPercent);
 }
 function toLog(price, logFormula) {
-    var m = Math.abs(price);
+    const m = Math.abs(price);
     if (m < 1e-15) {
         return 0;
     }
-    var res = log10(m + logFormula._internal_coordOffset) + logFormula._internal_logicalOffset;
+    const res = log10(m + logFormula._internal_coordOffset) + logFormula._internal_logicalOffset;
     return ((price < 0) ? -res : res);
 }
 function fromLog(logical, logFormula) {
-    var m = Math.abs(logical);
+    const m = Math.abs(logical);
     if (m < 1e-15) {
         return 0;
     }
-    var res = Math.pow(10, m - logFormula._internal_logicalOffset) - logFormula._internal_coordOffset;
+    const res = Math.pow(10, m - logFormula._internal_logicalOffset) - logFormula._internal_coordOffset;
     return (logical < 0) ? -res : res;
 }
 function convertPriceRangeToLog(priceRange, logFormula) {
     if (priceRange === null) {
         return null;
     }
-    var min = toLog(priceRange._internal_minValue(), logFormula);
-    var max = toLog(priceRange._internal_maxValue(), logFormula);
+    const min = toLog(priceRange._internal_minValue(), logFormula);
+    const max = toLog(priceRange._internal_maxValue(), logFormula);
     return new PriceRangeImpl(min, max);
 }
 function canConvertPriceRangeFromLog(priceRange, logFormula) {
     if (priceRange === null) {
         return false;
     }
-    var min = fromLog(priceRange._internal_minValue(), logFormula);
-    var max = fromLog(priceRange._internal_maxValue(), logFormula);
+    const min = fromLog(priceRange._internal_minValue(), logFormula);
+    const max = fromLog(priceRange._internal_maxValue(), logFormula);
     return isFinite(min) && isFinite(max);
 }
 function convertPriceRangeFromLog(priceRange, logFormula) {
     if (priceRange === null) {
         return null;
     }
-    var min = fromLog(priceRange._internal_minValue(), logFormula);
-    var max = fromLog(priceRange._internal_maxValue(), logFormula);
+    const min = fromLog(priceRange._internal_minValue(), logFormula);
+    const max = fromLog(priceRange._internal_maxValue(), logFormula);
     return new PriceRangeImpl(min, max);
 }
 function logFormulaForPriceRange(range) {
     if (range === null) {
         return defLogFormula;
     }
-    var diff = Math.abs(range._internal_maxValue() - range._internal_minValue());
+    const diff = Math.abs(range._internal_maxValue() - range._internal_minValue());
     if (diff >= 1 || diff < 1e-15) {
         return defLogFormula;
     }
-    var digits = Math.ceil(Math.abs(Math.log10(diff)));
-    var logicalOffset = defLogFormula._internal_logicalOffset + digits;
-    var coordOffset = 1 / Math.pow(10, logicalOffset);
+    const digits = Math.ceil(Math.abs(Math.log10(diff)));
+    const logicalOffset = defLogFormula._internal_logicalOffset + digits;
+    const coordOffset = 1 / Math.pow(10, logicalOffset);
     return {
         _internal_logicalOffset: logicalOffset,
         _internal_coordOffset: coordOffset,
@@ -4846,8 +4817,8 @@ function logFormulasAreSame(f1, f2) {
     return f1._internal_logicalOffset === f2._internal_logicalOffset && f1._internal_coordOffset === f2._internal_coordOffset;
 }
 
-var PriceTickSpanCalculator = /** @class */ (function () {
-    function PriceTickSpanCalculator(base, integralDividers) {
+class PriceTickSpanCalculator {
+    constructor(base, integralDividers) {
         this._private__base = base;
         this._private__integralDividers = integralDividers;
         if (isBaseDecimal(this._private__base)) {
@@ -4855,7 +4826,7 @@ var PriceTickSpanCalculator = /** @class */ (function () {
         }
         else {
             this._private__fractionalDividers = [];
-            for (var baseRest = this._private__base; baseRest !== 1;) {
+            for (let baseRest = this._private__base; baseRest !== 1;) {
                 if ((baseRest % 2) === 0) {
                     this._private__fractionalDividers.push(2);
                     baseRest /= 2;
@@ -4873,92 +4844,91 @@ var PriceTickSpanCalculator = /** @class */ (function () {
             }
         }
     }
-    PriceTickSpanCalculator.prototype._internal_tickSpan = function (high, low, maxTickSpan) {
-        var minMovement = (this._private__base === 0) ? (0) : (1 / this._private__base);
-        var resultTickSpan = Math.pow(10, Math.max(0, Math.ceil(log10(high - low))));
-        var index = 0;
-        var c = this._private__integralDividers[0];
+    _internal_tickSpan(high, low, maxTickSpan) {
+        const minMovement = (this._private__base === 0) ? (0) : (1 / this._private__base);
+        let resultTickSpan = Math.pow(10, Math.max(0, Math.ceil(log10(high - low))));
+        let index = 0;
+        let c = this._private__integralDividers[0];
         // eslint-disable-next-line no-constant-condition
         while (true) {
             // the second part is actual for small with very small values like 1e-10
             // greaterOrEqual fails for such values
-            var resultTickSpanLargerMinMovement = greaterOrEqual(resultTickSpan, minMovement, 1e-14 /* TickSpanEpsilon */) && resultTickSpan > (minMovement + 1e-14 /* TickSpanEpsilon */);
-            var resultTickSpanLargerMaxTickSpan = greaterOrEqual(resultTickSpan, maxTickSpan * c, 1e-14 /* TickSpanEpsilon */);
-            var resultTickSpanLarger1 = greaterOrEqual(resultTickSpan, 1, 1e-14 /* TickSpanEpsilon */);
-            var haveToContinue = resultTickSpanLargerMinMovement && resultTickSpanLargerMaxTickSpan && resultTickSpanLarger1;
+            const resultTickSpanLargerMinMovement = greaterOrEqual(resultTickSpan, minMovement, 1e-14 /* Constants.TickSpanEpsilon */) && resultTickSpan > (minMovement + 1e-14 /* Constants.TickSpanEpsilon */);
+            const resultTickSpanLargerMaxTickSpan = greaterOrEqual(resultTickSpan, maxTickSpan * c, 1e-14 /* Constants.TickSpanEpsilon */);
+            const resultTickSpanLarger1 = greaterOrEqual(resultTickSpan, 1, 1e-14 /* Constants.TickSpanEpsilon */);
+            const haveToContinue = resultTickSpanLargerMinMovement && resultTickSpanLargerMaxTickSpan && resultTickSpanLarger1;
             if (!haveToContinue) {
                 break;
             }
             resultTickSpan /= c;
             c = this._private__integralDividers[++index % this._private__integralDividers.length];
         }
-        if (resultTickSpan <= (minMovement + 1e-14 /* TickSpanEpsilon */)) {
+        if (resultTickSpan <= (minMovement + 1e-14 /* Constants.TickSpanEpsilon */)) {
             resultTickSpan = minMovement;
         }
         resultTickSpan = Math.max(1, resultTickSpan);
-        if ((this._private__fractionalDividers.length > 0) && equal(resultTickSpan, 1, 1e-14 /* TickSpanEpsilon */)) {
+        if ((this._private__fractionalDividers.length > 0) && equal(resultTickSpan, 1, 1e-14 /* Constants.TickSpanEpsilon */)) {
             index = 0;
             c = this._private__fractionalDividers[0];
-            while (greaterOrEqual(resultTickSpan, maxTickSpan * c, 1e-14 /* TickSpanEpsilon */) && resultTickSpan > (minMovement + 1e-14 /* TickSpanEpsilon */)) {
+            while (greaterOrEqual(resultTickSpan, maxTickSpan * c, 1e-14 /* Constants.TickSpanEpsilon */) && resultTickSpan > (minMovement + 1e-14 /* Constants.TickSpanEpsilon */)) {
                 resultTickSpan /= c;
                 c = this._private__fractionalDividers[++index % this._private__fractionalDividers.length];
             }
         }
         return resultTickSpan;
-    };
-    return PriceTickSpanCalculator;
-}());
+    }
+}
 
-var TICK_DENSITY = 2.5;
-var PriceTickMarkBuilder = /** @class */ (function () {
-    function PriceTickMarkBuilder(priceScale, base, coordinateToLogicalFunc, logicalToCoordinateFunc) {
+const TICK_DENSITY = 2.5;
+class PriceTickMarkBuilder {
+    constructor(priceScale, base, coordinateToLogicalFunc, logicalToCoordinateFunc) {
         this._private__marks = [];
         this._private__priceScale = priceScale;
         this._private__base = base;
         this._private__coordinateToLogicalFunc = coordinateToLogicalFunc;
         this._private__logicalToCoordinateFunc = logicalToCoordinateFunc;
     }
-    PriceTickMarkBuilder.prototype._internal_tickSpan = function (high, low) {
+    _internal_tickSpan(high, low) {
         if (high < low) {
             throw new Error('high < low');
         }
-        var scaleHeight = this._private__priceScale._internal_height();
-        var markHeight = this._private__tickMarkHeight();
-        var maxTickSpan = (high - low) * markHeight / scaleHeight;
-        var spanCalculator1 = new PriceTickSpanCalculator(this._private__base, [2, 2.5, 2]);
-        var spanCalculator2 = new PriceTickSpanCalculator(this._private__base, [2, 2, 2.5]);
-        var spanCalculator3 = new PriceTickSpanCalculator(this._private__base, [2.5, 2, 2]);
-        var spans = [];
+        const scaleHeight = this._private__priceScale._internal_height();
+        const markHeight = this._private__tickMarkHeight();
+        const maxTickSpan = (high - low) * markHeight / scaleHeight;
+        const spanCalculator1 = new PriceTickSpanCalculator(this._private__base, [2, 2.5, 2]);
+        const spanCalculator2 = new PriceTickSpanCalculator(this._private__base, [2, 2, 2.5]);
+        const spanCalculator3 = new PriceTickSpanCalculator(this._private__base, [2.5, 2, 2]);
+        const spans = [];
         spans.push(spanCalculator1._internal_tickSpan(high, low, maxTickSpan), spanCalculator2._internal_tickSpan(high, low, maxTickSpan), spanCalculator3._internal_tickSpan(high, low, maxTickSpan));
         return min(spans);
-    };
-    PriceTickMarkBuilder.prototype._internal_rebuildTickMarks = function () {
-        var priceScale = this._private__priceScale;
-        var firstValue = priceScale._internal_firstValue();
+    }
+    _internal_rebuildTickMarks() {
+        const priceScale = this._private__priceScale;
+        const firstValue = priceScale._internal_firstValue();
         if (firstValue === null) {
             this._private__marks = [];
             return;
         }
-        var scaleHeight = priceScale._internal_height();
-        var bottom = this._private__coordinateToLogicalFunc(scaleHeight - 1, firstValue);
-        var top = this._private__coordinateToLogicalFunc(0, firstValue);
-        var extraTopBottomMargin = this._private__priceScale._internal_options().entireTextOnly ? this._private__fontHeight() / 2 : 0;
-        var minCoord = extraTopBottomMargin;
-        var maxCoord = scaleHeight - 1 - extraTopBottomMargin;
-        var high = Math.max(bottom, top);
-        var low = Math.min(bottom, top);
+        const scaleHeight = priceScale._internal_height();
+        const bottom = this._private__coordinateToLogicalFunc(scaleHeight - 1, firstValue);
+        const top = this._private__coordinateToLogicalFunc(0, firstValue);
+        const extraTopBottomMargin = this._private__priceScale._internal_options().entireTextOnly ? this._private__fontHeight() / 2 : 0;
+        const minCoord = extraTopBottomMargin;
+        const maxCoord = scaleHeight - 1 - extraTopBottomMargin;
+        const high = Math.max(bottom, top);
+        const low = Math.min(bottom, top);
         if (high === low) {
             this._private__marks = [];
             return;
         }
-        var span = this._internal_tickSpan(high, low);
-        var mod = high % span;
+        let span = this._internal_tickSpan(high, low);
+        let mod = high % span;
         mod += mod < 0 ? span : 0;
-        var sign = (high >= low) ? 1 : -1;
-        var prevCoord = null;
-        var targetIndex = 0;
-        for (var logical = high - mod; logical > low; logical -= span) {
-            var coord = this._private__logicalToCoordinateFunc(logical, firstValue, true);
+        const sign = (high >= low) ? 1 : -1;
+        let prevCoord = null;
+        let targetIndex = 0;
+        for (let logical = high - mod; logical > low; logical -= span) {
+            const coord = this._private__logicalToCoordinateFunc(logical, firstValue, true);
             // check if there is place for it
             // this is required for log scale
             if (prevCoord !== null && Math.abs(coord - prevCoord) < this._private__tickMarkHeight()) {
@@ -4986,21 +4956,20 @@ var PriceTickMarkBuilder = /** @class */ (function () {
             }
         }
         this._private__marks.length = targetIndex;
-    };
-    PriceTickMarkBuilder.prototype._internal_marks = function () {
+    }
+    _internal_marks() {
         return this._private__marks;
-    };
-    PriceTickMarkBuilder.prototype._private__fontHeight = function () {
+    }
+    _private__fontHeight() {
         return this._private__priceScale._internal_fontSize();
-    };
-    PriceTickMarkBuilder.prototype._private__tickMarkHeight = function () {
+    }
+    _private__tickMarkHeight() {
         return Math.ceil(this._private__fontHeight() * TICK_DENSITY);
-    };
-    return PriceTickMarkBuilder;
-}());
+    }
+}
 
 function sortSources(sources) {
-    return sources.slice().sort(function (s1, s2) {
+    return sources.slice().sort((s1, s2) => {
         return (ensureNotNull(s1._internal_zorder()) - ensureNotNull(s2._internal_zorder()));
     });
 }
@@ -5028,10 +4997,10 @@ var PriceScaleMode;
      */
     PriceScaleMode[PriceScaleMode["IndexedTo100"] = 3] = "IndexedTo100";
 })(PriceScaleMode || (PriceScaleMode = {}));
-var percentageFormatter = new PercentageFormatter();
-var defaultPriceFormatter = new PriceFormatter(100, 1);
-var PriceScale = /** @class */ (function () {
-    function PriceScale(id, options, layoutOptions, localizationOptions) {
+const percentageFormatter = new PercentageFormatter();
+const defaultPriceFormatter = new PriceFormatter(100, 1);
+class PriceScale {
+    constructor(id, options, layoutOptions, localizationOptions) {
         this._private__height = 0;
         this._private__internalHeightCache = null;
         this._private__priceRange = null;
@@ -5054,70 +5023,70 @@ var PriceScale = /** @class */ (function () {
         this._private__localizationOptions = localizationOptions;
         this._private__markBuilder = new PriceTickMarkBuilder(this, 100, this._private__coordinateToLogical.bind(this), this._private__logicalToCoordinate.bind(this));
     }
-    PriceScale.prototype._internal_id = function () {
+    _internal_id() {
         return this._private__id;
-    };
-    PriceScale.prototype._internal_options = function () {
+    }
+    _internal_options() {
         return this._private__options;
-    };
-    PriceScale.prototype._internal_applyOptions = function (options) {
+    }
+    _internal_applyOptions(options) {
         merge(this._private__options, options);
         this._internal_updateFormatter();
         if (options.mode !== undefined) {
             this._internal_setMode({ _internal_mode: options.mode });
         }
         if (options.scaleMargins !== undefined) {
-            var top_1 = ensureDefined(options.scaleMargins.top);
-            var bottom = ensureDefined(options.scaleMargins.bottom);
-            if (top_1 < 0 || top_1 > 1) {
-                throw new Error("Invalid top margin - expect value between 0 and 1, given=".concat(top_1));
+            const top = ensureDefined(options.scaleMargins.top);
+            const bottom = ensureDefined(options.scaleMargins.bottom);
+            if (top < 0 || top > 1) {
+                throw new Error(`Invalid top margin - expect value between 0 and 1, given=${top}`);
             }
-            if (bottom < 0 || bottom > 1 || top_1 + bottom > 1) {
-                throw new Error("Invalid bottom margin - expect value between 0 and 1, given=".concat(bottom));
+            if (bottom < 0 || bottom > 1 || top + bottom > 1) {
+                throw new Error(`Invalid bottom margin - expect value between 0 and 1, given=${bottom}`);
             }
-            if (top_1 + bottom > 1) {
-                throw new Error("Invalid margins - sum of margins must be less than 1, given=".concat(top_1 + bottom));
+            if (top + bottom > 1) {
+                throw new Error(`Invalid margins - sum of margins must be less than 1, given=${top + bottom}`);
             }
             this._private__invalidateInternalHeightCache();
             this._private__marksCache = null;
         }
-    };
-    PriceScale.prototype._internal_isAutoScale = function () {
+    }
+    _internal_isAutoScale() {
         return this._private__options.autoScale;
-    };
-    PriceScale.prototype._internal_isLog = function () {
-        return this._private__options.mode === 1 /* Logarithmic */;
-    };
-    PriceScale.prototype._internal_isPercentage = function () {
-        return this._private__options.mode === 2 /* Percentage */;
-    };
-    PriceScale.prototype._internal_isIndexedTo100 = function () {
-        return this._private__options.mode === 3 /* IndexedTo100 */;
-    };
-    PriceScale.prototype._internal_mode = function () {
+    }
+    _internal_isLog() {
+        return this._private__options.mode === 1 /* PriceScaleMode.Logarithmic */;
+    }
+    _internal_isPercentage() {
+        return this._private__options.mode === 2 /* PriceScaleMode.Percentage */;
+    }
+    _internal_isIndexedTo100() {
+        return this._private__options.mode === 3 /* PriceScaleMode.IndexedTo100 */;
+    }
+    _internal_mode() {
         return {
             _internal_autoScale: this._private__options.autoScale,
             _internal_isInverted: this._private__options.invertScale,
             _internal_mode: this._private__options.mode,
         };
-    };
+    }
     // eslint-disable-next-line complexity
-    PriceScale.prototype._internal_setMode = function (newMode) {
-        var oldMode = this._internal_mode();
-        var priceRange = null;
+    _internal_setMode(newMode) {
+        const oldMode = this._internal_mode();
+        let priceRange = null;
         if (newMode._internal_autoScale !== undefined) {
             this._private__options.autoScale = newMode._internal_autoScale;
         }
         if (newMode._internal_mode !== undefined) {
             this._private__options.mode = newMode._internal_mode;
-            if (newMode._internal_mode === 2 /* Percentage */ || newMode._internal_mode === 3 /* IndexedTo100 */) {
+            if (newMode._internal_mode === 2 /* PriceScaleMode.Percentage */ || newMode._internal_mode === 3 /* PriceScaleMode.IndexedTo100 */) {
                 this._private__options.autoScale = true;
             }
             // TODO: Remove after making rebuildTickMarks lazy
             this._private__invalidatedForRange._internal_isValid = false;
         }
         // define which scale converted from
-        if (oldMode._internal_mode === 1 /* Logarithmic */ && newMode._internal_mode !== oldMode._internal_mode) {
+        if (oldMode._internal_mode === 1 /* PriceScaleMode.Logarithmic */ && newMode._internal_mode !== oldMode._internal_mode) {
             if (canConvertPriceRangeFromLog(this._private__priceRange, this._private__logFormula)) {
                 priceRange = convertPriceRangeFromLog(this._private__priceRange, this._private__logFormula);
                 if (priceRange !== null) {
@@ -5129,17 +5098,17 @@ var PriceScale = /** @class */ (function () {
             }
         }
         // define which scale converted to
-        if (newMode._internal_mode === 1 /* Logarithmic */ && newMode._internal_mode !== oldMode._internal_mode) {
+        if (newMode._internal_mode === 1 /* PriceScaleMode.Logarithmic */ && newMode._internal_mode !== oldMode._internal_mode) {
             priceRange = convertPriceRangeToLog(this._private__priceRange, this._private__logFormula);
             if (priceRange !== null) {
                 this._internal_setPriceRange(priceRange);
             }
         }
-        var modeChanged = oldMode._internal_mode !== this._private__options.mode;
-        if (modeChanged && (oldMode._internal_mode === 2 /* Percentage */ || this._internal_isPercentage())) {
+        const modeChanged = oldMode._internal_mode !== this._private__options.mode;
+        if (modeChanged && (oldMode._internal_mode === 2 /* PriceScaleMode.Percentage */ || this._internal_isPercentage())) {
             this._internal_updateFormatter();
         }
-        if (modeChanged && (oldMode._internal_mode === 3 /* IndexedTo100 */ || this._internal_isIndexedTo100())) {
+        if (modeChanged && (oldMode._internal_mode === 3 /* PriceScaleMode.IndexedTo100 */ || this._internal_isIndexedTo100())) {
             this._internal_updateFormatter();
         }
         if (newMode._internal_isInverted !== undefined && oldMode._internal_isInverted !== newMode._internal_isInverted) {
@@ -5147,38 +5116,38 @@ var PriceScale = /** @class */ (function () {
             this._private__onIsInvertedChanged();
         }
         this._private__modeChanged._internal_fire(oldMode, this._internal_mode());
-    };
-    PriceScale.prototype._internal_modeChanged = function () {
+    }
+    _internal_modeChanged() {
         return this._private__modeChanged;
-    };
-    PriceScale.prototype._internal_fontSize = function () {
+    }
+    _internal_fontSize() {
         return this._private__layoutOptions.fontSize;
-    };
-    PriceScale.prototype._internal_height = function () {
+    }
+    _internal_height() {
         return this._private__height;
-    };
-    PriceScale.prototype._internal_setHeight = function (value) {
+    }
+    _internal_setHeight(value) {
         if (this._private__height === value) {
             return;
         }
         this._private__height = value;
         this._private__invalidateInternalHeightCache();
         this._private__marksCache = null;
-    };
-    PriceScale.prototype._internal_internalHeight = function () {
+    }
+    _internal_internalHeight() {
         if (this._private__internalHeightCache) {
             return this._private__internalHeightCache;
         }
-        var res = this._internal_height() - this._private__topMarginPx() - this._private__bottomMarginPx();
+        const res = this._internal_height() - this._private__topMarginPx() - this._private__bottomMarginPx();
         this._private__internalHeightCache = res;
         return res;
-    };
-    PriceScale.prototype._internal_priceRange = function () {
+    }
+    _internal_priceRange() {
         this._private__makeSureItIsValid();
         return this._private__priceRange;
-    };
-    PriceScale.prototype._internal_setPriceRange = function (newPriceRange, isForceSetValue) {
-        var oldPriceRange = this._private__priceRange;
+    }
+    _internal_setPriceRange(newPriceRange, isForceSetValue) {
+        const oldPriceRange = this._private__priceRange;
         if (!isForceSetValue &&
             !(oldPriceRange === null && newPriceRange !== null) &&
             (oldPriceRange === null || oldPriceRange._internal_equals(newPriceRange))) {
@@ -5186,15 +5155,15 @@ var PriceScale = /** @class */ (function () {
         }
         this._private__marksCache = null;
         this._private__priceRange = newPriceRange;
-    };
-    PriceScale.prototype._internal_isEmpty = function () {
+    }
+    _internal_isEmpty() {
         this._private__makeSureItIsValid();
         return this._private__height === 0 || !this._private__priceRange || this._private__priceRange._internal_isEmpty();
-    };
-    PriceScale.prototype._internal_invertedCoordinate = function (coordinate) {
+    }
+    _internal_invertedCoordinate(coordinate) {
         return this._internal_isInverted() ? coordinate : this._internal_height() - 1 - coordinate;
-    };
-    PriceScale.prototype._internal_priceToCoordinate = function (price, baseValue) {
+    }
+    _internal_priceToCoordinate(price, baseValue) {
         if (this._internal_isPercentage()) {
             price = toPercent(price, baseValue);
         }
@@ -5202,60 +5171,60 @@ var PriceScale = /** @class */ (function () {
             price = toIndexedTo100(price, baseValue);
         }
         return this._private__logicalToCoordinate(price, baseValue);
-    };
-    PriceScale.prototype._internal_pointsArrayToCoordinates = function (points, baseValue, visibleRange) {
+    }
+    _internal_pointsArrayToCoordinates(points, baseValue, visibleRange) {
         this._private__makeSureItIsValid();
-        var bh = this._private__bottomMarginPx();
-        var range = ensureNotNull(this._internal_priceRange());
-        var min = range._internal_minValue();
-        var max = range._internal_maxValue();
-        var ih = (this._internal_internalHeight() - 1);
-        var isInverted = this._internal_isInverted();
-        var hmm = ih / (max - min);
-        var fromIndex = (visibleRange === undefined) ? 0 : visibleRange.from;
-        var toIndex = (visibleRange === undefined) ? points.length : visibleRange.to;
-        var transformFn = this._private__getCoordinateTransformer();
-        for (var i = fromIndex; i < toIndex; i++) {
-            var point = points[i];
-            var price = point._internal_price;
+        const bh = this._private__bottomMarginPx();
+        const range = ensureNotNull(this._internal_priceRange());
+        const min = range._internal_minValue();
+        const max = range._internal_maxValue();
+        const ih = (this._internal_internalHeight() - 1);
+        const isInverted = this._internal_isInverted();
+        const hmm = ih / (max - min);
+        const fromIndex = (visibleRange === undefined) ? 0 : visibleRange.from;
+        const toIndex = (visibleRange === undefined) ? points.length : visibleRange.to;
+        const transformFn = this._private__getCoordinateTransformer();
+        for (let i = fromIndex; i < toIndex; i++) {
+            const point = points[i];
+            const price = point._internal_price;
             if (isNaN(price)) {
                 continue;
             }
-            var logical = price;
+            let logical = price;
             if (transformFn !== null) {
                 logical = transformFn(point._internal_price, baseValue);
             }
-            var invCoordinate = bh + hmm * (logical - min);
-            var coordinate = isInverted ? invCoordinate : this._private__height - 1 - invCoordinate;
+            const invCoordinate = bh + hmm * (logical - min);
+            const coordinate = isInverted ? invCoordinate : this._private__height - 1 - invCoordinate;
             point._internal_y = coordinate;
         }
-    };
-    PriceScale.prototype._internal_barPricesToCoordinates = function (pricesList, baseValue, visibleRange) {
+    }
+    _internal_barPricesToCoordinates(pricesList, baseValue, visibleRange) {
         this._private__makeSureItIsValid();
-        var bh = this._private__bottomMarginPx();
-        var range = ensureNotNull(this._internal_priceRange());
-        var min = range._internal_minValue();
-        var max = range._internal_maxValue();
-        var ih = (this._internal_internalHeight() - 1);
-        var isInverted = this._internal_isInverted();
-        var hmm = ih / (max - min);
-        var fromIndex = (visibleRange === undefined) ? 0 : visibleRange.from;
-        var toIndex = (visibleRange === undefined) ? pricesList.length : visibleRange.to;
-        var transformFn = this._private__getCoordinateTransformer();
-        for (var i = fromIndex; i < toIndex; i++) {
-            var bar = pricesList[i];
-            var openLogical = bar.open;
-            var highLogical = bar.high;
-            var lowLogical = bar.low;
-            var closeLogical = bar.close;
+        const bh = this._private__bottomMarginPx();
+        const range = ensureNotNull(this._internal_priceRange());
+        const min = range._internal_minValue();
+        const max = range._internal_maxValue();
+        const ih = (this._internal_internalHeight() - 1);
+        const isInverted = this._internal_isInverted();
+        const hmm = ih / (max - min);
+        const fromIndex = (visibleRange === undefined) ? 0 : visibleRange.from;
+        const toIndex = (visibleRange === undefined) ? pricesList.length : visibleRange.to;
+        const transformFn = this._private__getCoordinateTransformer();
+        for (let i = fromIndex; i < toIndex; i++) {
+            const bar = pricesList[i];
+            let openLogical = bar._internal_open;
+            let highLogical = bar._internal_high;
+            let lowLogical = bar._internal_low;
+            let closeLogical = bar._internal_close;
             if (transformFn !== null) {
-                openLogical = transformFn(bar.open, baseValue);
-                highLogical = transformFn(bar.high, baseValue);
-                lowLogical = transformFn(bar.low, baseValue);
-                closeLogical = transformFn(bar.close, baseValue);
+                openLogical = transformFn(bar._internal_open, baseValue);
+                highLogical = transformFn(bar._internal_high, baseValue);
+                lowLogical = transformFn(bar._internal_low, baseValue);
+                closeLogical = transformFn(bar._internal_close, baseValue);
             }
-            var invCoordinate = bh + hmm * (openLogical - min);
-            var coordinate = isInverted ? invCoordinate : this._private__height - 1 - invCoordinate;
+            let invCoordinate = bh + hmm * (openLogical - min);
+            let coordinate = isInverted ? invCoordinate : this._private__height - 1 - invCoordinate;
             bar._internal_openY = coordinate;
             invCoordinate = bh + hmm * (highLogical - min);
             coordinate = isInverted ? invCoordinate : this._private__height - 1 - invCoordinate;
@@ -5267,13 +5236,13 @@ var PriceScale = /** @class */ (function () {
             coordinate = isInverted ? invCoordinate : this._private__height - 1 - invCoordinate;
             bar._internal_closeY = coordinate;
         }
-    };
-    PriceScale.prototype._internal_coordinateToPrice = function (coordinate, baseValue) {
-        var logical = this._private__coordinateToLogical(coordinate, baseValue);
+    }
+    _internal_coordinateToPrice(coordinate, baseValue) {
+        const logical = this._private__coordinateToLogical(coordinate, baseValue);
         return this._internal_logicalToPrice(logical, baseValue);
-    };
-    PriceScale.prototype._internal_logicalToPrice = function (logical, baseValue) {
-        var value = logical;
+    }
+    _internal_logicalToPrice(logical, baseValue) {
+        let value = logical;
         if (this._internal_isPercentage()) {
             value = fromPercent(value, baseValue);
         }
@@ -5281,17 +5250,17 @@ var PriceScale = /** @class */ (function () {
             value = fromIndexedTo100(value, baseValue);
         }
         return value;
-    };
-    PriceScale.prototype._internal_dataSources = function () {
+    }
+    _internal_dataSources() {
         return this._private__dataSources;
-    };
-    PriceScale.prototype._internal_orderedSources = function () {
+    }
+    _internal_orderedSources() {
         if (this._private__cachedOrderedSources) {
             return this._private__cachedOrderedSources;
         }
-        var sources = [];
-        for (var i = 0; i < this._private__dataSources.length; i++) {
-            var ds = this._private__dataSources[i];
+        let sources = [];
+        for (let i = 0; i < this._private__dataSources.length; i++) {
+            const ds = this._private__dataSources[i];
             if (ds._internal_zorder() === null) {
                 ds._internal_setZorder(i + 1);
             }
@@ -5300,17 +5269,17 @@ var PriceScale = /** @class */ (function () {
         sources = sortSources(sources);
         this._private__cachedOrderedSources = sources;
         return this._private__cachedOrderedSources;
-    };
-    PriceScale.prototype._internal_addDataSource = function (source) {
+    }
+    _internal_addDataSource(source) {
         if (this._private__dataSources.indexOf(source) !== -1) {
             return;
         }
         this._private__dataSources.push(source);
         this._internal_updateFormatter();
         this._internal_invalidateSourcesCache();
-    };
-    PriceScale.prototype._internal_removeDataSource = function (source) {
-        var index = this._private__dataSources.indexOf(source);
+    }
+    _internal_removeDataSource(source) {
+        const index = this._private__dataSources.indexOf(source);
         if (index === -1) {
             throw new Error('source is not attached to scale');
         }
@@ -5324,13 +5293,12 @@ var PriceScale = /** @class */ (function () {
         }
         this._internal_updateFormatter();
         this._internal_invalidateSourcesCache();
-    };
-    PriceScale.prototype._internal_firstValue = function () {
+    }
+    _internal_firstValue() {
         // TODO: cache the result
-        var result = null;
-        for (var _i = 0, _a = this._private__dataSources; _i < _a.length; _i++) {
-            var source = _a[_i];
-            var firstValue = source._internal_firstValue();
+        let result = null;
+        for (const source of this._private__dataSources) {
+            const firstValue = source._internal_firstValue();
             if (firstValue === null) {
                 continue;
             }
@@ -5339,12 +5307,12 @@ var PriceScale = /** @class */ (function () {
             }
         }
         return result === null ? null : result._internal_value;
-    };
-    PriceScale.prototype._internal_isInverted = function () {
+    }
+    _internal_isInverted() {
         return this._private__options.invertScale;
-    };
-    PriceScale.prototype._internal_marks = function () {
-        var firstValueIsNull = this._internal_firstValue() === null;
+    }
+    _internal_marks() {
+        const firstValueIsNull = this._internal_firstValue() === null;
         // do not recalculate marks if firstValueIsNull is true because in this case we'll always get empty result
         // this could happen in case when a series had some data and then you set empty data to it (in a simplified case)
         // we could display an empty price scale, but this is not good from UX
@@ -5356,15 +5324,15 @@ var PriceScale = /** @class */ (function () {
             return this._private__marksCache._internal_marks;
         }
         this._private__markBuilder._internal_rebuildTickMarks();
-        var marks = this._private__markBuilder._internal_marks();
+        const marks = this._private__markBuilder._internal_marks();
         this._private__marksCache = { _internal_marks: marks, _internal_firstValueIsNull: firstValueIsNull };
         this._private__onMarksChanged._internal_fire();
         return marks;
-    };
-    PriceScale.prototype._internal_onMarksChanged = function () {
+    }
+    _internal_onMarksChanged() {
         return this._private__onMarksChanged;
-    };
-    PriceScale.prototype._internal_startScale = function (x) {
+    }
+    _internal_startScale(x) {
         if (this._internal_isPercentage() || this._internal_isIndexedTo100()) {
             return;
         }
@@ -5377,8 +5345,8 @@ var PriceScale = /** @class */ (function () {
         // invert x
         this._private__scaleStartPoint = this._private__height - x;
         this._private__priceRangeSnapshot = ensureNotNull(this._internal_priceRange())._internal_clone();
-    };
-    PriceScale.prototype._internal_scaleTo = function (x) {
+    }
+    _internal_scaleTo(x) {
         if (this._internal_isPercentage() || this._internal_isIndexedTo100()) {
             return;
         }
@@ -5393,20 +5361,20 @@ var PriceScale = /** @class */ (function () {
         if (x < 0) {
             x = 0;
         }
-        var scaleCoeff = (this._private__scaleStartPoint + (this._private__height - 1) * 0.2) / (x + (this._private__height - 1) * 0.2);
-        var newPriceRange = ensureNotNull(this._private__priceRangeSnapshot)._internal_clone();
+        let scaleCoeff = (this._private__scaleStartPoint + (this._private__height - 1) * 0.2) / (x + (this._private__height - 1) * 0.2);
+        const newPriceRange = ensureNotNull(this._private__priceRangeSnapshot)._internal_clone();
         scaleCoeff = Math.max(scaleCoeff, 0.1);
         newPriceRange._internal_scaleAroundCenter(scaleCoeff);
         this._internal_setPriceRange(newPriceRange);
-    };
-    PriceScale.prototype._internal_endScale = function () {
+    }
+    _internal_endScale() {
         if (this._internal_isPercentage() || this._internal_isIndexedTo100()) {
             return;
         }
         this._private__scaleStartPoint = null;
         this._private__priceRangeSnapshot = null;
-    };
-    PriceScale.prototype._internal_startScroll = function (x) {
+    }
+    _internal_startScroll(x) {
         if (this._internal_isAutoScale()) {
             return;
         }
@@ -5418,26 +5386,26 @@ var PriceScale = /** @class */ (function () {
         }
         this._private__scrollStartPoint = x;
         this._private__priceRangeSnapshot = ensureNotNull(this._internal_priceRange())._internal_clone();
-    };
-    PriceScale.prototype._internal_scrollTo = function (x) {
+    }
+    _internal_scrollTo(x) {
         if (this._internal_isAutoScale()) {
             return;
         }
         if (this._private__scrollStartPoint === null) {
             return;
         }
-        var priceUnitsPerPixel = ensureNotNull(this._internal_priceRange())._internal_length() / (this._internal_internalHeight() - 1);
-        var pixelDelta = x - this._private__scrollStartPoint;
+        const priceUnitsPerPixel = ensureNotNull(this._internal_priceRange())._internal_length() / (this._internal_internalHeight() - 1);
+        let pixelDelta = x - this._private__scrollStartPoint;
         if (this._internal_isInverted()) {
             pixelDelta *= -1;
         }
-        var priceDelta = pixelDelta * priceUnitsPerPixel;
-        var newPriceRange = ensureNotNull(this._private__priceRangeSnapshot)._internal_clone();
+        const priceDelta = pixelDelta * priceUnitsPerPixel;
+        const newPriceRange = ensureNotNull(this._private__priceRangeSnapshot)._internal_clone();
         newPriceRange._internal_shift(priceDelta);
         this._internal_setPriceRange(newPriceRange, true);
         this._private__marksCache = null;
-    };
-    PriceScale.prototype._internal_endScroll = function () {
+    }
+    _internal_endScroll() {
         if (this._internal_isAutoScale()) {
             return;
         }
@@ -5446,55 +5414,55 @@ var PriceScale = /** @class */ (function () {
         }
         this._private__scrollStartPoint = null;
         this._private__priceRangeSnapshot = null;
-    };
-    PriceScale.prototype._internal_formatter = function () {
+    }
+    _internal_formatter() {
         if (!this._private__formatter) {
             this._internal_updateFormatter();
         }
         return this._private__formatter;
-    };
-    PriceScale.prototype._internal_formatPrice = function (price, firstValue) {
+    }
+    _internal_formatPrice(price, firstValue) {
         switch (this._private__options.mode) {
-            case 2 /* Percentage */:
+            case 2 /* PriceScaleMode.Percentage */:
                 return this._internal_formatter().format(toPercent(price, firstValue));
-            case 3 /* IndexedTo100 */:
+            case 3 /* PriceScaleMode.IndexedTo100 */:
                 return this._internal_formatter().format(toIndexedTo100(price, firstValue));
             default:
                 return this._private__formatPrice(price);
         }
-    };
-    PriceScale.prototype._internal_formatLogical = function (logical) {
+    }
+    _internal_formatLogical(logical) {
         switch (this._private__options.mode) {
-            case 2 /* Percentage */:
-            case 3 /* IndexedTo100 */:
+            case 2 /* PriceScaleMode.Percentage */:
+            case 3 /* PriceScaleMode.IndexedTo100 */:
                 return this._internal_formatter().format(logical);
             default:
                 return this._private__formatPrice(logical);
         }
-    };
-    PriceScale.prototype._internal_formatPriceAbsolute = function (price) {
+    }
+    _internal_formatPriceAbsolute(price) {
         return this._private__formatPrice(price, ensureNotNull(this._private__formatterSource())._internal_formatter());
-    };
-    PriceScale.prototype._internal_formatPricePercentage = function (price, baseValue) {
+    }
+    _internal_formatPricePercentage(price, baseValue) {
         price = toPercent(price, baseValue);
         return percentageFormatter.format(price);
-    };
-    PriceScale.prototype._internal_sourcesForAutoScale = function () {
+    }
+    _internal_sourcesForAutoScale() {
         return this._private__dataSources;
-    };
-    PriceScale.prototype._internal_recalculatePriceRange = function (visibleBars) {
+    }
+    _internal_recalculatePriceRange(visibleBars) {
         this._private__invalidatedForRange = {
             _internal_visibleBars: visibleBars,
             _internal_isValid: false,
         };
-    };
-    PriceScale.prototype._internal_updateAllViews = function () {
-        this._private__dataSources.forEach(function (s) { return s._internal_updateAllViews(); });
-    };
-    PriceScale.prototype._internal_updateFormatter = function () {
+    }
+    _internal_updateAllViews() {
+        this._private__dataSources.forEach((s) => s._internal_updateAllViews());
+    }
+    _internal_updateFormatter() {
         this._private__marksCache = null;
-        var formatterSource = this._private__formatterSource();
-        var base = 100;
+        const formatterSource = this._private__formatterSource();
+        let base = 100;
         if (formatterSource !== null) {
             base = Math.round(1 / formatterSource._internal_minMove());
         }
@@ -5515,92 +5483,91 @@ var PriceScale = /** @class */ (function () {
         }
         this._private__markBuilder = new PriceTickMarkBuilder(this, base, this._private__coordinateToLogical.bind(this), this._private__logicalToCoordinate.bind(this));
         this._private__markBuilder._internal_rebuildTickMarks();
-    };
-    PriceScale.prototype._internal_invalidateSourcesCache = function () {
+    }
+    _internal_invalidateSourcesCache() {
         this._private__cachedOrderedSources = null;
-    };
+    }
     /**
      * @returns The {@link IPriceDataSource} that will be used as the "formatter source" (take minMove for formatter).
      */
-    PriceScale.prototype._private__formatterSource = function () {
+    _private__formatterSource() {
         return this._private__dataSources[0] || null;
-    };
-    PriceScale.prototype._private__topMarginPx = function () {
+    }
+    _private__topMarginPx() {
         return this._internal_isInverted()
             ? this._private__options.scaleMargins.bottom * this._internal_height() + this._private__marginBelow
             : this._private__options.scaleMargins.top * this._internal_height() + this._private__marginAbove;
-    };
-    PriceScale.prototype._private__bottomMarginPx = function () {
+    }
+    _private__bottomMarginPx() {
         return this._internal_isInverted()
             ? this._private__options.scaleMargins.top * this._internal_height() + this._private__marginAbove
             : this._private__options.scaleMargins.bottom * this._internal_height() + this._private__marginBelow;
-    };
-    PriceScale.prototype._private__makeSureItIsValid = function () {
+    }
+    _private__makeSureItIsValid() {
         if (!this._private__invalidatedForRange._internal_isValid) {
             this._private__invalidatedForRange._internal_isValid = true;
             this._private__recalculatePriceRangeImpl();
         }
-    };
-    PriceScale.prototype._private__invalidateInternalHeightCache = function () {
+    }
+    _private__invalidateInternalHeightCache() {
         this._private__internalHeightCache = null;
-    };
-    PriceScale.prototype._private__logicalToCoordinate = function (logical, baseValue) {
+    }
+    _private__logicalToCoordinate(logical, baseValue) {
         this._private__makeSureItIsValid();
         if (this._internal_isEmpty()) {
             return 0;
         }
         logical = this._internal_isLog() && logical ? toLog(logical, this._private__logFormula) : logical;
-        var range = ensureNotNull(this._internal_priceRange());
-        var invCoordinate = this._private__bottomMarginPx() +
+        const range = ensureNotNull(this._internal_priceRange());
+        const invCoordinate = this._private__bottomMarginPx() +
             (this._internal_internalHeight() - 1) * (logical - range._internal_minValue()) / range._internal_length();
-        var coordinate = this._internal_invertedCoordinate(invCoordinate);
+        const coordinate = this._internal_invertedCoordinate(invCoordinate);
         return coordinate;
-    };
-    PriceScale.prototype._private__coordinateToLogical = function (coordinate, baseValue) {
+    }
+    _private__coordinateToLogical(coordinate, baseValue) {
         this._private__makeSureItIsValid();
         if (this._internal_isEmpty()) {
             return 0;
         }
-        var invCoordinate = this._internal_invertedCoordinate(coordinate);
-        var range = ensureNotNull(this._internal_priceRange());
-        var logical = range._internal_minValue() + range._internal_length() *
+        const invCoordinate = this._internal_invertedCoordinate(coordinate);
+        const range = ensureNotNull(this._internal_priceRange());
+        const logical = range._internal_minValue() + range._internal_length() *
             ((invCoordinate - this._private__bottomMarginPx()) / (this._internal_internalHeight() - 1));
         return this._internal_isLog() ? fromLog(logical, this._private__logFormula) : logical;
-    };
-    PriceScale.prototype._private__onIsInvertedChanged = function () {
+    }
+    _private__onIsInvertedChanged() {
         this._private__marksCache = null;
         this._private__markBuilder._internal_rebuildTickMarks();
-    };
+    }
     // eslint-disable-next-line complexity
-    PriceScale.prototype._private__recalculatePriceRangeImpl = function () {
-        var visibleBars = this._private__invalidatedForRange._internal_visibleBars;
+    _private__recalculatePriceRangeImpl() {
+        const visibleBars = this._private__invalidatedForRange._internal_visibleBars;
         if (visibleBars === null) {
             return;
         }
-        var priceRange = null;
-        var sources = this._internal_sourcesForAutoScale();
-        var marginAbove = 0;
-        var marginBelow = 0;
-        for (var _i = 0, sources_1 = sources; _i < sources_1.length; _i++) {
-            var source = sources_1[_i];
+        let priceRange = null;
+        const sources = this._internal_sourcesForAutoScale();
+        let marginAbove = 0;
+        let marginBelow = 0;
+        for (const source of sources) {
             if (!source._internal_visible()) {
                 continue;
             }
-            var firstValue = source._internal_firstValue();
+            const firstValue = source._internal_firstValue();
             if (firstValue === null) {
                 continue;
             }
-            var autoScaleInfo = source._internal_autoscaleInfo(visibleBars._internal_left(), visibleBars._internal_right());
-            var sourceRange = autoScaleInfo && autoScaleInfo._internal_priceRange();
+            const autoScaleInfo = source._internal_autoscaleInfo(visibleBars._internal_left(), visibleBars._internal_right());
+            let sourceRange = autoScaleInfo && autoScaleInfo._internal_priceRange();
             if (sourceRange !== null) {
                 switch (this._private__options.mode) {
-                    case 1 /* Logarithmic */:
+                    case 1 /* PriceScaleMode.Logarithmic */:
                         sourceRange = convertPriceRangeToLog(sourceRange, this._private__logFormula);
                         break;
-                    case 2 /* Percentage */:
+                    case 2 /* PriceScaleMode.Percentage */:
                         sourceRange = toPercentRange(sourceRange, firstValue._internal_value);
                         break;
-                    case 3 /* IndexedTo100 */:
+                    case 3 /* PriceScaleMode.IndexedTo100 */:
                         sourceRange = toIndexedTo100Range(sourceRange, firstValue._internal_value);
                         break;
                 }
@@ -5611,7 +5578,7 @@ var PriceScale = /** @class */ (function () {
                     priceRange = priceRange._internal_merge(ensureNotNull(sourceRange));
                 }
                 if (autoScaleInfo !== null) {
-                    var margins = autoScaleInfo._internal_margins();
+                    const margins = autoScaleInfo._internal_margins();
                     if (margins !== null) {
                         marginAbove = Math.max(marginAbove, margins.above);
                         marginBelow = Math.max(marginAbove, margins.below);
@@ -5628,11 +5595,11 @@ var PriceScale = /** @class */ (function () {
         if (priceRange !== null) {
             // keep current range is new is empty
             if (priceRange._internal_minValue() === priceRange._internal_maxValue()) {
-                var formatterSource = this._private__formatterSource();
-                var minMove = formatterSource === null || this._internal_isPercentage() || this._internal_isIndexedTo100() ? 1 : formatterSource._internal_minMove();
+                const formatterSource = this._private__formatterSource();
+                const minMove = formatterSource === null || this._internal_isPercentage() || this._internal_isIndexedTo100() ? 1 : formatterSource._internal_minMove();
                 // if price range is degenerated to 1 point let's extend it by 10 min move values
                 // to avoid incorrect range and empty (blank) scale (in case of min tick much greater than 1)
-                var extendValue = 5 * minMove;
+                const extendValue = 5 * minMove;
                 if (this._internal_isLog()) {
                     priceRange = convertPriceRangeFromLog(priceRange, this._private__logFormula);
                 }
@@ -5642,10 +5609,10 @@ var PriceScale = /** @class */ (function () {
                 }
             }
             if (this._internal_isLog()) {
-                var rawRange = convertPriceRangeFromLog(priceRange, this._private__logFormula);
-                var newLogFormula = logFormulaForPriceRange(rawRange);
+                const rawRange = convertPriceRangeFromLog(priceRange, this._private__logFormula);
+                const newLogFormula = logFormulaForPriceRange(rawRange);
                 if (!logFormulasAreSame(newLogFormula, this._private__logFormula)) {
-                    var rawSnapshot = this._private__priceRangeSnapshot !== null ? convertPriceRangeFromLog(this._private__priceRangeSnapshot, this._private__logFormula) : null;
+                    const rawSnapshot = this._private__priceRangeSnapshot !== null ? convertPriceRangeFromLog(this._private__priceRangeSnapshot, this._private__logFormula) : null;
                     this._private__logFormula = newLogFormula;
                     priceRange = convertPriceRangeToLog(rawRange, newLogFormula);
                     if (rawSnapshot !== null) {
@@ -5663,9 +5630,8 @@ var PriceScale = /** @class */ (function () {
             }
         }
         this._private__invalidatedForRange._internal_isValid = true;
-    };
-    PriceScale.prototype._private__getCoordinateTransformer = function () {
-        var _this = this;
+    }
+    _private__getCoordinateTransformer() {
         if (this._internal_isPercentage()) {
             return toPercent;
         }
@@ -5673,11 +5639,11 @@ var PriceScale = /** @class */ (function () {
             return toIndexedTo100;
         }
         else if (this._internal_isLog()) {
-            return function (price) { return toLog(price, _this._private__logFormula); };
+            return (price) => toLog(price, this._private__logFormula);
         }
         return null;
-    };
-    PriceScale.prototype._private__formatPrice = function (price, fallbackFormatter) {
+    }
+    _private__formatPrice(price, fallbackFormatter) {
         if (this._private__localizationOptions.priceFormatter === undefined) {
             if (fallbackFormatter === undefined) {
                 fallbackFormatter = this._internal_formatter();
@@ -5685,13 +5651,12 @@ var PriceScale = /** @class */ (function () {
             return fallbackFormatter.format(price);
         }
         return this._private__localizationOptions.priceFormatter(price);
-    };
-    return PriceScale;
-}());
+    }
+}
 
-var DEFAULT_STRETCH_FACTOR = 1000;
-var Pane = /** @class */ (function () {
-    function Pane(timeScale, model) {
+const DEFAULT_STRETCH_FACTOR = 1000;
+class Pane {
+    constructor(timeScale, model) {
         this._private__dataSources = [];
         this._private__overlaySourcesByScaleId = new Map();
         this._private__height = 0;
@@ -5702,14 +5667,14 @@ var Pane = /** @class */ (function () {
         this._private__timeScale = timeScale;
         this._private__model = model;
         this._private__grid = new Grid(this);
-        var options = model._internal_options();
-        this._private__leftPriceScale = this._private__createPriceScale("left" /* Left */, options.leftPriceScale);
-        this._private__rightPriceScale = this._private__createPriceScale("right" /* Right */, options.rightPriceScale);
+        const options = model._internal_options();
+        this._private__leftPriceScale = this._private__createPriceScale("left" /* DefaultPriceScaleId.Left */, options.leftPriceScale);
+        this._private__rightPriceScale = this._private__createPriceScale("right" /* DefaultPriceScaleId.Right */, options.rightPriceScale);
         this._private__leftPriceScale._internal_modeChanged()._internal_subscribe(this._private__onPriceScaleModeChanged.bind(this, this._private__leftPriceScale), this);
-        this._private__rightPriceScale._internal_modeChanged()._internal_subscribe(this._private__onPriceScaleModeChanged.bind(this, this._private__leftPriceScale), this);
+        this._private__rightPriceScale._internal_modeChanged()._internal_subscribe(this._private__onPriceScaleModeChanged.bind(this, this._private__rightPriceScale), this);
         this._internal_applyScaleOptions(options);
     }
-    Pane.prototype._internal_applyScaleOptions = function (options) {
+    _internal_applyScaleOptions(options) {
         if (options.leftPriceScale) {
             this._private__leftPriceScale._internal_applyOptions(options.leftPriceScale);
         }
@@ -5721,23 +5686,22 @@ var Pane = /** @class */ (function () {
             this._private__rightPriceScale._internal_updateFormatter();
         }
         if (options.overlayPriceScales) {
-            var sourceArrays = Array.from(this._private__overlaySourcesByScaleId.values());
-            for (var _i = 0, sourceArrays_1 = sourceArrays; _i < sourceArrays_1.length; _i++) {
-                var arr = sourceArrays_1[_i];
-                var priceScale = ensureNotNull(arr[0]._internal_priceScale());
+            const sourceArrays = Array.from(this._private__overlaySourcesByScaleId.values());
+            for (const arr of sourceArrays) {
+                const priceScale = ensureNotNull(arr[0]._internal_priceScale());
                 priceScale._internal_applyOptions(options.overlayPriceScales);
                 if (options.localization) {
                     priceScale._internal_updateFormatter();
                 }
             }
         }
-    };
-    Pane.prototype._internal_priceScaleById = function (id) {
+    }
+    _internal_priceScaleById(id) {
         switch (id) {
-            case "left" /* Left */: {
+            case "left" /* DefaultPriceScaleId.Left */: {
                 return this._private__leftPriceScale;
             }
-            case "right" /* Right */: {
+            case "right" /* DefaultPriceScaleId.Right */: {
                 return this._private__rightPriceScale;
             }
         }
@@ -5745,75 +5709,74 @@ var Pane = /** @class */ (function () {
             return ensureDefined(this._private__overlaySourcesByScaleId.get(id))[0]._internal_priceScale();
         }
         return null;
-    };
-    Pane.prototype._internal_destroy = function () {
+    }
+    _internal_destroy() {
         this._internal_model()._internal_priceScalesOptionsChanged()._internal_unsubscribeAll(this);
         this._private__leftPriceScale._internal_modeChanged()._internal_unsubscribeAll(this);
         this._private__rightPriceScale._internal_modeChanged()._internal_unsubscribeAll(this);
-        this._private__dataSources.forEach(function (source) {
+        this._private__dataSources.forEach((source) => {
             if (source._internal_destroy) {
                 source._internal_destroy();
             }
         });
         this._private__destroyed._internal_fire();
-    };
-    Pane.prototype._internal_stretchFactor = function () {
+    }
+    _internal_stretchFactor() {
         return this._private__stretchFactor;
-    };
-    Pane.prototype._internal_setStretchFactor = function (factor) {
+    }
+    _internal_setStretchFactor(factor) {
         this._private__stretchFactor = factor;
-    };
-    Pane.prototype._internal_model = function () {
+    }
+    _internal_model() {
         return this._private__model;
-    };
-    Pane.prototype._internal_width = function () {
+    }
+    _internal_width() {
         return this._private__width;
-    };
-    Pane.prototype._internal_height = function () {
+    }
+    _internal_height() {
         return this._private__height;
-    };
-    Pane.prototype._internal_setWidth = function (width) {
+    }
+    _internal_setWidth(width) {
         this._private__width = width;
         this._internal_updateAllSources();
-    };
-    Pane.prototype._internal_setHeight = function (height) {
-        var _this = this;
+    }
+    _internal_setHeight(height) {
         this._private__height = height;
         this._private__leftPriceScale._internal_setHeight(height);
         this._private__rightPriceScale._internal_setHeight(height);
         // process overlays
-        this._private__dataSources.forEach(function (ds) {
-            if (_this._internal_isOverlay(ds)) {
-                var priceScale = ds._internal_priceScale();
+        this._private__dataSources.forEach((ds) => {
+            if (this._internal_isOverlay(ds)) {
+                const priceScale = ds._internal_priceScale();
                 if (priceScale !== null) {
                     priceScale._internal_setHeight(height);
                 }
             }
         });
         this._internal_updateAllSources();
-    };
-    Pane.prototype._internal_dataSources = function () {
+    }
+    _internal_dataSources() {
         return this._private__dataSources;
-    };
-    Pane.prototype._internal_isOverlay = function (source) {
-        var priceScale = source._internal_priceScale();
+    }
+    _internal_isOverlay(source) {
+        const priceScale = source._internal_priceScale();
         if (priceScale === null) {
             return true;
         }
         return this._private__leftPriceScale !== priceScale && this._private__rightPriceScale !== priceScale;
-    };
-    Pane.prototype._internal_addDataSource = function (source, targetScaleId, zOrder) {
-        var targetZOrder = (zOrder !== undefined) ? zOrder : this._private__getZOrderMinMax()._internal_maxZOrder + 1;
+    }
+    _internal_addDataSource(source, targetScaleId, zOrder) {
+        const targetZOrder = (zOrder !== undefined) ? zOrder : this._private__getZOrderMinMax()._internal_maxZOrder + 1;
         this._private__insertDataSource(source, targetScaleId, targetZOrder);
-    };
-    Pane.prototype._internal_removeDataSource = function (source) {
-        var index = this._private__dataSources.indexOf(source);
+    }
+    _internal_removeDataSource(source) {
+        const index = this._private__dataSources.indexOf(source);
         assert(index !== -1, 'removeDataSource: invalid data source');
         this._private__dataSources.splice(index, 1);
-        var priceScaleId = ensureNotNull(source._internal_priceScale())._internal_id();
+        const priceScaleId = ensureNotNull(source._internal_priceScale())._internal_id();
         if (this._private__overlaySourcesByScaleId.has(priceScaleId)) {
-            var overlaySources = ensureDefined(this._private__overlaySourcesByScaleId.get(priceScaleId));
-            var overlayIndex = overlaySources.indexOf(source);
+            const overlaySources = ensureDefined(this._private__overlaySourcesByScaleId.get(priceScaleId));
+            const overlayIndex = overlaySources.indexOf(source);
             if (overlayIndex !== -1) {
                 overlaySources.splice(overlayIndex, 1);
                 if (overlaySources.length === 0) {
@@ -5821,7 +5784,7 @@ var Pane = /** @class */ (function () {
                 }
             }
         }
-        var priceScale = source._internal_priceScale();
+        const priceScale = source._internal_priceScale();
         // if source has owner, it returns owner's price scale
         // and it does not have source in their list
         if (priceScale && priceScale._internal_dataSources().indexOf(source) >= 0) {
@@ -5832,8 +5795,8 @@ var Pane = /** @class */ (function () {
             this._internal_recalculatePriceScale(priceScale);
         }
         this._private__cachedOrderedSources = null;
-    };
-    Pane.prototype._internal_priceScalePosition = function (priceScale) {
+    }
+    _internal_priceScalePosition(priceScale) {
         if (priceScale === this._private__leftPriceScale) {
             return 'left';
         }
@@ -5841,41 +5804,41 @@ var Pane = /** @class */ (function () {
             return 'right';
         }
         return 'overlay';
-    };
-    Pane.prototype._internal_leftPriceScale = function () {
+    }
+    _internal_leftPriceScale() {
         return this._private__leftPriceScale;
-    };
-    Pane.prototype._internal_rightPriceScale = function () {
+    }
+    _internal_rightPriceScale() {
         return this._private__rightPriceScale;
-    };
-    Pane.prototype._internal_startScalePrice = function (priceScale, x) {
+    }
+    _internal_startScalePrice(priceScale, x) {
         priceScale._internal_startScale(x);
-    };
-    Pane.prototype._internal_scalePriceTo = function (priceScale, x) {
+    }
+    _internal_scalePriceTo(priceScale, x) {
         priceScale._internal_scaleTo(x);
         // TODO: be more smart and update only affected views
         this._internal_updateAllSources();
-    };
-    Pane.prototype._internal_endScalePrice = function (priceScale) {
+    }
+    _internal_endScalePrice(priceScale) {
         priceScale._internal_endScale();
-    };
-    Pane.prototype._internal_startScrollPrice = function (priceScale, x) {
+    }
+    _internal_startScrollPrice(priceScale, x) {
         priceScale._internal_startScroll(x);
-    };
-    Pane.prototype._internal_scrollPriceTo = function (priceScale, x) {
+    }
+    _internal_scrollPriceTo(priceScale, x) {
         priceScale._internal_scrollTo(x);
         this._internal_updateAllSources();
-    };
-    Pane.prototype._internal_endScrollPrice = function (priceScale) {
+    }
+    _internal_endScrollPrice(priceScale) {
         priceScale._internal_endScroll();
-    };
-    Pane.prototype._internal_updateAllSources = function () {
-        this._private__dataSources.forEach(function (source) {
+    }
+    _internal_updateAllSources() {
+        this._private__dataSources.forEach((source) => {
             source._internal_updateAllViews();
         });
-    };
-    Pane.prototype._internal_defaultPriceScale = function () {
-        var priceScale = null;
+    }
+    _internal_defaultPriceScale() {
+        let priceScale = null;
         if (this._private__model._internal_options().rightPriceScale.visible && this._private__rightPriceScale._internal_dataSources().length !== 0) {
             priceScale = this._private__rightPriceScale;
         }
@@ -5889,9 +5852,9 @@ var Pane = /** @class */ (function () {
             priceScale = this._private__rightPriceScale;
         }
         return priceScale;
-    };
-    Pane.prototype._internal_defaultVisiblePriceScale = function () {
-        var priceScale = null;
+    }
+    _internal_defaultVisiblePriceScale() {
+        let priceScale = null;
         if (this._private__model._internal_options().rightPriceScale.visible) {
             priceScale = this._private__rightPriceScale;
         }
@@ -5899,70 +5862,69 @@ var Pane = /** @class */ (function () {
             priceScale = this._private__leftPriceScale;
         }
         return priceScale;
-    };
-    Pane.prototype._internal_recalculatePriceScale = function (priceScale) {
+    }
+    _internal_recalculatePriceScale(priceScale) {
         if (priceScale === null || !priceScale._internal_isAutoScale()) {
             return;
         }
         this._private__recalculatePriceScaleImpl(priceScale);
-    };
-    Pane.prototype._internal_resetPriceScale = function (priceScale) {
-        var visibleBars = this._private__timeScale._internal_visibleStrictRange();
+    }
+    _internal_resetPriceScale(priceScale) {
+        const visibleBars = this._private__timeScale._internal_visibleStrictRange();
         priceScale._internal_setMode({ _internal_autoScale: true });
         if (visibleBars !== null) {
             priceScale._internal_recalculatePriceRange(visibleBars);
         }
         this._internal_updateAllSources();
-    };
-    Pane.prototype._internal_momentaryAutoScale = function () {
+    }
+    _internal_momentaryAutoScale() {
         this._private__recalculatePriceScaleImpl(this._private__leftPriceScale);
         this._private__recalculatePriceScaleImpl(this._private__rightPriceScale);
-    };
-    Pane.prototype._internal_recalculate = function () {
-        var _this = this;
+    }
+    _internal_recalculate() {
         this._internal_recalculatePriceScale(this._private__leftPriceScale);
         this._internal_recalculatePriceScale(this._private__rightPriceScale);
-        this._private__dataSources.forEach(function (ds) {
-            if (_this._internal_isOverlay(ds)) {
-                _this._internal_recalculatePriceScale(ds._internal_priceScale());
+        this._private__dataSources.forEach((ds) => {
+            if (this._internal_isOverlay(ds)) {
+                this._internal_recalculatePriceScale(ds._internal_priceScale());
             }
         });
         this._internal_updateAllSources();
         this._private__model._internal_lightUpdate();
-    };
-    Pane.prototype._internal_orderedSources = function () {
+    }
+    _internal_orderedSources() {
         if (this._private__cachedOrderedSources === null) {
             this._private__cachedOrderedSources = sortSources(this._private__dataSources);
         }
         return this._private__cachedOrderedSources;
-    };
-    Pane.prototype._internal_onDestroyed = function () {
+    }
+    _internal_onDestroyed() {
         return this._private__destroyed;
-    };
-    Pane.prototype._internal_grid = function () {
+    }
+    _internal_grid() {
         return this._private__grid;
-    };
-    Pane.prototype._private__recalculatePriceScaleImpl = function (priceScale) {
+    }
+    _private__recalculatePriceScaleImpl(priceScale) {
         // TODO: can use this checks
-        var sourceForAutoScale = priceScale._internal_sourcesForAutoScale();
+        const sourceForAutoScale = priceScale._internal_sourcesForAutoScale();
         if (sourceForAutoScale && sourceForAutoScale.length > 0 && !this._private__timeScale._internal_isEmpty()) {
-            var visibleBars = this._private__timeScale._internal_visibleStrictRange();
+            const visibleBars = this._private__timeScale._internal_visibleStrictRange();
             if (visibleBars !== null) {
                 priceScale._internal_recalculatePriceRange(visibleBars);
             }
         }
         priceScale._internal_updateAllViews();
-    };
-    Pane.prototype._private__getZOrderMinMax = function () {
-        var sources = this._internal_orderedSources();
+    }
+    _private__getZOrderMinMax() {
+        const sources = this._internal_orderedSources();
         if (sources.length === 0) {
             return { _internal_minZOrder: 0, _internal_maxZOrder: 0 };
         }
-        var minZOrder = 0;
-        var maxZOrder = 0;
-        for (var j = 0; j < sources.length; j++) {
-            var ds = sources[j];
-            var zOrder = ds._internal_zorder();
+        let minZOrder = 0;
+        let maxZOrder = 0;
+        for (let j = 0; j < sources.length; j++) {
+            const ds = sources[j];
+            const zOrder = ds._internal_zorder();
             if (zOrder !== null) {
                 if (zOrder < minZOrder) {
                     minZOrder = zOrder;
@@ -5973,15 +5935,15 @@ var Pane = /** @class */ (function () {
             }
         }
         return { _internal_minZOrder: minZOrder, _internal_maxZOrder: maxZOrder };
-    };
-    Pane.prototype._private__insertDataSource = function (source, priceScaleId, zOrder) {
-        var priceScale = this._internal_priceScaleById(priceScaleId);
+    }
+    _private__insertDataSource(source, priceScaleId, zOrder) {
+        let priceScale = this._internal_priceScaleById(priceScaleId);
         if (priceScale === null) {
             priceScale = this._private__createPriceScale(priceScaleId, this._private__model._internal_options().overlayPriceScales);
         }
         this._private__dataSources.push(source);
         if (!isDefaultPriceScale(priceScaleId)) {
-            var overlaySources = this._private__overlaySourcesByScaleId.get(priceScaleId) || [];
+            const overlaySources = this._private__overlaySourcesByScaleId.get(priceScaleId) || [];
             overlaySources.push(source);
             this._private__overlaySourcesByScaleId.set(priceScaleId, overlaySources);
         }
@@ -5990,34 +5952,33 @@ var Pane = /** @class */ (function () {
         source._internal_setZorder(zOrder);
         this._internal_recalculatePriceScale(priceScale);
         this._private__cachedOrderedSources = null;
-    };
-    Pane.prototype._private__onPriceScaleModeChanged = function (priceScale, oldMode, newMode) {
+    }
+    _private__onPriceScaleModeChanged(priceScale, oldMode, newMode) {
         if (oldMode._internal_mode === newMode._internal_mode) {
             return;
         }
         // momentary auto scale if we toggle percentage/indexedTo100 mode
         this._private__recalculatePriceScaleImpl(priceScale);
-    };
-    Pane.prototype._private__createPriceScale = function (id, options) {
-        var actualOptions = __assign({ visible: true, autoScale: true }, clone(options));
-        var priceScale = new PriceScale(id, actualOptions, this._private__model._internal_options().layout, this._private__model._internal_options().localization);
+    }
+    _private__createPriceScale(id, options) {
+        const actualOptions = Object.assign({ visible: true, autoScale: true }, clone(options));
+        const priceScale = new PriceScale(id, actualOptions, this._private__model._internal_options().layout, this._private__model._internal_options().localization);
         priceScale._internal_setHeight(this._internal_height());
         return priceScale;
-    };
-    return Pane;
-}());
-
-var getMonth = function (date) { return date.getUTCMonth() + 1; };
-var getDay = function (date) { return date.getUTCDate(); };
-var getYear = function (date) { return date.getUTCFullYear(); };
-var dd = function (date) { return numberToStringWithLeadingZero(getDay(date), 2); };
-var MMMM = function (date, locale) { return new Date(date.getUTCFullYear(), date.getUTCMonth(), 1)
-    .toLocaleString(locale, { month: 'long' }); };
-var MMM = function (date, locale) { return new Date(date.getUTCFullYear(), date.getUTCMonth(), 1)
-    .toLocaleString(locale, { month: 'short' }); };
-var MM = function (date) { return numberToStringWithLeadingZero(getMonth(date), 2); };
-var yy = function (date) { return numberToStringWithLeadingZero(getYear(date) % 100, 2); };
-var yyyy = function (date) { return numberToStringWithLeadingZero(getYear(date), 4); };
+    }
+}
+
+const getMonth = (date) => date.getUTCMonth() + 1;
+const getDay = (date) => date.getUTCDate();
+const getYear = (date) => date.getUTCFullYear();
+const dd = (date) => numberToStringWithLeadingZero(getDay(date), 2);
+const MMMM = (date, locale) => new Date(date.getUTCFullYear(), date.getUTCMonth(), 1)
+    .toLocaleString(locale, { month: 'long' });
+const MMM = (date, locale) => new Date(date.getUTCFullYear(), date.getUTCMonth(), 1)
+    .toLocaleString(locale, { month: 'short' });
+const MM = (date) => numberToStringWithLeadingZero(getMonth(date), 2);
+const yy = (date) => numberToStringWithLeadingZero(getYear(date) % 100, 2);
+const yyyy = (date) => numberToStringWithLeadingZero(getYear(date), 4);
 function formatDate(date, format, locale) {
     return format
         .replace(/yyyy/g, yyyy(date))
@@ -6028,87 +5989,80 @@ function formatDate(date, format, locale) {
         .replace(/dd/g, dd(date));
 }
 
-var DateFormatter = /** @class */ (function () {
-    function DateFormatter(dateFormat, locale) {
-        if (dateFormat === void 0) { dateFormat = 'yyyy-MM-dd'; }
-        if (locale === void 0) { locale = 'default'; }
+class DateFormatter {
+    constructor(dateFormat = 'yyyy-MM-dd', locale = 'default') {
         this._private__dateFormat = dateFormat;
         this._private__locale = locale;
     }
-    DateFormatter.prototype._internal_format = function (date) {
+    _internal_format(date) {
         return formatDate(date, this._private__dateFormat, this._private__locale);
-    };
-    return DateFormatter;
-}());
+    }
+}
 
-var TimeFormatter = /** @class */ (function () {
-    function TimeFormatter(format) {
+class TimeFormatter {
+    constructor(format) {
         this._private__formatStr = format || '%h:%m:%s';
     }
-    TimeFormatter.prototype._internal_format = function (date) {
+    _internal_format(date) {
         return this._private__formatStr.replace('%h', numberToStringWithLeadingZero(date.getUTCHours(), 2)).
             replace('%m', numberToStringWithLeadingZero(date.getUTCMinutes(), 2)).
             replace('%s', numberToStringWithLeadingZero(date.getUTCSeconds(), 2));
-    };
-    return TimeFormatter;
-}());
+    }
+}
 
-var defaultParams = {
+const defaultParams = {
     _internal_dateFormat: 'yyyy-MM-dd',
     _internal_timeFormat: '%h:%m:%s',
     _internal_dateTimeSeparator: ' ',
     _internal_locale: 'default',
 };
-var DateTimeFormatter = /** @class */ (function () {
-    function DateTimeFormatter(params) {
-        if (params === void 0) { params = {}; }
-        var formatterParams = __assign(__assign({}, defaultParams), params);
+class DateTimeFormatter {
+    constructor(params = {}) {
+        const formatterParams = Object.assign(Object.assign({}, defaultParams), params);
         this._private__dateFormatter = new DateFormatter(formatterParams._internal_dateFormat, formatterParams._internal_locale);
         this._private__timeFormatter = new TimeFormatter(formatterParams._internal_timeFormat);
         this._private__separator = formatterParams._internal_dateTimeSeparator;
     }
-    DateTimeFormatter.prototype._internal_format = function (dateTime) {
-        return "".concat(this._private__dateFormatter._internal_format(dateTime)).concat(this._private__separator).concat(this._private__timeFormatter._internal_format(dateTime));
-    };
-    return DateTimeFormatter;
-}());
+    _internal_format(dateTime) {
+        return `${this._private__dateFormatter._internal_format(dateTime)}${this._private__separator}${this._private__timeFormatter._internal_format(dateTime)}`;
+    }
+}
 
 function defaultTickMarkFormatter(timePoint, tickMarkType, locale) {
-    var formatOptions = {};
+    const formatOptions = {};
     switch (tickMarkType) {
-        case 0 /* Year */:
+        case 0 /* TickMarkType.Year */:
             formatOptions.year = 'numeric';
             break;
-        case 1 /* Month */:
+        case 1 /* TickMarkType.Month */:
             formatOptions.month = 'short';
             break;
-        case 2 /* DayOfMonth */:
+        case 2 /* TickMarkType.DayOfMonth */:
             formatOptions.day = 'numeric';
             break;
-        case 3 /* Time */:
+        case 3 /* TickMarkType.Time */:
             formatOptions.hour12 = false;
             formatOptions.hour = '2-digit';
             formatOptions.minute = '2-digit';
             break;
-        case 4 /* TimeWithSeconds */:
+        case 4 /* TickMarkType.TimeWithSeconds */:
             formatOptions.hour12 = false;
             formatOptions.hour = '2-digit';
             formatOptions.minute = '2-digit';
             formatOptions.second = '2-digit';
             break;
     }
-    var date = timePoint._internal_businessDay === undefined
+    const date = timePoint._internal_businessDay === undefined
         ? new Date(timePoint._internal_timestamp * 1000)
         : new Date(Date.UTC(timePoint._internal_businessDay.year, timePoint._internal_businessDay.month - 1, timePoint._internal_businessDay.day));
     // from given date we should use only as UTC date or timestamp
     // but to format as locale date we can convert UTC date to local date
-    var localDateFromUtc = new Date(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());
+    const localDateFromUtc = new Date(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());
     return localDateFromUtc.toLocaleString(locale, formatOptions);
 }
 
-var FormattedLabelsCache = /** @class */ (function () {
-    function FormattedLabelsCache(format, size) {
-        if (size === void 0) { size = 50; }
+class FormattedLabelsCache {
+    constructor(format, size = 50) {
         this._private__actualSize = 0;
         this._private__usageTick = 1;
         this._private__oldestTick = 1;
@@ -6117,54 +6071,53 @@ var FormattedLabelsCache = /** @class */ (function () {
         this._private__format = format;
         this._private__maxSize = size;
     }
-    FormattedLabelsCache.prototype._internal_format = function (value) {
-        var cacheKey = value._internal_businessDay === undefined
-            ? new Date(value._internal_timestamp * 1000).getTime()
-            : new Date(Date.UTC(value._internal_businessDay.year, value._internal_businessDay.month - 1, value._internal_businessDay.day)).getTime();
-        var tick = this._private__cache.get(cacheKey);
+    _internal_format(tickMark) {
+        const time = tickMark._internal_time;
+        const cacheKey = time._internal_businessDay === undefined
+            ? new Date(time._internal_timestamp * 1000).getTime()
+            : new Date(Date.UTC(time._internal_businessDay.year, time._internal_businessDay.month - 1, time._internal_businessDay.day)).getTime();
+        const tick = this._private__cache.get(cacheKey);
         if (tick !== undefined) {
             return tick._internal_string;
         }
         if (this._private__actualSize === this._private__maxSize) {
-            var oldestValue = this._private__tick2Labels.get(this._private__oldestTick);
+            const oldestValue = this._private__tick2Labels.get(this._private__oldestTick);
             this._private__tick2Labels.delete(this._private__oldestTick);
             this._private__cache.delete(ensureDefined(oldestValue));
             this._private__oldestTick++;
             this._private__actualSize--;
         }
-        var str = this._private__format(value);
+        const str = this._private__format(tickMark);
         this._private__cache.set(cacheKey, { _internal_string: str, _internal_tick: this._private__usageTick });
         this._private__tick2Labels.set(this._private__usageTick, cacheKey);
         this._private__actualSize++;
         this._private__usageTick++;
         return str;
-    };
-    return FormattedLabelsCache;
-}());
+    }
+}
 
-var RangeImpl = /** @class */ (function () {
-    function RangeImpl(left, right) {
+class RangeImpl {
+    constructor(left, right) {
         assert(left <= right, 'right should be >= left');
         this._private__left = left;
         this._private__right = right;
     }
-    RangeImpl.prototype._internal_left = function () {
+    _internal_left() {
         return this._private__left;
-    };
-    RangeImpl.prototype._internal_right = function () {
+    }
+    _internal_right() {
         return this._private__right;
-    };
-    RangeImpl.prototype._internal_count = function () {
+    }
+    _internal_count() {
         return this._private__right - this._private__left + 1;
-    };
-    RangeImpl.prototype._internal_contains = function (index) {
+    }
+    _internal_contains(index) {
         return this._private__left <= index && index <= this._private__right;
-    };
-    RangeImpl.prototype._internal_equals = function (other) {
+    }
+    _internal_equals(other) {
         return this._private__left === other._internal_left() && this._private__right === other._internal_right();
-    };
-    return RangeImpl;
-}());
+    }
+}
 function areRangesEqual(first, second) {
     if (first === null || second === null) {
         return first === second;
@@ -6172,17 +6125,17 @@ function areRangesEqual(first, second) {
     return first._internal_equals(second);
 }
 
-var TickMarks = /** @class */ (function () {
-    function TickMarks() {
+class TickMarks {
+    constructor() {
         this._private__marksByWeight = new Map();
         this._private__cache = null;
     }
-    TickMarks.prototype._internal_setTimeScalePoints = function (newPoints, firstChangedPointIndex) {
+    _internal_setTimeScalePoints(newPoints, firstChangedPointIndex) {
         this._private__removeMarksSinceIndex(firstChangedPointIndex);
         this._private__cache = null;
-        for (var index = firstChangedPointIndex; index < newPoints.length; ++index) {
-            var point = newPoints[index];
-            var marksForWeight = this._private__marksByWeight.get(point._internal_timeWeight);
+        for (let index = firstChangedPointIndex; index < newPoints.length; ++index) {
+            const point = newPoints[index];
+            let marksForWeight = this._private__marksByWeight.get(point._internal_timeWeight);
             if (marksForWeight === undefined) {
                 marksForWeight = [];
                 this._private__marksByWeight.set(point._internal_timeWeight, marksForWeight);
@@ -6191,11 +6144,12 @@ var TickMarks = /** @class */ (function () {
                 _internal_index: index,
                 _internal_time: point._internal_time,
                 _internal_weight: point._internal_timeWeight,
+                _internal_originalTime: point._internal_originalTime,
             });
         }
-    };
-    TickMarks.prototype._internal_build = function (spacing, maxWidth) {
-        var maxIndexesPerMark = Math.ceil(maxWidth / spacing);
+    }
+    _internal_build(spacing, maxWidth) {
+        const maxIndexesPerMark = Math.ceil(maxWidth / spacing);
         if (this._private__cache === null || this._private__cache._internal_maxIndexesPerMark !== maxIndexesPerMark) {
             this._private__cache = {
                 _internal_marks: this._private__buildMarksImpl(maxIndexesPerMark),
@@ -6203,50 +6157,48 @@ var TickMarks = /** @class */ (function () {
             };
         }
         return this._private__cache._internal_marks;
-    };
-    TickMarks.prototype._private__removeMarksSinceIndex = function (sinceIndex) {
+    }
+    _private__removeMarksSinceIndex(sinceIndex) {
         if (sinceIndex === 0) {
             this._private__marksByWeight.clear();
             return;
         }
-        var weightsToClear = [];
-        this._private__marksByWeight.forEach(function (marks, timeWeight) {
+        const weightsToClear = [];
+        this._private__marksByWeight.forEach((marks, timeWeight) => {
             if (sinceIndex <= marks[0]._internal_index) {
                 weightsToClear.push(timeWeight);
             }
             else {
-                marks.splice(lowerbound(marks, sinceIndex, function (tm) { return tm._internal_index < sinceIndex; }), Infinity);
+                marks.splice(lowerbound(marks, sinceIndex, (tm) => tm._internal_index < sinceIndex), Infinity);
             }
         });
-        for (var _i = 0, weightsToClear_1 = weightsToClear; _i < weightsToClear_1.length; _i++) {
-            var weight = weightsToClear_1[_i];
+        for (const weight of weightsToClear) {
             this._private__marksByWeight.delete(weight);
         }
-    };
-    TickMarks.prototype._private__buildMarksImpl = function (maxIndexesPerMark) {
-        var marks = [];
-        for (var _i = 0, _a = Array.from(this._private__marksByWeight.keys()).sort(function (a, b) { return b - a; }); _i < _a.length; _i++) {
-            var weight = _a[_i];
+    }
+    _private__buildMarksImpl(maxIndexesPerMark) {
+        let marks = [];
+        for (const weight of Array.from(this._private__marksByWeight.keys()).sort((a, b) => b - a)) {
             if (!this._private__marksByWeight.get(weight)) {
                 continue;
             }
             // Built tickMarks are now prevMarks, and marks it as new array
-            var prevMarks = marks;
+            const prevMarks = marks;
             marks = [];
-            var prevMarksLength = prevMarks.length;
-            var prevMarksPointer = 0;
-            var currentWeight = ensureDefined(this._private__marksByWeight.get(weight));
-            var currentWeightLength = currentWeight.length;
-            var rightIndex = Infinity;
-            var leftIndex = -Infinity;
-            for (var i = 0; i < currentWeightLength; i++) {
-                var mark = currentWeight[i];
-                var currentIndex = mark._internal_index;
+            const prevMarksLength = prevMarks.length;
+            let prevMarksPointer = 0;
+            const currentWeight = ensureDefined(this._private__marksByWeight.get(weight));
+            const currentWeightLength = currentWeight.length;
+            let rightIndex = Infinity;
+            let leftIndex = -Infinity;
+            for (let i = 0; i < currentWeightLength; i++) {
+                const mark = currentWeight[i];
+                const currentIndex = mark._internal_index;
                 // Determine indexes with which current index will be compared
                 // All marks to the right is moved to new array
                 while (prevMarksPointer < prevMarksLength) {
-                    var lastMark = prevMarks[prevMarksPointer];
-                    var lastIndex = lastMark._internal_index;
+                    const lastMark = prevMarks[prevMarksPointer];
+                    const lastIndex = lastMark._internal_index;
                     if (lastIndex < currentIndex) {
                         prevMarksPointer++;
                         marks.push(lastMark);
@@ -6270,28 +6222,26 @@ var TickMarks = /** @class */ (function () {
             }
         }
         return marks;
-    };
-    return TickMarks;
-}());
+    }
+}
 
-var TimeScaleVisibleRange = /** @class */ (function () {
-    function TimeScaleVisibleRange(logicalRange) {
+class TimeScaleVisibleRange {
+    constructor(logicalRange) {
         this._private__logicalRange = logicalRange;
     }
-    TimeScaleVisibleRange.prototype._internal_strictRange = function () {
+    _internal_strictRange() {
         if (this._private__logicalRange === null) {
             return null;
         }
         return new RangeImpl(Math.floor(this._private__logicalRange._internal_left()), Math.ceil(this._private__logicalRange._internal_right()));
-    };
-    TimeScaleVisibleRange.prototype._internal_logicalRange = function () {
+    }
+    _internal_logicalRange() {
         return this._private__logicalRange;
-    };
-    TimeScaleVisibleRange._internal_invalid = function () {
+    }
+    static _internal_invalid() {
         return new TimeScaleVisibleRange(null);
-    };
-    return TimeScaleVisibleRange;
-}());
+    }
+}
 
 /**
  * Represents the type of a tick mark on the time axis.
@@ -6313,14 +6263,15 @@ var TickMarkType;
     /**
      * A time without seconds.
      */
+    // eslint-disable-next-line @typescript-eslint/no-shadow
     TickMarkType[TickMarkType["Time"] = 3] = "Time";
     /**
      * A time with seconds.
      */
     TickMarkType[TickMarkType["TimeWithSeconds"] = 4] = "TimeWithSeconds";
 })(TickMarkType || (TickMarkType = {}));
-var TimeScale = /** @class */ (function () {
-    function TimeScale(model, options, localizationOptions) {
+class TimeScale {
+    constructor(model, options, localizationOptions) {
         this._private__width = 0;
         this._private__baseIndexOrNull = null;
         this._private__points = [];
@@ -6343,15 +6294,15 @@ var TimeScale = /** @class */ (function () {
         this._private__model = model;
         this._private__updateDateTimeFormatter();
     }
-    TimeScale.prototype._internal_options = function () {
+    _internal_options() {
         return this._private__options;
-    };
-    TimeScale.prototype._internal_applyLocalizationOptions = function (localizationOptions) {
+    }
+    _internal_applyLocalizationOptions(localizationOptions) {
         merge(this._private__localizationOptions, localizationOptions);
         this._private__invalidateTickMarks();
         this._private__updateDateTimeFormatter();
-    };
-    TimeScale.prototype._internal_applyOptions = function (options, localizationOptions) {
+    }
+    _internal_applyOptions(options, localizationOptions) {
         var _a;
         merge(this._private__options, options);
         if (this._private__options.fixLeftEdge) {
@@ -6376,12 +6327,16 @@ var TimeScale = /** @class */ (function () {
         this._private__invalidateTickMarks();
         this._private__updateDateTimeFormatter();
         this._private__optionsApplied._internal_fire();
-    };
-    TimeScale.prototype._internal_indexToTime = function (index) {
+    }
+    _internal_indexToTime(index) {
+        var _a, _b;
+        return (_b = (_a = this._private__points[index]) === null || _a === void 0 ? void 0 : _a._internal_time) !== null && _b !== void 0 ? _b : null;
+    }
+    _internal_indexToTimeScalePoint(index) {
         var _a;
-        return ((_a = this._private__points[index]) === null || _a === void 0 ? void 0 : _a._internal_time) || null;
-    };
-    TimeScale.prototype._internal_timeToIndex = function (time, findNearest) {
+        return (_a = this._private__points[index]) !== null && _a !== void 0 ? _a : null;
+    }
+    _internal_timeToIndex(time, findNearest) {
         if (this._private__points.length < 1) {
             // no time points available
             return null;
@@ -6390,173 +6345,174 @@ var TimeScale = /** @class */ (function () {
             // special case
             return findNearest ? this._private__points.length - 1 : null;
         }
-        var index = lowerbound(this._private__points, time._internal_timestamp, function (a, b) { return a._internal_time._internal_timestamp < b; });
+        const index = lowerbound(this._private__points, time._internal_timestamp, (a, b) => a._internal_time._internal_timestamp < b);
         if (time._internal_timestamp < this._private__points[index]._internal_time._internal_timestamp) {
             return findNearest ? index : null;
         }
         return index;
-    };
-    TimeScale.prototype._internal_isEmpty = function () {
+    }
+    _internal_isEmpty() {
         return this._private__width === 0 || this._private__points.length === 0 || this._private__baseIndexOrNull === null;
-    };
+    }
     // strict range: integer indices of the bars in the visible range rounded in more wide direction
-    TimeScale.prototype._internal_visibleStrictRange = function () {
+    _internal_visibleStrictRange() {
         this._private__updateVisibleRange();
         return this._private__visibleRange._internal_strictRange();
-    };
-    TimeScale.prototype._internal_visibleLogicalRange = function () {
+    }
+    _internal_visibleLogicalRange() {
         this._private__updateVisibleRange();
         return this._private__visibleRange._internal_logicalRange();
-    };
-    TimeScale.prototype._internal_visibleTimeRange = function () {
-        var visibleBars = this._internal_visibleStrictRange();
+    }
+    _internal_visibleTimeRange() {
+        const visibleBars = this._internal_visibleStrictRange();
         if (visibleBars === null) {
             return null;
         }
-        var range = {
+        const range = {
             from: visibleBars._internal_left(),
             to: visibleBars._internal_right(),
         };
         return this._internal_timeRangeForLogicalRange(range);
-    };
-    TimeScale.prototype._internal_timeRangeForLogicalRange = function (range) {
-        var from = Math.round(range.from);
-        var to = Math.round(range.to);
-        var firstIndex = ensureNotNull(this._private__firstIndex());
-        var lastIndex = ensureNotNull(this._private__lastIndex());
+    }
+    _internal_timeRangeForLogicalRange(range) {
+        const from = Math.round(range.from);
+        const to = Math.round(range.to);
+        const firstIndex = ensureNotNull(this._private__firstIndex());
+        const lastIndex = ensureNotNull(this._private__lastIndex());
         return {
             from: ensureNotNull(this._internal_indexToTime(Math.max(firstIndex, from))),
             to: ensureNotNull(this._internal_indexToTime(Math.min(lastIndex, to))),
         };
-    };
-    TimeScale.prototype._internal_logicalRangeForTimeRange = function (range) {
+    }
+    _internal_logicalRangeForTimeRange(range) {
         return {
             from: ensureNotNull(this._internal_timeToIndex(range.from, true)),
             to: ensureNotNull(this._internal_timeToIndex(range.to, true)),
         };
-    };
-    TimeScale.prototype._internal_width = function () {
+    }
+    _internal_width() {
         return this._private__width;
-    };
-    TimeScale.prototype._internal_setWidth = function (width) {
-        if (!isFinite(width) || width <= 0) {
+    }
+    _internal_setWidth(newWidth) {
+        if (!isFinite(newWidth) || newWidth <= 0) {
             return;
         }
-        if (this._private__width === width) {
+        if (this._private__width === newWidth) {
             return;
         }
-        if (this._private__options.lockVisibleTimeRangeOnResize && this._private__width) {
+        // when we change the width and we need to correct visible range because of fixing left edge
+        // we need to check the previous visible range rather than the new one
+        // because it might be updated by changing width, bar spacing, etc
+        // but we need to try to keep the same range
+        const previousVisibleRange = this._internal_visibleLogicalRange();
+        const oldWidth = this._private__width;
+        this._private__width = newWidth;
+        this._private__visibleRangeInvalidated = true;
+        if (this._private__options.lockVisibleTimeRangeOnResize && oldWidth !== 0) {
             // recalculate bar spacing
-            var newBarSpacing = this._private__barSpacing * width / this._private__width;
+            const newBarSpacing = this._private__barSpacing * newWidth / oldWidth;
             this._private__barSpacing = newBarSpacing;
         }
         // if time scale is scrolled to the end of data and we have fixed right edge
         // keep left edge instead of right
         // we need it to avoid "shaking" if the last bar visibility affects time scale width
         if (this._private__options.fixLeftEdge) {
-            var visibleRange = this._internal_visibleStrictRange();
-            if (visibleRange !== null) {
-                var firstVisibleBar = visibleRange._internal_left();
-                // firstVisibleBar could be less than 0
-                // since index is a center of bar
-                if (firstVisibleBar <= 0) {
-                    var delta = this._private__width - width;
-                    // reduce  _rightOffset means move right
-                    // we could move more than required - this will be fixed by _correctOffset()
-                    this._private__rightOffset -= Math.round(delta / this._private__barSpacing) + 1;
-                }
+            // note that logical left range means not the middle of a bar (it's the left border)
+            if (previousVisibleRange !== null && previousVisibleRange._internal_left() <= 0) {
+                const delta = oldWidth - newWidth;
+                // reduce  _rightOffset means move right
+                // we could move more than required - this will be fixed by _correctOffset()
+                this._private__rightOffset -= Math.round(delta / this._private__barSpacing) + 1;
+                this._private__visibleRangeInvalidated = true;
             }
         }
-        this._private__width = width;
-        this._private__visibleRangeInvalidated = true;
         // updating bar spacing should be first because right offset depends on it
         this._private__correctBarSpacing();
         this._private__correctOffset();
-    };
-    TimeScale.prototype._internal_indexToCoordinate = function (index) {
+    }
+    _internal_indexToCoordinate(index) {
         if (this._internal_isEmpty() || !isInteger(index)) {
             return 0;
         }
-        var baseIndex = this._internal_baseIndex();
-        var deltaFromRight = baseIndex + this._private__rightOffset - index;
-        var coordinate = this._private__width - (deltaFromRight + 0.5) * this._private__barSpacing - 1;
+        const baseIndex = this._internal_baseIndex();
+        const deltaFromRight = baseIndex + this._private__rightOffset - index;
+        const coordinate = this._private__width - (deltaFromRight + 0.5) * this._private__barSpacing - 1;
         return coordinate;
-    };
-    TimeScale.prototype._internal_indexesToCoordinates = function (points, visibleRange) {
-        var baseIndex = this._internal_baseIndex();
-        var indexFrom = (visibleRange === undefined) ? 0 : visibleRange.from;
-        var indexTo = (visibleRange === undefined) ? points.length : visibleRange.to;
-        for (var i = indexFrom; i < indexTo; i++) {
-            var index = points[i]._internal_time;
-            var deltaFromRight = baseIndex + this._private__rightOffset - index;
-            var coordinate = this._private__width - (deltaFromRight + 0.5) * this._private__barSpacing - 1;
+    }
+    _internal_indexesToCoordinates(points, visibleRange) {
+        const baseIndex = this._internal_baseIndex();
+        const indexFrom = (visibleRange === undefined) ? 0 : visibleRange.from;
+        const indexTo = (visibleRange === undefined) ? points.length : visibleRange.to;
+        for (let i = indexFrom; i < indexTo; i++) {
+            const index = points[i]._internal_time;
+            const deltaFromRight = baseIndex + this._private__rightOffset - index;
+            const coordinate = this._private__width - (deltaFromRight + 0.5) * this._private__barSpacing - 1;
             points[i]._internal_x = coordinate;
         }
-    };
-    TimeScale.prototype._internal_coordinateToIndex = function (x) {
+    }
+    _internal_coordinateToIndex(x) {
         return Math.ceil(this._private__coordinateToFloatIndex(x));
-    };
-    TimeScale.prototype._internal_setRightOffset = function (offset) {
+    }
+    _internal_setRightOffset(offset) {
         this._private__visibleRangeInvalidated = true;
         this._private__rightOffset = offset;
         this._private__correctOffset();
         this._private__model._internal_recalculateAllPanes();
         this._private__model._internal_lightUpdate();
-    };
-    TimeScale.prototype._internal_barSpacing = function () {
+    }
+    _internal_barSpacing() {
         return this._private__barSpacing;
-    };
-    TimeScale.prototype._internal_setBarSpacing = function (newBarSpacing) {
+    }
+    _internal_setBarSpacing(newBarSpacing) {
         this._private__setBarSpacing(newBarSpacing);
         // do not allow scroll out of visible bars
         this._private__correctOffset();
         this._private__model._internal_recalculateAllPanes();
         this._private__model._internal_lightUpdate();
-    };
-    TimeScale.prototype._internal_rightOffset = function () {
+    }
+    _internal_rightOffset() {
         return this._private__rightOffset;
-    };
+    }
     // eslint-disable-next-line complexity
-    TimeScale.prototype._internal_marks = function () {
+    _internal_marks() {
         if (this._internal_isEmpty()) {
             return null;
         }
         if (this._private__timeMarksCache !== null) {
             return this._private__timeMarksCache;
         }
-        var spacing = this._private__barSpacing;
-        var fontSize = this._private__model._internal_options().layout.fontSize;
-        var maxLabelWidth = (fontSize + 4) * 5;
-        var indexPerLabel = Math.round(maxLabelWidth / spacing);
-        var visibleBars = ensureNotNull(this._internal_visibleStrictRange());
-        var firstBar = Math.max(visibleBars._internal_left(), visibleBars._internal_left() - indexPerLabel);
-        var lastBar = Math.max(visibleBars._internal_right(), visibleBars._internal_right() - indexPerLabel);
-        var items = this._private__tickMarks._internal_build(spacing, maxLabelWidth);
+        const spacing = this._private__barSpacing;
+        const fontSize = this._private__model._internal_options().layout.fontSize;
+        const maxLabelWidth = (fontSize + 4) * 5;
+        const indexPerLabel = Math.round(maxLabelWidth / spacing);
+        const visibleBars = ensureNotNull(this._internal_visibleStrictRange());
+        const firstBar = Math.max(visibleBars._internal_left(), visibleBars._internal_left() - indexPerLabel);
+        const lastBar = Math.max(visibleBars._internal_right(), visibleBars._internal_right() - indexPerLabel);
+        const items = this._private__tickMarks._internal_build(spacing, maxLabelWidth);
         // according to indexPerLabel value this value means "earliest index which _might be_ used as the second label on time scale"
-        var earliestIndexOfSecondLabel = this._private__firstIndex() + indexPerLabel;
+        const earliestIndexOfSecondLabel = this._private__firstIndex() + indexPerLabel;
         // according to indexPerLabel value this value means "earliest index which _might be_ used as the second last label on time scale"
-        var indexOfSecondLastLabel = this._private__lastIndex() - indexPerLabel;
-        var isAllScalingAndScrollingDisabled = this._private__isAllScalingAndScrollingDisabled();
-        var isLeftEdgeFixed = this._private__options.fixLeftEdge || isAllScalingAndScrollingDisabled;
-        var isRightEdgeFixed = this._private__options.fixRightEdge || isAllScalingAndScrollingDisabled;
-        var targetIndex = 0;
-        for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
-            var tm = items_1[_i];
+        const indexOfSecondLastLabel = this._private__lastIndex() - indexPerLabel;
+        const isAllScalingAndScrollingDisabled = this._private__isAllScalingAndScrollingDisabled();
+        const isLeftEdgeFixed = this._private__options.fixLeftEdge || isAllScalingAndScrollingDisabled;
+        const isRightEdgeFixed = this._private__options.fixRightEdge || isAllScalingAndScrollingDisabled;
+        let targetIndex = 0;
+        for (const tm of items) {
             if (!(firstBar <= tm._internal_index && tm._internal_index <= lastBar)) {
                 continue;
             }
-            var label = void 0;
+            let label;
             if (targetIndex < this._private__labels.length) {
                 label = this._private__labels[targetIndex];
                 label._internal_coord = this._internal_indexToCoordinate(tm._internal_index);
-                label._internal_label = this._private__formatLabel(tm._internal_time, tm._internal_weight);
+                label._internal_label = this._private__formatLabel(tm);
                 label._internal_weight = tm._internal_weight;
             }
             else {
                 label = {
                     _internal_needAlignCoordinate: false,
                     _internal_coord: this._internal_indexToCoordinate(tm._internal_index),
-                    _internal_label: this._private__formatLabel(tm._internal_time, tm._internal_weight),
+                    _internal_label: this._private__formatLabel(tm),
                     _internal_weight: tm._internal_weight,
                 };
                 this._private__labels.push(label);
@@ -6575,18 +6531,18 @@ var TimeScale = /** @class */ (function () {
         this._private__labels.length = targetIndex;
         this._private__timeMarksCache = this._private__labels;
         return this._private__labels;
-    };
-    TimeScale.prototype._internal_restoreDefault = function () {
+    }
+    _internal_restoreDefault() {
         this._private__visibleRangeInvalidated = true;
         this._internal_setBarSpacing(this._private__options.barSpacing);
         this._internal_setRightOffset(this._private__options.rightOffset);
-    };
-    TimeScale.prototype._internal_setBaseIndex = function (baseIndex) {
+    }
+    _internal_setBaseIndex(baseIndex) {
         this._private__visibleRangeInvalidated = true;
         this._private__baseIndexOrNull = baseIndex;
         this._private__correctOffset();
         this._private__doFixLeftEdge();
-    };
+    }
     /**
      * Zoom in/out the scale around a `zoomPoint` on `scale` value.
      *
@@ -6595,18 +6551,18 @@ var TimeScale = /** @class */ (function () {
      * @param scale - Zoom value (in 1/10 parts of current bar spacing).
      * Negative value means zoom out, positive - zoom in.
      */
-    TimeScale.prototype._internal_zoom = function (zoomPoint, scale) {
-        var floatIndexAtZoomPoint = this._private__coordinateToFloatIndex(zoomPoint);
-        var barSpacing = this._internal_barSpacing();
-        var newBarSpacing = barSpacing + scale * (barSpacing / 10);
+    _internal_zoom(zoomPoint, scale) {
+        const floatIndexAtZoomPoint = this._private__coordinateToFloatIndex(zoomPoint);
+        const barSpacing = this._internal_barSpacing();
+        const newBarSpacing = barSpacing + scale * (barSpacing / 10);
         // zoom in/out bar spacing
         this._internal_setBarSpacing(newBarSpacing);
         if (!this._private__options.rightBarStaysOnScroll) {
             // and then correct right offset to move index under zoomPoint back to its coordinate
             this._internal_setRightOffset(this._internal_rightOffset() + (floatIndexAtZoomPoint - this._private__coordinateToFloatIndex(zoomPoint)));
         }
-    };
-    TimeScale.prototype._internal_startScale = function (x) {
+    }
+    _internal_startScale(x) {
         if (this._private__scrollStartPoint) {
             this._internal_endScroll();
         }
@@ -6618,26 +6574,26 @@ var TimeScale = /** @class */ (function () {
         }
         this._private__scaleStartPoint = x;
         this._private__saveCommonTransitionsStartState();
-    };
-    TimeScale.prototype._internal_scaleTo = function (x) {
+    }
+    _internal_scaleTo(x) {
         if (this._private__commonTransitionStartState === null) {
             return;
         }
-        var startLengthFromRight = clamp(this._private__width - x, 0, this._private__width);
-        var currentLengthFromRight = clamp(this._private__width - ensureNotNull(this._private__scaleStartPoint), 0, this._private__width);
+        const startLengthFromRight = clamp(this._private__width - x, 0, this._private__width);
+        const currentLengthFromRight = clamp(this._private__width - ensureNotNull(this._private__scaleStartPoint), 0, this._private__width);
         if (startLengthFromRight === 0 || currentLengthFromRight === 0) {
             return;
         }
         this._internal_setBarSpacing(this._private__commonTransitionStartState._internal_barSpacing * startLengthFromRight / currentLengthFromRight);
-    };
-    TimeScale.prototype._internal_endScale = function () {
+    }
+    _internal_endScale() {
         if (this._private__scaleStartPoint === null) {
             return;
         }
         this._private__scaleStartPoint = null;
         this._private__clearCommonTransitionsStartState();
-    };
-    TimeScale.prototype._internal_startScroll = function (x) {
+    }
+    _internal_startScroll(x) {
         if (this._private__scrollStartPoint !== null || this._private__commonTransitionStartState !== null) {
             return;
         }
@@ -6646,128 +6602,124 @@ var TimeScale = /** @class */ (function () {
         }
         this._private__scrollStartPoint = x;
         this._private__saveCommonTransitionsStartState();
-    };
-    TimeScale.prototype._internal_scrollTo = function (x) {
+    }
+    _internal_scrollTo(x) {
         if (this._private__scrollStartPoint === null) {
             return;
         }
-        var shiftInLogical = (this._private__scrollStartPoint - x) / this._internal_barSpacing();
+        const shiftInLogical = (this._private__scrollStartPoint - x) / this._internal_barSpacing();
         this._private__rightOffset = ensureNotNull(this._private__commonTransitionStartState)._internal_rightOffset + shiftInLogical;
         this._private__visibleRangeInvalidated = true;
         // do not allow scroll out of visible bars
         this._private__correctOffset();
-    };
-    TimeScale.prototype._internal_endScroll = function () {
+    }
+    _internal_endScroll() {
         if (this._private__scrollStartPoint === null) {
             return;
         }
         this._private__scrollStartPoint = null;
         this._private__clearCommonTransitionsStartState();
-    };
-    TimeScale.prototype._internal_scrollToRealTime = function () {
+    }
+    _internal_scrollToRealTime() {
         this._internal_scrollToOffsetAnimated(this._private__options.rightOffset);
-    };
-    TimeScale.prototype._internal_scrollToOffsetAnimated = function (offset, animationDuration) {
-        var _this = this;
-        if (animationDuration === void 0) { animationDuration = 400 /* DefaultAnimationDuration */; }
+    }
+    _internal_scrollToOffsetAnimated(offset, animationDuration = 400 /* Constants.DefaultAnimationDuration */) {
         if (!isFinite(offset)) {
             throw new RangeError('offset is required and must be finite number');
         }
         if (!isFinite(animationDuration) || animationDuration <= 0) {
             throw new RangeError('animationDuration (optional) must be finite positive number');
         }
-        var source = this._private__rightOffset;
-        var animationStart = performance.now();
-        var animationFn = function () {
-            var animationProgress = (performance.now() - animationStart) / animationDuration;
-            var finishAnimation = animationProgress >= 1;
-            var rightOffset = finishAnimation ? offset : source + (offset - source) * animationProgress;
-            _this._internal_setRightOffset(rightOffset);
-            if (!finishAnimation) {
-                setTimeout(animationFn, 20);
-            }
-        };
-        animationFn();
-    };
-    TimeScale.prototype._internal_update = function (newPoints, firstChangedPointIndex) {
+        const source = this._private__rightOffset;
+        const animationStart = performance.now();
+        this._private__model._internal_setTimeScaleAnimation({
+            _internal_finished: (time) => (time - animationStart) / animationDuration >= 1,
+            _internal_getPosition: (time) => {
+                const animationProgress = (time - animationStart) / animationDuration;
+                const finishAnimation = animationProgress >= 1;
+                return finishAnimation ? offset : source + (offset - source) * animationProgress;
+            },
+        });
+    }
+    _internal_update(newPoints, firstChangedPointIndex) {
         this._private__visibleRangeInvalidated = true;
         this._private__points = newPoints;
         this._private__tickMarks._internal_setTimeScalePoints(newPoints, firstChangedPointIndex);
         this._private__correctOffset();
-    };
-    TimeScale.prototype._internal_visibleBarsChanged = function () {
+    }
+    _internal_visibleBarsChanged() {
         return this._private__visibleBarsChanged;
-    };
-    TimeScale.prototype._internal_logicalRangeChanged = function () {
+    }
+    _internal_logicalRangeChanged() {
         return this._private__logicalRangeChanged;
-    };
-    TimeScale.prototype._internal_optionsApplied = function () {
+    }
+    _internal_optionsApplied() {
         return this._private__optionsApplied;
-    };
-    TimeScale.prototype._internal_baseIndex = function () {
+    }
+    _internal_baseIndex() {
         // null is used to known that baseIndex is not set yet
         // so in methods which should known whether it is set or not
         // we should check field `_baseIndexOrNull` instead of getter `baseIndex()`
         // see minRightOffset for example
         return this._private__baseIndexOrNull || 0;
-    };
-    TimeScale.prototype._internal_setVisibleRange = function (range) {
-        var length = range._internal_count();
+    }
+    _internal_setVisibleRange(range) {
+        const length = range._internal_count();
         this._private__setBarSpacing(this._private__width / length);
         this._private__rightOffset = range._internal_right() - this._internal_baseIndex();
         this._private__correctOffset();
         this._private__visibleRangeInvalidated = true;
         this._private__model._internal_recalculateAllPanes();
         this._private__model._internal_lightUpdate();
-    };
-    TimeScale.prototype._internal_fitContent = function () {
-        var first = this._private__firstIndex();
-        var last = this._private__lastIndex();
+    }
+    _internal_fitContent() {
+        const first = this._private__firstIndex();
+        const last = this._private__lastIndex();
         if (first === null || last === null) {
             return;
         }
         this._internal_setVisibleRange(new RangeImpl(first, last + this._private__options.rightOffset));
-    };
-    TimeScale.prototype._internal_setLogicalRange = function (range) {
-        var barRange = new RangeImpl(range.from, range.to);
+    }
+    _internal_setLogicalRange(range) {
+        const barRange = new RangeImpl(range.from, range.to);
         this._internal_setVisibleRange(barRange);
-    };
-    TimeScale.prototype._internal_formatDateTime = function (time) {
+    }
+    _internal_formatDateTime(timeScalePoint) {
         if (this._private__localizationOptions.timeFormatter !== undefined) {
-            return this._private__localizationOptions.timeFormatter(time._internal_businessDay || time._internal_timestamp);
+            return this._private__localizationOptions.timeFormatter(timeScalePoint._internal_originalTime);
         }
-        return this._private__dateTimeFormatter._internal_format(new Date(time._internal_timestamp * 1000));
-    };
-    TimeScale.prototype._private__isAllScalingAndScrollingDisabled = function () {
-        var _a = this._private__model._internal_options(), handleScroll = _a.handleScroll, handleScale = _a.handleScale;
+        return this._private__dateTimeFormatter._internal_format(new Date(timeScalePoint._internal_time._internal_timestamp * 1000));
+    }
+    _private__isAllScalingAndScrollingDisabled() {
+        const { handleScroll, handleScale } = this._private__model._internal_options();
         return !handleScroll.horzTouchDrag
             && !handleScroll.mouseWheel
             && !handleScroll.pressedMouseMove
             && !handleScroll.vertTouchDrag
-            && !handleScale.axisDoubleClickReset
+            && !handleScale.axisDoubleClickReset.time
             && !handleScale.axisPressedMouseMove.time
             && !handleScale.mouseWheel
             && !handleScale.pinch;
-    };
-    TimeScale.prototype._private__firstIndex = function () {
+    }
+    _private__firstIndex() {
         return this._private__points.length === 0 ? null : 0;
-    };
-    TimeScale.prototype._private__lastIndex = function () {
+    }
+    _private__lastIndex() {
         return this._private__points.length === 0 ? null : (this._private__points.length - 1);
-    };
-    TimeScale.prototype._private__rightOffsetForCoordinate = function (x) {
+    }
+    _private__rightOffsetForCoordinate(x) {
         return (this._private__width - 1 - x) / this._private__barSpacing;
-    };
-    TimeScale.prototype._private__coordinateToFloatIndex = function (x) {
-        var deltaFromRight = this._private__rightOffsetForCoordinate(x);
-        var baseIndex = this._internal_baseIndex();
-        var index = baseIndex + this._private__rightOffset - deltaFromRight;
+    }
+    _private__coordinateToFloatIndex(x) {
+        const deltaFromRight = this._private__rightOffsetForCoordinate(x);
+        const baseIndex = this._internal_baseIndex();
+        const index = baseIndex + this._private__rightOffset - deltaFromRight;
         // JavaScript uses very strange rounding
         // we need rounding to avoid problems with calculation errors
         return Math.round(index * 1000000) / 1000000;
-    };
-    TimeScale.prototype._private__setBarSpacing = function (newBarSpacing) {
-        var oldBarSpacing = this._private__barSpacing;
+    }
+    _private__setBarSpacing(newBarSpacing) {
+        const oldBarSpacing = this._private__barSpacing;
         this._private__barSpacing = newBarSpacing;
         this._private__correctBarSpacing();
         // this._barSpacing might be changed in _correctBarSpacing
@@ -6775,8 +6727,8 @@ var TimeScale = /** @class */ (function () {
             this._private__visibleRangeInvalidated = true;
             this._private__resetTimeMarksCache();
         }
-    };
-    TimeScale.prototype._private__updateVisibleRange = function () {
+    }
+    _private__updateVisibleRange() {
         if (!this._private__visibleRangeInvalidated) {
             return;
         }
@@ -6785,103 +6737,94 @@ var TimeScale = /** @class */ (function () {
             this._private__setVisibleRange(TimeScaleVisibleRange._internal_invalid());
             return;
         }
-        var baseIndex = this._internal_baseIndex();
-        var newBarsLength = this._private__width / this._private__barSpacing;
-        var rightBorder = this._private__rightOffset + baseIndex;
-        var leftBorder = rightBorder - newBarsLength + 1;
-        var logicalRange = new RangeImpl(leftBorder, rightBorder);
+        const baseIndex = this._internal_baseIndex();
+        const newBarsLength = this._private__width / this._private__barSpacing;
+        const rightBorder = this._private__rightOffset + baseIndex;
+        const leftBorder = rightBorder - newBarsLength + 1;
+        const logicalRange = new RangeImpl(leftBorder, rightBorder);
         this._private__setVisibleRange(new TimeScaleVisibleRange(logicalRange));
-    };
-    TimeScale.prototype._private__correctBarSpacing = function () {
-        var minBarSpacing = this._private__minBarSpacing();
+    }
+    _private__correctBarSpacing() {
+        const minBarSpacing = this._private__minBarSpacing();
         if (this._private__barSpacing < minBarSpacing) {
             this._private__barSpacing = minBarSpacing;
             this._private__visibleRangeInvalidated = true;
         }
         if (this._private__width !== 0) {
             // make sure that this (1 / Constants.MinVisibleBarsCount) >= coeff in max bar spacing (it's 0.5 here)
-            var maxBarSpacing = this._private__width * 0.5;
+            const maxBarSpacing = this._private__width * 0.5;
             if (this._private__barSpacing > maxBarSpacing) {
                 this._private__barSpacing = maxBarSpacing;
                 this._private__visibleRangeInvalidated = true;
             }
         }
-    };
-    TimeScale.prototype._private__minBarSpacing = function () {
+    }
+    _private__minBarSpacing() {
         // if both options are enabled then limit bar spacing so that zooming-out is not possible
         // if it would cause either the first or last points to move too far from an edge
         if (this._private__options.fixLeftEdge && this._private__options.fixRightEdge && this._private__points.length !== 0) {
             return this._private__width / this._private__points.length;
         }
         return this._private__options.minBarSpacing;
-    };
-    TimeScale.prototype._private__correctOffset = function () {
+    }
+    _private__correctOffset() {
         // block scrolling of to future
-        var maxRightOffset = this._private__maxRightOffset();
+        const maxRightOffset = this._private__maxRightOffset();
         if (this._private__rightOffset > maxRightOffset) {
             this._private__rightOffset = maxRightOffset;
             this._private__visibleRangeInvalidated = true;
         }
         // block scrolling of to past
-        var minRightOffset = this._private__minRightOffset();
+        const minRightOffset = this._private__minRightOffset();
         if (minRightOffset !== null && this._private__rightOffset < minRightOffset) {
             this._private__rightOffset = minRightOffset;
             this._private__visibleRangeInvalidated = true;
         }
-    };
-    TimeScale.prototype._private__minRightOffset = function () {
-        var firstIndex = this._private__firstIndex();
-        var baseIndex = this._private__baseIndexOrNull;
+    }
+    _private__minRightOffset() {
+        const firstIndex = this._private__firstIndex();
+        const baseIndex = this._private__baseIndexOrNull;
         if (firstIndex === null || baseIndex === null) {
             return null;
         }
-        var barsEstimation = this._private__options.fixLeftEdge
+        const barsEstimation = this._private__options.fixLeftEdge
             ? this._private__width / this._private__barSpacing
-            : Math.min(2 /* MinVisibleBarsCount */, this._private__points.length);
+            : Math.min(2 /* Constants.MinVisibleBarsCount */, this._private__points.length);
         return firstIndex - baseIndex - 1 + barsEstimation;
-    };
-    TimeScale.prototype._private__maxRightOffset = function () {
+    }
+    _private__maxRightOffset() {
         return this._private__options.fixRightEdge
             ? 0
-            : (this._private__width / this._private__barSpacing) - Math.min(2 /* MinVisibleBarsCount */, this._private__points.length);
-    };
-    TimeScale.prototype._private__saveCommonTransitionsStartState = function () {
+            : (this._private__width / this._private__barSpacing) - Math.min(2 /* Constants.MinVisibleBarsCount */, this._private__points.length);
+    }
+    _private__saveCommonTransitionsStartState() {
         this._private__commonTransitionStartState = {
             _internal_barSpacing: this._internal_barSpacing(),
             _internal_rightOffset: this._internal_rightOffset(),
         };
-    };
-    TimeScale.prototype._private__clearCommonTransitionsStartState = function () {
+    }
+    _private__clearCommonTransitionsStartState() {
         this._private__commonTransitionStartState = null;
-    };
-    TimeScale.prototype._private__formatLabel = function (time, weight) {
-        var _this = this;
-        var formatter = this._private__formattedByWeight.get(weight);
+    }
+    _private__formatLabel(tickMark) {
+        let formatter = this._private__formattedByWeight.get(tickMark._internal_weight);
         if (formatter === undefined) {
-            formatter = new FormattedLabelsCache(function (timePoint) {
-                return _this._private__formatLabelImpl(timePoint, weight);
+            formatter = new FormattedLabelsCache((mark) => {
+                return this._private__formatLabelImpl(mark);
             });
-            this._private__formattedByWeight.set(weight, formatter);
+            this._private__formattedByWeight.set(tickMark._internal_weight, formatter);
         }
-        return formatter._internal_format(time);
-    };
-    TimeScale.prototype._private__formatLabelImpl = function (timePoint, weight) {
-        var _a;
-        var tickMarkType = weightToTickMarkType(weight, this._private__options.timeVisible, this._private__options.secondsVisible);
+        return formatter._internal_format(tickMark);
+    }
+    _private__formatLabelImpl(tickMark) {
+        const tickMarkType = weightToTickMarkType(tickMark._internal_weight, this._private__options.timeVisible, this._private__options.secondsVisible);
         if (this._private__options.tickMarkFormatter !== undefined) {
-            // this is temporary solution to make more consistency API
-            // it looks like that all time types in API should have the same form
-            // but for know defaultTickMarkFormatter is on model level and can't determine whether passed time is business day or UTCTimestamp
-            // because type guards are declared on API level
-            // in other hand, type guards couldn't be declared on model level so far
-            // because they are know about string representation of business day ¯\_(ツ)_/¯
-            // let's fix in for all cases for the whole API
-            return this._private__options.tickMarkFormatter((_a = timePoint._internal_businessDay) !== null && _a !== void 0 ? _a : timePoint._internal_timestamp, tickMarkType, this._private__localizationOptions.locale);
-        }
-        return defaultTickMarkFormatter(timePoint, tickMarkType, this._private__localizationOptions.locale);
-    };
-    TimeScale.prototype._private__setVisibleRange = function (newVisibleRange) {
-        var oldVisibleRange = this._private__visibleRange;
+            return this._private__options.tickMarkFormatter(tickMark._internal_originalTime, tickMarkType, this._private__localizationOptions.locale);
+        }
+        return defaultTickMarkFormatter(tickMark._internal_time, tickMarkType, this._private__localizationOptions.locale);
+    }
+    _private__setVisibleRange(newVisibleRange) {
+        const oldVisibleRange = this._private__visibleRange;
         this._private__visibleRange = newVisibleRange;
         if (!areRangesEqual(oldVisibleRange._internal_strictRange(), this._private__visibleRange._internal_strictRange())) {
             this._private__visibleBarsChanged._internal_fire();
@@ -6891,16 +6834,16 @@ var TimeScale = /** @class */ (function () {
         }
         // TODO: reset only coords in case when this._visibleBars has not been changed
         this._private__resetTimeMarksCache();
-    };
-    TimeScale.prototype._private__resetTimeMarksCache = function () {
+    }
+    _private__resetTimeMarksCache() {
         this._private__timeMarksCache = null;
-    };
-    TimeScale.prototype._private__invalidateTickMarks = function () {
+    }
+    _private__invalidateTickMarks() {
         this._private__resetTimeMarksCache();
         this._private__formattedByWeight.clear();
-    };
-    TimeScale.prototype._private__updateDateTimeFormatter = function () {
-        var dateFormat = this._private__localizationOptions.dateFormat;
+    }
+    _private__updateDateTimeFormatter() {
+        const dateFormat = this._private__localizationOptions.dateFormat;
         if (this._private__options.timeVisible) {
             this._private__dateTimeFormatter = new DateTimeFormatter({
                 _internal_dateFormat: dateFormat,
@@ -6912,79 +6855,75 @@ var TimeScale = /** @class */ (function () {
         else {
             this._private__dateTimeFormatter = new DateFormatter(dateFormat, this._private__localizationOptions.locale);
         }
-    };
-    TimeScale.prototype._private__doFixLeftEdge = function () {
+    }
+    _private__doFixLeftEdge() {
         if (!this._private__options.fixLeftEdge) {
             return;
         }
-        var firstIndex = this._private__firstIndex();
+        const firstIndex = this._private__firstIndex();
         if (firstIndex === null) {
             return;
         }
-        var visibleRange = this._internal_visibleStrictRange();
+        const visibleRange = this._internal_visibleStrictRange();
         if (visibleRange === null) {
             return;
         }
-        var delta = visibleRange._internal_left() - firstIndex;
+        const delta = visibleRange._internal_left() - firstIndex;
         if (delta < 0) {
-            var leftEdgeOffset = this._private__rightOffset - delta - 1;
+            const leftEdgeOffset = this._private__rightOffset - delta - 1;
             this._internal_setRightOffset(leftEdgeOffset);
         }
         this._private__correctBarSpacing();
-    };
-    TimeScale.prototype._private__doFixRightEdge = function () {
+    }
+    _private__doFixRightEdge() {
         this._private__correctOffset();
         this._private__correctBarSpacing();
-    };
-    return TimeScale;
-}());
+    }
+}
 // eslint-disable-next-line complexity
 function weightToTickMarkType(weight, timeVisible, secondsVisible) {
     switch (weight) {
-        case 0 /* LessThanSecond */:
-        case 10 /* Second */:
+        case 0 /* TickMarkWeight.LessThanSecond */:
+        case 10 /* TickMarkWeight.Second */:
             return timeVisible
-                ? (secondsVisible ? 4 /* TimeWithSeconds */ : 3 /* Time */)
-                : 2 /* DayOfMonth */;
-        case 20 /* Minute1 */:
-        case 21 /* Minute5 */:
-        case 22 /* Minute30 */:
-        case 30 /* Hour1 */:
-        case 31 /* Hour3 */:
-        case 32 /* Hour6 */:
-        case 33 /* Hour12 */:
-            return timeVisible ? 3 /* Time */ : 2 /* DayOfMonth */;
-        case 50 /* Day */:
-            return 2 /* DayOfMonth */;
-        case 60 /* Month */:
-            return 1 /* Month */;
-        case 70 /* Year */:
-            return 0 /* Year */;
-    }
-}
-
-var WatermarkRenderer = /** @class */ (function (_super) {
-    __extends(WatermarkRenderer, _super);
-    function WatermarkRenderer(data) {
-        var _this = _super.call(this) || this;
-        _this._private__metricsCache = new Map();
-        _this._private__data = data;
-        return _this;
-    }
-    WatermarkRenderer.prototype._internal__drawImpl = function (ctx) { };
-    WatermarkRenderer.prototype._internal__drawBackgroundImpl = function (ctx) {
+                ? (secondsVisible ? 4 /* TickMarkType.TimeWithSeconds */ : 3 /* TickMarkType.Time */)
+                : 2 /* TickMarkType.DayOfMonth */;
+        case 20 /* TickMarkWeight.Minute1 */:
+        case 21 /* TickMarkWeight.Minute5 */:
+        case 22 /* TickMarkWeight.Minute30 */:
+        case 30 /* TickMarkWeight.Hour1 */:
+        case 31 /* TickMarkWeight.Hour3 */:
+        case 32 /* TickMarkWeight.Hour6 */:
+        case 33 /* TickMarkWeight.Hour12 */:
+            return timeVisible ? 3 /* TickMarkType.Time */ : 2 /* TickMarkType.DayOfMonth */;
+        case 50 /* TickMarkWeight.Day */:
+            return 2 /* TickMarkType.DayOfMonth */;
+        case 60 /* TickMarkWeight.Month */:
+            return 1 /* TickMarkType.Month */;
+        case 70 /* TickMarkWeight.Year */:
+            return 0 /* TickMarkType.Year */;
+    }
+}
+
+class WatermarkRenderer extends ScaledRenderer {
+    constructor(data) {
+        super();
+        this._private__metricsCache = new Map();
+        this._private__data = data;
+    }
+    _internal__drawImpl(ctx) { }
+    _internal__drawBackgroundImpl(ctx) {
         if (!this._private__data._internal_visible) {
             return;
         }
         ctx.save();
-        var textHeight = 0;
-        for (var _i = 0, _a = this._private__data._internal_lines; _i < _a.length; _i++) {
-            var line = _a[_i];
+        let textHeight = 0;
+        for (const line of this._private__data._internal_lines) {
             if (line._internal_text.length === 0) {
                 continue;
             }
             ctx.font = line._internal_font;
-            var textWidth = this._private__metrics(ctx, line._internal_text);
+            const textWidth = this._private__metrics(ctx, line._internal_text);
             if (textWidth > this._private__data._internal_width) {
                 line._internal_zoom = this._private__data._internal_width / textWidth;
             }
@@ -6993,7 +6932,7 @@ var WatermarkRenderer = /** @class */ (function (_super) {
             }
             textHeight += line._internal_lineHeight * line._internal_zoom;
         }
-        var vertOffset = 0;
+        let vertOffset = 0;
         switch (this._private__data._internal_vertAlign) {
             case 'top':
                 vertOffset = 0;
@@ -7006,10 +6945,9 @@ var WatermarkRenderer = /** @class */ (function (_super) {
                 break;
         }
         ctx.fillStyle = this._private__data._internal_color;
-        for (var _b = 0, _c = this._private__data._internal_lines; _b < _c.length; _b++) {
-            var line = _c[_b];
+        for (const line of this._private__data._internal_lines) {
             ctx.save();
-            var horzOffset = 0;
+            let horzOffset = 0;
             switch (this._private__data._internal_horzAlign) {
                 case 'left':
                     ctx.textAlign = 'left';
@@ -7033,29 +6971,28 @@ var WatermarkRenderer = /** @class */ (function (_super) {
             vertOffset += line._internal_lineHeight * line._internal_zoom;
         }
         ctx.restore();
-    };
-    WatermarkRenderer.prototype._private__metrics = function (ctx, text) {
-        var fontCache = this._private__fontCache(ctx.font);
-        var result = fontCache.get(text);
+    }
+    _private__metrics(ctx, text) {
+        const fontCache = this._private__fontCache(ctx.font);
+        let result = fontCache.get(text);
         if (result === undefined) {
             result = ctx.measureText(text).width;
             fontCache.set(text, result);
         }
         return result;
-    };
-    WatermarkRenderer.prototype._private__fontCache = function (font) {
-        var fontCache = this._private__metricsCache.get(font);
+    }
+    _private__fontCache(font) {
+        let fontCache = this._private__metricsCache.get(font);
         if (fontCache === undefined) {
             fontCache = new Map();
             this._private__metricsCache.set(font, fontCache);
         }
         return fontCache;
-    };
-    return WatermarkRenderer;
-}(ScaledRenderer));
+    }
+}
 
-var WatermarkPaneView = /** @class */ (function () {
-    function WatermarkPaneView(source) {
+class WatermarkPaneView {
+    constructor(source) {
         this._private__invalidated = true;
         this._private__rendererData = {
             _internal_visible: false,
@@ -7069,19 +7006,19 @@ var WatermarkPaneView = /** @class */ (function () {
         this._private__renderer = new WatermarkRenderer(this._private__rendererData);
         this._private__source = source;
     }
-    WatermarkPaneView.prototype._internal_update = function () {
+    _internal_update() {
         this._private__invalidated = true;
-    };
-    WatermarkPaneView.prototype._internal_renderer = function (height, width) {
+    }
+    _internal_renderer(height, width) {
         if (this._private__invalidated) {
             this._private__updateImpl(height, width);
             this._private__invalidated = false;
         }
         return this._private__renderer;
-    };
-    WatermarkPaneView.prototype._private__updateImpl = function (height, width) {
-        var options = this._private__source._internal_options();
-        var data = this._private__rendererData;
+    }
+    _private__updateImpl(height, width) {
+        const options = this._private__source._internal_options();
+        const data = this._private__rendererData;
         data._internal_visible = options.visible;
         if (!data._internal_visible) {
             return;
@@ -7100,32 +7037,28 @@ var WatermarkPaneView = /** @class */ (function () {
                 _internal_zoom: 0,
             },
         ];
-    };
-    return WatermarkPaneView;
-}());
-
-var Watermark = /** @class */ (function (_super) {
-    __extends(Watermark, _super);
-    function Watermark(model, options) {
-        var _this = _super.call(this) || this;
-        _this._private__options = options;
-        _this._private__paneView = new WatermarkPaneView(_this);
-        return _this;
-    }
-    Watermark.prototype._internal_priceAxisViews = function () {
+    }
+}
+
+class Watermark extends DataSource {
+    constructor(model, options) {
+        super();
+        this._private__options = options;
+        this._private__paneView = new WatermarkPaneView(this);
+    }
+    _internal_priceAxisViews() {
         return [];
-    };
-    Watermark.prototype._internal_paneViews = function () {
+    }
+    _internal_paneViews() {
         return [this._private__paneView];
-    };
-    Watermark.prototype._internal_options = function () {
+    }
+    _internal_options() {
         return this._private__options;
-    };
-    Watermark.prototype._internal_updateAllViews = function () {
+    }
+    _internal_updateAllViews() {
         this._private__paneView._internal_update();
-    };
-    return Watermark;
-}(DataSource));
+    }
+}
 
 /// <reference types="_build-time-constants" />
 /**
@@ -7145,12 +7078,11 @@ var TrackingModeExitMode;
      */
     TrackingModeExitMode[TrackingModeExitMode["OnNextTap"] = 1] = "OnNextTap";
 })(TrackingModeExitMode || (TrackingModeExitMode = {}));
-var ChartModel = /** @class */ (function () {
-    function ChartModel(invalidateHandler, options) {
+class ChartModel {
+    constructor(invalidateHandler, options) {
         this._private__panes = [];
         this._private__serieses = [];
         this._private__width = 0;
-        this._private__initialTimeScrollPos = null;
         this._private__hoveredSource = null;
         this._private__priceScalesOptionsChanged = new Delegate();
         this._private__crosshairMoved = new Delegate();
@@ -7164,27 +7096,27 @@ var ChartModel = /** @class */ (function () {
         this._private__watermark = new Watermark(this, options.watermark);
         this._internal_createPane();
         this._private__panes[0]._internal_setStretchFactor(DEFAULT_STRETCH_FACTOR * 2);
-        this._private__backgroundTopColor = this._private__getBackgroundColor(0 /* Top */);
-        this._private__backgroundBottomColor = this._private__getBackgroundColor(1 /* Bottom */);
+        this._private__backgroundTopColor = this._private__getBackgroundColor(0 /* BackgroundColorSide.Top */);
+        this._private__backgroundBottomColor = this._private__getBackgroundColor(1 /* BackgroundColorSide.Bottom */);
     }
-    ChartModel.prototype._internal_fullUpdate = function () {
-        this._private__invalidate(new InvalidateMask(3 /* Full */));
-    };
-    ChartModel.prototype._internal_lightUpdate = function () {
-        this._private__invalidate(new InvalidateMask(2 /* Light */));
-    };
-    ChartModel.prototype._internal_cursorUpdate = function () {
-        this._private__invalidate(new InvalidateMask(1 /* Cursor */));
-    };
-    ChartModel.prototype._internal_updateSource = function (source) {
-        var inv = this._private__invalidationMaskForSource(source);
+    _internal_fullUpdate() {
+        this._private__invalidate(InvalidateMask._internal_full());
+    }
+    _internal_lightUpdate() {
+        this._private__invalidate(InvalidateMask._internal_light());
+    }
+    _internal_cursorUpdate() {
+        this._private__invalidate(new InvalidateMask(1 /* InvalidationLevel.Cursor */));
+    }
+    _internal_updateSource(source) {
+        const inv = this._private__invalidationMaskForSource(source);
         this._private__invalidate(inv);
-    };
-    ChartModel.prototype._internal_hoveredSource = function () {
+    }
+    _internal_hoveredSource() {
         return this._private__hoveredSource;
-    };
-    ChartModel.prototype._internal_setHoveredSource = function (source) {
-        var prevSource = this._private__hoveredSource;
+    }
+    _internal_setHoveredSource(source) {
+        const prevSource = this._private__hoveredSource;
         this._private__hoveredSource = source;
         if (prevSource !== null) {
             this._internal_updateSource(prevSource._internal_source);
@@ -7192,13 +7124,13 @@ var ChartModel = /** @class */ (function () {
         if (source !== null) {
             this._internal_updateSource(source._internal_source);
         }
-    };
-    ChartModel.prototype._internal_options = function () {
+    }
+    _internal_options() {
         return this._private__options;
-    };
-    ChartModel.prototype._internal_applyOptions = function (options) {
+    }
+    _internal_applyOptions(options) {
         merge(this._private__options, options);
-        this._private__panes.forEach(function (p) { return p._internal_applyScaleOptions(options); });
+        this._private__panes.forEach((p) => p._internal_applyScaleOptions(options));
         if (options.timeScale !== undefined) {
             this._private__timeScale._internal_applyOptions(options.timeScale);
         }
@@ -7208,36 +7140,35 @@ var ChartModel = /** @class */ (function () {
         if (options.leftPriceScale || options.rightPriceScale) {
             this._private__priceScalesOptionsChanged._internal_fire();
         }
-        this._private__backgroundTopColor = this._private__getBackgroundColor(0 /* Top */);
-        this._private__backgroundBottomColor = this._private__getBackgroundColor(1 /* Bottom */);
+        this._private__backgroundTopColor = this._private__getBackgroundColor(0 /* BackgroundColorSide.Top */);
+        this._private__backgroundBottomColor = this._private__getBackgroundColor(1 /* BackgroundColorSide.Bottom */);
         this._internal_fullUpdate();
-    };
-    ChartModel.prototype._internal_applyPriceScaleOptions = function (priceScaleId, options) {
-        if (priceScaleId === "left" /* Left */) {
+    }
+    _internal_applyPriceScaleOptions(priceScaleId, options) {
+        if (priceScaleId === "left" /* DefaultPriceScaleId.Left */) {
             this._internal_applyOptions({
                 leftPriceScale: options,
             });
             return;
         }
-        else if (priceScaleId === "right" /* Right */) {
+        else if (priceScaleId === "right" /* DefaultPriceScaleId.Right */) {
             this._internal_applyOptions({
                 rightPriceScale: options,
             });
             return;
         }
-        var res = this._internal_findPriceScale(priceScaleId);
+        const res = this._internal_findPriceScale(priceScaleId);
         if (res === null) {
             {
-                throw new Error("Trying to apply price scale options with incorrect ID: ".concat(priceScaleId));
+                throw new Error(`Trying to apply price scale options with incorrect ID: ${priceScaleId}`);
             }
         }
         res._internal_priceScale._internal_applyOptions(options);
         this._private__priceScalesOptionsChanged._internal_fire();
-    };
-    ChartModel.prototype._internal_findPriceScale = function (priceScaleId) {
-        for (var _i = 0, _a = this._private__panes; _i < _a.length; _i++) {
-            var pane = _a[_i];
-            var priceScale = pane._internal_priceScaleById(priceScaleId);
+    }
+    _internal_findPriceScale(priceScaleId) {
+        for (const pane of this._private__panes) {
+            const priceScale = pane._internal_priceScaleById(priceScaleId);
             if (priceScale !== null) {
                 return {
                     _internal_pane: pane,
@@ -7246,34 +7177,34 @@ var ChartModel = /** @class */ (function () {
             }
         }
         return null;
-    };
-    ChartModel.prototype._internal_timeScale = function () {
+    }
+    _internal_timeScale() {
         return this._private__timeScale;
-    };
-    ChartModel.prototype._internal_panes = function () {
+    }
+    _internal_panes() {
         return this._private__panes;
-    };
-    ChartModel.prototype._internal_watermarkSource = function () {
+    }
+    _internal_watermarkSource() {
         return this._private__watermark;
-    };
-    ChartModel.prototype._internal_crosshairSource = function () {
+    }
+    _internal_crosshairSource() {
         return this._private__crosshair;
-    };
-    ChartModel.prototype._internal_crosshairMoved = function () {
+    }
+    _internal_crosshairMoved() {
         return this._private__crosshairMoved;
-    };
-    ChartModel.prototype._internal_setPaneHeight = function (pane, height) {
+    }
+    _internal_setPaneHeight(pane, height) {
         pane._internal_setHeight(height);
         this._internal_recalculateAllPanes();
-    };
-    ChartModel.prototype._internal_setWidth = function (width) {
+    }
+    _internal_setWidth(width) {
         this._private__width = width;
         this._private__timeScale._internal_setWidth(this._private__width);
-        this._private__panes.forEach(function (pane) { return pane._internal_setWidth(width); });
+        this._private__panes.forEach((pane) => pane._internal_setWidth(width));
         this._internal_recalculateAllPanes();
-    };
-    ChartModel.prototype._internal_createPane = function (index) {
-        var pane = new Pane(this._private__timeScale, this);
+    }
+    _internal_createPane(index) {
+        const pane = new Pane(this._private__timeScale, this);
         if (index !== undefined) {
             this._private__panes.splice(index, 0, pane);
         }
@@ -7281,201 +7212,193 @@ var ChartModel = /** @class */ (function () {
             // adding to the end - common case
             this._private__panes.push(pane);
         }
-        var actualIndex = (index === undefined) ? this._private__panes.length - 1 : index;
+        const actualIndex = (index === undefined) ? this._private__panes.length - 1 : index;
         // we always do autoscaling on the creation
         // if autoscale option is true, it is ok, just recalculate by invalidation mask
         // if autoscale option is false, autoscale anyway on the first draw
         // also there is a scenario when autoscale is true in constructor and false later on applyOptions
-        var mask = new InvalidateMask(3 /* Full */);
+        const mask = InvalidateMask._internal_full();
         mask._internal_invalidatePane(actualIndex, {
-            _internal_level: 0 /* None */,
+            _internal_level: 0 /* InvalidationLevel.None */,
             _internal_autoScale: true,
         });
         this._private__invalidate(mask);
         return pane;
-    };
-    ChartModel.prototype._internal_startScalePrice = function (pane, priceScale, x) {
+    }
+    _internal_startScalePrice(pane, priceScale, x) {
         pane._internal_startScalePrice(priceScale, x);
-    };
-    ChartModel.prototype._internal_scalePriceTo = function (pane, priceScale, x) {
+    }
+    _internal_scalePriceTo(pane, priceScale, x) {
         pane._internal_scalePriceTo(priceScale, x);
         this._internal_updateCrosshair();
-        this._private__invalidate(this._private__paneInvalidationMask(pane, 2 /* Light */));
-    };
-    ChartModel.prototype._internal_endScalePrice = function (pane, priceScale) {
+        this._private__invalidate(this._private__paneInvalidationMask(pane, 2 /* InvalidationLevel.Light */));
+    }
+    _internal_endScalePrice(pane, priceScale) {
         pane._internal_endScalePrice(priceScale);
-        this._private__invalidate(this._private__paneInvalidationMask(pane, 2 /* Light */));
-    };
-    ChartModel.prototype._internal_startScrollPrice = function (pane, priceScale, x) {
+        this._private__invalidate(this._private__paneInvalidationMask(pane, 2 /* InvalidationLevel.Light */));
+    }
+    _internal_startScrollPrice(pane, priceScale, x) {
         if (priceScale._internal_isAutoScale()) {
             return;
         }
         pane._internal_startScrollPrice(priceScale, x);
-    };
-    ChartModel.prototype._internal_scrollPriceTo = function (pane, priceScale, x) {
+    }
+    _internal_scrollPriceTo(pane, priceScale, x) {
         if (priceScale._internal_isAutoScale()) {
             return;
         }
         pane._internal_scrollPriceTo(priceScale, x);
         this._internal_updateCrosshair();
-        this._private__invalidate(this._private__paneInvalidationMask(pane, 2 /* Light */));
-    };
-    ChartModel.prototype._internal_endScrollPrice = function (pane, priceScale) {
+        this._private__invalidate(this._private__paneInvalidationMask(pane, 2 /* InvalidationLevel.Light */));
+    }
+    _internal_endScrollPrice(pane, priceScale) {
         if (priceScale._internal_isAutoScale()) {
             return;
         }
         pane._internal_endScrollPrice(priceScale);
-        this._private__invalidate(this._private__paneInvalidationMask(pane, 2 /* Light */));
-    };
-    ChartModel.prototype._internal_resetPriceScale = function (pane, priceScale) {
+        this._private__invalidate(this._private__paneInvalidationMask(pane, 2 /* InvalidationLevel.Light */));
+    }
+    _internal_resetPriceScale(pane, priceScale) {
         pane._internal_resetPriceScale(priceScale);
-        this._private__invalidate(this._private__paneInvalidationMask(pane, 2 /* Light */));
-    };
-    ChartModel.prototype._internal_startScaleTime = function (position) {
+        this._private__invalidate(this._private__paneInvalidationMask(pane, 2 /* InvalidationLevel.Light */));
+    }
+    _internal_startScaleTime(position) {
         this._private__timeScale._internal_startScale(position);
-    };
+    }
     /**
      * Zoom in/out the chart (depends on scale value).
      *
      * @param pointX - X coordinate of the point to apply the zoom (the point which should stay on its place)
      * @param scale - Zoom value. Negative value means zoom out, positive - zoom in.
      */
-    ChartModel.prototype._internal_zoomTime = function (pointX, scale) {
-        var timeScale = this._internal_timeScale();
+    _internal_zoomTime(pointX, scale) {
+        const timeScale = this._internal_timeScale();
         if (timeScale._internal_isEmpty() || scale === 0) {
             return;
         }
-        var timeScaleWidth = timeScale._internal_width();
+        const timeScaleWidth = timeScale._internal_width();
         pointX = Math.max(1, Math.min(pointX, timeScaleWidth));
         timeScale._internal_zoom(pointX, scale);
         this._internal_recalculateAllPanes();
-    };
-    ChartModel.prototype._internal_scrollChart = function (x) {
+    }
+    _internal_scrollChart(x) {
         this._internal_startScrollTime(0);
         this._internal_scrollTimeTo(x);
         this._internal_endScrollTime();
-    };
-    ChartModel.prototype._internal_scaleTimeTo = function (x) {
+    }
+    _internal_scaleTimeTo(x) {
         this._private__timeScale._internal_scaleTo(x);
         this._internal_recalculateAllPanes();
-    };
-    ChartModel.prototype._internal_endScaleTime = function () {
+    }
+    _internal_endScaleTime() {
         this._private__timeScale._internal_endScale();
         this._internal_lightUpdate();
-    };
-    ChartModel.prototype._internal_startScrollTime = function (x) {
-        this._private__initialTimeScrollPos = x;
+    }
+    _internal_startScrollTime(x) {
         this._private__timeScale._internal_startScroll(x);
-    };
-    ChartModel.prototype._internal_scrollTimeTo = function (x) {
-        var res = false;
-        if (this._private__initialTimeScrollPos !== null && Math.abs(x - this._private__initialTimeScrollPos) > 20) {
-            this._private__initialTimeScrollPos = null;
-            res = true;
-        }
+    }
+    _internal_scrollTimeTo(x) {
         this._private__timeScale._internal_scrollTo(x);
         this._internal_recalculateAllPanes();
-        return res;
-    };
-    ChartModel.prototype._internal_endScrollTime = function () {
+    }
+    _internal_endScrollTime() {
         this._private__timeScale._internal_endScroll();
         this._internal_lightUpdate();
-        this._private__initialTimeScrollPos = null;
-    };
-    ChartModel.prototype._internal_serieses = function () {
+    }
+    _internal_serieses() {
         return this._private__serieses;
-    };
-    ChartModel.prototype._internal_setAndSaveCurrentPosition = function (x, y, pane) {
+    }
+    _internal_setAndSaveCurrentPosition(x, y, pane) {
         this._private__crosshair._internal_saveOriginCoord(x, y);
-        var price = NaN;
-        var index = this._private__timeScale._internal_coordinateToIndex(x);
-        var visibleBars = this._private__timeScale._internal_visibleStrictRange();
+        let price = NaN;
+        let index = this._private__timeScale._internal_coordinateToIndex(x);
+        const visibleBars = this._private__timeScale._internal_visibleStrictRange();
         if (visibleBars !== null) {
             index = Math.min(Math.max(visibleBars._internal_left(), index), visibleBars._internal_right());
         }
-        var priceScale = pane._internal_defaultPriceScale();
-        var firstValue = priceScale._internal_firstValue();
+        const priceScale = pane._internal_defaultPriceScale();
+        const firstValue = priceScale._internal_firstValue();
         if (firstValue !== null) {
             price = priceScale._internal_coordinateToPrice(y, firstValue);
         }
         price = this._private__magnet._internal_align(price, index, pane);
         this._private__crosshair._internal_setPosition(index, price, pane);
         this._internal_cursorUpdate();
-        this._private__crosshairMoved._internal_fire(this._private__crosshair._internal_appliedIndex(), { x: x, y: y });
-    };
-    ChartModel.prototype._internal_clearCurrentPosition = function () {
-        var crosshair = this._internal_crosshairSource();
+        this._private__crosshairMoved._internal_fire(this._private__crosshair._internal_appliedIndex(), { x, y });
+    }
+    _internal_clearCurrentPosition() {
+        const crosshair = this._internal_crosshairSource();
         crosshair._internal_clearPosition();
         this._internal_cursorUpdate();
         this._private__crosshairMoved._internal_fire(null, null);
-    };
-    ChartModel.prototype._internal_updateCrosshair = function () {
+    }
+    _internal_updateCrosshair() {
         // apply magnet
-        var pane = this._private__crosshair._internal_pane();
+        const pane = this._private__crosshair._internal_pane();
         if (pane !== null) {
-            var x = this._private__crosshair._internal_originCoordX();
-            var y = this._private__crosshair._internal_originCoordY();
+            const x = this._private__crosshair._internal_originCoordX();
+            const y = this._private__crosshair._internal_originCoordY();
             this._internal_setAndSaveCurrentPosition(x, y, pane);
         }
         this._private__crosshair._internal_updateAllViews();
-    };
-    ChartModel.prototype._internal_updateTimeScale = function (newBaseIndex, newPoints, firstChangedPointIndex) {
-        var oldFirstTime = this._private__timeScale._internal_indexToTime(0);
+    }
+    _internal_updateTimeScale(newBaseIndex, newPoints, firstChangedPointIndex) {
+        const oldFirstTime = this._private__timeScale._internal_indexToTime(0);
         if (newPoints !== undefined && firstChangedPointIndex !== undefined) {
             this._private__timeScale._internal_update(newPoints, firstChangedPointIndex);
         }
-        var newFirstTime = this._private__timeScale._internal_indexToTime(0);
-        var currentBaseIndex = this._private__timeScale._internal_baseIndex();
-        var visibleBars = this._private__timeScale._internal_visibleStrictRange();
+        const newFirstTime = this._private__timeScale._internal_indexToTime(0);
+        const currentBaseIndex = this._private__timeScale._internal_baseIndex();
+        const visibleBars = this._private__timeScale._internal_visibleStrictRange();
         // if time scale cannot return current visible bars range (e.g. time scale has zero-width)
         // then we do not need to update right offset to shift visible bars range to have the same right offset as we have before new bar
         // (and actually we cannot)
         if (visibleBars !== null && oldFirstTime !== null && newFirstTime !== null) {
-            var isLastSeriesBarVisible = visibleBars._internal_contains(currentBaseIndex);
-            var isLeftBarShiftToLeft = oldFirstTime._internal_timestamp > newFirstTime._internal_timestamp;
-            var isSeriesPointsAdded = newBaseIndex !== null && newBaseIndex > currentBaseIndex;
-            var isSeriesPointsAddedToRight = isSeriesPointsAdded && !isLeftBarShiftToLeft;
-            var needShiftVisibleRangeOnNewBar = isLastSeriesBarVisible && this._private__timeScale._internal_options().shiftVisibleRangeOnNewBar;
+            const isLastSeriesBarVisible = visibleBars._internal_contains(currentBaseIndex);
+            const isLeftBarShiftToLeft = oldFirstTime._internal_timestamp > newFirstTime._internal_timestamp;
+            const isSeriesPointsAdded = newBaseIndex !== null && newBaseIndex > currentBaseIndex;
+            const isSeriesPointsAddedToRight = isSeriesPointsAdded && !isLeftBarShiftToLeft;
+            const needShiftVisibleRangeOnNewBar = isLastSeriesBarVisible && this._private__timeScale._internal_options().shiftVisibleRangeOnNewBar;
             if (isSeriesPointsAddedToRight && !needShiftVisibleRangeOnNewBar) {
-                var compensationShift = newBaseIndex - currentBaseIndex;
+                const compensationShift = newBaseIndex - currentBaseIndex;
                 this._private__timeScale._internal_setRightOffset(this._private__timeScale._internal_rightOffset() - compensationShift);
             }
         }
         this._private__timeScale._internal_setBaseIndex(newBaseIndex);
-    };
-    ChartModel.prototype._internal_recalculatePane = function (pane) {
+    }
+    _internal_recalculatePane(pane) {
         if (pane !== null) {
             pane._internal_recalculate();
         }
-    };
-    ChartModel.prototype._internal_paneForSource = function (source) {
-        var pane = this._private__panes.find(function (p) { return p._internal_orderedSources().includes(source); });
+    }
+    _internal_paneForSource(source) {
+        const pane = this._private__panes.find((p) => p._internal_orderedSources().includes(source));
         return pane === undefined ? null : pane;
-    };
-    ChartModel.prototype._internal_recalculateAllPanes = function () {
+    }
+    _internal_recalculateAllPanes() {
         this._private__watermark._internal_updateAllViews();
-        this._private__panes.forEach(function (p) { return p._internal_recalculate(); });
+        this._private__panes.forEach((p) => p._internal_recalculate());
         this._internal_updateCrosshair();
-    };
-    ChartModel.prototype._internal_destroy = function () {
-        this._private__panes.forEach(function (p) { return p._internal_destroy(); });
+    }
+    _internal_destroy() {
+        this._private__panes.forEach((p) => p._internal_destroy());
         this._private__panes.length = 0;
         // to avoid memleaks
         this._private__options.localization.priceFormatter = undefined;
         this._private__options.localization.timeFormatter = undefined;
-    };
-    ChartModel.prototype._internal_rendererOptionsProvider = function () {
+    }
+    _internal_rendererOptionsProvider() {
         return this._private__rendererOptionsProvider;
-    };
-    ChartModel.prototype._internal_priceAxisRendererOptions = function () {
+    }
+    _internal_priceAxisRendererOptions() {
         return this._private__rendererOptionsProvider._internal_options();
-    };
-    ChartModel.prototype._internal_priceScalesOptionsChanged = function () {
+    }
+    _internal_priceScalesOptionsChanged() {
         return this._private__priceScalesOptionsChanged;
-    };
-    ChartModel.prototype._internal_createSeries = function (seriesType, options) {
-        var pane = this._private__panes[0];
-        var series = this._private__createSeries(options, seriesType, pane);
+    }
+    _internal_createSeries(seriesType, options) {
+        const pane = this._private__panes[0];
+        const series = this._private__createSeries(options, seriesType, pane);
         this._private__serieses.push(series);
         if (this._private__serieses.length === 1) {
             // call fullUpdate to recalculate chart's parts geometry
@@ -7485,71 +7408,81 @@ var ChartModel = /** @class */ (function () {
             this._internal_lightUpdate();
         }
         return series;
-    };
-    ChartModel.prototype._internal_removeSeries = function (series) {
-        var pane = this._internal_paneForSource(series);
-        var seriesIndex = this._private__serieses.indexOf(series);
+    }
+    _internal_removeSeries(series) {
+        const pane = this._internal_paneForSource(series);
+        const seriesIndex = this._private__serieses.indexOf(series);
         assert(seriesIndex !== -1, 'Series not found');
         this._private__serieses.splice(seriesIndex, 1);
         ensureNotNull(pane)._internal_removeDataSource(series);
         if (series._internal_destroy) {
             series._internal_destroy();
         }
-    };
-    ChartModel.prototype._internal_moveSeriesToScale = function (series, targetScaleId) {
-        var pane = ensureNotNull(this._internal_paneForSource(series));
+    }
+    _internal_moveSeriesToScale(series, targetScaleId) {
+        const pane = ensureNotNull(this._internal_paneForSource(series));
         pane._internal_removeDataSource(series);
         // check if targetScaleId exists
-        var target = this._internal_findPriceScale(targetScaleId);
+        const target = this._internal_findPriceScale(targetScaleId);
         if (target === null) {
             // new scale on the same pane
-            var zOrder = series._internal_zorder();
+            const zOrder = series._internal_zorder();
             pane._internal_addDataSource(series, targetScaleId, zOrder);
         }
         else {
             // if move to the new scale of the same pane, keep zorder
             // if move to new pane
-            var zOrder = (target._internal_pane === pane) ? series._internal_zorder() : undefined;
+            const zOrder = (target._internal_pane === pane) ? series._internal_zorder() : undefined;
             target._internal_pane._internal_addDataSource(series, targetScaleId, zOrder);
         }
-    };
-    ChartModel.prototype._internal_fitContent = function () {
-        var mask = new InvalidateMask(2 /* Light */);
+    }
+    _internal_fitContent() {
+        const mask = InvalidateMask._internal_light();
         mask._internal_setFitContent();
         this._private__invalidate(mask);
-    };
-    ChartModel.prototype._internal_setTargetLogicalRange = function (range) {
-        var mask = new InvalidateMask(2 /* Light */);
+    }
+    _internal_setTargetLogicalRange(range) {
+        const mask = InvalidateMask._internal_light();
         mask._internal_applyRange(range);
         this._private__invalidate(mask);
-    };
-    ChartModel.prototype._internal_resetTimeScale = function () {
-        var mask = new InvalidateMask(2 /* Light */);
+    }
+    _internal_resetTimeScale() {
+        const mask = InvalidateMask._internal_light();
         mask._internal_resetTimeScale();
         this._private__invalidate(mask);
-    };
-    ChartModel.prototype._internal_setBarSpacing = function (spacing) {
-        var mask = new InvalidateMask(2 /* Light */);
+    }
+    _internal_setBarSpacing(spacing) {
+        const mask = InvalidateMask._internal_light();
         mask._internal_setBarSpacing(spacing);
         this._private__invalidate(mask);
-    };
-    ChartModel.prototype._internal_setRightOffset = function (offset) {
-        var mask = new InvalidateMask(2 /* Light */);
+    }
+    _internal_setRightOffset(offset) {
+        const mask = InvalidateMask._internal_light();
         mask._internal_setRightOffset(offset);
         this._private__invalidate(mask);
-    };
-    ChartModel.prototype._internal_defaultVisiblePriceScaleId = function () {
-        return this._private__options.rightPriceScale.visible ? "right" /* Right */ : "left" /* Left */;
-    };
-    ChartModel.prototype._internal_backgroundBottomColor = function () {
+    }
+    _internal_setTimeScaleAnimation(animation) {
+        const mask = InvalidateMask._internal_light();
+        mask._internal_setTimeScaleAnimation(animation);
+        this._private__invalidate(mask);
+    }
+    _internal_stopTimeScaleAnimation() {
+        const mask = InvalidateMask._internal_light();
+        mask._internal_stopTimeScaleAnimation();
+        this._private__invalidate(mask);
+    }
+    _internal_defaultVisiblePriceScaleId() {
+        return this._private__options.rightPriceScale.visible ? "right" /* DefaultPriceScaleId.Right */ : "left" /* DefaultPriceScaleId.Left */;
+    }
+    _internal_backgroundBottomColor() {
         return this._private__backgroundBottomColor;
-    };
-    ChartModel.prototype._internal_backgroundTopColor = function () {
+    }
+    _internal_backgroundTopColor() {
         return this._private__backgroundTopColor;
-    };
-    ChartModel.prototype._internal_backgroundColorAtYPercentFromTop = function (percent) {
-        var bottomColor = this._private__backgroundBottomColor;
-        var topColor = this._private__backgroundTopColor;
+    }
+    _internal_backgroundColorAtYPercentFromTop(percent) {
+        const bottomColor = this._private__backgroundBottomColor;
+        const topColor = this._private__backgroundTopColor;
         if (bottomColor === topColor) {
             // solid background
             return bottomColor;
@@ -7566,58 +7499,57 @@ var ChartModel = /** @class */ (function () {
             };
         }
         else {
-            var cachedValue = this._private__gradientColorsCache._internal_colors.get(percent);
+            const cachedValue = this._private__gradientColorsCache._internal_colors.get(percent);
             if (cachedValue !== undefined) {
                 return cachedValue;
             }
         }
-        var result = gradientColorAtPercent(topColor, bottomColor, percent / 100);
+        const result = gradientColorAtPercent(topColor, bottomColor, percent / 100);
         this._private__gradientColorsCache._internal_colors.set(percent, result);
         return result;
-    };
-    ChartModel.prototype._private__paneInvalidationMask = function (pane, level) {
-        var inv = new InvalidateMask(level);
+    }
+    _private__paneInvalidationMask(pane, level) {
+        const inv = new InvalidateMask(level);
         if (pane !== null) {
-            var index = this._private__panes.indexOf(pane);
+            const index = this._private__panes.indexOf(pane);
             inv._internal_invalidatePane(index, {
                 _internal_level: level,
             });
         }
         return inv;
-    };
-    ChartModel.prototype._private__invalidationMaskForSource = function (source, invalidateType) {
+    }
+    _private__invalidationMaskForSource(source, invalidateType) {
         if (invalidateType === undefined) {
-            invalidateType = 2 /* Light */;
+            invalidateType = 2 /* InvalidationLevel.Light */;
         }
         return this._private__paneInvalidationMask(this._internal_paneForSource(source), invalidateType);
-    };
-    ChartModel.prototype._private__invalidate = function (mask) {
+    }
+    _private__invalidate(mask) {
         if (this._private__invalidateHandler) {
             this._private__invalidateHandler(mask);
         }
-        this._private__panes.forEach(function (pane) { return pane._internal_grid()._internal_paneView()._internal_update(); });
-    };
-    ChartModel.prototype._private__createSeries = function (options, seriesType, pane) {
-        var series = new Series(this, options, seriesType);
-        var targetScaleId = options.priceScaleId !== undefined ? options.priceScaleId : this._internal_defaultVisiblePriceScaleId();
+        this._private__panes.forEach((pane) => pane._internal_grid()._internal_paneView()._internal_update());
+    }
+    _private__createSeries(options, seriesType, pane) {
+        const series = new Series(this, options, seriesType);
+        const targetScaleId = options.priceScaleId !== undefined ? options.priceScaleId : this._internal_defaultVisiblePriceScaleId();
         pane._internal_addDataSource(series, targetScaleId);
         if (!isDefaultPriceScale(targetScaleId)) {
             // let's apply that options again to apply margins
             series._internal_applyOptions(options);
         }
         return series;
-    };
-    ChartModel.prototype._private__getBackgroundColor = function (side) {
-        var layoutOptions = this._private__options.layout;
-        if (layoutOptions.background.type === "gradient" /* VerticalGradient */) {
-            return side === 0 /* Top */ ?
+    }
+    _private__getBackgroundColor(side) {
+        const layoutOptions = this._private__options.layout;
+        if (layoutOptions.background.type === "gradient" /* ColorType.VerticalGradient */) {
+            return side === 0 /* BackgroundColorSide.Top */ ?
                 layoutOptions.background.topColor :
                 layoutOptions.background.bottomColor;
         }
         return layoutOptions.background.color;
-    };
-    return ChartModel;
-}());
+    }
+}
 
 function fillUpDownCandlesticksColors(options) {
     if (options.borderColor !== undefined) {
@@ -7651,10 +7583,10 @@ function precisionByMinMove(minMove) {
     if (minMove >= 1) {
         return 0;
     }
-    var i = 0;
+    let i = 0;
     for (; i < 8; i++) {
-        var intPart = Math.round(minMove);
-        var fractPart = Math.abs(intPart - minMove);
+        const intPart = Math.round(minMove);
+        const fractPart = Math.abs(intPart - minMove);
         if (fractPart < 1e-8) {
             return i;
         }
@@ -7713,16 +7645,64 @@ function isFulfilledData(data) {
     return data.open !== undefined || data.value !== undefined;
 }
 
-var Size = /** @class */ (function () {
-    function Size(w, h) {
+/**
+ * When you're trying to use the library in server-side context (for instance in SSR)
+ * you don't have some browser-specific variables like navigator or window
+ * and if the library will use them on the top level of the library
+ * the import will fail due ReferenceError
+ * thus, this allows use the navigator on the top level and being imported in server-side context as well
+ * See issue #446
+ */
+// eslint-disable-next-line @typescript-eslint/tslint/config
+const isRunningOnClientSide = typeof window !== 'undefined';
+
+function isFF() {
+    if (!isRunningOnClientSide) {
+        return false;
+    }
+    return window.navigator.userAgent.toLowerCase().indexOf('firefox') > -1;
+}
+function isIOS() {
+    if (!isRunningOnClientSide) {
+        return false;
+    }
+    // eslint-disable-next-line deprecation/deprecation
+    return /iPhone|iPad|iPod/.test(window.navigator.platform);
+}
+function isChrome() {
+    if (!isRunningOnClientSide) {
+        return false;
+    }
+    return window.chrome !== undefined;
+}
+// Determine whether the browser is running on windows.
+function isWindows() {
+    var _a;
+    // more accurate if available
+    if ((_a = navigator === null || navigator === void 0 ? void 0 : navigator.userAgentData) === null || _a === void 0 ? void 0 : _a.platform) {
+        return navigator.userAgentData.platform === 'Windows';
+    }
+    return navigator.userAgent.toLowerCase().indexOf('win') >= 0;
+}
+// Determine whether the browser is Chromium based.
+function isChromiumBased() {
+    if (!navigator.userAgentData) {
+        return false;
+    }
+    return navigator.userAgentData.brands.some((brand) => {
+        return brand.brand.includes('Chromium');
+    });
+}
+
+class Size {
+    constructor(w, h) {
         this._internal_w = w;
         this._internal_h = h;
     }
-    Size.prototype._internal_equals = function (size) {
+    _internal_equals(size) {
         return (this._internal_w === size._internal_w) && (this._internal_h === size._internal_h);
-    };
-    return Size;
-}());
+    }
+}
 function getCanvasDevicePixelRatio(canvas) {
     return canvas.ownerDocument &&
         canvas.ownerDocument.defaultView &&
@@ -7730,7 +7710,7 @@ function getCanvasDevicePixelRatio(canvas) {
         || 1;
 }
 function getContext2D(canvas) {
-    var ctx = ensureNotNull(canvas.getContext('2d'));
+    const ctx = ensureNotNull(canvas.getContext('2d'));
     // sometimes (very often) ctx getContext returns the same context every time
     // and there might be previous transformation
     // so let's reset it to be sure that everything is ok
@@ -7739,21 +7719,21 @@ function getContext2D(canvas) {
     return ctx;
 }
 function createPreconfiguredCanvas(doc, size) {
-    var canvas = doc.createElement('canvas');
-    var pixelRatio = getCanvasDevicePixelRatio(canvas);
+    const canvas = doc.createElement('canvas');
+    const pixelRatio = getCanvasDevicePixelRatio(canvas);
     // we should keep the layout size...
-    canvas.style.width = "".concat(size._internal_w, "px");
-    canvas.style.height = "".concat(size._internal_h, "px");
+    canvas.style.width = `${size._internal_w}px`;
+    canvas.style.height = `${size._internal_h}px`;
     // ...but multiply coordinate space dimensions to device pixel ratio
     canvas.width = size._internal_w * pixelRatio;
     canvas.height = size._internal_h * pixelRatio;
     return canvas;
 }
 function createBoundCanvas(parentElement, size) {
-    var doc = ensureNotNull(parentElement.ownerDocument);
-    var canvas = doc.createElement('canvas');
+    const doc = ensureNotNull(parentElement.ownerDocument);
+    const canvas = doc.createElement('canvas');
     parentElement.appendChild(canvas);
-    var binding = bindToDevicePixelRatio(canvas, { allowDownsampling: false });
+    const binding = bindToDevicePixelRatio(canvas, { allowDownsampling: false });
     binding.resizeCanvas({
         width: size._internal_w,
         height: size._internal_h,
@@ -7765,15 +7745,15 @@ function distanceBetweenPoints(pos1, pos2) {
     return pos1._internal_position - pos2._internal_position;
 }
 function speedPxPerMSec(pos1, pos2, maxSpeed) {
-    var speed = (pos1._internal_position - pos2._internal_position) / (pos1._internal_time - pos2._internal_time);
+    const speed = (pos1._internal_position - pos2._internal_position) / (pos1._internal_time - pos2._internal_time);
     return Math.sign(speed) * Math.min(Math.abs(speed), maxSpeed);
 }
 function durationMSec(speed, dumpingCoeff) {
-    var lnDumpingCoeff = Math.log(dumpingCoeff);
-    return Math.log((1 /* EpsilonDistance */ * lnDumpingCoeff) / -speed) / (lnDumpingCoeff);
+    const lnDumpingCoeff = Math.log(dumpingCoeff);
+    return Math.log((1 /* Constants.EpsilonDistance */ * lnDumpingCoeff) / -speed) / (lnDumpingCoeff);
 }
-var KineticAnimation = /** @class */ (function () {
-    function KineticAnimation(minSpeed, maxSpeed, dumpingCoeff, minMove) {
+class KineticAnimation {
+    constructor(minSpeed, maxSpeed, dumpingCoeff, minMove) {
         this._private__position1 = null;
         this._private__position2 = null;
         this._private__position3 = null;
@@ -7781,13 +7761,12 @@ var KineticAnimation = /** @class */ (function () {
         this._private__animationStartPosition = null;
         this._private__durationMsecs = 0;
         this._private__speedPxPerMsec = 0;
-        this._private__terminated = false;
         this._private__minSpeed = minSpeed;
         this._private__maxSpeed = maxSpeed;
         this._private__dumpingCoeff = dumpingCoeff;
         this._private__minMove = minMove;
     }
-    KineticAnimation.prototype._internal_addPosition = function (position, time) {
+    _internal_addPosition(position, time) {
         if (this._private__position1 !== null) {
             if (this._private__position1._internal_time === time) {
                 this._private__position1._internal_position = position;
@@ -7801,35 +7780,35 @@ var KineticAnimation = /** @class */ (function () {
         this._private__position3 = this._private__position2;
         this._private__position2 = this._private__position1;
         this._private__position1 = { _internal_time: time, _internal_position: position };
-    };
-    KineticAnimation.prototype._internal_start = function (position, time) {
+    }
+    _internal_start(position, time) {
         if (this._private__position1 === null || this._private__position2 === null) {
             return;
         }
-        if (time - this._private__position1._internal_time > 50 /* MaxStartDelay */) {
+        if (time - this._private__position1._internal_time > 50 /* Constants.MaxStartDelay */) {
             return;
         }
         // To calculate all the rest parameters we should calculate the speed af first
-        var totalDistance = 0;
-        var speed1 = speedPxPerMSec(this._private__position1, this._private__position2, this._private__maxSpeed);
-        var distance1 = distanceBetweenPoints(this._private__position1, this._private__position2);
+        let totalDistance = 0;
+        const speed1 = speedPxPerMSec(this._private__position1, this._private__position2, this._private__maxSpeed);
+        const distance1 = distanceBetweenPoints(this._private__position1, this._private__position2);
         // We're calculating weighted average speed
         // Than more distance for a segment, than more its weight
-        var speedItems = [speed1];
-        var distanceItems = [distance1];
+        const speedItems = [speed1];
+        const distanceItems = [distance1];
         totalDistance += distance1;
         if (this._private__position3 !== null) {
-            var speed2 = speedPxPerMSec(this._private__position2, this._private__position3, this._private__maxSpeed);
+            const speed2 = speedPxPerMSec(this._private__position2, this._private__position3, this._private__maxSpeed);
             // stop at this moment if direction of the segment is opposite
             if (Math.sign(speed2) === Math.sign(speed1)) {
-                var distance2 = distanceBetweenPoints(this._private__position2, this._private__position3);
+                const distance2 = distanceBetweenPoints(this._private__position2, this._private__position3);
                 speedItems.push(speed2);
                 distanceItems.push(distance2);
                 totalDistance += distance2;
                 if (this._private__position4 !== null) {
-                    var speed3 = speedPxPerMSec(this._private__position3, this._private__position4, this._private__maxSpeed);
+                    const speed3 = speedPxPerMSec(this._private__position3, this._private__position4, this._private__maxSpeed);
                     if (Math.sign(speed3) === Math.sign(speed1)) {
-                        var distance3 = distanceBetweenPoints(this._private__position3, this._private__position4);
+                        const distance3 = distanceBetweenPoints(this._private__position3, this._private__position4);
                         speedItems.push(speed3);
                         distanceItems.push(distance3);
                         totalDistance += distance3;
@@ -7837,8 +7816,8 @@ var KineticAnimation = /** @class */ (function () {
                 }
             }
         }
-        var resultSpeed = 0;
-        for (var i = 0; i < speedItems.length; ++i) {
+        let resultSpeed = 0;
+        for (let i = 0; i < speedItems.length; ++i) {
             resultSpeed += distanceItems[i] / totalDistance * speedItems[i];
         }
         if (Math.abs(resultSpeed) < this._private__minSpeed) {
@@ -7847,66 +7826,28 @@ var KineticAnimation = /** @class */ (function () {
         this._private__animationStartPosition = { _internal_position: position, _internal_time: time };
         this._private__speedPxPerMsec = resultSpeed;
         this._private__durationMsecs = durationMSec(Math.abs(resultSpeed), this._private__dumpingCoeff);
-    };
-    KineticAnimation.prototype._internal_getPosition = function (time) {
-        var startPosition = ensureNotNull(this._private__animationStartPosition);
-        var durationMsecs = time - startPosition._internal_time;
+    }
+    _internal_getPosition(time) {
+        const startPosition = ensureNotNull(this._private__animationStartPosition);
+        const durationMsecs = time - startPosition._internal_time;
         return startPosition._internal_position + this._private__speedPxPerMsec * (Math.pow(this._private__dumpingCoeff, durationMsecs) - 1) / (Math.log(this._private__dumpingCoeff));
-    };
-    KineticAnimation.prototype._internal_finished = function (time) {
-        return this._private__animationStartPosition === null || this._private__progressDuration(time) === this._private__durationMsecs;
-    };
-    KineticAnimation.prototype._internal_terminated = function () {
-        return this._private__terminated;
-    };
-    KineticAnimation.prototype._internal_terminate = function () {
-        this._private__terminated = true;
-    };
-    KineticAnimation.prototype._private__progressDuration = function (time) {
-        var startPosition = ensureNotNull(this._private__animationStartPosition);
-        var progress = time - startPosition._internal_time;
-        return Math.min(progress, this._private__durationMsecs);
-    };
-    return KineticAnimation;
-}());
-
-/**
- * When you're trying to use the library in server-side context (for instance in SSR)
- * you don't have some browser-specific variables like navigator or window
- * and if the library will use them on the top level of the library
- * the import will fail due ReferenceError
- * thus, this allows use the navigator on the top level and being imported in server-side context as well
- * See issue #446
- */
-// eslint-disable-next-line @typescript-eslint/tslint/config
-var isRunningOnClientSide = typeof window !== 'undefined';
-
-function isFF() {
-    if (!isRunningOnClientSide) {
-        return false;
     }
-    return window.navigator.userAgent.toLowerCase().indexOf('firefox') > -1;
-}
-function isIOS() {
-    if (!isRunningOnClientSide) {
-        return false;
+    _internal_finished(time) {
+        return this._private__animationStartPosition === null || this._private__progressDuration(time) === this._private__durationMsecs;
     }
-    // eslint-disable-next-line deprecation/deprecation
-    return /iPhone|iPad|iPod/.test(window.navigator.platform);
-}
-function isChrome() {
-    if (!isRunningOnClientSide) {
-        return false;
+    _private__progressDuration(time) {
+        const startPosition = ensureNotNull(this._private__animationStartPosition);
+        const progress = time - startPosition._internal_time;
+        return Math.min(progress, this._private__durationMsecs);
     }
-    return window.chrome !== undefined;
 }
 
 function preventScrollByWheelClick(el) {
     if (!isChrome()) {
         return;
     }
-    el.addEventListener('mousedown', function (e) {
-        if (e.button === 1 /* Middle */) {
+    el.addEventListener('mousedown', (e) => {
+        if (e.button === 1 /* MouseEventButton.Middle */) {
             // prevent incorrect scrolling event
             e.preventDefault();
             return false;
@@ -7916,9 +7857,8 @@ function preventScrollByWheelClick(el) {
 }
 
 // TODO: get rid of a lot of boolean flags, probably we should replace it with some enum
-var MouseEventHandler = /** @class */ (function () {
-    function MouseEventHandler(target, handler, options) {
-        var _this = this;
+class MouseEventHandler {
+    constructor(target, handler, options) {
         this._private__clickCount = 0;
         this._private__clickTimeoutId = null;
         this._private__clickPosition = { _internal_x: Number.NEGATIVE_INFINITY, _internal_y: Number.POSITIVE_INFINITY };
@@ -7955,8 +7895,8 @@ var MouseEventHandler = /** @class */ (function () {
          * To prevent the mouse from hanging while pressed we're subscribing on the mouseleave event of the document element.
          * We're subscribing on mouseleave, but this event is actually fired on mouseup outside of the browser's border.
          */
-        this._private__onFirefoxOutsideMouseUp = function (mouseUpEvent) {
-            _this._private__mouseUpHandler(mouseUpEvent);
+        this._private__onFirefoxOutsideMouseUp = (mouseUpEvent) => {
+            this._private__mouseUpHandler(mouseUpEvent);
         };
         /**
          * Safari doesn't fire touchstart/mousedown events on double tap since iOS 13.
@@ -7965,27 +7905,27 @@ var MouseEventHandler = /** @class */ (function () {
          * 2) Add listener on dblclick event that fires with the preceding mousedown/mouseup.
          * https://developer.apple.com/forums/thread/125073
          */
-        this._private__onMobileSafariDoubleClick = function (dblClickEvent) {
-            if (_this._private__firesTouchEvents(dblClickEvent)) {
-                var compatEvent = _this._private__makeCompatEvent(dblClickEvent);
-                ++_this._private__tapCount;
-                if (_this._private__tapTimeoutId && _this._private__tapCount > 1) {
-                    var manhattanDistance = _this._private__touchMouseMoveWithDownInfo(getPosition(dblClickEvent), _this._private__tapPosition)._internal_manhattanDistance;
-                    if (manhattanDistance < 30 /* DoubleTapManhattanDistance */ && !_this._private__cancelTap) {
-                        _this._private__processTouchEvent(compatEvent, _this._private__handler._internal_doubleTapEvent);
+        this._private__onMobileSafariDoubleClick = (dblClickEvent) => {
+            if (this._private__firesTouchEvents(dblClickEvent)) {
+                const compatEvent = this._private__makeCompatEvent(dblClickEvent);
+                ++this._private__tapCount;
+                if (this._private__tapTimeoutId && this._private__tapCount > 1) {
+                    const { _internal_manhattanDistance: manhattanDistance } = this._private__touchMouseMoveWithDownInfo(getPosition(dblClickEvent), this._private__tapPosition);
+                    if (manhattanDistance < 30 /* Constants.DoubleTapManhattanDistance */ && !this._private__cancelTap) {
+                        this._private__processTouchEvent(compatEvent, this._private__handler._internal_doubleTapEvent);
                     }
-                    _this._private__resetTapTimeout();
+                    this._private__resetTapTimeout();
                 }
             }
             else {
-                var compatEvent = _this._private__makeCompatEvent(dblClickEvent);
-                ++_this._private__clickCount;
-                if (_this._private__clickTimeoutId && _this._private__clickCount > 1) {
-                    var manhattanDistance = _this._private__touchMouseMoveWithDownInfo(getPosition(dblClickEvent), _this._private__clickPosition)._internal_manhattanDistance;
-                    if (manhattanDistance < 5 /* DoubleClickManhattanDistance */ && !_this._private__cancelClick) {
-                        _this._private__processMouseEvent(compatEvent, _this._private__handler._internal_mouseDoubleClickEvent);
+                const compatEvent = this._private__makeCompatEvent(dblClickEvent);
+                ++this._private__clickCount;
+                if (this._private__clickTimeoutId && this._private__clickCount > 1) {
+                    const { _internal_manhattanDistance: manhattanDistance } = this._private__touchMouseMoveWithDownInfo(getPosition(dblClickEvent), this._private__clickPosition);
+                    if (manhattanDistance < 5 /* Constants.DoubleClickManhattanDistance */ && !this._private__cancelClick) {
+                        this._private__processMouseEvent(compatEvent, this._private__handler._internal_mouseDoubleClickEvent);
                     }
-                    _this._private__resetClickTimeout();
+                    this._private__resetClickTimeout();
                 }
             }
         };
@@ -7994,7 +7934,7 @@ var MouseEventHandler = /** @class */ (function () {
         this._private__options = options;
         this._private__init();
     }
-    MouseEventHandler.prototype._internal_destroy = function () {
+    _internal_destroy() {
         if (this._private__unsubscribeOutsideMouseEvents !== null) {
             this._private__unsubscribeOutsideMouseEvents();
             this._private__unsubscribeOutsideMouseEvents = null;
@@ -8021,53 +7961,52 @@ var MouseEventHandler = /** @class */ (function () {
         }
         this._private__clearLongTapTimeout();
         this._private__resetClickTimeout();
-    };
-    MouseEventHandler.prototype._private__mouseEnterHandler = function (enterEvent) {
-        var _this = this;
+    }
+    _private__mouseEnterHandler(enterEvent) {
         if (this._private__unsubscribeMousemove) {
             this._private__unsubscribeMousemove();
         }
-        var boundMouseMoveHandler = this._private__mouseMoveHandler.bind(this);
-        this._private__unsubscribeMousemove = function () {
-            _this._private__target.removeEventListener('mousemove', boundMouseMoveHandler);
+        const boundMouseMoveHandler = this._private__mouseMoveHandler.bind(this);
+        this._private__unsubscribeMousemove = () => {
+            this._private__target.removeEventListener('mousemove', boundMouseMoveHandler);
         };
         this._private__target.addEventListener('mousemove', boundMouseMoveHandler);
         if (this._private__firesTouchEvents(enterEvent)) {
             return;
         }
-        var compatEvent = this._private__makeCompatEvent(enterEvent);
+        const compatEvent = this._private__makeCompatEvent(enterEvent);
         this._private__processMouseEvent(compatEvent, this._private__handler._internal_mouseEnterEvent);
         this._private__acceptMouseLeave = true;
-    };
-    MouseEventHandler.prototype._private__resetClickTimeout = function () {
+    }
+    _private__resetClickTimeout() {
         if (this._private__clickTimeoutId !== null) {
             clearTimeout(this._private__clickTimeoutId);
         }
         this._private__clickCount = 0;
         this._private__clickTimeoutId = null;
         this._private__clickPosition = { _internal_x: Number.NEGATIVE_INFINITY, _internal_y: Number.POSITIVE_INFINITY };
-    };
-    MouseEventHandler.prototype._private__resetTapTimeout = function () {
+    }
+    _private__resetTapTimeout() {
         if (this._private__tapTimeoutId !== null) {
             clearTimeout(this._private__tapTimeoutId);
         }
         this._private__tapCount = 0;
         this._private__tapTimeoutId = null;
         this._private__tapPosition = { _internal_x: Number.NEGATIVE_INFINITY, _internal_y: Number.POSITIVE_INFINITY };
-    };
-    MouseEventHandler.prototype._private__mouseMoveHandler = function (moveEvent) {
+    }
+    _private__mouseMoveHandler(moveEvent) {
         if (this._private__mousePressed || this._private__touchMoveStartPosition !== null) {
             return;
         }
         if (this._private__firesTouchEvents(moveEvent)) {
             return;
         }
-        var compatEvent = this._private__makeCompatEvent(moveEvent);
+        const compatEvent = this._private__makeCompatEvent(moveEvent);
         this._private__processMouseEvent(compatEvent, this._private__handler._internal_mouseMoveEvent);
         this._private__acceptMouseLeave = true;
-    };
-    MouseEventHandler.prototype._private__touchMoveHandler = function (moveEvent) {
-        var touch = touchWithId(moveEvent.changedTouches, ensureNotNull(this._private__activeTouchId));
+    }
+    _private__touchMoveHandler(moveEvent) {
+        const touch = touchWithId(moveEvent.changedTouches, ensureNotNull(this._private__activeTouchId));
         if (touch === null) {
             return;
         }
@@ -8080,19 +8019,19 @@ var MouseEventHandler = /** @class */ (function () {
         }
         // prevent pinch if move event comes faster than the second touch
         this._private__pinchPrevented = true;
-        var moveInfo = this._private__touchMouseMoveWithDownInfo(getPosition(touch), ensureNotNull(this._private__touchMoveStartPosition));
-        var xOffset = moveInfo._internal_xOffset, yOffset = moveInfo._internal_yOffset, manhattanDistance = moveInfo._internal_manhattanDistance;
-        if (!this._private__touchMoveExceededManhattanDistance && manhattanDistance < 5 /* CancelTapManhattanDistance */) {
+        const moveInfo = this._private__touchMouseMoveWithDownInfo(getPosition(touch), ensureNotNull(this._private__touchMoveStartPosition));
+        const { _internal_xOffset: xOffset, _internal_yOffset: yOffset, _internal_manhattanDistance: manhattanDistance } = moveInfo;
+        if (!this._private__touchMoveExceededManhattanDistance && manhattanDistance < 5 /* Constants.CancelTapManhattanDistance */) {
             return;
         }
         if (!this._private__touchMoveExceededManhattanDistance) {
             // first time when current position exceeded manhattan distance
             // vertical drag is more important than horizontal drag
             // because we scroll the page vertically often than horizontally
-            var correctedXOffset = xOffset * 0.5;
+            const correctedXOffset = xOffset * 0.5;
             // a drag can be only if touch page scroll isn't allowed
-            var isVertDrag = yOffset >= correctedXOffset && !this._private__options._internal_treatVertTouchDragAsPageScroll();
-            var isHorzDrag = correctedXOffset > yOffset && !this._private__options._internal_treatHorzTouchDragAsPageScroll();
+            const isVertDrag = yOffset >= correctedXOffset && !this._private__options._internal_treatVertTouchDragAsPageScroll();
+            const isHorzDrag = correctedXOffset > yOffset && !this._private__options._internal_treatHorzTouchDragAsPageScroll();
             // if drag event happened then we should revert preventDefault state to original one
             // and try to process the drag event
             // else we shouldn't prevent default of the event and ignore processing the drag event
@@ -8106,43 +8045,43 @@ var MouseEventHandler = /** @class */ (function () {
             this._private__resetTapTimeout();
         }
         if (!this._private__preventTouchDragProcess) {
-            var compatEvent = this._private__makeCompatEvent(moveEvent, touch);
+            const compatEvent = this._private__makeCompatEvent(moveEvent, touch);
             this._private__processTouchEvent(compatEvent, this._private__handler._internal_touchMoveEvent);
             // we should prevent default in case of touch only
             // to prevent scroll of the page
             preventDefault(moveEvent);
         }
-    };
-    MouseEventHandler.prototype._private__mouseMoveWithDownHandler = function (moveEvent) {
-        if (moveEvent.button !== 0 /* Left */) {
+    }
+    _private__mouseMoveWithDownHandler(moveEvent) {
+        if (moveEvent.button !== 0 /* MouseEventButton.Left */) {
             return;
         }
-        var moveInfo = this._private__touchMouseMoveWithDownInfo(getPosition(moveEvent), ensureNotNull(this._private__mouseMoveStartPosition));
-        var manhattanDistance = moveInfo._internal_manhattanDistance;
-        if (manhattanDistance >= 5 /* CancelClickManhattanDistance */) {
+        const moveInfo = this._private__touchMouseMoveWithDownInfo(getPosition(moveEvent), ensureNotNull(this._private__mouseMoveStartPosition));
+        const { _internal_manhattanDistance: manhattanDistance } = moveInfo;
+        if (manhattanDistance >= 5 /* Constants.CancelClickManhattanDistance */) {
             // if manhattan distance is more that 5 - we should cancel click event
             this._private__cancelClick = true;
             this._private__resetClickTimeout();
         }
         if (this._private__cancelClick) {
             // if this._cancelClick is true, that means that minimum manhattan distance is already exceeded
-            var compatEvent = this._private__makeCompatEvent(moveEvent);
+            const compatEvent = this._private__makeCompatEvent(moveEvent);
             this._private__processMouseEvent(compatEvent, this._private__handler._internal_pressedMouseMoveEvent);
         }
-    };
-    MouseEventHandler.prototype._private__touchMouseMoveWithDownInfo = function (currentPosition, startPosition) {
-        var xOffset = Math.abs(startPosition._internal_x - currentPosition._internal_x);
-        var yOffset = Math.abs(startPosition._internal_y - currentPosition._internal_y);
-        var manhattanDistance = xOffset + yOffset;
+    }
+    _private__touchMouseMoveWithDownInfo(currentPosition, startPosition) {
+        const xOffset = Math.abs(startPosition._internal_x - currentPosition._internal_x);
+        const yOffset = Math.abs(startPosition._internal_y - currentPosition._internal_y);
+        const manhattanDistance = xOffset + yOffset;
         return {
             _internal_xOffset: xOffset,
             _internal_yOffset: yOffset,
             _internal_manhattanDistance: manhattanDistance,
         };
-    };
+    }
     // eslint-disable-next-line complexity
-    MouseEventHandler.prototype._private__touchEndHandler = function (touchEndEvent) {
-        var touch = touchWithId(touchEndEvent.changedTouches, ensureNotNull(this._private__activeTouchId));
+    _private__touchEndHandler(touchEndEvent) {
+        let touch = touchWithId(touchEndEvent.changedTouches, ensureNotNull(this._private__activeTouchId));
         if (touch === null && touchEndEvent.touches.length === 0) {
             // something went wrong, somehow we missed the required touchend event
             // probably the browser has not sent this event
@@ -8159,13 +8098,13 @@ var MouseEventHandler = /** @class */ (function () {
             this._private__unsubscribeRootTouchEvents();
             this._private__unsubscribeRootTouchEvents = null;
         }
-        var compatEvent = this._private__makeCompatEvent(touchEndEvent, touch);
+        const compatEvent = this._private__makeCompatEvent(touchEndEvent, touch);
         this._private__processTouchEvent(compatEvent, this._private__handler._internal_touchEndEvent);
         ++this._private__tapCount;
         if (this._private__tapTimeoutId && this._private__tapCount > 1) {
             // check that both clicks are near enough
-            var manhattanDistance = this._private__touchMouseMoveWithDownInfo(getPosition(touch), this._private__tapPosition)._internal_manhattanDistance;
-            if (manhattanDistance < 30 /* DoubleTapManhattanDistance */ && !this._private__cancelTap) {
+            const { _internal_manhattanDistance: manhattanDistance } = this._private__touchMouseMoveWithDownInfo(getPosition(touch), this._private__tapPosition);
+            if (manhattanDistance < 30 /* Constants.DoubleTapManhattanDistance */ && !this._private__cancelTap) {
                 this._private__processTouchEvent(compatEvent, this._private__handler._internal_doubleTapEvent);
             }
             this._private__resetTapTimeout();
@@ -8192,12 +8131,12 @@ var MouseEventHandler = /** @class */ (function () {
                 preventDefault(touchEndEvent);
             }
         }
-    };
-    MouseEventHandler.prototype._private__mouseUpHandler = function (mouseUpEvent) {
-        if (mouseUpEvent.button !== 0 /* Left */) {
+    }
+    _private__mouseUpHandler(mouseUpEvent) {
+        if (mouseUpEvent.button !== 0 /* MouseEventButton.Left */) {
             return;
         }
-        var compatEvent = this._private__makeCompatEvent(mouseUpEvent);
+        const compatEvent = this._private__makeCompatEvent(mouseUpEvent);
         this._private__mouseMoveStartPosition = null;
         this._private__mousePressed = false;
         if (this._private__unsubscribeRootMouseEvents) {
@@ -8205,7 +8144,7 @@ var MouseEventHandler = /** @class */ (function () {
             this._private__unsubscribeRootMouseEvents = null;
         }
         if (isFF()) {
-            var rootElement = this._private__target.ownerDocument.documentElement;
+            const rootElement = this._private__target.ownerDocument.documentElement;
             rootElement.removeEventListener('mouseleave', this._private__onFirefoxOutsideMouseUp);
         }
         if (this._private__firesTouchEvents(mouseUpEvent)) {
@@ -8215,8 +8154,8 @@ var MouseEventHandler = /** @class */ (function () {
         ++this._private__clickCount;
         if (this._private__clickTimeoutId && this._private__clickCount > 1) {
             // check that both clicks are near enough
-            var manhattanDistance = this._private__touchMouseMoveWithDownInfo(getPosition(mouseUpEvent), this._private__clickPosition)._internal_manhattanDistance;
-            if (manhattanDistance < 5 /* DoubleClickManhattanDistance */ && !this._private__cancelClick) {
+            const { _internal_manhattanDistance: manhattanDistance } = this._private__touchMouseMoveWithDownInfo(getPosition(mouseUpEvent), this._private__clickPosition);
+            if (manhattanDistance < 5 /* Constants.DoubleClickManhattanDistance */ && !this._private__cancelClick) {
                 this._private__processMouseEvent(compatEvent, this._private__handler._internal_mouseDoubleClickEvent);
             }
             this._private__resetClickTimeout();
@@ -8226,22 +8165,22 @@ var MouseEventHandler = /** @class */ (function () {
                 this._private__processMouseEvent(compatEvent, this._private__handler._internal_mouseClickEvent);
             }
         }
-    };
-    MouseEventHandler.prototype._private__clearLongTapTimeout = function () {
+    }
+    _private__clearLongTapTimeout() {
         if (this._private__longTapTimeoutId === null) {
             return;
         }
         clearTimeout(this._private__longTapTimeoutId);
         this._private__longTapTimeoutId = null;
-    };
-    MouseEventHandler.prototype._private__touchStartHandler = function (downEvent) {
+    }
+    _private__touchStartHandler(downEvent) {
         if (this._private__activeTouchId !== null) {
             return;
         }
-        var touch = downEvent.changedTouches[0];
+        const touch = downEvent.changedTouches[0];
         this._private__activeTouchId = touch.identifier;
         this._private__lastTouchEventTimeStamp = eventTimeStamp(downEvent);
-        var rootElement = this._private__target.ownerDocument.documentElement;
+        const rootElement = this._private__target.ownerDocument.documentElement;
         this._private__cancelTap = false;
         this._private__touchMoveExceededManhattanDistance = false;
         this._private__preventTouchDragProcess = false;
@@ -8251,30 +8190,30 @@ var MouseEventHandler = /** @class */ (function () {
             this._private__unsubscribeRootTouchEvents = null;
         }
         {
-            var boundTouchMoveWithDownHandler_1 = this._private__touchMoveHandler.bind(this);
-            var boundTouchEndHandler_1 = this._private__touchEndHandler.bind(this);
-            this._private__unsubscribeRootTouchEvents = function () {
-                rootElement.removeEventListener('touchmove', boundTouchMoveWithDownHandler_1);
-                rootElement.removeEventListener('touchend', boundTouchEndHandler_1);
+            const boundTouchMoveWithDownHandler = this._private__touchMoveHandler.bind(this);
+            const boundTouchEndHandler = this._private__touchEndHandler.bind(this);
+            this._private__unsubscribeRootTouchEvents = () => {
+                rootElement.removeEventListener('touchmove', boundTouchMoveWithDownHandler);
+                rootElement.removeEventListener('touchend', boundTouchEndHandler);
             };
-            rootElement.addEventListener('touchmove', boundTouchMoveWithDownHandler_1, { passive: false });
-            rootElement.addEventListener('touchend', boundTouchEndHandler_1, { passive: false });
+            rootElement.addEventListener('touchmove', boundTouchMoveWithDownHandler, { passive: false });
+            rootElement.addEventListener('touchend', boundTouchEndHandler, { passive: false });
             this._private__clearLongTapTimeout();
-            this._private__longTapTimeoutId = setTimeout(this._private__longTapHandler.bind(this, downEvent), 240 /* LongTap */);
+            this._private__longTapTimeoutId = setTimeout(this._private__longTapHandler.bind(this, downEvent), 240 /* Delay.LongTap */);
         }
-        var compatEvent = this._private__makeCompatEvent(downEvent, touch);
+        const compatEvent = this._private__makeCompatEvent(downEvent, touch);
         this._private__processTouchEvent(compatEvent, this._private__handler._internal_touchStartEvent);
         if (!this._private__tapTimeoutId) {
             this._private__tapCount = 0;
-            this._private__tapTimeoutId = setTimeout(this._private__resetTapTimeout.bind(this), 500 /* ResetClick */);
+            this._private__tapTimeoutId = setTimeout(this._private__resetTapTimeout.bind(this), 500 /* Delay.ResetClick */);
             this._private__tapPosition = getPosition(touch);
         }
-    };
-    MouseEventHandler.prototype._private__mouseDownHandler = function (downEvent) {
-        if (downEvent.button !== 0 /* Left */) {
+    }
+    _private__mouseDownHandler(downEvent) {
+        if (downEvent.button !== 0 /* MouseEventButton.Left */) {
             return;
         }
-        var rootElement = this._private__target.ownerDocument.documentElement;
+        const rootElement = this._private__target.ownerDocument.documentElement;
         if (isFF()) {
             rootElement.addEventListener('mouseleave', this._private__onFirefoxOutsideMouseUp);
         }
@@ -8285,55 +8224,57 @@ var MouseEventHandler = /** @class */ (function () {
             this._private__unsubscribeRootMouseEvents = null;
         }
         {
-            var boundMouseMoveWithDownHandler_1 = this._private__mouseMoveWithDownHandler.bind(this);
-            var boundMouseUpHandler_1 = this._private__mouseUpHandler.bind(this);
-            this._private__unsubscribeRootMouseEvents = function () {
-                rootElement.removeEventListener('mousemove', boundMouseMoveWithDownHandler_1);
-                rootElement.removeEventListener('mouseup', boundMouseUpHandler_1);
+            const boundMouseMoveWithDownHandler = this._private__mouseMoveWithDownHandler.bind(this);
+            const boundMouseUpHandler = this._private__mouseUpHandler.bind(this);
+            this._private__unsubscribeRootMouseEvents = () => {
+                rootElement.removeEventListener('mousemove', boundMouseMoveWithDownHandler);
+                rootElement.removeEventListener('mouseup', boundMouseUpHandler);
             };
-            rootElement.addEventListener('mousemove', boundMouseMoveWithDownHandler_1);
-            rootElement.addEventListener('mouseup', boundMouseUpHandler_1);
+            rootElement.addEventListener('mousemove', boundMouseMoveWithDownHandler);
+            rootElement.addEventListener('mouseup', boundMouseUpHandler);
         }
         this._private__mousePressed = true;
         if (this._private__firesTouchEvents(downEvent)) {
             return;
         }
-        var compatEvent = this._private__makeCompatEvent(downEvent);
+        const compatEvent = this._private__makeCompatEvent(downEvent);
         this._private__processMouseEvent(compatEvent, this._private__handler._internal_mouseDownEvent);
         if (!this._private__clickTimeoutId) {
             this._private__clickCount = 0;
-            this._private__clickTimeoutId = setTimeout(this._private__resetClickTimeout.bind(this), 500 /* ResetClick */);
+            this._private__clickTimeoutId = setTimeout(this._private__resetClickTimeout.bind(this), 500 /* Delay.ResetClick */);
             this._private__clickPosition = getPosition(downEvent);
         }
-    };
-    MouseEventHandler.prototype._private__init = function () {
-        var _this = this;
+    }
+    _private__init() {
         this._private__target.addEventListener('mouseenter', this._private__mouseEnterHandler.bind(this));
         // Do not show context menu when something went wrong
         this._private__target.addEventListener('touchcancel', this._private__clearLongTapTimeout.bind(this));
         {
-            var doc_1 = this._private__target.ownerDocument;
-            var outsideHandler_1 = function (event) {
-                if (!_this._private__handler._internal_mouseDownOutsideEvent) {
+            const doc = this._private__target.ownerDocument;
+            const outsideHandler = (event) => {
+                if (!this._private__handler._internal_mouseDownOutsideEvent) {
                     return;
                 }
-                if (event.target && _this._private__target.contains(event.target)) {
+                if (event.composed && this._private__target.contains(event.composedPath()[0])) {
                     return;
                 }
-                _this._private__handler._internal_mouseDownOutsideEvent();
+                if (event.target && this._private__target.contains(event.target)) {
+                    return;
+                }
+                this._private__handler._internal_mouseDownOutsideEvent();
             };
-            this._private__unsubscribeOutsideTouchEvents = function () {
-                doc_1.removeEventListener('touchstart', outsideHandler_1);
+            this._private__unsubscribeOutsideTouchEvents = () => {
+                doc.removeEventListener('touchstart', outsideHandler);
             };
-            this._private__unsubscribeOutsideMouseEvents = function () {
-                doc_1.removeEventListener('mousedown', outsideHandler_1);
+            this._private__unsubscribeOutsideMouseEvents = () => {
+                doc.removeEventListener('mousedown', outsideHandler);
             };
-            doc_1.addEventListener('mousedown', outsideHandler_1);
-            doc_1.addEventListener('touchstart', outsideHandler_1, { passive: true });
+            doc.addEventListener('mousedown', outsideHandler);
+            doc.addEventListener('touchstart', outsideHandler, { passive: true });
         }
         if (isIOS()) {
-            this._private__unsubscribeMobileSafariEvents = function () {
-                _this._private__target.removeEventListener('dblclick', _this._private__onMobileSafariDoubleClick);
+            this._private__unsubscribeMobileSafariEvents = () => {
+                this._private__target.removeEventListener('dblclick', this._private__onMobileSafariDoubleClick);
             };
             this._private__target.addEventListener('dblclick', this._private__onMobileSafariDoubleClick);
         }
@@ -8347,32 +8288,31 @@ var MouseEventHandler = /** @class */ (function () {
         // it treats a touchstart and the following touchmove events as cancelable=false,
         // so we can't prevent them (as soon we subscribe on touchmove inside touchstart's handler).
         // And we'll get scroll of the page along with chart's one instead of only chart's scroll.
-        this._private__target.addEventListener('touchmove', function () { }, { passive: false });
-    };
-    MouseEventHandler.prototype._private__initPinch = function () {
-        var _this = this;
+        this._private__target.addEventListener('touchmove', () => { }, { passive: false });
+    }
+    _private__initPinch() {
         if (this._private__handler._internal_pinchStartEvent === undefined &&
             this._private__handler._internal_pinchEvent === undefined &&
             this._private__handler._internal_pinchEndEvent === undefined) {
             return;
         }
-        this._private__target.addEventListener('touchstart', function (event) { return _this._private__checkPinchState(event.touches); }, { passive: true });
-        this._private__target.addEventListener('touchmove', function (event) {
-            if (event.touches.length !== 2 || _this._private__startPinchMiddlePoint === null) {
+        this._private__target.addEventListener('touchstart', (event) => this._private__checkPinchState(event.touches), { passive: true });
+        this._private__target.addEventListener('touchmove', (event) => {
+            if (event.touches.length !== 2 || this._private__startPinchMiddlePoint === null) {
                 return;
             }
-            if (_this._private__handler._internal_pinchEvent !== undefined) {
-                var currentDistance = getDistance(event.touches[0], event.touches[1]);
-                var scale = currentDistance / _this._private__startPinchDistance;
-                _this._private__handler._internal_pinchEvent(_this._private__startPinchMiddlePoint, scale);
+            if (this._private__handler._internal_pinchEvent !== undefined) {
+                const currentDistance = getDistance(event.touches[0], event.touches[1]);
+                const scale = currentDistance / this._private__startPinchDistance;
+                this._private__handler._internal_pinchEvent(this._private__startPinchMiddlePoint, scale);
                 preventDefault(event);
             }
         }, { passive: false });
-        this._private__target.addEventListener('touchend', function (event) {
-            _this._private__checkPinchState(event.touches);
+        this._private__target.addEventListener('touchend', (event) => {
+            this._private__checkPinchState(event.touches);
         });
-    };
-    MouseEventHandler.prototype._private__checkPinchState = function (touches) {
+    }
+    _private__checkPinchState(touches) {
         if (touches.length === 1) {
             this._private__pinchPrevented = false;
         }
@@ -8382,9 +8322,9 @@ var MouseEventHandler = /** @class */ (function () {
         else {
             this._private__startPinch(touches);
         }
-    };
-    MouseEventHandler.prototype._private__startPinch = function (touches) {
-        var box = getBoundingClientRect(this._private__target);
+    }
+    _private__startPinch(touches) {
+        const box = getBoundingClientRect(this._private__target);
         this._private__startPinchMiddlePoint = {
             _internal_x: ((touches[0].clientX - box.left) + (touches[1].clientX - box.left)) / 2,
             _internal_y: ((touches[0].clientY - box.top) + (touches[1].clientY - box.top)) / 2,
@@ -8394,8 +8334,8 @@ var MouseEventHandler = /** @class */ (function () {
             this._private__handler._internal_pinchStartEvent();
         }
         this._private__clearLongTapTimeout();
-    };
-    MouseEventHandler.prototype._private__stopPinch = function () {
+    }
+    _private__stopPinch() {
         if (this._private__startPinchMiddlePoint === null) {
             return;
         }
@@ -8403,8 +8343,8 @@ var MouseEventHandler = /** @class */ (function () {
         if (this._private__handler._internal_pinchEndEvent !== undefined) {
             this._private__handler._internal_pinchEndEvent();
         }
-    };
-    MouseEventHandler.prototype._private__mouseLeaveHandler = function (event) {
+    }
+    _private__mouseLeaveHandler(event) {
         if (this._private__unsubscribeMousemove) {
             this._private__unsubscribeMousemove();
         }
@@ -8416,44 +8356,44 @@ var MouseEventHandler = /** @class */ (function () {
             // just ignore this event if there was no mouse move or mouse enter events
             return;
         }
-        var compatEvent = this._private__makeCompatEvent(event);
+        const compatEvent = this._private__makeCompatEvent(event);
         this._private__processMouseEvent(compatEvent, this._private__handler._internal_mouseLeaveEvent);
         // accept all mouse leave events if it's not an iOS device
         this._private__acceptMouseLeave = !isIOS();
-    };
-    MouseEventHandler.prototype._private__longTapHandler = function (event) {
-        var touch = touchWithId(event.touches, ensureNotNull(this._private__activeTouchId));
+    }
+    _private__longTapHandler(event) {
+        const touch = touchWithId(event.touches, ensureNotNull(this._private__activeTouchId));
         if (touch === null) {
             return;
         }
-        var compatEvent = this._private__makeCompatEvent(event, touch);
+        const compatEvent = this._private__makeCompatEvent(event, touch);
         this._private__processTouchEvent(compatEvent, this._private__handler._internal_longTapEvent);
         this._private__cancelTap = true;
         // long tap is active until touchend event with 0 touches occurred
         this._private__longTapActive = true;
-    };
-    MouseEventHandler.prototype._private__firesTouchEvents = function (e) {
+    }
+    _private__firesTouchEvents(e) {
         if (e.sourceCapabilities && e.sourceCapabilities.firesTouchEvents !== undefined) {
             return e.sourceCapabilities.firesTouchEvents;
         }
-        return eventTimeStamp(e) < this._private__lastTouchEventTimeStamp + 500 /* PreventFiresTouchEvents */;
-    };
-    MouseEventHandler.prototype._private__processTouchEvent = function (event, callback) {
+        return eventTimeStamp(e) < this._private__lastTouchEventTimeStamp + 500 /* Delay.PreventFiresTouchEvents */;
+    }
+    _private__processTouchEvent(event, callback) {
         if (callback) {
             callback.call(this._private__handler, event);
         }
-    };
-    MouseEventHandler.prototype._private__processMouseEvent = function (event, callback) {
+    }
+    _private__processMouseEvent(event, callback) {
         if (!callback) {
             return;
         }
         callback.call(this._private__handler, event);
-    };
-    MouseEventHandler.prototype._private__makeCompatEvent = function (event, touch) {
+    }
+    _private__makeCompatEvent(event, touch) {
         // TouchEvent has no clientX/Y coordinates:
         // We have to use the last Touch instead
-        var eventLike = touch || event;
-        var box = this._private__target.getBoundingClientRect() || { left: 0, top: 0 };
+        const eventLike = touch || event;
+        const box = this._private__target.getBoundingClientRect() || { left: 0, top: 0 };
         return {
             _internal_clientX: eventLike.clientX,
             _internal_clientY: eventLike.clientY,
@@ -8471,22 +8411,21 @@ var MouseEventHandler = /** @class */ (function () {
             _internal_srcType: event.type,
             _internal_target: eventLike.target,
             _internal_view: event.view,
-            _internal_preventDefault: function () {
+            _internal_preventDefault: () => {
                 if (event.type !== 'touchstart') {
                     // touchstart is passive and cannot be prevented
                     preventDefault(event);
                 }
             },
         };
-    };
-    return MouseEventHandler;
-}());
+    }
+}
 function getBoundingClientRect(element) {
     return element.getBoundingClientRect() || { left: 0, top: 0 };
 }
 function getDistance(p1, p2) {
-    var xDiff = p1.clientX - p2.clientX;
-    var yDiff = p1.clientY - p2.clientY;
+    const xDiff = p1.clientX - p2.clientX;
+    const yDiff = p1.clientY - p2.clientY;
     return Math.sqrt(xDiff * xDiff + yDiff * yDiff);
 }
 function preventDefault(event) {
@@ -8505,7 +8444,7 @@ function eventTimeStamp(e) {
     return e.timeStamp || performance.now();
 }
 function touchWithId(touches, id) {
-    for (var i = 0; i < touches.length; ++i) {
+    for (let i = 0; i < touches.length; ++i) {
         if (touches[i].identifier === id) {
             return touches[i];
         }
@@ -8513,102 +8452,29 @@ function touchWithId(touches, id) {
     return null;
 }
 
-var MAX_COUNT = 200;
-var LabelsImageCache = /** @class */ (function () {
-    function LabelsImageCache(fontSize, color, fontFamily, fontStyle) {
-        this._private__textWidthCache = new TextWidthCache(MAX_COUNT);
-        this._private__fontSize = 0;
-        this._private__color = '';
-        this._private__font = '';
-        this._private__keys = [];
-        this._private__hash = new Map();
-        this._private__fontSize = fontSize;
-        this._private__color = color;
-        this._private__font = makeFont(fontSize, fontFamily, fontStyle);
-    }
-    LabelsImageCache.prototype._internal_destroy = function () {
-        this._private__textWidthCache._internal_reset();
-        this._private__keys = [];
-        this._private__hash.clear();
-    };
-    LabelsImageCache.prototype._internal_paintTo = function (ctx, text, x, y, align) {
-        var label = this._private__getLabelImage(ctx, text);
-        if (align !== 'left') {
-            var pixelRatio = getCanvasDevicePixelRatio(ctx.canvas);
-            x -= Math.floor(label._internal_textWidth * pixelRatio);
-        }
-        y -= Math.floor(label._internal_height / 2);
-        ctx.drawImage(label._internal_canvas, x, y, label._internal_width, label._internal_height);
-    };
-    LabelsImageCache.prototype._private__getLabelImage = function (ctx, text) {
-        var _this = this;
-        var item;
-        if (this._private__hash.has(text)) {
-            // Cache hit!
-            item = ensureDefined(this._private__hash.get(text));
-        }
-        else {
-            if (this._private__keys.length >= MAX_COUNT) {
-                var key = ensureDefined(this._private__keys.shift());
-                this._private__hash.delete(key);
-            }
-            var pixelRatio = getCanvasDevicePixelRatio(ctx.canvas);
-            var margin_1 = Math.ceil(this._private__fontSize / 4.5);
-            var baselineOffset_1 = Math.round(this._private__fontSize / 10);
-            var textWidth = Math.ceil(this._private__textWidthCache._internal_measureText(ctx, text));
-            var width = ceiledEven(Math.round(textWidth + margin_1 * 2));
-            var height_1 = ceiledEven(this._private__fontSize + margin_1 * 2);
-            var canvas = createPreconfiguredCanvas(document, new Size(width, height_1));
-            // Allocate new
-            item = {
-                _internal_text: text,
-                _internal_textWidth: Math.round(Math.max(1, textWidth)),
-                _internal_width: Math.ceil(width * pixelRatio),
-                _internal_height: Math.ceil(height_1 * pixelRatio),
-                _internal_canvas: canvas,
-            };
-            if (textWidth !== 0) {
-                this._private__keys.push(item._internal_text);
-                this._private__hash.set(item._internal_text, item);
-            }
-            ctx = getContext2D(item._internal_canvas);
-            drawScaled(ctx, pixelRatio, function () {
-                ctx.font = _this._private__font;
-                ctx.fillStyle = _this._private__color;
-                ctx.fillText(text, 0, height_1 - margin_1 - baselineOffset_1);
-            });
-        }
-        return item;
-    };
-    return LabelsImageCache;
-}());
-
-var PriceAxisWidget = /** @class */ (function () {
-    function PriceAxisWidget(pane, options, rendererOptionsProvider, side) {
-        var _this = this;
+class PriceAxisWidget {
+    constructor(pane, options, rendererOptionsProvider, side) {
         this._private__priceScale = null;
         this._private__size = null;
         this._private__mousedown = false;
-        this._private__widthCache = new TextWidthCache(50);
-        this._private__tickMarksCache = new LabelsImageCache(11, '#000');
-        this._private__color = null;
+        this._private__widthCache = new TextWidthCache(200);
         this._private__font = null;
         this._private__prevOptimalWidth = 0;
         this._private__isSettingSize = false;
-        this._private__canvasConfiguredHandler = function () {
-            _this._private__recreateTickMarksCache(_this._private__rendererOptionsProvider._internal_options());
-            if (!_this._private__isSettingSize) {
-                _this._private__pane._internal_chart()._internal_model()._internal_lightUpdate();
+        this._private__canvasConfiguredHandler = () => {
+            if (!this._private__isSettingSize) {
+                this._private__pane._internal_chart()._internal_model()._internal_lightUpdate();
             }
         };
-        this._private__topCanvasConfiguredHandler = function () {
-            if (_this._private__isSettingSize) {
+        this._private__topCanvasConfiguredHandler = () => {
+            if (this._private__isSettingSize) {
                 return;
             }
-            _this._private__pane._internal_chart()._internal_model()._internal_lightUpdate();
+            this._private__pane._internal_chart()._internal_model()._internal_lightUpdate();
         };
         this._private__pane = pane;
         this._private__options = options;
+        this._private__layoutOptions = options.layout;
         this._private__rendererOptionsProvider = rendererOptionsProvider;
         this._private__isLeft = side === 'left';
         this._private__cell = document.createElement('div');
@@ -8619,19 +8485,19 @@ var PriceAxisWidget = /** @class */ (function () {
         this._private__cell.style.position = 'relative';
         this._private__canvasBinding = createBoundCanvas(this._private__cell, new Size(16, 16));
         this._private__canvasBinding.subscribeCanvasConfigured(this._private__canvasConfiguredHandler);
-        var canvas = this._private__canvasBinding.canvas;
+        const canvas = this._private__canvasBinding.canvas;
         canvas.style.position = 'absolute';
         canvas.style.zIndex = '1';
         canvas.style.left = '0';
         canvas.style.top = '0';
         this._private__topCanvasBinding = createBoundCanvas(this._private__cell, new Size(16, 16));
         this._private__topCanvasBinding.subscribeCanvasConfigured(this._private__topCanvasConfiguredHandler);
-        var topCanvas = this._private__topCanvasBinding.canvas;
+        const topCanvas = this._private__topCanvasBinding.canvas;
         topCanvas.style.position = 'absolute';
         topCanvas.style.zIndex = '2';
         topCanvas.style.left = '0';
         topCanvas.style.top = '0';
-        var handler = {
+        const handler = {
             _internal_mouseDownEvent: this._private__mouseDownEvent.bind(this),
             _internal_touchStartEvent: this._private__mouseDownEvent.bind(this),
             _internal_pressedMouseMoveEvent: this._private__pressedMouseMoveEvent.bind(this),
@@ -8645,11 +8511,11 @@ var PriceAxisWidget = /** @class */ (function () {
             _internal_mouseLeaveEvent: this._private__mouseLeaveEvent.bind(this),
         };
         this._private__mouseEventHandler = new MouseEventHandler(this._private__topCanvasBinding.canvas, handler, {
-            _internal_treatVertTouchDragAsPageScroll: function () { return false; },
-            _internal_treatHorzTouchDragAsPageScroll: function () { return true; },
+            _internal_treatVertTouchDragAsPageScroll: () => false,
+            _internal_treatHorzTouchDragAsPageScroll: () => true,
         });
     }
-    PriceAxisWidget.prototype._internal_destroy = function () {
+    _internal_destroy() {
         this._private__mouseEventHandler._internal_destroy();
         this._private__topCanvasBinding.unsubscribeCanvasConfigured(this._private__topCanvasConfiguredHandler);
         this._private__topCanvasBinding.destroy();
@@ -8659,73 +8525,59 @@ var PriceAxisWidget = /** @class */ (function () {
             this._private__priceScale._internal_onMarksChanged()._internal_unsubscribeAll(this);
         }
         this._private__priceScale = null;
-        this._private__tickMarksCache._internal_destroy();
-    };
-    PriceAxisWidget.prototype._internal_getElement = function () {
+    }
+    _internal_getElement() {
         return this._private__cell;
-    };
-    PriceAxisWidget.prototype._internal_lineColor = function () {
-        return ensureNotNull(this._private__priceScale)._internal_options().borderColor;
-    };
-    PriceAxisWidget.prototype._internal_textColor = function () {
-        return this._private__options.textColor;
-    };
-    PriceAxisWidget.prototype._internal_fontSize = function () {
-        return this._private__options.fontSize;
-    };
-    PriceAxisWidget.prototype._internal_baseFont = function () {
-        return makeFont(this._internal_fontSize(), this._private__options.fontFamily);
-    };
-    PriceAxisWidget.prototype._internal_rendererOptions = function () {
-        var options = this._private__rendererOptionsProvider._internal_options();
-        var isColorChanged = this._private__color !== options._internal_color;
-        var isFontChanged = this._private__font !== options._internal_font;
-        if (isColorChanged || isFontChanged) {
-            this._private__recreateTickMarksCache(options);
-            this._private__color = options._internal_color;
-        }
+    }
+    _internal_fontSize() {
+        return this._private__layoutOptions.fontSize;
+    }
+    _internal_rendererOptions() {
+        const options = this._private__rendererOptionsProvider._internal_options();
+        const isFontChanged = this._private__font !== options._internal_font;
         if (isFontChanged) {
             this._private__widthCache._internal_reset();
             this._private__font = options._internal_font;
         }
         return options;
-    };
-    PriceAxisWidget.prototype._internal_optimalWidth = function () {
+    }
+    _internal_optimalWidth() {
         if (this._private__priceScale === null) {
             return 0;
         }
-        var tickMarkMaxWidth = 0;
-        var rendererOptions = this._internal_rendererOptions();
-        var ctx = getContext2D(this._private__canvasBinding.canvas);
-        var tickMarks = this._private__priceScale._internal_marks();
-        ctx.font = this._internal_baseFont();
+        let tickMarkMaxWidth = 0;
+        const rendererOptions = this._internal_rendererOptions();
+        const ctx = getContext2D(this._private__canvasBinding.canvas);
+        const tickMarks = this._private__priceScale._internal_marks();
+        ctx.font = this._private__baseFont();
         if (tickMarks.length > 0) {
             tickMarkMaxWidth = Math.max(this._private__widthCache._internal_measureText(ctx, tickMarks[0]._internal_label), this._private__widthCache._internal_measureText(ctx, tickMarks[tickMarks.length - 1]._internal_label));
         }
-        var views = this._private__backLabels();
-        for (var j = views.length; j--;) {
-            var width = this._private__widthCache._internal_measureText(ctx, views[j]._internal_text());
+        const views = this._private__backLabels();
+        for (let j = views.length; j--;) {
+            const width = this._private__widthCache._internal_measureText(ctx, views[j]._internal_text());
             if (width > tickMarkMaxWidth) {
                 tickMarkMaxWidth = width;
             }
         }
-        var firstValue = this._private__priceScale._internal_firstValue();
+        const firstValue = this._private__priceScale._internal_firstValue();
         if (firstValue !== null && this._private__size !== null) {
-            var topValue = this._private__priceScale._internal_coordinateToPrice(1, firstValue);
-            var bottomValue = this._private__priceScale._internal_coordinateToPrice(this._private__size._internal_h - 2, firstValue);
+            const topValue = this._private__priceScale._internal_coordinateToPrice(1, firstValue);
+            const bottomValue = this._private__priceScale._internal_coordinateToPrice(this._private__size._internal_h - 2, firstValue);
             tickMarkMaxWidth = Math.max(tickMarkMaxWidth, this._private__widthCache._internal_measureText(ctx, this._private__priceScale._internal_formatPrice(Math.floor(Math.min(topValue, bottomValue)) + 0.11111111111111, firstValue)), this._private__widthCache._internal_measureText(ctx, this._private__priceScale._internal_formatPrice(Math.ceil(Math.max(topValue, bottomValue)) - 0.11111111111111, firstValue)));
         }
-        var resultTickMarksMaxWidth = tickMarkMaxWidth || 34 /* DefaultOptimalWidth */;
-        var res = Math.ceil(rendererOptions._internal_borderSize +
+        const resultTickMarksMaxWidth = tickMarkMaxWidth || 34 /* Constants.DefaultOptimalWidth */;
+        let res = Math.ceil(rendererOptions._internal_borderSize +
             rendererOptions._internal_tickLength +
             rendererOptions._internal_paddingInner +
             rendererOptions._internal_paddingOuter +
+            5 /* Constants.LabelOffset */ +
             resultTickMarksMaxWidth);
-        // make it even
+        // make it even, remove this after migration to perfect fancy canvas
         res += res % 2;
         return res;
-    };
-    PriceAxisWidget.prototype._internal_setSize = function (size) {
+    }
+    _internal_setSize(size) {
         if (size._internal_w < 0 || size._internal_h < 0) {
             throw new Error('Try to set invalid size to PriceAxisWidget ' + JSON.stringify(size));
         }
@@ -8740,11 +8592,11 @@ var PriceAxisWidget = /** @class */ (function () {
             this._private__cell.style.height = size._internal_h + 'px';
             this._private__cell.style.minWidth = size._internal_w + 'px'; // for right calculate position of .pane-legend
         }
-    };
-    PriceAxisWidget.prototype._internal_getWidth = function () {
+    }
+    _internal_getWidth() {
         return ensureNotNull(this._private__size)._internal_w;
-    };
-    PriceAxisWidget.prototype._internal_setPriceScale = function (priceScale) {
+    }
+    _internal_setPriceScale(priceScale) {
         if (this._private__priceScale === priceScale) {
             return;
         }
@@ -8753,108 +8605,107 @@ var PriceAxisWidget = /** @class */ (function () {
         }
         this._private__priceScale = priceScale;
         priceScale._internal_onMarksChanged()._internal_subscribe(this._private__onMarksChanged.bind(this), this);
-    };
-    PriceAxisWidget.prototype._internal_priceScale = function () {
+    }
+    _internal_priceScale() {
         return this._private__priceScale;
-    };
-    PriceAxisWidget.prototype._internal_reset = function () {
-        var pane = this._private__pane._internal_state();
-        var model = this._private__pane._internal_chart()._internal_model();
+    }
+    _internal_reset() {
+        const pane = this._private__pane._internal_state();
+        const model = this._private__pane._internal_chart()._internal_model();
         model._internal_resetPriceScale(pane, ensureNotNull(this._internal_priceScale()));
-    };
-    PriceAxisWidget.prototype._internal_paint = function (type) {
+    }
+    _internal_paint(type) {
         if (this._private__size === null) {
             return;
         }
-        if (type !== 1 /* Cursor */) {
-            var ctx = getContext2D(this._private__canvasBinding.canvas);
+        if (type !== 1 /* InvalidationLevel.Cursor */) {
+            const ctx = getContext2D(this._private__canvasBinding.canvas);
             this._private__alignLabels();
             this._private__drawBackground(ctx, this._private__canvasBinding.pixelRatio);
             this._private__drawBorder(ctx, this._private__canvasBinding.pixelRatio);
             this._private__drawTickMarks(ctx, this._private__canvasBinding.pixelRatio);
             this._private__drawBackLabels(ctx, this._private__canvasBinding.pixelRatio);
         }
-        var topCtx = getContext2D(this._private__topCanvasBinding.canvas);
-        var width = this._private__size._internal_w;
-        var height = this._private__size._internal_h;
-        drawScaled(topCtx, this._private__topCanvasBinding.pixelRatio, function () {
+        const topCtx = getContext2D(this._private__topCanvasBinding.canvas);
+        const width = this._private__size._internal_w;
+        const height = this._private__size._internal_h;
+        drawScaled(topCtx, this._private__topCanvasBinding.pixelRatio, () => {
             topCtx.clearRect(0, 0, width, height);
         });
         this._private__drawCrosshairLabel(topCtx, this._private__topCanvasBinding.pixelRatio);
-    };
-    PriceAxisWidget.prototype._internal_getImage = function () {
+    }
+    _internal_getImage() {
         return this._private__canvasBinding.canvas;
-    };
-    PriceAxisWidget.prototype._internal_update = function () {
+    }
+    _internal_update() {
         var _a;
         // this call has side-effect - it regenerates marks on the price scale
         (_a = this._private__priceScale) === null || _a === void 0 ? void 0 : _a._internal_marks();
-    };
-    PriceAxisWidget.prototype._private__mouseDownEvent = function (e) {
-        if (this._private__priceScale === null || this._private__priceScale._internal_isEmpty() || !this._private__pane._internal_chart()._internal_options().handleScale.axisPressedMouseMove.price) {
+    }
+    _private__mouseDownEvent(e) {
+        if (this._private__priceScale === null || this._private__priceScale._internal_isEmpty() || !this._private__options.handleScale.axisPressedMouseMove.price) {
             return;
         }
-        var model = this._private__pane._internal_chart()._internal_model();
-        var pane = this._private__pane._internal_state();
+        const model = this._private__pane._internal_chart()._internal_model();
+        const pane = this._private__pane._internal_state();
         this._private__mousedown = true;
         model._internal_startScalePrice(pane, this._private__priceScale, e._internal_localY);
-    };
-    PriceAxisWidget.prototype._private__pressedMouseMoveEvent = function (e) {
-        if (this._private__priceScale === null || !this._private__pane._internal_chart()._internal_options().handleScale.axisPressedMouseMove.price) {
+    }
+    _private__pressedMouseMoveEvent(e) {
+        if (this._private__priceScale === null || !this._private__options.handleScale.axisPressedMouseMove.price) {
             return;
         }
-        var model = this._private__pane._internal_chart()._internal_model();
-        var pane = this._private__pane._internal_state();
-        var priceScale = this._private__priceScale;
+        const model = this._private__pane._internal_chart()._internal_model();
+        const pane = this._private__pane._internal_state();
+        const priceScale = this._private__priceScale;
         model._internal_scalePriceTo(pane, priceScale, e._internal_localY);
-    };
-    PriceAxisWidget.prototype._private__mouseDownOutsideEvent = function () {
-        if (this._private__priceScale === null || !this._private__pane._internal_chart()._internal_options().handleScale.axisPressedMouseMove.price) {
+    }
+    _private__mouseDownOutsideEvent() {
+        if (this._private__priceScale === null || !this._private__options.handleScale.axisPressedMouseMove.price) {
             return;
         }
-        var model = this._private__pane._internal_chart()._internal_model();
-        var pane = this._private__pane._internal_state();
-        var priceScale = this._private__priceScale;
+        const model = this._private__pane._internal_chart()._internal_model();
+        const pane = this._private__pane._internal_state();
+        const priceScale = this._private__priceScale;
         if (this._private__mousedown) {
             this._private__mousedown = false;
             model._internal_endScalePrice(pane, priceScale);
         }
-    };
-    PriceAxisWidget.prototype._private__mouseUpEvent = function (e) {
-        if (this._private__priceScale === null || !this._private__pane._internal_chart()._internal_options().handleScale.axisPressedMouseMove.price) {
+    }
+    _private__mouseUpEvent(e) {
+        if (this._private__priceScale === null || !this._private__options.handleScale.axisPressedMouseMove.price) {
             return;
         }
-        var model = this._private__pane._internal_chart()._internal_model();
-        var pane = this._private__pane._internal_state();
+        const model = this._private__pane._internal_chart()._internal_model();
+        const pane = this._private__pane._internal_state();
         this._private__mousedown = false;
         model._internal_endScalePrice(pane, this._private__priceScale);
-    };
-    PriceAxisWidget.prototype._private__mouseDoubleClickEvent = function (e) {
-        if (this._private__pane._internal_chart()._internal_options().handleScale.axisDoubleClickReset) {
+    }
+    _private__mouseDoubleClickEvent(e) {
+        if (this._private__options.handleScale.axisDoubleClickReset.price) {
             this._internal_reset();
         }
-    };
-    PriceAxisWidget.prototype._private__mouseEnterEvent = function (e) {
+    }
+    _private__mouseEnterEvent(e) {
         if (this._private__priceScale === null) {
             return;
         }
-        var model = this._private__pane._internal_chart()._internal_model();
+        const model = this._private__pane._internal_chart()._internal_model();
         if (model._internal_options().handleScale.axisPressedMouseMove.price && !this._private__priceScale._internal_isPercentage() && !this._private__priceScale._internal_isIndexedTo100()) {
-            this._private__setCursor(1 /* NsResize */);
+            this._private__setCursor(1 /* CursorType.NsResize */);
         }
-    };
-    PriceAxisWidget.prototype._private__mouseLeaveEvent = function (e) {
-        this._private__setCursor(0 /* Default */);
-    };
-    PriceAxisWidget.prototype._private__backLabels = function () {
-        var _this = this;
-        var res = [];
-        var priceScale = (this._private__priceScale === null) ? undefined : this._private__priceScale;
-        var addViewsForSources = function (sources) {
-            for (var i = 0; i < sources.length; ++i) {
-                var source = sources[i];
-                var views = source._internal_priceAxisViews(_this._private__pane._internal_state(), priceScale);
-                for (var j = 0; j < views.length; j++) {
+    }
+    _private__mouseLeaveEvent(e) {
+        this._private__setCursor(0 /* CursorType.Default */);
+    }
+    _private__backLabels() {
+        const res = [];
+        const priceScale = (this._private__priceScale === null) ? undefined : this._private__priceScale;
+        const addViewsForSources = (sources) => {
+            for (let i = 0; i < sources.length; ++i) {
+                const source = sources[i];
+                const views = source._internal_priceAxisViews(this._private__pane._internal_state(), priceScale);
+                for (let j = 0; j < views.length; j++) {
                     res.push(views[j]);
                 }
             }
@@ -8863,18 +8714,17 @@ var PriceAxisWidget = /** @class */ (function () {
         // crosshair individually
         addViewsForSources(this._private__pane._internal_state()._internal_orderedSources());
         return res;
-    };
-    PriceAxisWidget.prototype._private__drawBackground = function (ctx, pixelRatio) {
-        var _this = this;
+    }
+    _private__drawBackground(ctx, pixelRatio) {
         if (this._private__size === null) {
             return;
         }
-        var width = this._private__size._internal_w;
-        var height = this._private__size._internal_h;
-        drawScaled(ctx, pixelRatio, function () {
-            var model = _this._private__pane._internal_state()._internal_model();
-            var topColor = model._internal_backgroundTopColor();
-            var bottomColor = model._internal_backgroundBottomColor();
+        const width = this._private__size._internal_w;
+        const height = this._private__size._internal_h;
+        drawScaled(ctx, pixelRatio, () => {
+            const model = this._private__pane._internal_state()._internal_model();
+            const topColor = model._internal_backgroundTopColor();
+            const bottomColor = model._internal_backgroundBottomColor();
             if (topColor === bottomColor) {
                 clearRect(ctx, 0, 0, width, height, topColor);
             }
@@ -8882,15 +8732,15 @@ var PriceAxisWidget = /** @class */ (function () {
                 clearRectWithGradient(ctx, 0, 0, width, height, topColor, bottomColor);
             }
         });
-    };
-    PriceAxisWidget.prototype._private__drawBorder = function (ctx, pixelRatio) {
+    }
+    _private__drawBorder(ctx, pixelRatio) {
         if (this._private__size === null || this._private__priceScale === null || !this._private__priceScale._internal_options().borderVisible) {
             return;
         }
         ctx.save();
-        ctx.fillStyle = this._internal_lineColor();
-        var borderSize = Math.max(1, Math.floor(this._internal_rendererOptions()._internal_borderSize * pixelRatio));
-        var left;
+        ctx.fillStyle = this._private__priceScale._internal_options().borderColor;
+        const borderSize = Math.max(1, Math.floor(this._internal_rendererOptions()._internal_borderSize * pixelRatio));
+        let left;
         if (this._private__isLeft) {
             left = Math.floor(this._private__size._internal_w * pixelRatio) - borderSize;
         }
@@ -8899,70 +8749,74 @@ var PriceAxisWidget = /** @class */ (function () {
         }
         ctx.fillRect(left, 0, borderSize, Math.ceil(this._private__size._internal_h * pixelRatio));
         ctx.restore();
-    };
-    PriceAxisWidget.prototype._private__drawTickMarks = function (ctx, pixelRatio) {
+    }
+    _private__drawTickMarks(ctx, pixelRatio) {
+        var _a;
         if (this._private__size === null || this._private__priceScale === null) {
             return;
         }
-        var tickMarks = this._private__priceScale._internal_marks();
+        const tickMarks = this._private__priceScale._internal_marks();
         ctx.save();
-        ctx.strokeStyle = this._internal_lineColor();
-        ctx.font = this._internal_baseFont();
-        ctx.fillStyle = this._internal_lineColor();
-        var rendererOptions = this._internal_rendererOptions();
-        var drawTicks = this._private__priceScale._internal_options().borderVisible && this._private__priceScale._internal_options().drawTicks;
-        var tickMarkLeftX = this._private__isLeft ?
-            Math.floor((this._private__size._internal_w - rendererOptions._internal_tickLength) * pixelRatio - rendererOptions._internal_borderSize * pixelRatio) :
-            Math.floor(rendererOptions._internal_borderSize * pixelRatio);
-        var textLeftX = this._private__isLeft ?
+        const priceScaleOptions = this._private__priceScale._internal_options();
+        ctx.strokeStyle = priceScaleOptions.borderColor;
+        ctx.font = this._private__baseFont();
+        ctx.fillStyle = priceScaleOptions.borderColor;
+        const rendererOptions = this._internal_rendererOptions();
+        const tickMarkLeftX = this._private__isLeft ?
+            Math.floor((this._private__size._internal_w - rendererOptions._internal_tickLength) * pixelRatio) :
+            0;
+        const textLeftX = this._private__isLeft ?
             Math.round(tickMarkLeftX - rendererOptions._internal_paddingInner * pixelRatio) :
             Math.round(tickMarkLeftX + rendererOptions._internal_tickLength * pixelRatio + rendererOptions._internal_paddingInner * pixelRatio);
-        var textAlign = this._private__isLeft ? 'right' : 'left';
-        var tickHeight = Math.max(1, Math.floor(pixelRatio));
-        var tickOffset = Math.floor(pixelRatio * 0.5);
-        if (drawTicks) {
-            var tickLength = Math.round(rendererOptions._internal_tickLength * pixelRatio);
+        const tickHeight = Math.max(1, Math.floor(pixelRatio));
+        const tickOffset = Math.floor(pixelRatio * 0.5);
+        if (priceScaleOptions.borderVisible && priceScaleOptions.ticksVisible) {
+            const tickLength = Math.round(rendererOptions._internal_tickLength * pixelRatio);
             ctx.beginPath();
-            for (var _i = 0, tickMarks_1 = tickMarks; _i < tickMarks_1.length; _i++) {
-                var tickMark = tickMarks_1[_i];
+            for (const tickMark of tickMarks) {
                 ctx.rect(tickMarkLeftX, Math.round(tickMark._internal_coord * pixelRatio) - tickOffset, tickLength, tickHeight);
             }
             ctx.fill();
         }
-        ctx.fillStyle = this._internal_textColor();
-        for (var _a = 0, tickMarks_2 = tickMarks; _a < tickMarks_2.length; _a++) {
-            var tickMark = tickMarks_2[_a];
-            this._private__tickMarksCache._internal_paintTo(ctx, tickMark._internal_label, textLeftX, Math.round(tickMark._internal_coord * pixelRatio), textAlign);
-        }
+        ctx.fillStyle = (_a = priceScaleOptions.textColor) !== null && _a !== void 0 ? _a : this._private__layoutOptions.textColor;
+        ctx.textAlign = this._private__isLeft ? 'right' : 'left';
+        ctx.textBaseline = 'middle';
+        const yMidCorrections = tickMarks.map((mark) => this._private__widthCache._internal_yMidCorrection(ctx, mark._internal_label));
+        drawScaled(ctx, pixelRatio, () => {
+            for (let i = tickMarks.length; i--;) {
+                const tickMark = tickMarks[i];
+                ctx.fillText(tickMark._internal_label, textLeftX / pixelRatio, tickMark._internal_coord + yMidCorrections[i]);
+            }
+        });
         ctx.restore();
-    };
-    PriceAxisWidget.prototype._private__alignLabels = function () {
+    }
+    _private__alignLabels() {
         if (this._private__size === null || this._private__priceScale === null) {
             return;
         }
-        var center = this._private__size._internal_h / 2;
-        var views = [];
-        var orderedSources = this._private__priceScale._internal_orderedSources().slice(); // Copy of array
-        var pane = this._private__pane;
-        var paneState = pane._internal_state();
-        var rendererOptions = this._internal_rendererOptions();
+        let center = this._private__size._internal_h / 2;
+        const views = [];
+        const orderedSources = this._private__priceScale._internal_orderedSources().slice(); // Copy of array
+        const pane = this._private__pane;
+        const paneState = pane._internal_state();
+        const rendererOptions = this._internal_rendererOptions();
         // if we are default price scale, append labels from no-scale
-        var isDefault = this._private__priceScale === paneState._internal_defaultVisiblePriceScale();
+        const isDefault = this._private__priceScale === paneState._internal_defaultVisiblePriceScale();
         if (isDefault) {
-            this._private__pane._internal_state()._internal_orderedSources().forEach(function (source) {
+            this._private__pane._internal_state()._internal_orderedSources().forEach((source) => {
                 if (paneState._internal_isOverlay(source)) {
                     orderedSources.push(source);
                 }
             });
         }
         // we can use any, but let's use the first source as "center" one
-        var centerSource = this._private__priceScale._internal_dataSources()[0];
-        var priceScale = this._private__priceScale;
-        var updateForSources = function (sources) {
-            sources.forEach(function (source) {
-                var sourceViews = source._internal_priceAxisViews(paneState, priceScale);
+        const centerSource = this._private__priceScale._internal_dataSources()[0];
+        const priceScale = this._private__priceScale;
+        const updateForSources = (sources) => {
+            sources.forEach((source) => {
+                const sourceViews = source._internal_priceAxisViews(paneState, priceScale);
                 // never align selected sources
-                sourceViews.forEach(function (view) {
+                sourceViews.forEach((view) => {
                     view._internal_setFixedCoordinate(null);
                     if (view._internal_isVisible()) {
                         views.push(view);
@@ -8975,105 +8829,117 @@ var PriceAxisWidget = /** @class */ (function () {
         };
         // crosshair individually
         updateForSources(orderedSources);
+        views.forEach((view) => view._internal_setFixedCoordinate(view._internal_coordinate()));
+        const options = this._private__priceScale._internal_options();
+        if (!options.alignLabels) {
+            return;
+        }
+        this._private__fixLabelOverlap(views, rendererOptions, center);
+    }
+    _private__fixLabelOverlap(views, rendererOptions, center) {
+        if (this._private__size === null) {
+            return;
+        }
         // split into two parts
-        var top = views.filter(function (view) { return view._internal_coordinate() <= center; });
-        var bottom = views.filter(function (view) { return view._internal_coordinate() > center; });
+        const top = views.filter((view) => view._internal_coordinate() <= center);
+        const bottom = views.filter((view) => view._internal_coordinate() > center);
         // sort top from center to top
-        top.sort(function (l, r) { return r._internal_coordinate() - l._internal_coordinate(); });
+        top.sort((l, r) => r._internal_coordinate() - l._internal_coordinate());
         // share center label
         if (top.length && bottom.length) {
             bottom.push(top[0]);
         }
-        bottom.sort(function (l, r) { return l._internal_coordinate() - r._internal_coordinate(); });
-        views.forEach(function (view) { return view._internal_setFixedCoordinate(view._internal_coordinate()); });
-        var options = this._private__priceScale._internal_options();
-        if (!options.alignLabels) {
-            return;
+        bottom.sort((l, r) => l._internal_coordinate() - r._internal_coordinate());
+        for (const view of views) {
+            const halfHeight = Math.floor(view._internal_height(rendererOptions) / 2);
+            const coordinate = view._internal_coordinate();
+            if (coordinate > -halfHeight && coordinate < halfHeight) {
+                view._internal_setFixedCoordinate(halfHeight);
+            }
+            if (coordinate > (this._private__size._internal_h - halfHeight) && coordinate < this._private__size._internal_h + halfHeight) {
+                view._internal_setFixedCoordinate(this._private__size._internal_h - halfHeight);
+            }
         }
-        for (var i = 1; i < top.length; i++) {
-            var view = top[i];
-            var prev = top[i - 1];
-            var height = prev._internal_height(rendererOptions, false);
-            var coordinate = view._internal_coordinate();
-            var prevFixedCoordinate = prev._internal_getFixedCoordinate();
+        for (let i = 1; i < top.length; i++) {
+            const view = top[i];
+            const prev = top[i - 1];
+            const height = prev._internal_height(rendererOptions, false);
+            const coordinate = view._internal_coordinate();
+            const prevFixedCoordinate = prev._internal_getFixedCoordinate();
             if (coordinate > prevFixedCoordinate - height) {
                 view._internal_setFixedCoordinate(prevFixedCoordinate - height);
             }
         }
-        for (var j = 1; j < bottom.length; j++) {
-            var view = bottom[j];
-            var prev = bottom[j - 1];
-            var height = prev._internal_height(rendererOptions, true);
-            var coordinate = view._internal_coordinate();
-            var prevFixedCoordinate = prev._internal_getFixedCoordinate();
+        for (let j = 1; j < bottom.length; j++) {
+            const view = bottom[j];
+            const prev = bottom[j - 1];
+            const height = prev._internal_height(rendererOptions, true);
+            const coordinate = view._internal_coordinate();
+            const prevFixedCoordinate = prev._internal_getFixedCoordinate();
             if (coordinate < prevFixedCoordinate + height) {
                 view._internal_setFixedCoordinate(prevFixedCoordinate + height);
             }
         }
-    };
-    PriceAxisWidget.prototype._private__drawBackLabels = function (ctx, pixelRatio) {
-        var _this = this;
+    }
+    _private__drawBackLabels(ctx, pixelRatio) {
         if (this._private__size === null) {
             return;
         }
         ctx.save();
-        var size = this._private__size;
-        var views = this._private__backLabels();
-        var rendererOptions = this._internal_rendererOptions();
-        var align = this._private__isLeft ? 'right' : 'left';
-        views.forEach(function (view) {
+        const size = this._private__size;
+        const views = this._private__backLabels();
+        const rendererOptions = this._internal_rendererOptions();
+        const align = this._private__isLeft ? 'right' : 'left';
+        views.forEach((view) => {
             if (view._internal_isAxisLabelVisible()) {
-                var renderer = view._internal_renderer(ensureNotNull(_this._private__priceScale));
+                const renderer = view._internal_renderer(ensureNotNull(this._private__priceScale));
                 ctx.save();
-                renderer._internal_draw(ctx, rendererOptions, _this._private__widthCache, size._internal_w, align, pixelRatio);
+                renderer._internal_draw(ctx, rendererOptions, this._private__widthCache, size._internal_w, align, pixelRatio);
                 ctx.restore();
             }
         });
         ctx.restore();
-    };
-    PriceAxisWidget.prototype._private__drawCrosshairLabel = function (ctx, pixelRatio) {
-        var _this = this;
+    }
+    _private__drawCrosshairLabel(ctx, pixelRatio) {
         if (this._private__size === null || this._private__priceScale === null) {
             return;
         }
         ctx.save();
-        var size = this._private__size;
-        var model = this._private__pane._internal_chart()._internal_model();
-        var views = []; // array of arrays
-        var pane = this._private__pane._internal_state();
-        var v = model._internal_crosshairSource()._internal_priceAxisViews(pane, this._private__priceScale);
+        const size = this._private__size;
+        const model = this._private__pane._internal_chart()._internal_model();
+        const views = []; // array of arrays
+        const pane = this._private__pane._internal_state();
+        const v = model._internal_crosshairSource()._internal_priceAxisViews(pane, this._private__priceScale);
         if (v.length) {
             views.push(v);
         }
-        var ro = this._internal_rendererOptions();
-        var align = this._private__isLeft ? 'right' : 'left';
-        views.forEach(function (arr) {
-            arr.forEach(function (view) {
+        const ro = this._internal_rendererOptions();
+        const align = this._private__isLeft ? 'right' : 'left';
+        views.forEach((arr) => {
+            arr.forEach((view) => {
                 ctx.save();
-                view._internal_renderer(ensureNotNull(_this._private__priceScale))._internal_draw(ctx, ro, _this._private__widthCache, size._internal_w, align, pixelRatio);
+                view._internal_renderer(ensureNotNull(this._private__priceScale))._internal_draw(ctx, ro, this._private__widthCache, size._internal_w, align, pixelRatio);
                 ctx.restore();
             });
         });
         ctx.restore();
-    };
-    PriceAxisWidget.prototype._private__setCursor = function (type) {
-        this._private__cell.style.cursor = type === 1 /* NsResize */ ? 'ns-resize' : 'default';
-    };
-    PriceAxisWidget.prototype._private__onMarksChanged = function () {
-        var width = this._internal_optimalWidth();
+    }
+    _private__setCursor(type) {
+        this._private__cell.style.cursor = type === 1 /* CursorType.NsResize */ ? 'ns-resize' : 'default';
+    }
+    _private__onMarksChanged() {
+        const width = this._internal_optimalWidth();
         // avoid price scale is shrunk
         // using < instead !== to avoid infinite changes
         if (this._private__prevOptimalWidth < width) {
             this._private__pane._internal_chart()._internal_model()._internal_fullUpdate();
         }
         this._private__prevOptimalWidth = width;
-    };
-    PriceAxisWidget.prototype._private__recreateTickMarksCache = function (options) {
-        this._private__tickMarksCache._internal_destroy();
-        this._private__tickMarksCache = new LabelsImageCache(options._internal_fontSize, options._internal_color, options._internal_fontFamily);
-    };
-    return PriceAxisWidget;
-}());
+    }
+    _private__baseFont() {
+        return makeFont(this._private__layoutOptions.fontSize, this._private__layoutOptions.fontFamily);
+    }
+}
 
 function drawBackground(renderer, ctx, pixelRatio, isHovered, hitTestData) {
     if (renderer._internal_drawBackground) {
@@ -9086,12 +8952,14 @@ function drawForeground(renderer, ctx, pixelRatio, isHovered, hitTestData) {
 function sourcePaneViews(source, pane) {
     return source._internal_paneViews(pane);
 }
+function sourceLabelPaneViews(source, pane) {
+    return source._internal_labelPaneViews(pane);
+}
 function sourceTopPaneViews(source, pane) {
     return source._internal_topPaneViews !== undefined ? source._internal_topPaneViews(pane) : [];
 }
-var PaneWidget = /** @class */ (function () {
-    function PaneWidget(chart, state) {
-        var _this = this;
+class PaneWidget {
+    constructor(chart, state) {
         this._private__size = new Size(0, 0);
         this._private__leftPriceAxisWidget = null;
         this._private__rightPriceAxisWidget = null;
@@ -9105,17 +8973,17 @@ var PaneWidget = /** @class */ (function () {
         this._private__initCrosshairPosition = null;
         this._private__scrollXAnimation = null;
         this._private__isSettingSize = false;
-        this._private__canvasConfiguredHandler = function () {
-            if (_this._private__isSettingSize || _this._private__state === null) {
+        this._private__canvasConfiguredHandler = () => {
+            if (this._private__isSettingSize || this._private__state === null) {
                 return;
             }
-            _this._private__model()._internal_lightUpdate();
+            this._private__model()._internal_lightUpdate();
         };
-        this._private__topCanvasConfiguredHandler = function () {
-            if (_this._private__isSettingSize || _this._private__state === null) {
+        this._private__topCanvasConfiguredHandler = () => {
+            if (this._private__isSettingSize || this._private__state === null) {
                 return;
             }
-            _this._private__model()._internal_lightUpdate();
+            this._private__model()._internal_lightUpdate();
         };
         this._private__chart = chart;
         this._private__state = state;
@@ -9123,7 +8991,7 @@ var PaneWidget = /** @class */ (function () {
         this._private__paneCell = document.createElement('td');
         this._private__paneCell.style.padding = '0';
         this._private__paneCell.style.position = 'relative';
-        var paneWrapper = document.createElement('div');
+        const paneWrapper = document.createElement('div');
         paneWrapper.style.width = '100%';
         paneWrapper.style.height = '100%';
         paneWrapper.style.position = 'relative';
@@ -9135,14 +9003,14 @@ var PaneWidget = /** @class */ (function () {
         this._private__paneCell.appendChild(paneWrapper);
         this._private__canvasBinding = createBoundCanvas(paneWrapper, new Size(16, 16));
         this._private__canvasBinding.subscribeCanvasConfigured(this._private__canvasConfiguredHandler);
-        var canvas = this._private__canvasBinding.canvas;
+        const canvas = this._private__canvasBinding.canvas;
         canvas.style.position = 'absolute';
         canvas.style.zIndex = '1';
         canvas.style.left = '0';
         canvas.style.top = '0';
         this._private__topCanvasBinding = createBoundCanvas(paneWrapper, new Size(16, 16));
         this._private__topCanvasBinding.subscribeCanvasConfigured(this._private__topCanvasConfiguredHandler);
-        var topCanvas = this._private__topCanvasBinding.canvas;
+        const topCanvas = this._private__topCanvasBinding.canvas;
         topCanvas.style.position = 'absolute';
         topCanvas.style.zIndex = '2';
         topCanvas.style.left = '0';
@@ -9153,11 +9021,11 @@ var PaneWidget = /** @class */ (function () {
         this._private__rowElement.appendChild(this._private__rightAxisCell);
         this._internal_updatePriceAxisWidgetsStates();
         this._private__mouseEventHandler = new MouseEventHandler(this._private__topCanvasBinding.canvas, this, {
-            _internal_treatVertTouchDragAsPageScroll: function () { return _this._private__startTrackPoint === null && !_this._private__chart._internal_options().handleScroll.vertTouchDrag; },
-            _internal_treatHorzTouchDragAsPageScroll: function () { return _this._private__startTrackPoint === null && !_this._private__chart._internal_options().handleScroll.horzTouchDrag; },
+            _internal_treatVertTouchDragAsPageScroll: () => this._private__startTrackPoint === null && !this._private__chart._internal_options().handleScroll.vertTouchDrag,
+            _internal_treatHorzTouchDragAsPageScroll: () => this._private__startTrackPoint === null && !this._private__chart._internal_options().handleScroll.horzTouchDrag,
         });
     }
-    PaneWidget.prototype._internal_destroy = function () {
+    _internal_destroy() {
         if (this._private__leftPriceAxisWidget !== null) {
             this._private__leftPriceAxisWidget._internal_destroy();
         }
@@ -9172,11 +9040,11 @@ var PaneWidget = /** @class */ (function () {
             this._private__state._internal_onDestroyed()._internal_unsubscribeAll(this);
         }
         this._private__mouseEventHandler._internal_destroy();
-    };
-    PaneWidget.prototype._internal_state = function () {
+    }
+    _internal_state() {
         return ensureNotNull(this._private__state);
-    };
-    PaneWidget.prototype._internal_setState = function (pane) {
+    }
+    _internal_setState(pane) {
         if (this._private__state !== null) {
             this._private__state._internal_onDestroyed()._internal_unsubscribeAll(this);
         }
@@ -9185,14 +9053,14 @@ var PaneWidget = /** @class */ (function () {
             this._private__state._internal_onDestroyed()._internal_subscribe(PaneWidget.prototype._private__onStateDestroyed.bind(this), this, true);
         }
         this._internal_updatePriceAxisWidgetsStates();
-    };
-    PaneWidget.prototype._internal_chart = function () {
+    }
+    _internal_chart() {
         return this._private__chart;
-    };
-    PaneWidget.prototype._internal_getElement = function () {
+    }
+    _internal_getElement() {
         return this._private__rowElement;
-    };
-    PaneWidget.prototype._internal_updatePriceAxisWidgetsStates = function () {
+    }
+    _internal_updatePriceAxisWidgetsStates() {
         if (this._private__state === null) {
             return;
         }
@@ -9201,153 +9069,153 @@ var PaneWidget = /** @class */ (function () {
             return;
         }
         if (this._private__leftPriceAxisWidget !== null) {
-            var leftPriceScale = this._private__state._internal_leftPriceScale();
+            const leftPriceScale = this._private__state._internal_leftPriceScale();
             this._private__leftPriceAxisWidget._internal_setPriceScale(ensureNotNull(leftPriceScale));
         }
         if (this._private__rightPriceAxisWidget !== null) {
-            var rightPriceScale = this._private__state._internal_rightPriceScale();
+            const rightPriceScale = this._private__state._internal_rightPriceScale();
             this._private__rightPriceAxisWidget._internal_setPriceScale(ensureNotNull(rightPriceScale));
         }
-    };
-    PaneWidget.prototype._internal_updatePriceAxisWidgets = function () {
+    }
+    _internal_updatePriceAxisWidgets() {
         if (this._private__leftPriceAxisWidget !== null) {
             this._private__leftPriceAxisWidget._internal_update();
         }
         if (this._private__rightPriceAxisWidget !== null) {
             this._private__rightPriceAxisWidget._internal_update();
         }
-    };
-    PaneWidget.prototype._internal_stretchFactor = function () {
+    }
+    _internal_stretchFactor() {
         return this._private__state !== null ? this._private__state._internal_stretchFactor() : 0;
-    };
-    PaneWidget.prototype._internal_setStretchFactor = function (stretchFactor) {
+    }
+    _internal_setStretchFactor(stretchFactor) {
         if (this._private__state) {
             this._private__state._internal_setStretchFactor(stretchFactor);
         }
-    };
-    PaneWidget.prototype._internal_mouseEnterEvent = function (event) {
+    }
+    _internal_mouseEnterEvent(event) {
         if (!this._private__state) {
             return;
         }
         this._private__onMouseEvent();
-        var x = event._internal_localX;
-        var y = event._internal_localY;
+        const x = event._internal_localX;
+        const y = event._internal_localY;
         this._private__setCrosshairPosition(x, y);
-    };
-    PaneWidget.prototype._internal_mouseDownEvent = function (event) {
+    }
+    _internal_mouseDownEvent(event) {
         this._private__onMouseEvent();
         this._private__mouseTouchDownEvent();
         this._private__setCrosshairPosition(event._internal_localX, event._internal_localY);
-    };
-    PaneWidget.prototype._internal_mouseMoveEvent = function (event) {
+    }
+    _internal_mouseMoveEvent(event) {
         if (!this._private__state) {
             return;
         }
         this._private__onMouseEvent();
-        var x = event._internal_localX;
-        var y = event._internal_localY;
+        const x = event._internal_localX;
+        const y = event._internal_localY;
         this._private__setCrosshairPosition(x, y);
-        var hitTest = this._internal_hitTest(x, y);
+        const hitTest = this._internal_hitTest(x, y);
         this._private__model()._internal_setHoveredSource(hitTest && { _internal_source: hitTest._internal_source, _internal_object: hitTest._internal_object });
-    };
-    PaneWidget.prototype._internal_mouseClickEvent = function (event) {
+    }
+    _internal_mouseClickEvent(event) {
         if (this._private__state === null) {
             return;
         }
         this._private__onMouseEvent();
-        var x = event._internal_localX;
-        var y = event._internal_localY;
-        if (this._private__clicked._internal_hasListeners()) {
-            var currentTime = this._private__model()._internal_crosshairSource()._internal_appliedIndex();
-            this._private__clicked._internal_fire(currentTime, { x: x, y: y });
-        }
-    };
-    PaneWidget.prototype._internal_pressedMouseMoveEvent = function (event) {
+        this._private__fireClickedDelegate(event);
+    }
+    _internal_pressedMouseMoveEvent(event) {
         this._private__onMouseEvent();
         this._private__pressedMouseTouchMoveEvent(event);
         this._private__setCrosshairPosition(event._internal_localX, event._internal_localY);
-    };
-    PaneWidget.prototype._internal_mouseUpEvent = function (event) {
+    }
+    _internal_mouseUpEvent(event) {
         if (this._private__state === null) {
             return;
         }
         this._private__onMouseEvent();
         this._private__longTap = false;
         this._private__endScroll(event);
-    };
-    PaneWidget.prototype._internal_longTapEvent = function (event) {
+    }
+    _internal_tapEvent(event) {
+        if (this._private__state === null) {
+            return;
+        }
+        this._private__fireClickedDelegate(event);
+    }
+    _internal_longTapEvent(event) {
         this._private__longTap = true;
         if (this._private__startTrackPoint === null) {
-            var point = { x: event._internal_localX, y: event._internal_localY };
+            const point = { x: event._internal_localX, y: event._internal_localY };
             this._private__startTrackingMode(point, point);
         }
-    };
-    PaneWidget.prototype._internal_mouseLeaveEvent = function (event) {
+    }
+    _internal_mouseLeaveEvent(event) {
         if (this._private__state === null) {
             return;
         }
         this._private__onMouseEvent();
         this._private__state._internal_model()._internal_setHoveredSource(null);
         this._private__clearCrosshairPosition();
-    };
-    PaneWidget.prototype._internal_clicked = function () {
+    }
+    _internal_clicked() {
         return this._private__clicked;
-    };
-    PaneWidget.prototype._internal_pinchStartEvent = function () {
+    }
+    _internal_pinchStartEvent() {
         this._private__prevPinchScale = 1;
-        this._private__terminateKineticAnimation();
-    };
-    PaneWidget.prototype._internal_pinchEvent = function (middlePoint, scale) {
+        this._private__model()._internal_stopTimeScaleAnimation();
+    }
+    _internal_pinchEvent(middlePoint, scale) {
         if (!this._private__chart._internal_options().handleScale.pinch) {
             return;
         }
-        var zoomScale = (scale - this._private__prevPinchScale) * 5;
+        const zoomScale = (scale - this._private__prevPinchScale) * 5;
         this._private__prevPinchScale = scale;
         this._private__model()._internal_zoomTime(middlePoint._internal_x, zoomScale);
-    };
-    PaneWidget.prototype._internal_touchStartEvent = function (event) {
+    }
+    _internal_touchStartEvent(event) {
         this._private__longTap = false;
         this._private__exitTrackingModeOnNextTry = this._private__startTrackPoint !== null;
         this._private__mouseTouchDownEvent();
         if (this._private__startTrackPoint !== null) {
-            var crosshair = this._private__model()._internal_crosshairSource();
+            const crosshair = this._private__model()._internal_crosshairSource();
             this._private__initCrosshairPosition = { x: crosshair._internal_appliedX(), y: crosshair._internal_appliedY() };
             this._private__startTrackPoint = { x: event._internal_localX, y: event._internal_localY };
         }
-    };
-    PaneWidget.prototype._internal_touchMoveEvent = function (event) {
+    }
+    _internal_touchMoveEvent(event) {
         if (this._private__state === null) {
             return;
         }
-        var x = event._internal_localX;
-        var y = event._internal_localY;
+        const x = event._internal_localX;
+        const y = event._internal_localY;
         if (this._private__startTrackPoint !== null) {
             // tracking mode: move crosshair
             this._private__exitTrackingModeOnNextTry = false;
-            var origPoint = ensureNotNull(this._private__initCrosshairPosition);
-            var newX = origPoint.x + (x - this._private__startTrackPoint.x);
-            var newY = origPoint.y + (y - this._private__startTrackPoint.y);
+            const origPoint = ensureNotNull(this._private__initCrosshairPosition);
+            const newX = origPoint.x + (x - this._private__startTrackPoint.x);
+            const newY = origPoint.y + (y - this._private__startTrackPoint.y);
             this._private__setCrosshairPosition(newX, newY);
             return;
         }
         this._private__pressedMouseTouchMoveEvent(event);
-    };
-    PaneWidget.prototype._internal_touchEndEvent = function (event) {
-        if (this._internal_chart()._internal_options().trackingMode.exitMode === 0 /* OnTouchEnd */) {
+    }
+    _internal_touchEndEvent(event) {
+        if (this._internal_chart()._internal_options().trackingMode.exitMode === 0 /* TrackingModeExitMode.OnTouchEnd */) {
             this._private__exitTrackingModeOnNextTry = true;
         }
         this._private__tryExitTrackingMode();
         this._private__endScroll(event);
-    };
-    PaneWidget.prototype._internal_hitTest = function (x, y) {
-        var state = this._private__state;
+    }
+    _internal_hitTest(x, y) {
+        const state = this._private__state;
         if (state === null) {
             return null;
         }
-        var sources = state._internal_orderedSources();
-        for (var _i = 0, sources_1 = sources; _i < sources_1.length; _i++) {
-            var source = sources_1[_i];
-            var sourceResult = this._private__hitTestPaneView(source._internal_paneViews(state), x, y);
+        const sources = state._internal_orderedSources();
+        for (const source of sources) {
+            const sourceResult = this._private__hitTestPaneView(source._internal_paneViews(state), x, y);
             if (sourceResult !== null) {
                 return {
                     _internal_source: source,
@@ -9357,15 +9225,15 @@ var PaneWidget = /** @class */ (function () {
             }
         }
         return null;
-    };
-    PaneWidget.prototype._internal_setPriceAxisSize = function (width, position) {
-        var priceAxisWidget = position === 'left' ? this._private__leftPriceAxisWidget : this._private__rightPriceAxisWidget;
+    }
+    _internal_setPriceAxisSize(width, position) {
+        const priceAxisWidget = position === 'left' ? this._private__leftPriceAxisWidget : this._private__rightPriceAxisWidget;
         ensureNotNull(priceAxisWidget)._internal_setSize(new Size(width, this._private__size._internal_h));
-    };
-    PaneWidget.prototype._internal_getSize = function () {
+    }
+    _internal_getSize() {
         return this._private__size;
-    };
-    PaneWidget.prototype._internal_setSize = function (size) {
+    }
+    _internal_setSize(size) {
         if (size._internal_w < 0 || size._internal_h < 0) {
             throw new Error('Try to set invalid size to PaneWidget ' + JSON.stringify(size));
         }
@@ -9379,15 +9247,14 @@ var PaneWidget = /** @class */ (function () {
         this._private__isSettingSize = false;
         this._private__paneCell.style.width = size._internal_w + 'px';
         this._private__paneCell.style.height = size._internal_h + 'px';
-    };
-    PaneWidget.prototype._internal_recalculatePriceScales = function () {
-        var pane = ensureNotNull(this._private__state);
+    }
+    _internal_recalculatePriceScales() {
+        const pane = ensureNotNull(this._private__state);
         pane._internal_recalculatePriceScale(pane._internal_leftPriceScale());
         pane._internal_recalculatePriceScale(pane._internal_rightPriceScale());
-        for (var _i = 0, _a = pane._internal_dataSources(); _i < _a.length; _i++) {
-            var source = _a[_i];
+        for (const source of pane._internal_dataSources()) {
             if (pane._internal_isOverlay(source)) {
-                var priceScale = source._internal_priceScale();
+                const priceScale = source._internal_priceScale();
                 if (priceScale !== null) {
                     pane._internal_recalculatePriceScale(priceScale);
                 }
@@ -9396,18 +9263,18 @@ var PaneWidget = /** @class */ (function () {
                 source._internal_updateAllViews();
             }
         }
-    };
-    PaneWidget.prototype._internal_getImage = function () {
+    }
+    _internal_getImage() {
         return this._private__canvasBinding.canvas;
-    };
-    PaneWidget.prototype._internal_paint = function (type) {
-        if (type === 0 /* None */) {
+    }
+    _internal_paint(type) {
+        if (type === 0 /* InvalidationLevel.None */) {
             return;
         }
         if (this._private__state === null) {
             return;
         }
-        if (type > 1 /* Cursor */) {
+        if (type > 1 /* InvalidationLevel.Cursor */) {
             this._internal_recalculatePriceScales();
         }
         if (this._private__leftPriceAxisWidget !== null) {
@@ -9416,104 +9283,107 @@ var PaneWidget = /** @class */ (function () {
         if (this._private__rightPriceAxisWidget !== null) {
             this._private__rightPriceAxisWidget._internal_paint(type);
         }
-        if (type !== 1 /* Cursor */) {
-            var ctx = getContext2D(this._private__canvasBinding.canvas);
+        if (type !== 1 /* InvalidationLevel.Cursor */) {
+            const ctx = getContext2D(this._private__canvasBinding.canvas);
             ctx.save();
             this._private__drawBackground(ctx, this._private__canvasBinding.pixelRatio);
             if (this._private__state) {
                 this._private__drawGrid(ctx, this._private__canvasBinding.pixelRatio);
                 this._private__drawWatermark(ctx, this._private__canvasBinding.pixelRatio);
                 this._private__drawSources(ctx, this._private__canvasBinding.pixelRatio, sourcePaneViews);
+                this._private__drawSources(ctx, this._private__canvasBinding.pixelRatio, sourceLabelPaneViews);
             }
             ctx.restore();
         }
-        var topCtx = getContext2D(this._private__topCanvasBinding.canvas);
+        const topCtx = getContext2D(this._private__topCanvasBinding.canvas);
         topCtx.clearRect(0, 0, Math.ceil(this._private__size._internal_w * this._private__topCanvasBinding.pixelRatio), Math.ceil(this._private__size._internal_h * this._private__topCanvasBinding.pixelRatio));
         this._private__drawSources(topCtx, this._private__canvasBinding.pixelRatio, sourceTopPaneViews);
         this._private__drawCrosshair(topCtx, this._private__topCanvasBinding.pixelRatio);
-    };
-    PaneWidget.prototype._internal_leftPriceAxisWidget = function () {
+    }
+    _internal_leftPriceAxisWidget() {
         return this._private__leftPriceAxisWidget;
-    };
-    PaneWidget.prototype._internal_rightPriceAxisWidget = function () {
+    }
+    _internal_rightPriceAxisWidget() {
         return this._private__rightPriceAxisWidget;
-    };
-    PaneWidget.prototype._private__onStateDestroyed = function () {
+    }
+    _private__onStateDestroyed() {
         if (this._private__state !== null) {
             this._private__state._internal_onDestroyed()._internal_unsubscribeAll(this);
         }
         this._private__state = null;
-    };
-    PaneWidget.prototype._private__drawBackground = function (ctx, pixelRatio) {
-        var _this = this;
-        drawScaled(ctx, pixelRatio, function () {
-            var model = _this._private__model();
-            var topColor = model._internal_backgroundTopColor();
-            var bottomColor = model._internal_backgroundBottomColor();
+    }
+    _private__fireClickedDelegate(event) {
+        const x = event._internal_localX;
+        const y = event._internal_localY;
+        if (this._private__clicked._internal_hasListeners()) {
+            this._private__clicked._internal_fire(this._private__model()._internal_timeScale()._internal_coordinateToIndex(x), { x, y });
+        }
+    }
+    _private__drawBackground(ctx, pixelRatio) {
+        drawScaled(ctx, pixelRatio, () => {
+            const model = this._private__model();
+            const topColor = model._internal_backgroundTopColor();
+            const bottomColor = model._internal_backgroundBottomColor();
             if (topColor === bottomColor) {
-                clearRect(ctx, 0, 0, _this._private__size._internal_w, _this._private__size._internal_h, bottomColor);
+                clearRect(ctx, 0, 0, this._private__size._internal_w, this._private__size._internal_h, bottomColor);
             }
             else {
-                clearRectWithGradient(ctx, 0, 0, _this._private__size._internal_w, _this._private__size._internal_h, topColor, bottomColor);
+                clearRectWithGradient(ctx, 0, 0, this._private__size._internal_w, this._private__size._internal_h, topColor, bottomColor);
             }
         });
-    };
-    PaneWidget.prototype._private__drawGrid = function (ctx, pixelRatio) {
-        var state = ensureNotNull(this._private__state);
-        var paneView = state._internal_grid()._internal_paneView();
-        var renderer = paneView._internal_renderer(state._internal_height(), state._internal_width());
+    }
+    _private__drawGrid(ctx, pixelRatio) {
+        const state = ensureNotNull(this._private__state);
+        const paneView = state._internal_grid()._internal_paneView();
+        const renderer = paneView._internal_renderer(state._internal_height(), state._internal_width());
         if (renderer !== null) {
             ctx.save();
             renderer._internal_draw(ctx, pixelRatio, false);
             ctx.restore();
         }
-    };
-    PaneWidget.prototype._private__drawWatermark = function (ctx, pixelRatio) {
-        var source = this._private__model()._internal_watermarkSource();
+    }
+    _private__drawWatermark(ctx, pixelRatio) {
+        const source = this._private__model()._internal_watermarkSource();
         this._private__drawSourceImpl(ctx, pixelRatio, sourcePaneViews, drawBackground, source);
         this._private__drawSourceImpl(ctx, pixelRatio, sourcePaneViews, drawForeground, source);
-    };
-    PaneWidget.prototype._private__drawCrosshair = function (ctx, pixelRatio) {
+    }
+    _private__drawCrosshair(ctx, pixelRatio) {
         this._private__drawSourceImpl(ctx, pixelRatio, sourcePaneViews, drawForeground, this._private__model()._internal_crosshairSource());
-    };
-    PaneWidget.prototype._private__drawSources = function (ctx, pixelRatio, paneViewsGetter) {
-        var state = ensureNotNull(this._private__state);
-        var sources = state._internal_orderedSources();
-        for (var _i = 0, sources_2 = sources; _i < sources_2.length; _i++) {
-            var source = sources_2[_i];
+    }
+    _private__drawSources(ctx, pixelRatio, paneViewsGetter) {
+        const state = ensureNotNull(this._private__state);
+        const sources = state._internal_orderedSources();
+        for (const source of sources) {
             this._private__drawSourceImpl(ctx, pixelRatio, paneViewsGetter, drawBackground, source);
         }
-        for (var _a = 0, sources_3 = sources; _a < sources_3.length; _a++) {
-            var source = sources_3[_a];
+        for (const source of sources) {
             this._private__drawSourceImpl(ctx, pixelRatio, paneViewsGetter, drawForeground, source);
         }
-    };
-    PaneWidget.prototype._private__drawSourceImpl = function (ctx, pixelRatio, paneViewsGetter, drawFn, source) {
-        var state = ensureNotNull(this._private__state);
-        var paneViews = paneViewsGetter(source, state);
-        var height = state._internal_height();
-        var width = state._internal_width();
-        var hoveredSource = state._internal_model()._internal_hoveredSource();
-        var isHovered = hoveredSource !== null && hoveredSource._internal_source === source;
-        var objecId = hoveredSource !== null && isHovered && hoveredSource._internal_object !== undefined
+    }
+    _private__drawSourceImpl(ctx, pixelRatio, paneViewsGetter, drawFn, source) {
+        const state = ensureNotNull(this._private__state);
+        const paneViews = paneViewsGetter(source, state);
+        const height = state._internal_height();
+        const width = state._internal_width();
+        const hoveredSource = state._internal_model()._internal_hoveredSource();
+        const isHovered = hoveredSource !== null && hoveredSource._internal_source === source;
+        const objecId = hoveredSource !== null && isHovered && hoveredSource._internal_object !== undefined
             ? hoveredSource._internal_object._internal_hitTestData
             : undefined;
-        for (var _i = 0, paneViews_1 = paneViews; _i < paneViews_1.length; _i++) {
-            var paneView = paneViews_1[_i];
-            var renderer = paneView._internal_renderer(height, width);
+        for (const paneView of paneViews) {
+            const renderer = paneView._internal_renderer(height, width);
             if (renderer !== null) {
                 ctx.save();
                 drawFn(renderer, ctx, pixelRatio, isHovered, objecId);
                 ctx.restore();
             }
         }
-    };
-    PaneWidget.prototype._private__hitTestPaneView = function (paneViews, x, y) {
-        for (var _i = 0, paneViews_2 = paneViews; _i < paneViews_2.length; _i++) {
-            var paneView = paneViews_2[_i];
-            var renderer = paneView._internal_renderer(this._private__size._internal_h, this._private__size._internal_w);
+    }
+    _private__hitTestPaneView(paneViews, x, y) {
+        for (const paneView of paneViews) {
+            const renderer = paneView._internal_renderer(this._private__size._internal_h, this._private__size._internal_w);
             if (renderer !== null && renderer._internal_hitTest) {
-                var result = renderer._internal_hitTest(x, y);
+                const result = renderer._internal_hitTest(x, y);
                 if (result !== null) {
                     return {
                         _internal_view: paneView,
@@ -9523,14 +9393,14 @@ var PaneWidget = /** @class */ (function () {
             }
         }
         return null;
-    };
-    PaneWidget.prototype._private__recreatePriceAxisWidgets = function () {
+    }
+    _private__recreatePriceAxisWidgets() {
         if (this._private__state === null) {
             return;
         }
-        var chart = this._private__chart;
-        var leftAxisVisible = this._private__state._internal_leftPriceScale()._internal_options().visible;
-        var rightAxisVisible = this._private__state._internal_rightPriceScale()._internal_options().visible;
+        const chart = this._private__chart;
+        const leftAxisVisible = this._private__state._internal_leftPriceScale()._internal_options().visible;
+        const rightAxisVisible = this._private__state._internal_rightPriceScale()._internal_options().visible;
         if (!leftAxisVisible && this._private__leftPriceAxisWidget !== null) {
             this._private__leftAxisCell.removeChild(this._private__leftPriceAxisWidget._internal_getElement());
             this._private__leftPriceAxisWidget._internal_destroy();
@@ -9541,138 +9411,109 @@ var PaneWidget = /** @class */ (function () {
             this._private__rightPriceAxisWidget._internal_destroy();
             this._private__rightPriceAxisWidget = null;
         }
-        var rendererOptionsProvider = chart._internal_model()._internal_rendererOptionsProvider();
+        const rendererOptionsProvider = chart._internal_model()._internal_rendererOptionsProvider();
         if (leftAxisVisible && this._private__leftPriceAxisWidget === null) {
-            this._private__leftPriceAxisWidget = new PriceAxisWidget(this, chart._internal_options().layout, rendererOptionsProvider, 'left');
+            this._private__leftPriceAxisWidget = new PriceAxisWidget(this, chart._internal_options(), rendererOptionsProvider, 'left');
             this._private__leftAxisCell.appendChild(this._private__leftPriceAxisWidget._internal_getElement());
         }
         if (rightAxisVisible && this._private__rightPriceAxisWidget === null) {
-            this._private__rightPriceAxisWidget = new PriceAxisWidget(this, chart._internal_options().layout, rendererOptionsProvider, 'right');
+            this._private__rightPriceAxisWidget = new PriceAxisWidget(this, chart._internal_options(), rendererOptionsProvider, 'right');
             this._private__rightAxisCell.appendChild(this._private__rightPriceAxisWidget._internal_getElement());
         }
-    };
-    PaneWidget.prototype._private__preventScroll = function (event) {
+    }
+    _private__preventScroll(event) {
         return event._internal_isTouch && this._private__longTap || this._private__startTrackPoint !== null;
-    };
-    PaneWidget.prototype._private__correctXCoord = function (x) {
+    }
+    _private__correctXCoord(x) {
         return Math.max(0, Math.min(x, this._private__size._internal_w - 1));
-    };
-    PaneWidget.prototype._private__correctYCoord = function (y) {
+    }
+    _private__correctYCoord(y) {
         return Math.max(0, Math.min(y, this._private__size._internal_h - 1));
-    };
-    PaneWidget.prototype._private__setCrosshairPosition = function (x, y) {
+    }
+    _private__setCrosshairPosition(x, y) {
         this._private__model()._internal_setAndSaveCurrentPosition(this._private__correctXCoord(x), this._private__correctYCoord(y), ensureNotNull(this._private__state));
-    };
-    PaneWidget.prototype._private__clearCrosshairPosition = function () {
+    }
+    _private__clearCrosshairPosition() {
         this._private__model()._internal_clearCurrentPosition();
-    };
-    PaneWidget.prototype._private__tryExitTrackingMode = function () {
+    }
+    _private__tryExitTrackingMode() {
         if (this._private__exitTrackingModeOnNextTry) {
             this._private__startTrackPoint = null;
             this._private__clearCrosshairPosition();
         }
-    };
-    PaneWidget.prototype._private__startTrackingMode = function (startTrackPoint, crossHairPosition) {
+    }
+    _private__startTrackingMode(startTrackPoint, crossHairPosition) {
         this._private__startTrackPoint = startTrackPoint;
         this._private__exitTrackingModeOnNextTry = false;
         this._private__setCrosshairPosition(crossHairPosition.x, crossHairPosition.y);
-        var crosshair = this._private__model()._internal_crosshairSource();
+        const crosshair = this._private__model()._internal_crosshairSource();
         this._private__initCrosshairPosition = { x: crosshair._internal_appliedX(), y: crosshair._internal_appliedY() };
-    };
-    PaneWidget.prototype._private__model = function () {
+    }
+    _private__model() {
         return this._private__chart._internal_model();
-    };
-    PaneWidget.prototype._private__finishScroll = function () {
-        var model = this._private__model();
-        var state = this._internal_state();
-        var priceScale = state._internal_defaultPriceScale();
-        model._internal_endScrollPrice(state, priceScale);
-        model._internal_endScrollTime();
-        this._private__startScrollingPos = null;
-        this._private__isScrolling = false;
-    };
-    PaneWidget.prototype._private__endScroll = function (event) {
-        var _this = this;
+    }
+    _private__endScroll(event) {
         if (!this._private__isScrolling) {
             return;
         }
-        var startAnimationTime = performance.now();
+        const model = this._private__model();
+        const state = this._internal_state();
+        model._internal_endScrollPrice(state, state._internal_defaultPriceScale());
+        this._private__startScrollingPos = null;
+        this._private__isScrolling = false;
+        model._internal_endScrollTime();
         if (this._private__scrollXAnimation !== null) {
-            this._private__scrollXAnimation._internal_start(event._internal_localX, startAnimationTime);
-        }
-        if ((this._private__scrollXAnimation === null || this._private__scrollXAnimation._internal_finished(startAnimationTime))) {
-            // animation is not needed
-            this._private__finishScroll();
-            return;
-        }
-        var model = this._private__model();
-        var timeScale = model._internal_timeScale();
-        var scrollXAnimation = this._private__scrollXAnimation;
-        var animationFn = function () {
-            if ((scrollXAnimation._internal_terminated())) {
-                // animation terminated, see _terminateKineticAnimation
-                return;
-            }
-            var now = performance.now();
-            var xAnimationFinished = scrollXAnimation._internal_finished(now);
-            if (!scrollXAnimation._internal_terminated()) {
-                var prevRightOffset = timeScale._internal_rightOffset();
-                model._internal_scrollTimeTo(scrollXAnimation._internal_getPosition(now));
-                if (prevRightOffset === timeScale._internal_rightOffset()) {
-                    xAnimationFinished = true;
-                    _this._private__scrollXAnimation = null;
-                }
+            const startAnimationTime = performance.now();
+            const timeScale = model._internal_timeScale();
+            this._private__scrollXAnimation._internal_start(timeScale._internal_rightOffset(), startAnimationTime);
+            if (!this._private__scrollXAnimation._internal_finished(startAnimationTime)) {
+                model._internal_setTimeScaleAnimation(this._private__scrollXAnimation);
             }
-            if (xAnimationFinished) {
-                _this._private__finishScroll();
-                return;
-            }
-            requestAnimationFrame(animationFn);
-        };
-        requestAnimationFrame(animationFn);
-    };
-    PaneWidget.prototype._private__onMouseEvent = function () {
+        }
+    }
+    _private__onMouseEvent() {
         this._private__startTrackPoint = null;
-    };
-    PaneWidget.prototype._private__mouseTouchDownEvent = function () {
+    }
+    _private__mouseTouchDownEvent() {
         if (!this._private__state) {
             return;
         }
-        this._private__terminateKineticAnimation();
+        this._private__model()._internal_stopTimeScaleAnimation();
         if (document.activeElement !== document.body && document.activeElement !== document.documentElement) {
             // If any focusable element except the page itself is focused, remove the focus
             ensureNotNull(document.activeElement).blur();
         }
         else {
             // Clear selection
-            var selection = document.getSelection();
+            const selection = document.getSelection();
             if (selection !== null) {
                 selection.removeAllRanges();
             }
         }
-        var priceScale = this._private__state._internal_defaultPriceScale();
+        const priceScale = this._private__state._internal_defaultPriceScale();
         if (priceScale._internal_isEmpty() || this._private__model()._internal_timeScale()._internal_isEmpty()) {
             return;
         }
-    };
+    }
     // eslint-disable-next-line complexity
-    PaneWidget.prototype._private__pressedMouseTouchMoveEvent = function (event) {
+    _private__pressedMouseTouchMoveEvent(event) {
         if (this._private__state === null) {
             return;
         }
-        var model = this._private__model();
-        if (model._internal_timeScale()._internal_isEmpty()) {
+        const model = this._private__model();
+        const timeScale = model._internal_timeScale();
+        if (timeScale._internal_isEmpty()) {
             return;
         }
-        var chartOptions = this._private__chart._internal_options();
-        var scrollOptions = chartOptions.handleScroll;
-        var kineticScrollOptions = chartOptions.kineticScroll;
+        const chartOptions = this._private__chart._internal_options();
+        const scrollOptions = chartOptions.handleScroll;
+        const kineticScrollOptions = chartOptions.kineticScroll;
         if ((!scrollOptions.pressedMouseMove || event._internal_isTouch) &&
             (!scrollOptions.horzTouchDrag && !scrollOptions.vertTouchDrag || !event._internal_isTouch)) {
             return;
         }
-        var priceScale = this._private__state._internal_defaultPriceScale();
-        var now = performance.now();
+        const priceScale = this._private__state._internal_defaultPriceScale();
+        const now = performance.now();
         if (this._private__startScrollingPos === null && !this._private__preventScroll(event)) {
             this._private__startScrollingPos = {
                 x: event._internal_clientX,
@@ -9682,17 +9523,16 @@ var PaneWidget = /** @class */ (function () {
                 _internal_localY: event._internal_localY,
             };
         }
-        if (this._private__scrollXAnimation !== null) {
-            this._private__scrollXAnimation._internal_addPosition(event._internal_localX, now);
-        }
         if (this._private__startScrollingPos !== null &&
             !this._private__isScrolling &&
             (this._private__startScrollingPos.x !== event._internal_clientX || this._private__startScrollingPos.y !== event._internal_clientY)) {
-            if (this._private__scrollXAnimation === null && (event._internal_isTouch && kineticScrollOptions.touch ||
-                !event._internal_isTouch && kineticScrollOptions.mouse)) {
-                this._private__scrollXAnimation = new KineticAnimation(0.2 /* MinScrollSpeed */, 7 /* MaxScrollSpeed */, 0.997 /* DumpingCoeff */, 15 /* ScrollMinMove */);
-                this._private__scrollXAnimation._internal_addPosition(this._private__startScrollingPos._internal_localX, this._private__startScrollingPos._internal_timestamp);
-                this._private__scrollXAnimation._internal_addPosition(event._internal_localX, now);
+            if (event._internal_isTouch && kineticScrollOptions.touch || !event._internal_isTouch && kineticScrollOptions.mouse) {
+                const barSpacing = timeScale._internal_barSpacing();
+                this._private__scrollXAnimation = new KineticAnimation(0.2 /* KineticScrollConstants.MinScrollSpeed */ / barSpacing, 7 /* KineticScrollConstants.MaxScrollSpeed */ / barSpacing, 0.997 /* KineticScrollConstants.DumpingCoeff */, 15 /* KineticScrollConstants.ScrollMinMove */ / barSpacing);
+                this._private__scrollXAnimation._internal_addPosition(timeScale._internal_rightOffset(), this._private__startScrollingPos._internal_timestamp);
+            }
+            else {
+                this._private__scrollXAnimation = null;
             }
             if (!priceScale._internal_isEmpty()) {
                 model._internal_startScrollPrice(this._private__state, priceScale, event._internal_localY);
@@ -9706,30 +9546,18 @@ var PaneWidget = /** @class */ (function () {
                 model._internal_scrollPriceTo(this._private__state, priceScale, event._internal_localY);
             }
             model._internal_scrollTimeTo(event._internal_localX);
-        }
-    };
-    PaneWidget.prototype._private__terminateKineticAnimation = function () {
-        var now = performance.now();
-        var xAnimationFinished = this._private__scrollXAnimation === null || this._private__scrollXAnimation._internal_finished(now);
-        if (this._private__scrollXAnimation !== null) {
-            if (!xAnimationFinished) {
-                this._private__finishScroll();
+            if (this._private__scrollXAnimation !== null) {
+                this._private__scrollXAnimation._internal_addPosition(timeScale._internal_rightOffset(), now);
             }
         }
-        if (this._private__scrollXAnimation !== null) {
-            this._private__scrollXAnimation._internal_terminate();
-            this._private__scrollXAnimation = null;
-        }
-    };
-    return PaneWidget;
-}());
+    }
+}
 
-var PriceAxisStub = /** @class */ (function () {
-    function PriceAxisStub(side, options, params, borderVisible, bottomColor) {
-        var _this = this;
+class PriceAxisStub {
+    constructor(side, options, params, borderVisible, bottomColor) {
         this._private__invalidated = true;
         this._private__size = new Size(0, 0);
-        this._private__canvasConfiguredHandler = function () { return _this._internal_paint(3 /* Full */); };
+        this._private__canvasConfiguredHandler = () => this._internal_paint(3 /* InvalidationLevel.Full */);
         this._private__isLeft = side === 'left';
         this._private__rendererOptionsProvider = params._internal_rendererOptionsProvider;
         this._private__options = options;
@@ -9742,71 +9570,68 @@ var PriceAxisStub = /** @class */ (function () {
         this._private__canvasBinding = createBoundCanvas(this._private__cell, new Size(16, 16));
         this._private__canvasBinding.subscribeCanvasConfigured(this._private__canvasConfiguredHandler);
     }
-    PriceAxisStub.prototype._internal_destroy = function () {
+    _internal_destroy() {
         this._private__canvasBinding.unsubscribeCanvasConfigured(this._private__canvasConfiguredHandler);
         this._private__canvasBinding.destroy();
-    };
-    PriceAxisStub.prototype._internal_getElement = function () {
+    }
+    _internal_getElement() {
         return this._private__cell;
-    };
-    PriceAxisStub.prototype._internal_getSize = function () {
+    }
+    _internal_getSize() {
         return this._private__size;
-    };
-    PriceAxisStub.prototype._internal_setSize = function (size) {
+    }
+    _internal_setSize(size) {
         if (size._internal_w < 0 || size._internal_h < 0) {
             throw new Error('Try to set invalid size to PriceAxisStub ' + JSON.stringify(size));
         }
         if (!this._private__size._internal_equals(size)) {
             this._private__size = size;
             this._private__canvasBinding.resizeCanvas({ width: size._internal_w, height: size._internal_h });
-            this._private__cell.style.width = "".concat(size._internal_w, "px");
-            this._private__cell.style.minWidth = "".concat(size._internal_w, "px"); // for right calculate position of .pane-legend
-            this._private__cell.style.height = "".concat(size._internal_h, "px");
+            this._private__cell.style.width = `${size._internal_w}px`;
+            this._private__cell.style.minWidth = `${size._internal_w}px`; // for right calculate position of .pane-legend
+            this._private__cell.style.height = `${size._internal_h}px`;
             this._private__invalidated = true;
         }
-    };
-    PriceAxisStub.prototype._internal_paint = function (type) {
-        if (type < 3 /* Full */ && !this._private__invalidated) {
+    }
+    _internal_paint(type) {
+        if (type < 3 /* InvalidationLevel.Full */ && !this._private__invalidated) {
             return;
         }
         if (this._private__size._internal_w === 0 || this._private__size._internal_h === 0) {
             return;
         }
         this._private__invalidated = false;
-        var ctx = getContext2D(this._private__canvasBinding.canvas);
+        const ctx = getContext2D(this._private__canvasBinding.canvas);
         this._private__drawBackground(ctx, this._private__canvasBinding.pixelRatio);
         this._private__drawBorder(ctx, this._private__canvasBinding.pixelRatio);
-    };
-    PriceAxisStub.prototype._internal_getImage = function () {
+    }
+    _internal_getImage() {
         return this._private__canvasBinding.canvas;
-    };
-    PriceAxisStub.prototype._private__drawBorder = function (ctx, pixelRatio) {
+    }
+    _private__drawBorder(ctx, pixelRatio) {
         if (!this._private__borderVisible()) {
             return;
         }
-        var width = this._private__size._internal_w;
+        const width = this._private__size._internal_w;
         ctx.save();
         ctx.fillStyle = this._private__options.timeScale.borderColor;
-        var borderSize = Math.floor(this._private__rendererOptionsProvider._internal_options()._internal_borderSize * pixelRatio);
-        var left = (this._private__isLeft) ? Math.round(width * pixelRatio) - borderSize : 0;
+        const borderSize = Math.floor(this._private__rendererOptionsProvider._internal_options()._internal_borderSize * pixelRatio);
+        const left = (this._private__isLeft) ? Math.round(width * pixelRatio) - borderSize : 0;
         ctx.fillRect(left, 0, borderSize, borderSize);
         ctx.restore();
-    };
-    PriceAxisStub.prototype._private__drawBackground = function (ctx, pixelRatio) {
-        var _this = this;
-        drawScaled(ctx, pixelRatio, function () {
-            clearRect(ctx, 0, 0, _this._private__size._internal_w, _this._private__size._internal_h, _this._private__bottomColor());
+    }
+    _private__drawBackground(ctx, pixelRatio) {
+        drawScaled(ctx, pixelRatio, () => {
+            clearRect(ctx, 0, 0, this._private__size._internal_w, this._private__size._internal_h, this._private__bottomColor());
         });
-    };
-    return PriceAxisStub;
-}());
+    }
+}
 
 function markWithGreaterWeight(a, b) {
     return a._internal_weight > b._internal_weight ? a : b;
 }
-var TimeAxisWidget = /** @class */ (function () {
-    function TimeAxisWidget(chartWidget) {
-        var _this = this;
+class TimeAxisWidget {
+    constructor(chartWidget) {
         this._private__leftStub = null;
         this._private__rightStub = null;
         this._private__rendererOptions = null;
@@ -9815,14 +9640,14 @@ var TimeAxisWidget = /** @class */ (function () {
         this._private__sizeChanged = new Delegate();
         this._private__widthCache = new TextWidthCache(5);
         this._private__isSettingSize = false;
-        this._private__canvasConfiguredHandler = function () {
-            if (!_this._private__isSettingSize) {
-                _this._private__chart._internal_model()._internal_lightUpdate();
+        this._private__canvasConfiguredHandler = () => {
+            if (!this._private__isSettingSize) {
+                this._private__chart._internal_model()._internal_lightUpdate();
             }
         };
-        this._private__topCanvasConfiguredHandler = function () {
-            if (!_this._private__isSettingSize) {
-                _this._private__chart._internal_model()._internal_lightUpdate();
+        this._private__topCanvasConfiguredHandler = () => {
+            if (!this._private__isSettingSize) {
+                this._private__chart._internal_model()._internal_lightUpdate();
             }
         };
         this._private__chart = chartWidget;
@@ -9843,14 +9668,14 @@ var TimeAxisWidget = /** @class */ (function () {
         this._private__cell.appendChild(this._private__dv);
         this._private__canvasBinding = createBoundCanvas(this._private__dv, new Size(16, 16));
         this._private__canvasBinding.subscribeCanvasConfigured(this._private__canvasConfiguredHandler);
-        var canvas = this._private__canvasBinding.canvas;
+        const canvas = this._private__canvasBinding.canvas;
         canvas.style.position = 'absolute';
         canvas.style.zIndex = '1';
         canvas.style.left = '0';
         canvas.style.top = '0';
         this._private__topCanvasBinding = createBoundCanvas(this._private__dv, new Size(16, 16));
         this._private__topCanvasBinding.subscribeCanvasConfigured(this._private__topCanvasConfiguredHandler);
-        var topCanvas = this._private__topCanvasBinding.canvas;
+        const topCanvas = this._private__topCanvasBinding.canvas;
         topCanvas.style.position = 'absolute';
         topCanvas.style.zIndex = '2';
         topCanvas.style.left = '0';
@@ -9861,11 +9686,11 @@ var TimeAxisWidget = /** @class */ (function () {
         this._private__recreateStubs();
         this._private__chart._internal_model()._internal_priceScalesOptionsChanged()._internal_subscribe(this._private__recreateStubs.bind(this), this);
         this._private__mouseEventHandler = new MouseEventHandler(this._private__topCanvasBinding.canvas, this, {
-            _internal_treatVertTouchDragAsPageScroll: function () { return true; },
-            _internal_treatHorzTouchDragAsPageScroll: function () { return false; },
+            _internal_treatVertTouchDragAsPageScroll: () => true,
+            _internal_treatHorzTouchDragAsPageScroll: () => false,
         });
     }
-    TimeAxisWidget.prototype._internal_destroy = function () {
+    _internal_destroy() {
         this._private__mouseEventHandler._internal_destroy();
         if (this._private__leftStub !== null) {
             this._private__leftStub._internal_destroy();
@@ -9877,83 +9702,83 @@ var TimeAxisWidget = /** @class */ (function () {
         this._private__topCanvasBinding.destroy();
         this._private__canvasBinding.unsubscribeCanvasConfigured(this._private__canvasConfiguredHandler);
         this._private__canvasBinding.destroy();
-    };
-    TimeAxisWidget.prototype._internal_getElement = function () {
+    }
+    _internal_getElement() {
         return this._private__element;
-    };
-    TimeAxisWidget.prototype._internal_leftStub = function () {
+    }
+    _internal_leftStub() {
         return this._private__leftStub;
-    };
-    TimeAxisWidget.prototype._internal_rightStub = function () {
+    }
+    _internal_rightStub() {
         return this._private__rightStub;
-    };
-    TimeAxisWidget.prototype._internal_mouseDownEvent = function (event) {
+    }
+    _internal_mouseDownEvent(event) {
         if (this._private__mouseDown) {
             return;
         }
         this._private__mouseDown = true;
-        var model = this._private__chart._internal_model();
+        const model = this._private__chart._internal_model();
         if (model._internal_timeScale()._internal_isEmpty() || !this._private__chart._internal_options().handleScale.axisPressedMouseMove.time) {
             return;
         }
         model._internal_startScaleTime(event._internal_localX);
-    };
-    TimeAxisWidget.prototype._internal_touchStartEvent = function (event) {
+    }
+    _internal_touchStartEvent(event) {
         this._internal_mouseDownEvent(event);
-    };
-    TimeAxisWidget.prototype._internal_mouseDownOutsideEvent = function () {
-        var model = this._private__chart._internal_model();
+    }
+    _internal_mouseDownOutsideEvent() {
+        const model = this._private__chart._internal_model();
         if (!model._internal_timeScale()._internal_isEmpty() && this._private__mouseDown) {
             this._private__mouseDown = false;
             if (this._private__chart._internal_options().handleScale.axisPressedMouseMove.time) {
                 model._internal_endScaleTime();
             }
         }
-    };
-    TimeAxisWidget.prototype._internal_pressedMouseMoveEvent = function (event) {
-        var model = this._private__chart._internal_model();
+    }
+    _internal_pressedMouseMoveEvent(event) {
+        const model = this._private__chart._internal_model();
         if (model._internal_timeScale()._internal_isEmpty() || !this._private__chart._internal_options().handleScale.axisPressedMouseMove.time) {
             return;
         }
         model._internal_scaleTimeTo(event._internal_localX);
-    };
-    TimeAxisWidget.prototype._internal_touchMoveEvent = function (event) {
+    }
+    _internal_touchMoveEvent(event) {
         this._internal_pressedMouseMoveEvent(event);
-    };
-    TimeAxisWidget.prototype._internal_mouseUpEvent = function () {
+    }
+    _internal_mouseUpEvent() {
         this._private__mouseDown = false;
-        var model = this._private__chart._internal_model();
+        const model = this._private__chart._internal_model();
         if (model._internal_timeScale()._internal_isEmpty() && !this._private__chart._internal_options().handleScale.axisPressedMouseMove.time) {
             return;
         }
         model._internal_endScaleTime();
-    };
-    TimeAxisWidget.prototype._internal_touchEndEvent = function () {
+    }
+    _internal_touchEndEvent() {
         this._internal_mouseUpEvent();
-    };
-    TimeAxisWidget.prototype._internal_mouseDoubleClickEvent = function () {
-        if (this._private__chart._internal_options().handleScale.axisDoubleClickReset) {
+    }
+    _internal_mouseDoubleClickEvent() {
+        if (this._private__chart._internal_options().handleScale.axisDoubleClickReset.time) {
             this._private__chart._internal_model()._internal_resetTimeScale();
         }
-    };
-    TimeAxisWidget.prototype._internal_doubleTapEvent = function () {
+    }
+    _internal_doubleTapEvent() {
         this._internal_mouseDoubleClickEvent();
-    };
-    TimeAxisWidget.prototype._internal_mouseEnterEvent = function () {
+    }
+    _internal_mouseEnterEvent() {
         if (this._private__chart._internal_model()._internal_options().handleScale.axisPressedMouseMove.time) {
-            this._private__setCursor(1 /* EwResize */);
+            this._private__setCursor(1 /* CursorType.EwResize */);
         }
-    };
-    TimeAxisWidget.prototype._internal_mouseLeaveEvent = function () {
-        this._private__setCursor(0 /* Default */);
-    };
-    TimeAxisWidget.prototype._internal_getSize = function () {
+    }
+    _internal_mouseLeaveEvent() {
+        this._private__setCursor(0 /* CursorType.Default */);
+    }
+    _internal_getSize() {
         return this._private__size;
-    };
-    TimeAxisWidget.prototype._internal_sizeChanged = function () {
+    }
+    _internal_sizeChanged() {
         return this._private__sizeChanged;
-    };
-    TimeAxisWidget.prototype._internal_setSizes = function (timeAxisSize, leftStubWidth, rightStubWidth) {
+    }
+    _internal_setSizes(timeAxisSize, leftStubWidth, rightStubWidth) {
         if (!this._private__size || !this._private__size._internal_equals(timeAxisSize)) {
             this._private__size = timeAxisSize;
             this._private__isSettingSize = true;
@@ -9970,30 +9795,31 @@ var TimeAxisWidget = /** @class */ (function () {
         if (this._private__rightStub !== null) {
             this._private__rightStub._internal_setSize(new Size(rightStubWidth, timeAxisSize._internal_h));
         }
-    };
-    TimeAxisWidget.prototype._internal_optimalHeight = function () {
-        var rendererOptions = this._private__getRendererOptions();
+    }
+    _internal_optimalHeight() {
+        const rendererOptions = this._private__getRendererOptions();
         return Math.ceil(
         // rendererOptions.offsetSize +
         rendererOptions._internal_borderSize +
             rendererOptions._internal_tickLength +
             rendererOptions._internal_fontSize +
             rendererOptions._internal_paddingTop +
-            rendererOptions._internal_paddingBottom);
-    };
-    TimeAxisWidget.prototype._internal_update = function () {
+            rendererOptions._internal_paddingBottom +
+            rendererOptions._internal_labelBottomOffset);
+    }
+    _internal_update() {
         // this call has side-effect - it regenerates marks on the time scale
         this._private__chart._internal_model()._internal_timeScale()._internal_marks();
-    };
-    TimeAxisWidget.prototype._internal_getImage = function () {
+    }
+    _internal_getImage() {
         return this._private__canvasBinding.canvas;
-    };
-    TimeAxisWidget.prototype._internal_paint = function (type) {
-        if (type === 0 /* None */) {
+    }
+    _internal_paint(type) {
+        if (type === 0 /* InvalidationLevel.None */) {
             return;
         }
-        if (type !== 1 /* Cursor */) {
-            var ctx = getContext2D(this._private__canvasBinding.canvas);
+        if (type !== 1 /* InvalidationLevel.Cursor */) {
+            const ctx = getContext2D(this._private__canvasBinding.canvas);
             this._private__drawBackground(ctx, this._private__canvasBinding.pixelRatio);
             this._private__drawBorder(ctx, this._private__canvasBinding.pixelRatio);
             this._private__drawTickMarks(ctx, this._private__canvasBinding.pixelRatio);
@@ -10007,86 +9833,83 @@ var TimeAxisWidget = /** @class */ (function () {
                 this._private__rightStub._internal_paint(type);
             }
         }
-        var topCtx = getContext2D(this._private__topCanvasBinding.canvas);
-        var pixelRatio = this._private__topCanvasBinding.pixelRatio;
+        const topCtx = getContext2D(this._private__topCanvasBinding.canvas);
+        const pixelRatio = this._private__topCanvasBinding.pixelRatio;
         topCtx.clearRect(0, 0, Math.ceil(this._private__size._internal_w * pixelRatio), Math.ceil(this._private__size._internal_h * pixelRatio));
         this._private__drawLabels([this._private__chart._internal_model()._internal_crosshairSource()], topCtx, pixelRatio);
-    };
-    TimeAxisWidget.prototype._private__drawBackground = function (ctx, pixelRatio) {
-        var _this = this;
-        drawScaled(ctx, pixelRatio, function () {
-            clearRect(ctx, 0, 0, _this._private__size._internal_w, _this._private__size._internal_h, _this._private__chart._internal_model()._internal_backgroundBottomColor());
+    }
+    _private__drawBackground(ctx, pixelRatio) {
+        drawScaled(ctx, pixelRatio, () => {
+            clearRect(ctx, 0, 0, this._private__size._internal_w, this._private__size._internal_h, this._private__chart._internal_model()._internal_backgroundBottomColor());
         });
-    };
-    TimeAxisWidget.prototype._private__drawBorder = function (ctx, pixelRatio) {
+    }
+    _private__drawBorder(ctx, pixelRatio) {
         if (this._private__chart._internal_options().timeScale.borderVisible) {
             ctx.save();
             ctx.fillStyle = this._private__lineColor();
-            var borderSize = Math.max(1, Math.floor(this._private__getRendererOptions()._internal_borderSize * pixelRatio));
+            const borderSize = Math.max(1, Math.floor(this._private__getRendererOptions()._internal_borderSize * pixelRatio));
             ctx.fillRect(0, 0, Math.ceil(this._private__size._internal_w * pixelRatio), borderSize);
             ctx.restore();
         }
-    };
-    TimeAxisWidget.prototype._private__drawTickMarks = function (ctx, pixelRatio) {
-        var _this = this;
-        var tickMarks = this._private__chart._internal_model()._internal_timeScale()._internal_marks();
+    }
+    _private__drawTickMarks(ctx, pixelRatio) {
+        const timeScale = this._private__chart._internal_model()._internal_timeScale();
+        const tickMarks = timeScale._internal_marks();
         if (!tickMarks || tickMarks.length === 0) {
             return;
         }
-        var maxWeight = tickMarks.reduce(markWithGreaterWeight, tickMarks[0])._internal_weight;
+        let maxWeight = tickMarks.reduce(markWithGreaterWeight, tickMarks[0])._internal_weight;
         // special case: it looks strange if 15:00 is bold but 14:00 is not
         // so if maxWeight > TickMarkWeight.Hour1 and < TickMarkWeight.Day reduce it to TickMarkWeight.Hour1
-        if (maxWeight > 30 /* Hour1 */ && maxWeight < 50 /* Day */) {
-            maxWeight = 30 /* Hour1 */;
+        if (maxWeight > 30 /* TickMarkWeight.Hour1 */ && maxWeight < 50 /* TickMarkWeight.Day */) {
+            maxWeight = 30 /* TickMarkWeight.Hour1 */;
         }
         ctx.save();
         ctx.strokeStyle = this._private__lineColor();
-        var rendererOptions = this._private__getRendererOptions();
-        var yText = (rendererOptions._internal_borderSize +
+        const rendererOptions = this._private__getRendererOptions();
+        const yText = (rendererOptions._internal_borderSize +
             rendererOptions._internal_tickLength +
             rendererOptions._internal_paddingTop +
-            rendererOptions._internal_fontSize -
-            rendererOptions._internal_baselineOffset);
+            rendererOptions._internal_fontSize / 2);
         ctx.textAlign = 'center';
+        ctx.textBaseline = 'middle';
         ctx.fillStyle = this._private__lineColor();
-        var borderSize = Math.floor(this._private__getRendererOptions()._internal_borderSize * pixelRatio);
-        var tickWidth = Math.max(1, Math.floor(pixelRatio));
-        var tickOffset = Math.floor(pixelRatio * 0.5);
-        if (this._private__chart._internal_model()._internal_timeScale()._internal_options().borderVisible) {
+        const tickWidth = Math.max(1, Math.floor(pixelRatio));
+        const tickOffset = Math.floor(pixelRatio * 0.5);
+        const options = timeScale._internal_options();
+        if (options.borderVisible && options.ticksVisible) {
             ctx.beginPath();
-            var tickLen = Math.round(rendererOptions._internal_tickLength * pixelRatio);
-            for (var index = tickMarks.length; index--;) {
-                var x = Math.round(tickMarks[index]._internal_coord * pixelRatio);
-                ctx.rect(x - tickOffset, borderSize, tickWidth, tickLen);
+            const tickLen = Math.round(rendererOptions._internal_tickLength * pixelRatio);
+            for (let index = tickMarks.length; index--;) {
+                const x = Math.round(tickMarks[index]._internal_coord * pixelRatio);
+                ctx.rect(x - tickOffset, 0, tickWidth, tickLen);
             }
             ctx.fill();
         }
         ctx.fillStyle = this._private__textColor();
-        drawScaled(ctx, pixelRatio, function () {
+        drawScaled(ctx, pixelRatio, () => {
             // draw base marks
-            ctx.font = _this._private__baseFont();
-            for (var _i = 0, tickMarks_1 = tickMarks; _i < tickMarks_1.length; _i++) {
-                var tickMark = tickMarks_1[_i];
+            ctx.font = this._private__baseFont();
+            for (const tickMark of tickMarks) {
                 if (tickMark._internal_weight < maxWeight) {
-                    var coordinate = tickMark._internal_needAlignCoordinate ? _this._private__alignTickMarkLabelCoordinate(ctx, tickMark._internal_coord, tickMark._internal_label) : tickMark._internal_coord;
+                    const coordinate = tickMark._internal_needAlignCoordinate ? this._private__alignTickMarkLabelCoordinate(ctx, tickMark._internal_coord, tickMark._internal_label) : tickMark._internal_coord;
                     ctx.fillText(tickMark._internal_label, coordinate, yText);
                 }
             }
-            ctx.font = _this._private__baseBoldFont();
-            for (var _a = 0, tickMarks_2 = tickMarks; _a < tickMarks_2.length; _a++) {
-                var tickMark = tickMarks_2[_a];
+            ctx.font = this._private__baseBoldFont();
+            for (const tickMark of tickMarks) {
                 if (tickMark._internal_weight >= maxWeight) {
-                    var coordinate = tickMark._internal_needAlignCoordinate ? _this._private__alignTickMarkLabelCoordinate(ctx, tickMark._internal_coord, tickMark._internal_label) : tickMark._internal_coord;
+                    const coordinate = tickMark._internal_needAlignCoordinate ? this._private__alignTickMarkLabelCoordinate(ctx, tickMark._internal_coord, tickMark._internal_label) : tickMark._internal_coord;
                     ctx.fillText(tickMark._internal_label, coordinate, yText);
                 }
             }
         });
         ctx.restore();
-    };
-    TimeAxisWidget.prototype._private__alignTickMarkLabelCoordinate = function (ctx, coordinate, labelText) {
-        var labelWidth = this._private__widthCache._internal_measureText(ctx, labelText);
-        var labelWidthHalf = labelWidth / 2;
-        var leftTextCoordinate = Math.floor(coordinate - labelWidthHalf) + 0.5;
+    }
+    _private__alignTickMarkLabelCoordinate(ctx, coordinate, labelText) {
+        const labelWidth = this._private__widthCache._internal_measureText(ctx, labelText);
+        const labelWidthHalf = labelWidth / 2;
+        const leftTextCoordinate = Math.floor(coordinate - labelWidthHalf) + 0.5;
         if (leftTextCoordinate < 0) {
             coordinate = coordinate + Math.abs(0 - leftTextCoordinate);
         }
@@ -10094,68 +9917,68 @@ var TimeAxisWidget = /** @class */ (function () {
             coordinate = coordinate - Math.abs(this._private__size._internal_w - (leftTextCoordinate + labelWidth));
         }
         return coordinate;
-    };
-    TimeAxisWidget.prototype._private__drawLabels = function (sources, ctx, pixelRatio) {
-        var rendererOptions = this._private__getRendererOptions();
-        for (var _i = 0, sources_1 = sources; _i < sources_1.length; _i++) {
-            var source = sources_1[_i];
-            for (var _a = 0, _b = source._internal_timeAxisViews(); _a < _b.length; _a++) {
-                var view = _b[_a];
+    }
+    _private__drawLabels(sources, ctx, pixelRatio) {
+        const rendererOptions = this._private__getRendererOptions();
+        for (const source of sources) {
+            for (const view of source._internal_timeAxisViews()) {
                 ctx.save();
                 view._internal_renderer()._internal_draw(ctx, rendererOptions, pixelRatio);
                 ctx.restore();
             }
         }
-    };
-    TimeAxisWidget.prototype._private__lineColor = function () {
+    }
+    _private__lineColor() {
         return this._private__chart._internal_options().timeScale.borderColor;
-    };
-    TimeAxisWidget.prototype._private__textColor = function () {
+    }
+    _private__textColor() {
         return this._private__options.textColor;
-    };
-    TimeAxisWidget.prototype._private__fontSize = function () {
+    }
+    _private__fontSize() {
         return this._private__options.fontSize;
-    };
-    TimeAxisWidget.prototype._private__baseFont = function () {
+    }
+    _private__baseFont() {
         return makeFont(this._private__fontSize(), this._private__options.fontFamily);
-    };
-    TimeAxisWidget.prototype._private__baseBoldFont = function () {
+    }
+    _private__baseBoldFont() {
         return makeFont(this._private__fontSize(), this._private__options.fontFamily, 'bold');
-    };
-    TimeAxisWidget.prototype._private__getRendererOptions = function () {
+    }
+    _private__getRendererOptions() {
         if (this._private__rendererOptions === null) {
             this._private__rendererOptions = {
-                _internal_borderSize: 1 /* BorderSize */,
+                _internal_borderSize: 1 /* Constants.BorderSize */,
                 _internal_baselineOffset: NaN,
                 _internal_paddingTop: NaN,
                 _internal_paddingBottom: NaN,
                 _internal_paddingHorizontal: NaN,
-                _internal_tickLength: 3 /* TickLength */,
+                _internal_tickLength: 5 /* Constants.TickLength */,
                 _internal_fontSize: NaN,
                 _internal_font: '',
                 _internal_widthCache: new TextWidthCache(),
+                _internal_labelBottomOffset: 0,
             };
         }
-        var rendererOptions = this._private__rendererOptions;
-        var newFont = this._private__baseFont();
+        const rendererOptions = this._private__rendererOptions;
+        const newFont = this._private__baseFont();
         if (rendererOptions._internal_font !== newFont) {
-            var fontSize = this._private__fontSize();
+            const fontSize = this._private__fontSize();
             rendererOptions._internal_fontSize = fontSize;
             rendererOptions._internal_font = newFont;
-            rendererOptions._internal_paddingTop = Math.ceil(fontSize / 2.5);
-            rendererOptions._internal_paddingBottom = rendererOptions._internal_paddingTop;
-            rendererOptions._internal_paddingHorizontal = Math.ceil(fontSize / 2);
-            rendererOptions._internal_baselineOffset = Math.round(this._private__fontSize() / 5);
+            rendererOptions._internal_paddingTop = 3 * fontSize / 12;
+            rendererOptions._internal_paddingBottom = 3 * fontSize / 12;
+            rendererOptions._internal_paddingHorizontal = 9 * fontSize / 12;
+            rendererOptions._internal_baselineOffset = 0;
+            rendererOptions._internal_labelBottomOffset = 4 * fontSize / 12;
             rendererOptions._internal_widthCache._internal_reset();
         }
         return this._private__rendererOptions;
-    };
-    TimeAxisWidget.prototype._private__setCursor = function (type) {
-        this._private__cell.style.cursor = type === 1 /* EwResize */ ? 'ew-resize' : 'default';
-    };
-    TimeAxisWidget.prototype._private__recreateStubs = function () {
-        var model = this._private__chart._internal_model();
-        var options = model._internal_options();
+    }
+    _private__setCursor(type) {
+        this._private__cell.style.cursor = type === 1 /* CursorType.EwResize */ ? 'ew-resize' : 'default';
+    }
+    _private__recreateStubs() {
+        const model = this._private__chart._internal_model();
+        const options = model._internal_options();
         if (!options.leftPriceScale.visible && this._private__leftStub !== null) {
             this._private__leftStubCell.removeChild(this._private__leftStub._internal_getElement());
             this._private__leftStub._internal_destroy();
@@ -10166,14 +9989,14 @@ var TimeAxisWidget = /** @class */ (function () {
             this._private__rightStub._internal_destroy();
             this._private__rightStub = null;
         }
-        var rendererOptionsProvider = this._private__chart._internal_model()._internal_rendererOptionsProvider();
-        var params = {
+        const rendererOptionsProvider = this._private__chart._internal_model()._internal_rendererOptionsProvider();
+        const params = {
             _internal_rendererOptionsProvider: rendererOptionsProvider,
         };
-        var borderVisibleGetter = function () {
+        const borderVisibleGetter = () => {
             return options.leftPriceScale.borderVisible && model._internal_timeScale()._internal_options().borderVisible;
         };
-        var bottomColorGetter = function () { return model._internal_backgroundBottomColor(); };
+        const bottomColorGetter = () => model._internal_backgroundBottomColor();
         if (options.leftPriceScale.visible && this._private__leftStub === null) {
             this._private__leftStub = new PriceAxisStub('left', options, params, borderVisibleGetter, bottomColorGetter);
             this._private__leftStubCell.appendChild(this._private__leftStub._internal_getElement());
@@ -10182,12 +10005,12 @@ var TimeAxisWidget = /** @class */ (function () {
             this._private__rightStub = new PriceAxisStub('right', options, params, borderVisibleGetter, bottomColorGetter);
             this._private__rightStubCell.appendChild(this._private__rightStub._internal_getElement());
         }
-    };
-    return TimeAxisWidget;
-}());
+    }
+}
 
-var ChartWidget = /** @class */ (function () {
-    function ChartWidget(container, options) {
+const windowsChrome = isChromiumBased() && isWindows();
+class ChartWidget {
+    constructor(container, options) {
         this._private__paneWidgets = [];
         this._private__drawRafId = 0;
         this._private__height = 0;
@@ -10209,15 +10032,17 @@ var ChartWidget = /** @class */ (function () {
         this._private__tableElement.setAttribute('cellspacing', '0');
         this._private__element.appendChild(this._private__tableElement);
         this._private__onWheelBound = this._private__onMousewheel.bind(this);
-        this._private__element.addEventListener('wheel', this._private__onWheelBound, { passive: false });
+        if (shouldSubscribeMouseWheel(this._private__options)) {
+            this._private__setMouseWheelEventListener(true);
+        }
         this._private__model = new ChartModel(this._private__invalidateHandler.bind(this), this._private__options);
         this._internal_model()._internal_crosshairMoved()._internal_subscribe(this._private__onPaneWidgetCrosshairMoved.bind(this), this);
         this._private__timeAxisWidget = new TimeAxisWidget(this);
         this._private__tableElement.appendChild(this._private__timeAxisWidget._internal_getElement());
-        var width = this._private__options.width;
-        var height = this._private__options.height;
+        let width = this._private__options.width;
+        let height = this._private__options.height;
         if (width === 0 || height === 0) {
-            var containerRect = container.getBoundingClientRect();
+            const containerRect = container.getBoundingClientRect();
             // TODO: Fix it better
             // on Hi-DPI CSS size * Device Pixel Ratio should be integer to avoid smoothing
             // For chart widget we decreases because we must be inside container.
@@ -10240,20 +10065,20 @@ var ChartWidget = /** @class */ (function () {
         this._private__model._internal_timeScale()._internal_optionsApplied()._internal_subscribe(this._private__model._internal_fullUpdate.bind(this._private__model), this);
         this._private__model._internal_priceScalesOptionsChanged()._internal_subscribe(this._private__model._internal_fullUpdate.bind(this._private__model), this);
     }
-    ChartWidget.prototype._internal_model = function () {
+    _internal_model() {
         return this._private__model;
-    };
-    ChartWidget.prototype._internal_options = function () {
+    }
+    _internal_options() {
         return this._private__options;
-    };
-    ChartWidget.prototype._internal_paneWidgets = function () {
+    }
+    _internal_paneWidgets() {
         return this._private__paneWidgets;
-    };
-    ChartWidget.prototype._internal_timeAxisWidget = function () {
+    }
+    _internal_timeAxisWidget() {
         return this._private__timeAxisWidget;
-    };
-    ChartWidget.prototype._internal_destroy = function () {
-        this._private__element.removeEventListener('wheel', this._private__onWheelBound);
+    }
+    _internal_destroy() {
+        this._private__setMouseWheelEventListener(false);
         if (this._private__drawRafId !== 0) {
             window.cancelAnimationFrame(this._private__drawRafId);
         }
@@ -10261,8 +10086,7 @@ var ChartWidget = /** @class */ (function () {
         this._private__model._internal_timeScale()._internal_optionsApplied()._internal_unsubscribeAll(this);
         this._private__model._internal_priceScalesOptionsChanged()._internal_unsubscribeAll(this);
         this._private__model._internal_destroy();
-        for (var _i = 0, _a = this._private__paneWidgets; _i < _a.length; _i++) {
-            var paneWidget = _a[_i];
+        for (const paneWidget of this._private__paneWidgets) {
             this._private__tableElement.removeChild(paneWidget._internal_getElement());
             paneWidget._internal_clicked()._internal_unsubscribeAll(this);
             paneWidget._internal_destroy();
@@ -10278,74 +10102,77 @@ var ChartWidget = /** @class */ (function () {
         }
         this._private__crosshairMoved._internal_destroy();
         this._private__clicked._internal_destroy();
-    };
-    ChartWidget.prototype._internal_resize = function (width, height, forceRepaint) {
-        if (forceRepaint === void 0) { forceRepaint = false; }
+    }
+    _internal_resize(width, height, forceRepaint = false) {
         if (this._private__height === height && this._private__width === width) {
             return;
         }
         this._private__height = height;
         this._private__width = width;
-        var heightStr = height + 'px';
-        var widthStr = width + 'px';
+        const heightStr = height + 'px';
+        const widthStr = width + 'px';
         ensureNotNull(this._private__element).style.height = heightStr;
         ensureNotNull(this._private__element).style.width = widthStr;
         this._private__tableElement.style.height = heightStr;
         this._private__tableElement.style.width = widthStr;
         if (forceRepaint) {
-            this._private__drawImpl(new InvalidateMask(3 /* Full */));
+            this._private__drawImpl(InvalidateMask._internal_full(), performance.now());
         }
         else {
             this._private__model._internal_fullUpdate();
         }
-    };
-    ChartWidget.prototype._internal_paint = function (invalidateMask) {
+    }
+    _internal_paint(invalidateMask) {
         if (invalidateMask === undefined) {
-            invalidateMask = new InvalidateMask(3 /* Full */);
+            invalidateMask = InvalidateMask._internal_full();
         }
-        for (var i = 0; i < this._private__paneWidgets.length; i++) {
+        for (let i = 0; i < this._private__paneWidgets.length; i++) {
             this._private__paneWidgets[i]._internal_paint(invalidateMask._internal_invalidateForPane(i)._internal_level);
         }
         if (this._private__options.timeScale.visible) {
             this._private__timeAxisWidget._internal_paint(invalidateMask._internal_fullInvalidation());
         }
-    };
-    ChartWidget.prototype._internal_applyOptions = function (options) {
+    }
+    _internal_applyOptions(options) {
+        const currentlyHasMouseWheelListener = shouldSubscribeMouseWheel(this._private__options);
         // we don't need to merge options here because it's done in chart model
         // and since both model and widget share the same object it will be done automatically for widget as well
         // not ideal solution for sure, but it work's for now ¯\_(ツ)_/¯
         this._private__model._internal_applyOptions(options);
+        const shouldHaveMouseWheelListener = shouldSubscribeMouseWheel(this._private__options);
+        if (shouldHaveMouseWheelListener !== currentlyHasMouseWheelListener) {
+            this._private__setMouseWheelEventListener(shouldHaveMouseWheelListener);
+        }
         this._private__updateTimeAxisVisibility();
-        var width = options.width || this._private__width;
-        var height = options.height || this._private__height;
+        const width = options.width || this._private__width;
+        const height = options.height || this._private__height;
         this._internal_resize(width, height);
-    };
-    ChartWidget.prototype._internal_clicked = function () {
+    }
+    _internal_clicked() {
         return this._private__clicked;
-    };
-    ChartWidget.prototype._internal_crosshairMoved = function () {
+    }
+    _internal_crosshairMoved() {
         return this._private__crosshairMoved;
-    };
-    ChartWidget.prototype._internal_takeScreenshot = function () {
-        var _this = this;
+    }
+    _internal_takeScreenshot() {
         if (this._private__invalidateMask !== null) {
-            this._private__drawImpl(this._private__invalidateMask);
+            this._private__drawImpl(this._private__invalidateMask, performance.now());
             this._private__invalidateMask = null;
         }
         // calculate target size
-        var firstPane = this._private__paneWidgets[0];
-        var targetCanvas = createPreconfiguredCanvas(document, new Size(this._private__width, this._private__height));
-        var ctx = getContext2D(targetCanvas);
-        var pixelRatio = getCanvasDevicePixelRatio(targetCanvas);
-        drawScaled(ctx, pixelRatio, function () {
-            var targetX = 0;
-            var targetY = 0;
-            var drawPriceAxises = function (position) {
-                for (var paneIndex = 0; paneIndex < _this._private__paneWidgets.length; paneIndex++) {
-                    var paneWidget = _this._private__paneWidgets[paneIndex];
-                    var paneWidgetHeight = paneWidget._internal_getSize()._internal_h;
-                    var priceAxisWidget = ensureNotNull(position === 'left' ? paneWidget._internal_leftPriceAxisWidget() : paneWidget._internal_rightPriceAxisWidget());
-                    var image = priceAxisWidget._internal_getImage();
+        const firstPane = this._private__paneWidgets[0];
+        const targetCanvas = createPreconfiguredCanvas(document, new Size(this._private__width, this._private__height));
+        const ctx = getContext2D(targetCanvas);
+        const pixelRatio = getCanvasDevicePixelRatio(targetCanvas);
+        drawScaled(ctx, pixelRatio, () => {
+            let targetX = 0;
+            let targetY = 0;
+            const drawPriceAxises = (position) => {
+                for (let paneIndex = 0; paneIndex < this._private__paneWidgets.length; paneIndex++) {
+                    const paneWidget = this._private__paneWidgets[paneIndex];
+                    const paneWidgetHeight = paneWidget._internal_getSize()._internal_h;
+                    const priceAxisWidget = ensureNotNull(position === 'left' ? paneWidget._internal_leftPriceAxisWidget() : paneWidget._internal_rightPriceAxisWidget());
+                    const image = priceAxisWidget._internal_getImage();
                     ctx.drawImage(image, targetX, targetY, priceAxisWidget._internal_getWidth(), paneWidgetHeight);
                     targetY += paneWidgetHeight;
                     // if (paneIndex < this._paneWidgets.length - 1) {
@@ -10358,15 +10185,15 @@ var ChartWidget = /** @class */ (function () {
                 }
             };
             // draw left price scale if exists
-            if (_this._private__isLeftAxisVisible()) {
+            if (this._private__isLeftAxisVisible()) {
                 drawPriceAxises('left');
                 targetX = ensureNotNull(firstPane._internal_leftPriceAxisWidget())._internal_getWidth();
             }
             targetY = 0;
-            for (var paneIndex = 0; paneIndex < _this._private__paneWidgets.length; paneIndex++) {
-                var paneWidget = _this._private__paneWidgets[paneIndex];
-                var paneWidgetSize = paneWidget._internal_getSize();
-                var image = paneWidget._internal_getImage();
+            for (let paneIndex = 0; paneIndex < this._private__paneWidgets.length; paneIndex++) {
+                const paneWidget = this._private__paneWidgets[paneIndex];
+                const paneWidgetSize = paneWidget._internal_getSize();
+                const image = paneWidget._internal_getImage();
                 ctx.drawImage(image, targetX, targetY, paneWidgetSize._internal_w, paneWidgetSize._internal_h);
                 targetY += paneWidgetSize._internal_h;
                 // if (paneIndex < this._paneWidgets.length - 1) {
@@ -10378,27 +10205,27 @@ var ChartWidget = /** @class */ (function () {
                 // }
             }
             targetX += firstPane._internal_getSize()._internal_w;
-            if (_this._private__isRightAxisVisible()) {
+            if (this._private__isRightAxisVisible()) {
                 targetY = 0;
                 drawPriceAxises('right');
             }
-            var drawStub = function (position) {
-                var stub = ensureNotNull(position === 'left' ? _this._private__timeAxisWidget._internal_leftStub() : _this._private__timeAxisWidget._internal_rightStub());
-                var size = stub._internal_getSize();
-                var image = stub._internal_getImage();
+            const drawStub = (position) => {
+                const stub = ensureNotNull(position === 'left' ? this._private__timeAxisWidget._internal_leftStub() : this._private__timeAxisWidget._internal_rightStub());
+                const size = stub._internal_getSize();
+                const image = stub._internal_getImage();
                 ctx.drawImage(image, targetX, targetY, size._internal_w, size._internal_h);
             };
             // draw time scale
-            if (_this._private__options.timeScale.visible) {
+            if (this._private__options.timeScale.visible) {
                 targetX = 0;
-                if (_this._private__isLeftAxisVisible()) {
+                if (this._private__isLeftAxisVisible()) {
                     drawStub('left');
                     targetX = ensureNotNull(firstPane._internal_leftPriceAxisWidget())._internal_getWidth();
                 }
-                var size = _this._private__timeAxisWidget._internal_getSize();
-                var image = _this._private__timeAxisWidget._internal_getImage();
+                const size = this._private__timeAxisWidget._internal_getSize();
+                const image = this._private__timeAxisWidget._internal_getImage();
                 ctx.drawImage(image, targetX, targetY, size._internal_w, size._internal_h);
-                if (_this._private__isRightAxisVisible()) {
+                if (this._private__isRightAxisVisible()) {
                     targetX += firstPane._internal_getSize()._internal_w;
                     drawStub('right');
                     ctx.restore();
@@ -10406,11 +10233,8 @@ var ChartWidget = /** @class */ (function () {
             }
         });
         return targetCanvas;
-    };
-    ChartWidget.prototype._internal_getPriceAxisWidth = function (position) {
-        if (position === 'none') {
-            return 0;
-        }
+    }
+    _internal_getPriceAxisWidth(position) {
         if (position === 'left' && !this._private__isLeftAxisVisible()) {
             return 0;
         }
@@ -10423,18 +10247,17 @@ var ChartWidget = /** @class */ (function () {
         // we don't need to worry about exactly pane widget here
         // because all pane widgets have the same width of price axis widget
         // see _adjustSizeImpl
-        var priceAxisWidget = position === 'left'
+        const priceAxisWidget = position === 'left'
             ? this._private__paneWidgets[0]._internal_leftPriceAxisWidget()
             : this._private__paneWidgets[0]._internal_rightPriceAxisWidget();
         return ensureNotNull(priceAxisWidget)._internal_getWidth();
-    };
+    }
     // eslint-disable-next-line complexity
-    ChartWidget.prototype._private__adjustSizeImpl = function () {
-        var totalStretch = 0;
-        var leftPriceAxisWidth = 0;
-        var rightPriceAxisWidth = 0;
-        for (var _i = 0, _a = this._private__paneWidgets; _i < _a.length; _i++) {
-            var paneWidget = _a[_i];
+    _private__adjustSizeImpl() {
+        let totalStretch = 0;
+        let leftPriceAxisWidth = 0;
+        let rightPriceAxisWidth = 0;
+        for (const paneWidget of this._private__paneWidgets) {
             if (this._private__isLeftAxisVisible()) {
                 leftPriceAxisWidth = Math.max(leftPriceAxisWidth, ensureNotNull(paneWidget._internal_leftPriceAxisWidget())._internal_optimalWidth());
             }
@@ -10443,28 +10266,28 @@ var ChartWidget = /** @class */ (function () {
             }
             totalStretch += paneWidget._internal_stretchFactor();
         }
-        var width = this._private__width;
-        var height = this._private__height;
-        var paneWidth = Math.max(width - leftPriceAxisWidth - rightPriceAxisWidth, 0);
+        const width = this._private__width;
+        const height = this._private__height;
+        const paneWidth = Math.max(width - leftPriceAxisWidth - rightPriceAxisWidth, 0);
         // const separatorCount = this._paneSeparators.length;
         // const separatorHeight = SEPARATOR_HEIGHT;
-        var separatorsHeight = 0; // separatorHeight * separatorCount;
-        var timeAxisVisible = this._private__options.timeScale.visible;
-        var timeAxisHeight = timeAxisVisible ? this._private__timeAxisWidget._internal_optimalHeight() : 0;
+        const separatorsHeight = 0; // separatorHeight * separatorCount;
+        const timeAxisVisible = this._private__options.timeScale.visible;
+        let timeAxisHeight = timeAxisVisible ? this._private__timeAxisWidget._internal_optimalHeight() : 0;
         // TODO: Fix it better
         // on Hi-DPI CSS size * Device Pixel Ratio should be integer to avoid smoothing
         if (timeAxisHeight % 2) {
             timeAxisHeight += 1;
         }
-        var otherWidgetHeight = separatorsHeight + timeAxisHeight;
-        var totalPaneHeight = height < otherWidgetHeight ? 0 : height - otherWidgetHeight;
-        var stretchPixels = totalPaneHeight / totalStretch;
-        var accumulatedHeight = 0;
-        for (var paneIndex = 0; paneIndex < this._private__paneWidgets.length; ++paneIndex) {
-            var paneWidget = this._private__paneWidgets[paneIndex];
+        const otherWidgetHeight = separatorsHeight + timeAxisHeight;
+        const totalPaneHeight = height < otherWidgetHeight ? 0 : height - otherWidgetHeight;
+        const stretchPixels = totalPaneHeight / totalStretch;
+        let accumulatedHeight = 0;
+        for (let paneIndex = 0; paneIndex < this._private__paneWidgets.length; ++paneIndex) {
+            const paneWidget = this._private__paneWidgets[paneIndex];
             paneWidget._internal_setState(this._private__model._internal_panes()[paneIndex]);
-            var paneHeight = 0;
-            var calculatePaneHeight = 0;
+            let paneHeight = 0;
+            let calculatePaneHeight = 0;
             if (paneIndex === this._private__paneWidgets.length - 1) {
                 calculatePaneHeight = totalPaneHeight - accumulatedHeight;
             }
@@ -10492,106 +10315,123 @@ var ChartWidget = /** @class */ (function () {
         if (this._private__rightPriceAxisWidth !== rightPriceAxisWidth) {
             this._private__rightPriceAxisWidth = rightPriceAxisWidth;
         }
-    };
-    ChartWidget.prototype._private__onMousewheel = function (event) {
-        var deltaX = event.deltaX / 100;
-        var deltaY = -(event.deltaY / 100);
-        if ((deltaX === 0 || !this._private__options.handleScroll.mouseWheel) &&
-            (deltaY === 0 || !this._private__options.handleScale.mouseWheel)) {
+    }
+    _private__setMouseWheelEventListener(add) {
+        if (add) {
+            this._private__element.addEventListener('wheel', this._private__onWheelBound, { passive: false });
             return;
         }
-        if (event.cancelable) {
-            event.preventDefault();
-        }
+        this._private__element.removeEventListener('wheel', this._private__onWheelBound);
+    }
+    _private__determineWheelSpeedAdjustment(event) {
         switch (event.deltaMode) {
             case event.DOM_DELTA_PAGE:
                 // one screen at time scroll mode
-                deltaX *= 120;
-                deltaY *= 120;
-                break;
+                return 120;
             case event.DOM_DELTA_LINE:
                 // one line at time scroll mode
-                deltaX *= 32;
-                deltaY *= 32;
-                break;
+                return 32;
+        }
+        if (!windowsChrome) {
+            return 1;
+        }
+        // Chromium on Windows has a bug where the scroll speed isn't correctly
+        // adjusted for high density displays. We need to correct for this so that
+        // scroll speed is consistent between browsers.
+        // https://bugs.chromium.org/p/chromium/issues/detail?id=1001735
+        // https://bugs.chromium.org/p/chromium/issues/detail?id=1207308
+        return (1 / window.devicePixelRatio);
+    }
+    _private__onMousewheel(event) {
+        if ((event.deltaX === 0 || !this._private__options.handleScroll.mouseWheel) &&
+            (event.deltaY === 0 || !this._private__options.handleScale.mouseWheel)) {
+            return;
+        }
+        const scrollSpeedAdjustment = this._private__determineWheelSpeedAdjustment(event);
+        const deltaX = scrollSpeedAdjustment * event.deltaX / 100;
+        const deltaY = -(scrollSpeedAdjustment * event.deltaY / 100);
+        if (event.cancelable) {
+            event.preventDefault();
         }
         if (deltaY !== 0 && this._private__options.handleScale.mouseWheel) {
-            var zoomScale = Math.sign(deltaY) * Math.min(1, Math.abs(deltaY));
-            var scrollPosition = event.clientX - this._private__element.getBoundingClientRect().left;
+            const zoomScale = Math.sign(deltaY) * Math.min(1, Math.abs(deltaY));
+            const scrollPosition = event.clientX - this._private__element.getBoundingClientRect().left;
             this._internal_model()._internal_zoomTime(scrollPosition, zoomScale);
         }
         if (deltaX !== 0 && this._private__options.handleScroll.mouseWheel) {
             this._internal_model()._internal_scrollChart(deltaX * -80); // 80 is a made up coefficient, and minus is for the "natural" scroll
         }
-    };
-    ChartWidget.prototype._private__drawImpl = function (invalidateMask) {
+    }
+    _private__drawImpl(invalidateMask, time) {
         var _a;
-        var invalidationType = invalidateMask._internal_fullInvalidation();
+        const invalidationType = invalidateMask._internal_fullInvalidation();
         // actions for full invalidation ONLY (not shared with light)
-        if (invalidationType === 3 /* Full */) {
+        if (invalidationType === 3 /* InvalidationLevel.Full */) {
             this._private__updateGui();
         }
         // light or full invalidate actions
-        if (invalidationType === 3 /* Full */ ||
-            invalidationType === 2 /* Light */) {
+        if (invalidationType === 3 /* InvalidationLevel.Full */ ||
+            invalidationType === 2 /* InvalidationLevel.Light */) {
             this._private__applyMomentaryAutoScale(invalidateMask);
-            this._private__applyTimeScaleInvalidations(invalidateMask);
+            this._private__applyTimeScaleInvalidations(invalidateMask, time);
             this._private__timeAxisWidget._internal_update();
-            this._private__paneWidgets.forEach(function (pane) {
+            this._private__paneWidgets.forEach((pane) => {
                 pane._internal_updatePriceAxisWidgets();
             });
             // In the case a full invalidation has been postponed during the draw, reapply
             // the timescale invalidations. A full invalidation would mean there is a change
             // in the timescale width (caused by price scale changes) that needs to be drawn
             // right away to avoid flickering.
-            if (((_a = this._private__invalidateMask) === null || _a === void 0 ? void 0 : _a._internal_fullInvalidation()) === 3 /* Full */) {
+            if (((_a = this._private__invalidateMask) === null || _a === void 0 ? void 0 : _a._internal_fullInvalidation()) === 3 /* InvalidationLevel.Full */) {
                 this._private__invalidateMask._internal_merge(invalidateMask);
                 this._private__updateGui();
                 this._private__applyMomentaryAutoScale(this._private__invalidateMask);
-                this._private__applyTimeScaleInvalidations(this._private__invalidateMask);
+                this._private__applyTimeScaleInvalidations(this._private__invalidateMask, time);
                 invalidateMask = this._private__invalidateMask;
                 this._private__invalidateMask = null;
             }
         }
         this._internal_paint(invalidateMask);
-    };
-    ChartWidget.prototype._private__applyTimeScaleInvalidations = function (invalidateMask) {
-        var timeScaleInvalidations = invalidateMask._internal_timeScaleInvalidations();
-        for (var _i = 0, timeScaleInvalidations_1 = timeScaleInvalidations; _i < timeScaleInvalidations_1.length; _i++) {
-            var tsInvalidation = timeScaleInvalidations_1[_i];
-            this._private__applyTimeScaleInvalidation(tsInvalidation);
+    }
+    _private__applyTimeScaleInvalidations(invalidateMask, time) {
+        for (const tsInvalidation of invalidateMask._internal_timeScaleInvalidations()) {
+            this._private__applyTimeScaleInvalidation(tsInvalidation, time);
         }
-    };
-    ChartWidget.prototype._private__applyMomentaryAutoScale = function (invalidateMask) {
-        var panes = this._private__model._internal_panes();
-        for (var i = 0; i < panes.length; i++) {
+    }
+    _private__applyMomentaryAutoScale(invalidateMask) {
+        const panes = this._private__model._internal_panes();
+        for (let i = 0; i < panes.length; i++) {
             if (invalidateMask._internal_invalidateForPane(i)._internal_autoScale) {
                 panes[i]._internal_momentaryAutoScale();
             }
         }
-    };
-    ChartWidget.prototype._private__applyTimeScaleInvalidation = function (invalidation) {
-        var timeScale = this._private__model._internal_timeScale();
+    }
+    _private__applyTimeScaleInvalidation(invalidation, time) {
+        const timeScale = this._private__model._internal_timeScale();
         switch (invalidation._internal_type) {
-            case 0 /* FitContent */:
+            case 0 /* TimeScaleInvalidationType.FitContent */:
                 timeScale._internal_fitContent();
                 break;
-            case 1 /* ApplyRange */:
+            case 1 /* TimeScaleInvalidationType.ApplyRange */:
                 timeScale._internal_setLogicalRange(invalidation._internal_value);
                 break;
-            case 2 /* ApplyBarSpacing */:
+            case 2 /* TimeScaleInvalidationType.ApplyBarSpacing */:
                 timeScale._internal_setBarSpacing(invalidation._internal_value);
                 break;
-            case 3 /* ApplyRightOffset */:
+            case 3 /* TimeScaleInvalidationType.ApplyRightOffset */:
                 timeScale._internal_setRightOffset(invalidation._internal_value);
                 break;
-            case 4 /* Reset */:
+            case 4 /* TimeScaleInvalidationType.Reset */:
                 timeScale._internal_restoreDefault();
                 break;
+            case 5 /* TimeScaleInvalidationType.Animation */:
+                if (!invalidation._internal_value._internal_finished(time)) {
+                    timeScale._internal_setRightOffset(invalidation._internal_value._internal_getPosition(time));
+                }
+                break;
         }
-    };
-    ChartWidget.prototype._private__invalidateHandler = function (invalidateMask) {
-        var _this = this;
+    }
+    _private__invalidateHandler(invalidateMask) {
         if (this._private__invalidateMask !== null) {
             this._private__invalidateMask._internal_merge(invalidateMask);
         }
@@ -10600,31 +10440,37 @@ var ChartWidget = /** @class */ (function () {
         }
         if (!this._private__drawPlanned) {
             this._private__drawPlanned = true;
-            this._private__drawRafId = window.requestAnimationFrame(function () {
-                _this._private__drawPlanned = false;
-                _this._private__drawRafId = 0;
-                if (_this._private__invalidateMask !== null) {
-                    var mask = _this._private__invalidateMask;
-                    _this._private__invalidateMask = null;
-                    _this._private__drawImpl(mask);
+            this._private__drawRafId = window.requestAnimationFrame((time) => {
+                this._private__drawPlanned = false;
+                this._private__drawRafId = 0;
+                if (this._private__invalidateMask !== null) {
+                    const mask = this._private__invalidateMask;
+                    this._private__invalidateMask = null;
+                    this._private__drawImpl(mask, time);
+                    for (const tsInvalidation of mask._internal_timeScaleInvalidations()) {
+                        if (tsInvalidation._internal_type === 5 /* TimeScaleInvalidationType.Animation */ && !tsInvalidation._internal_value._internal_finished(time)) {
+                            this._internal_model()._internal_setTimeScaleAnimation(tsInvalidation._internal_value);
+                            break;
+                        }
+                    }
                 }
             });
         }
-    };
-    ChartWidget.prototype._private__updateGui = function () {
+    }
+    _private__updateGui() {
         this._private__syncGuiWithModel();
-    };
+    }
     // private _destroySeparator(separator: PaneSeparator): void {
     // 	this._tableElement.removeChild(separator.getElement());
     // 	separator.destroy();
     // }
-    ChartWidget.prototype._private__syncGuiWithModel = function () {
-        var panes = this._private__model._internal_panes();
-        var targetPaneWidgetsCount = panes.length;
-        var actualPaneWidgetsCount = this._private__paneWidgets.length;
+    _private__syncGuiWithModel() {
+        const panes = this._private__model._internal_panes();
+        const targetPaneWidgetsCount = panes.length;
+        const actualPaneWidgetsCount = this._private__paneWidgets.length;
         // Remove (if needed) pane widgets and separators
-        for (var i = targetPaneWidgetsCount; i < actualPaneWidgetsCount; i++) {
-            var paneWidget = ensureDefined(this._private__paneWidgets.pop());
+        for (let i = targetPaneWidgetsCount; i < actualPaneWidgetsCount; i++) {
+            const paneWidget = ensureDefined(this._private__paneWidgets.pop());
             this._private__tableElement.removeChild(paneWidget._internal_getElement());
             paneWidget._internal_clicked()._internal_unsubscribeAll(this);
             paneWidget._internal_destroy();
@@ -10634,8 +10480,8 @@ var ChartWidget = /** @class */ (function () {
             // }
         }
         // Create (if needed) new pane widgets and separators
-        for (var i = actualPaneWidgetsCount; i < targetPaneWidgetsCount; i++) {
-            var paneWidget = new PaneWidget(this, panes[i]);
+        for (let i = actualPaneWidgetsCount; i < targetPaneWidgetsCount; i++) {
+            const paneWidget = new PaneWidget(this, panes[i]);
             paneWidget._internal_clicked()._internal_subscribe(this._private__onPaneWidgetClicked.bind(this), this);
             this._private__paneWidgets.push(paneWidget);
             // create and insert separator
@@ -10647,9 +10493,9 @@ var ChartWidget = /** @class */ (function () {
             // insert paneWidget
             this._private__tableElement.insertBefore(paneWidget._internal_getElement(), this._private__timeAxisWidget._internal_getElement());
         }
-        for (var i = 0; i < targetPaneWidgetsCount; i++) {
-            var state = panes[i];
-            var paneWidget = this._private__paneWidgets[i];
+        for (let i = 0; i < targetPaneWidgetsCount; i++) {
+            const state = panes[i];
+            const paneWidget = this._private__paneWidgets[i];
             if (paneWidget._internal_state() !== state) {
                 paneWidget._internal_setState(state);
             }
@@ -10659,61 +10505,60 @@ var ChartWidget = /** @class */ (function () {
         }
         this._private__updateTimeAxisVisibility();
         this._private__adjustSizeImpl();
-    };
-    ChartWidget.prototype._private__getMouseEventParamsImpl = function (index, point) {
-        var seriesPrices = new Map();
+    }
+    _private__getMouseEventParamsImpl(index, point) {
+        var _a;
+        const seriesData = new Map();
         if (index !== null) {
-            var serieses = this._private__model._internal_serieses();
-            serieses.forEach(function (s) {
+            const serieses = this._private__model._internal_serieses();
+            serieses.forEach((s) => {
                 // TODO: replace with search left
-                var prices = s._internal_dataAt(index);
-                if (prices !== null) {
-                    seriesPrices.set(s, prices);
+                const data = s._internal_bars()._internal_search(index);
+                if (data !== null) {
+                    seriesData.set(s, data);
                 }
             });
         }
-        var clientTime;
+        let clientTime;
         if (index !== null) {
-            var timePoint = this._private__model._internal_timeScale()._internal_indexToTime(index);
-            if (timePoint !== null) {
+            const timePoint = (_a = this._private__model._internal_timeScale()._internal_indexToTimeScalePoint(index)) === null || _a === void 0 ? void 0 : _a._internal_originalTime;
+            if (timePoint !== undefined) {
                 clientTime = timePoint;
             }
         }
-        var hoveredSource = this._internal_model()._internal_hoveredSource();
-        var hoveredSeries = hoveredSource !== null && hoveredSource._internal_source instanceof Series
+        const hoveredSource = this._internal_model()._internal_hoveredSource();
+        const hoveredSeries = hoveredSource !== null && hoveredSource._internal_source instanceof Series
             ? hoveredSource._internal_source
             : undefined;
-        var hoveredObject = hoveredSource !== null && hoveredSource._internal_object !== undefined
+        const hoveredObject = hoveredSource !== null && hoveredSource._internal_object !== undefined
             ? hoveredSource._internal_object._internal_externalId
             : undefined;
         return {
             _internal_time: clientTime,
-            _internal_point: point || undefined,
+            _internal_index: index !== null && index !== void 0 ? index : undefined,
+            _internal_point: point !== null && point !== void 0 ? point : undefined,
             _internal_hoveredSeries: hoveredSeries,
-            _internal_seriesPrices: seriesPrices,
+            _internal_seriesData: seriesData,
             _internal_hoveredObject: hoveredObject,
         };
-    };
-    ChartWidget.prototype._private__onPaneWidgetClicked = function (time, point) {
-        var _this = this;
-        this._private__clicked._internal_fire(function () { return _this._private__getMouseEventParamsImpl(time, point); });
-    };
-    ChartWidget.prototype._private__onPaneWidgetCrosshairMoved = function (time, point) {
-        var _this = this;
-        this._private__crosshairMoved._internal_fire(function () { return _this._private__getMouseEventParamsImpl(time, point); });
-    };
-    ChartWidget.prototype._private__updateTimeAxisVisibility = function () {
-        var display = this._private__options.timeScale.visible ? '' : 'none';
+    }
+    _private__onPaneWidgetClicked(time, point) {
+        this._private__clicked._internal_fire(() => this._private__getMouseEventParamsImpl(time, point));
+    }
+    _private__onPaneWidgetCrosshairMoved(time, point) {
+        this._private__crosshairMoved._internal_fire(() => this._private__getMouseEventParamsImpl(time, point));
+    }
+    _private__updateTimeAxisVisibility() {
+        const display = this._private__options.timeScale.visible ? '' : 'none';
         this._private__timeAxisWidget._internal_getElement().style.display = display;
-    };
-    ChartWidget.prototype._private__isLeftAxisVisible = function () {
+    }
+    _private__isLeftAxisVisible() {
         return this._private__paneWidgets[0]._internal_state()._internal_leftPriceScale()._internal_options().visible;
-    };
-    ChartWidget.prototype._private__isRightAxisVisible = function () {
+    }
+    _private__isRightAxisVisible() {
         return this._private__paneWidgets[0]._internal_state()._internal_rightPriceScale()._internal_options().visible;
-    };
-    return ChartWidget;
-}());
+    }
+}
 function disableSelection(element) {
     element.style.userSelect = 'none';
     // eslint-disable-next-line deprecation/deprecation
@@ -10725,73 +10570,91 @@ function disableSelection(element) {
     // eslint-disable-next-line @typescript-eslint/no-explicit-any,@typescript-eslint/no-unsafe-member-access
     element.style.webkitTapHighlightColor = 'transparent';
 }
-
-/// <reference types="_build-time-constants" />
-function warn(msg) {
-    {
-        // eslint-disable-next-line no-console
-        console.warn(msg);
-    }
+function shouldSubscribeMouseWheel(options) {
+    return Boolean(options.handleScroll.mouseWheel || options.handleScale.mouseWheel);
 }
 
-function getLineBasedSeriesPlotRow(time, index, item) {
-    var val = item.value;
-    return { _internal_index: index, _internal_time: time, _internal_value: [val, val, val, val] };
-}
-function getColoredLineBasedSeriesPlotRow(time, index, item) {
-    var val = item.value;
-    var res = { _internal_index: index, _internal_time: time, _internal_value: [val, val, val, val] };
-    // 'color' here is public property (from API) so we can use `in` here safely
-    // eslint-disable-next-line no-restricted-syntax
-    if ('color' in item && item.color !== undefined) {
+function getColoredLineBasedSeriesPlotRow(time, index, item, originalTime) {
+    const val = item.value;
+    const res = { _internal_index: index, _internal_time: time, _internal_value: [val, val, val, val], _internal_originalTime: originalTime };
+    if (item.color !== undefined) {
         res._internal_color = item.color;
     }
     return res;
 }
-function getBarSeriesPlotRow(time, index, item) {
-    var res = { _internal_index: index, _internal_time: time, _internal_value: [item.open, item.high, item.low, item.close] };
-    // 'color' here is public property (from API) so we can use `in` here safely
-    // eslint-disable-next-line no-restricted-syntax
-    if ('color' in item && item.color !== undefined) {
-        res._internal_color = item.color;
+function getAreaSeriesPlotRow(time, index, item, originalTime) {
+    const val = item.value;
+    const res = { _internal_index: index, _internal_time: time, _internal_value: [val, val, val, val], _internal_originalTime: originalTime };
+    if (item.lineColor !== undefined) {
+        res._internal_lineColor = item.lineColor;
+    }
+    if (item.topColor !== undefined) {
+        res._internal_topColor = item.topColor;
+    }
+    if (item.bottomColor !== undefined) {
+        res._internal_bottomColor = item.bottomColor;
     }
     return res;
 }
-function getCandlestickSeriesPlotRow(time, index, item) {
-    var res = { _internal_index: index, _internal_time: time, _internal_value: [item.open, item.high, item.low, item.close] };
-    // 'color' here is public property (from API) so we can use `in` here safely
-    // eslint-disable-next-line no-restricted-syntax
-    if ('color' in item && item.color !== undefined) {
-        res._internal_color = item.color;
+function getBaselineSeriesPlotRow(time, index, item, originalTime) {
+    const val = item.value;
+    const res = { _internal_index: index, _internal_time: time, _internal_value: [val, val, val, val], _internal_originalTime: originalTime };
+    if (item.topLineColor !== undefined) {
+        res._internal_topLineColor = item.topLineColor;
     }
-    // 'borderColor' here is public property (from API) so we can use `in` here safely
-    // eslint-disable-next-line no-restricted-syntax
-    if ('borderColor' in item && item.borderColor !== undefined) {
-        res._internal_borderColor = item.borderColor;
+    if (item.bottomLineColor !== undefined) {
+        res._internal_bottomLineColor = item.bottomLineColor;
     }
-    // 'wickColor' here is public property (from API) so we can use `in` here safely
-    // eslint-disable-next-line no-restricted-syntax
-    if ('wickColor' in item && item.wickColor !== undefined) {
-        res._internal_wickColor = item.wickColor;
+    if (item.topFillColor1 !== undefined) {
+        res._internal_topFillColor1 = item.topFillColor1;
     }
-    return res;
+    if (item.topFillColor2 !== undefined) {
+        res._internal_topFillColor2 = item.topFillColor2;
+    }
+    if (item.bottomFillColor1 !== undefined) {
+        res._internal_bottomFillColor1 = item.bottomFillColor1;
+    }
+    if (item.bottomFillColor2 !== undefined) {
+        res._internal_bottomFillColor2 = item.bottomFillColor2;
+    }
+    return res;
+}
+function getBarSeriesPlotRow(time, index, item, originalTime) {
+    const res = { _internal_index: index, _internal_time: time, _internal_value: [item.open, item.high, item.low, item.close], _internal_originalTime: originalTime };
+    if (item.color !== undefined) {
+        res._internal_color = item.color;
+    }
+    return res;
+}
+function getCandlestickSeriesPlotRow(time, index, item, originalTime) {
+    const res = { _internal_index: index, _internal_time: time, _internal_value: [item.open, item.high, item.low, item.close], _internal_originalTime: originalTime };
+    if (item.color !== undefined) {
+        res._internal_color = item.color;
+    }
+    if (item.borderColor !== undefined) {
+        res._internal_borderColor = item.borderColor;
+    }
+    if (item.wickColor !== undefined) {
+        res._internal_wickColor = item.wickColor;
+    }
+    return res;
 }
 function isSeriesPlotRow(row) {
     return row._internal_value !== undefined;
 }
 function wrapWhitespaceData(createPlotRowFn) {
-    return function (time, index, bar) {
+    return (time, index, bar, originalTime) => {
         if (isWhitespaceData(bar)) {
-            return { _internal_time: time, _internal_index: index };
+            return { _internal_time: time, _internal_index: index, _internal_originalTime: originalTime };
         }
-        return createPlotRowFn(time, index, bar);
+        return createPlotRowFn(time, index, bar, originalTime);
     };
 }
-var seriesPlotRowFnMap = {
+const seriesPlotRowFnMap = {
     Candlestick: wrapWhitespaceData(getCandlestickSeriesPlotRow),
     Bar: wrapWhitespaceData(getBarSeriesPlotRow),
-    Area: wrapWhitespaceData(getLineBasedSeriesPlotRow),
-    Baseline: wrapWhitespaceData(getLineBasedSeriesPlotRow),
+    Area: wrapWhitespaceData(getAreaSeriesPlotRow),
+    Baseline: wrapWhitespaceData(getBaselineSeriesPlotRow),
     Histogram: wrapWhitespaceData(getColoredLineBasedSeriesPlotRow),
     Line: wrapWhitespaceData(getColoredLineBasedSeriesPlotRow),
 };
@@ -10808,44 +10671,43 @@ function minutes(count) {
 function seconds(count) {
     return count * 1000;
 }
-var intradayWeightDivisors = [
-    { _internal_divisor: seconds(1), _internal_weight: 10 /* Second */ },
-    { _internal_divisor: minutes(1), _internal_weight: 20 /* Minute1 */ },
-    { _internal_divisor: minutes(5), _internal_weight: 21 /* Minute5 */ },
-    { _internal_divisor: minutes(30), _internal_weight: 22 /* Minute30 */ },
-    { _internal_divisor: hours(1), _internal_weight: 30 /* Hour1 */ },
-    { _internal_divisor: hours(3), _internal_weight: 31 /* Hour3 */ },
-    { _internal_divisor: hours(6), _internal_weight: 32 /* Hour6 */ },
-    { _internal_divisor: hours(12), _internal_weight: 33 /* Hour12 */ },
+const intradayWeightDivisors = [
+    { _internal_divisor: seconds(1), _internal_weight: 10 /* TickMarkWeight.Second */ },
+    { _internal_divisor: minutes(1), _internal_weight: 20 /* TickMarkWeight.Minute1 */ },
+    { _internal_divisor: minutes(5), _internal_weight: 21 /* TickMarkWeight.Minute5 */ },
+    { _internal_divisor: minutes(30), _internal_weight: 22 /* TickMarkWeight.Minute30 */ },
+    { _internal_divisor: hours(1), _internal_weight: 30 /* TickMarkWeight.Hour1 */ },
+    { _internal_divisor: hours(3), _internal_weight: 31 /* TickMarkWeight.Hour3 */ },
+    { _internal_divisor: hours(6), _internal_weight: 32 /* TickMarkWeight.Hour6 */ },
+    { _internal_divisor: hours(12), _internal_weight: 33 /* TickMarkWeight.Hour12 */ },
 ];
 function weightByTime(currentDate, prevDate) {
     if (currentDate.getUTCFullYear() !== prevDate.getUTCFullYear()) {
-        return 70 /* Year */;
+        return 70 /* TickMarkWeight.Year */;
     }
     else if (currentDate.getUTCMonth() !== prevDate.getUTCMonth()) {
-        return 60 /* Month */;
+        return 60 /* TickMarkWeight.Month */;
     }
     else if (currentDate.getUTCDate() !== prevDate.getUTCDate()) {
-        return 50 /* Day */;
+        return 50 /* TickMarkWeight.Day */;
     }
-    for (var i = intradayWeightDivisors.length - 1; i >= 0; --i) {
+    for (let i = intradayWeightDivisors.length - 1; i >= 0; --i) {
         if (Math.floor(prevDate.getTime() / intradayWeightDivisors[i]._internal_divisor) !== Math.floor(currentDate.getTime() / intradayWeightDivisors[i]._internal_divisor)) {
             return intradayWeightDivisors[i]._internal_weight;
         }
     }
-    return 0 /* LessThanSecond */;
+    return 0 /* TickMarkWeight.LessThanSecond */;
 }
-function fillWeightsForPoints(sortedTimePoints, startIndex) {
-    if (startIndex === void 0) { startIndex = 0; }
+function fillWeightsForPoints(sortedTimePoints, startIndex = 0) {
     if (sortedTimePoints.length === 0) {
         return;
     }
-    var prevTime = startIndex === 0 ? null : sortedTimePoints[startIndex - 1]._internal_time._internal_timestamp;
-    var prevDate = prevTime !== null ? new Date(prevTime * 1000) : null;
-    var totalTimeDiff = 0;
-    for (var index = startIndex; index < sortedTimePoints.length; ++index) {
-        var currentPoint = sortedTimePoints[index];
-        var currentDate = new Date(currentPoint._internal_time._internal_timestamp * 1000);
+    let prevTime = startIndex === 0 ? null : sortedTimePoints[startIndex - 1]._internal_time._internal_timestamp;
+    let prevDate = prevTime !== null ? new Date(prevTime * 1000) : null;
+    let totalTimeDiff = 0;
+    for (let index = startIndex; index < sortedTimePoints.length; ++index) {
+        const currentPoint = sortedTimePoints[index];
+        const currentDate = new Date(currentPoint._internal_time._internal_timestamp * 1000);
         if (prevDate !== null) {
             currentPoint._internal_timeWeight = weightByTime(currentDate, prevDate);
         }
@@ -10856,8 +10718,8 @@ function fillWeightsForPoints(sortedTimePoints, startIndex) {
     if (startIndex === 0 && sortedTimePoints.length > 1) {
         // let's guess a weight for the first point
         // let's say the previous point was average time back in the history
-        var averageTimeDiff = Math.ceil(totalTimeDiff / (sortedTimePoints.length - 1));
-        var approxPrevDate = new Date((sortedTimePoints[0]._internal_time._internal_timestamp - averageTimeDiff) * 1000);
+        const averageTimeDiff = Math.ceil(totalTimeDiff / (sortedTimePoints.length - 1));
+        const approxPrevDate = new Date((sortedTimePoints[0]._internal_time._internal_timestamp - averageTimeDiff) * 1000);
         sortedTimePoints[0]._internal_timeWeight = weightByTime(new Date(sortedTimePoints[0]._internal_time._internal_timestamp * 1000), approxPrevDate);
     }
 }
@@ -10867,7 +10729,7 @@ function businessDayConverter(time) {
     if (!isBusinessDay(time)) {
         throw new Error('time must be of type BusinessDay');
     }
-    var date = new Date(Date.UTC(time.year, time.month - 1, time.day, 0, 0, 0, 0));
+    const date = new Date(Date.UTC(time.year, time.month - 1, time.day, 0, 0, 0, 0));
     return {
         _internal_timestamp: Math.round(date.getTime() / 1000),
         _internal_businessDay: time,
@@ -10899,7 +10761,7 @@ function convertTime(time) {
     }
     return businessDayConverter(time);
 }
-var validDateRegex = /^\d\d\d\d-\d\d-\d\d$/;
+const validDateRegex = /^\d\d\d\d-\d\d-\d\d$/;
 function stringToBusinessDay(value) {
     {
         // in some browsers (I look at your Chrome) the Date constructor may accept invalid date string
@@ -10909,12 +10771,12 @@ function stringToBusinessDay(value) {
         // so, we need to be sure that date has valid format to avoid strange behavior and hours of debugging
         // but let's do this in development build only because of perf
         if (!validDateRegex.test(value)) {
-            throw new Error("Invalid date string=".concat(value, ", expected format=yyyy-mm-dd"));
+            throw new Error(`Invalid date string=${value}, expected format=yyyy-mm-dd`);
         }
     }
-    var d = new Date(value);
+    const d = new Date(value);
     if (isNaN(d.getTime())) {
-        throw new Error("Invalid date string=".concat(value, ", expected format=yyyy-mm-dd"));
+        throw new Error(`Invalid date string=${value}, expected format=yyyy-mm-dd`);
     }
     return {
         day: d.getUTCDate(),
@@ -10943,8 +10805,8 @@ function seriesRowsFirsAndLastTime(seriesRows) {
     };
 }
 function seriesUpdateInfo(seriesRows, prevSeriesRows) {
-    var firstAndLastTime = seriesRowsFirsAndLastTime(seriesRows);
-    var prevFirstAndLastTime = seriesRowsFirsAndLastTime(prevSeriesRows);
+    const firstAndLastTime = seriesRowsFirsAndLastTime(seriesRows);
+    const prevFirstAndLastTime = seriesRowsFirsAndLastTime(prevSeriesRows);
     if (firstAndLastTime !== undefined && prevFirstAndLastTime !== undefined) {
         return {
             _internal_lastBarUpdatedOrNewBarsAddedToTheRight: firstAndLastTime._internal_lastTime >= prevFirstAndLastTime._internal_lastTime &&
@@ -10953,8 +10815,23 @@ function seriesUpdateInfo(seriesRows, prevSeriesRows) {
     }
     return undefined;
 }
-var DataLayer = /** @class */ (function () {
-    function DataLayer() {
+function timeScalePointTime(mergedPointData) {
+    let result;
+    mergedPointData.forEach((v) => {
+        if (result === undefined) {
+            result = v._internal_originalTime;
+        }
+    });
+    return ensureDefined(result);
+}
+function saveOriginalTime(data) {
+    // eslint-disable-next-line @typescript-eslint/tslint/config
+    if (data._internal_originalTime === undefined) {
+        data._internal_originalTime = data.time;
+    }
+}
+class DataLayer {
+    constructor() {
         // note that _pointDataByTimePoint and _seriesRowsBySeries shares THE SAME objects in their values between each other
         // it's just different kind of maps to make usages/perf better
         this._private__pointDataByTimePoint = new Map();
@@ -10963,18 +10840,17 @@ var DataLayer = /** @class */ (function () {
         // this is kind of "dest" values (in opposite to "source" ones) - we don't need to modify it manually, the only by calling _updateTimeScalePoints or updateSeriesData methods
         this._private__sortedTimePoints = [];
     }
-    DataLayer.prototype._internal_destroy = function () {
+    _internal_destroy() {
         this._private__pointDataByTimePoint.clear();
         this._private__seriesRowsBySeries.clear();
         this._private__seriesLastTimePoint.clear();
         this._private__sortedTimePoints = [];
-    };
-    DataLayer.prototype._internal_setSeriesData = function (series, data) {
-        var _this = this;
-        var needCleanupPoints = this._private__pointDataByTimePoint.size !== 0;
-        var isTimeScaleAffected = false;
+    }
+    _internal_setSeriesData(series, data) {
+        let needCleanupPoints = this._private__pointDataByTimePoint.size !== 0;
+        let isTimeScaleAffected = false;
         // save previous series rows data before it's replaced inside this._setRowsToSeries
-        var prevSeriesRows = this._private__seriesRowsBySeries.get(series);
+        const prevSeriesRows = this._private__seriesRowsBySeries.get(series);
         if (prevSeriesRows !== undefined) {
             if (this._private__seriesRowsBySeries.size === 1) {
                 needCleanupPoints = false;
@@ -10985,29 +10861,30 @@ var DataLayer = /** @class */ (function () {
             else {
                 // perf optimization - actually we have to use this._pointDataByTimePoint for going through here
                 // but as soon as this._sortedTimePoints is just a different form of _pointDataByTimePoint we can use it as well
-                for (var _i = 0, _a = this._private__sortedTimePoints; _i < _a.length; _i++) {
-                    var point = _a[_i];
+                for (const point of this._private__sortedTimePoints) {
                     if (point.pointData._internal_mapping.delete(series)) {
                         isTimeScaleAffected = true;
                     }
                 }
             }
         }
-        var seriesRows = [];
+        let seriesRows = [];
         if (data.length !== 0) {
+            const extendedData = data;
+            extendedData.forEach((i) => saveOriginalTime(i));
             convertStringsToBusinessDays(data);
-            var timeConverter_1 = ensureNotNull(selectTimeConverter(data));
-            var createPlotRow_1 = getSeriesPlotRowCreator(series._internal_seriesType());
-            seriesRows = data.map(function (item) {
-                var time = timeConverter_1(item.time);
-                var timePointData = _this._private__pointDataByTimePoint.get(time._internal_timestamp);
+            const timeConverter = ensureNotNull(selectTimeConverter(data));
+            const createPlotRow = getSeriesPlotRowCreator(series._internal_seriesType());
+            seriesRows = extendedData.map((item) => {
+                const time = timeConverter(item.time);
+                let timePointData = this._private__pointDataByTimePoint.get(time._internal_timestamp);
                 if (timePointData === undefined) {
                     // the indexes will be sync later
                     timePointData = createEmptyTimePointData(time);
-                    _this._private__pointDataByTimePoint.set(time._internal_timestamp, timePointData);
+                    this._private__pointDataByTimePoint.set(time._internal_timestamp, timePointData);
                     isTimeScaleAffected = true;
                 }
-                var row = createPlotRow_1(time, timePointData._internal_index, item);
+                const row = createPlotRow(time, timePointData._internal_index, item, item._internal_originalTime);
                 timePointData._internal_mapping.set(series, row);
                 return row;
             });
@@ -11018,66 +10895,78 @@ var DataLayer = /** @class */ (function () {
             this._private__cleanupPointsData();
         }
         this._private__setRowsToSeries(series, seriesRows);
-        var firstChangedPointIndex = -1;
+        let firstChangedPointIndex = -1;
         if (isTimeScaleAffected) {
             // then generate the time scale points
             // timeWeight will be updates in _updateTimeScalePoints later
-            var newTimeScalePoints_1 = [];
-            this._private__pointDataByTimePoint.forEach(function (pointData) {
-                newTimeScalePoints_1.push({ _internal_timeWeight: 0, _internal_time: pointData._internal_timePoint, pointData: pointData });
+            const newTimeScalePoints = [];
+            this._private__pointDataByTimePoint.forEach((pointData) => {
+                newTimeScalePoints.push({
+                    _internal_timeWeight: 0,
+                    _internal_time: pointData._internal_timePoint,
+                    pointData,
+                    _internal_originalTime: timeScalePointTime(pointData._internal_mapping),
+                });
             });
-            newTimeScalePoints_1.sort(function (t1, t2) { return t1._internal_time._internal_timestamp - t2._internal_time._internal_timestamp; });
-            firstChangedPointIndex = this._private__replaceTimeScalePoints(newTimeScalePoints_1);
+            newTimeScalePoints.sort((t1, t2) => t1._internal_time._internal_timestamp - t2._internal_time._internal_timestamp);
+            firstChangedPointIndex = this._private__replaceTimeScalePoints(newTimeScalePoints);
         }
         return this._private__getUpdateResponse(series, firstChangedPointIndex, seriesUpdateInfo(this._private__seriesRowsBySeries.get(series), prevSeriesRows));
-    };
-    DataLayer.prototype._internal_removeSeries = function (series) {
+    }
+    _internal_removeSeries(series) {
         return this._internal_setSeriesData(series, []);
-    };
-    DataLayer.prototype._internal_updateSeriesData = function (series, data) {
+    }
+    _internal_updateSeriesData(series, data) {
+        const extendedData = data;
+        saveOriginalTime(extendedData);
         convertStringToBusinessDay(data);
-        var time = ensureNotNull(selectTimeConverter([data]))(data.time);
-        var lastSeriesTime = this._private__seriesLastTimePoint.get(series);
+        const time = ensureNotNull(selectTimeConverter([data]))(data.time);
+        const lastSeriesTime = this._private__seriesLastTimePoint.get(series);
         if (lastSeriesTime !== undefined && time._internal_timestamp < lastSeriesTime._internal_timestamp) {
-            throw new Error("Cannot update oldest data, last time=".concat(lastSeriesTime._internal_timestamp, ", new time=").concat(time._internal_timestamp));
+            throw new Error(`Cannot update oldest data, last time=${lastSeriesTime._internal_timestamp}, new time=${time._internal_timestamp}`);
         }
-        var pointDataAtTime = this._private__pointDataByTimePoint.get(time._internal_timestamp);
+        let pointDataAtTime = this._private__pointDataByTimePoint.get(time._internal_timestamp);
         // if no point data found for the new data item
         // that means that we need to update scale
-        var affectsTimeScale = pointDataAtTime === undefined;
+        const affectsTimeScale = pointDataAtTime === undefined;
         if (pointDataAtTime === undefined) {
             // the indexes will be sync later
             pointDataAtTime = createEmptyTimePointData(time);
             this._private__pointDataByTimePoint.set(time._internal_timestamp, pointDataAtTime);
         }
-        var createPlotRow = getSeriesPlotRowCreator(series._internal_seriesType());
-        var plotRow = createPlotRow(time, pointDataAtTime._internal_index, data);
+        const createPlotRow = getSeriesPlotRowCreator(series._internal_seriesType());
+        const plotRow = createPlotRow(time, pointDataAtTime._internal_index, data, extendedData._internal_originalTime);
         pointDataAtTime._internal_mapping.set(series, plotRow);
         this._private__updateLastSeriesRow(series, plotRow);
-        var info = { _internal_lastBarUpdatedOrNewBarsAddedToTheRight: isSeriesPlotRow(plotRow) };
+        const info = { _internal_lastBarUpdatedOrNewBarsAddedToTheRight: isSeriesPlotRow(plotRow) };
         // if point already exist on the time scale - we don't need to make a full update and just make an incremental one
         if (!affectsTimeScale) {
             return this._private__getUpdateResponse(series, -1, info);
         }
-        var newPoint = { _internal_timeWeight: 0, _internal_time: pointDataAtTime._internal_timePoint, pointData: pointDataAtTime };
-        var insertIndex = lowerbound(this._private__sortedTimePoints, newPoint._internal_time._internal_timestamp, function (a, b) { return a._internal_time._internal_timestamp < b; });
+        const newPoint = {
+            _internal_timeWeight: 0,
+            _internal_time: pointDataAtTime._internal_timePoint,
+            pointData: pointDataAtTime,
+            _internal_originalTime: timeScalePointTime(pointDataAtTime._internal_mapping),
+        };
+        const insertIndex = lowerbound(this._private__sortedTimePoints, newPoint._internal_time._internal_timestamp, (a, b) => a._internal_time._internal_timestamp < b);
         // yes, I know that this array is readonly and this change is intended to make it performative
         // we marked _sortedTimePoints array as readonly to avoid modifying this array anywhere else
         // but this place is exceptional case due performance reasons, sorry
         this._private__sortedTimePoints.splice(insertIndex, 0, newPoint);
-        for (var index = insertIndex; index < this._private__sortedTimePoints.length; ++index) {
+        for (let index = insertIndex; index < this._private__sortedTimePoints.length; ++index) {
             assignIndexToPointData(this._private__sortedTimePoints[index].pointData, index);
         }
         fillWeightsForPoints(this._private__sortedTimePoints, insertIndex);
         return this._private__getUpdateResponse(series, insertIndex, info);
-    };
-    DataLayer.prototype._private__updateLastSeriesRow = function (series, plotRow) {
-        var seriesData = this._private__seriesRowsBySeries.get(series);
+    }
+    _private__updateLastSeriesRow(series, plotRow) {
+        let seriesData = this._private__seriesRowsBySeries.get(series);
         if (seriesData === undefined) {
             seriesData = [];
             this._private__seriesRowsBySeries.set(series, seriesData);
         }
-        var lastSeriesRow = seriesData.length !== 0 ? seriesData[seriesData.length - 1] : null;
+        const lastSeriesRow = seriesData.length !== 0 ? seriesData[seriesData.length - 1] : null;
         if (lastSeriesRow === null || plotRow._internal_time._internal_timestamp > lastSeriesRow._internal_time._internal_timestamp) {
             if (isSeriesPlotRow(plotRow)) {
                 seriesData.push(plotRow);
@@ -11092,8 +10981,8 @@ var DataLayer = /** @class */ (function () {
             }
         }
         this._private__seriesLastTimePoint.set(series, plotRow._internal_time);
-    };
-    DataLayer.prototype._private__setRowsToSeries = function (series, seriesRows) {
+    }
+    _private__setRowsToSeries(series, seriesRows) {
         if (seriesRows.length !== 0) {
             this._private__seriesRowsBySeries.set(series, seriesRows.filter(isSeriesPlotRow));
             this._private__seriesLastTimePoint.set(series, seriesRows[seriesRows.length - 1]._internal_time);
@@ -11102,30 +10991,29 @@ var DataLayer = /** @class */ (function () {
             this._private__seriesRowsBySeries.delete(series);
             this._private__seriesLastTimePoint.delete(series);
         }
-    };
-    DataLayer.prototype._private__cleanupPointsData = function () {
+    }
+    _private__cleanupPointsData() {
         // let's treat all current points as "potentially removed"
         // we could create an array with actually potentially removed points
         // but most likely this array will be similar to _sortedTimePoints so let's avoid using additional memory
         // note that we can use _sortedTimePoints here since a point might be removed only it was here previously
-        for (var _i = 0, _a = this._private__sortedTimePoints; _i < _a.length; _i++) {
-            var point = _a[_i];
+        for (const point of this._private__sortedTimePoints) {
             if (point.pointData._internal_mapping.size === 0) {
                 this._private__pointDataByTimePoint.delete(point._internal_time._internal_timestamp);
             }
         }
-    };
+    }
     /**
      * Sets new time scale and make indexes valid for all series
      *
      * @returns The index of the first changed point or `-1` if there is no change.
      */
-    DataLayer.prototype._private__replaceTimeScalePoints = function (newTimePoints) {
-        var firstChangedPointIndex = -1;
+    _private__replaceTimeScalePoints(newTimePoints) {
+        let firstChangedPointIndex = -1;
         // search the first different point and "syncing" time weight by the way
-        for (var index = 0; index < this._private__sortedTimePoints.length && index < newTimePoints.length; ++index) {
-            var oldPoint = this._private__sortedTimePoints[index];
-            var newPoint = newTimePoints[index];
+        for (let index = 0; index < this._private__sortedTimePoints.length && index < newTimePoints.length; ++index) {
+            const oldPoint = this._private__sortedTimePoints[index];
+            const newPoint = newTimePoints[index];
             if (oldPoint._internal_time._internal_timestamp !== newPoint._internal_time._internal_timestamp) {
                 firstChangedPointIndex = index;
                 break;
@@ -11145,29 +11033,29 @@ var DataLayer = /** @class */ (function () {
         }
         // if time scale points are changed that means that we need to make full update to all series (with clearing points)
         // but first we need to synchronize indexes and re-fill time weights
-        for (var index = firstChangedPointIndex; index < newTimePoints.length; ++index) {
+        for (let index = firstChangedPointIndex; index < newTimePoints.length; ++index) {
             assignIndexToPointData(newTimePoints[index].pointData, index);
         }
         // re-fill time weights for point after the first changed one
         fillWeightsForPoints(newTimePoints, firstChangedPointIndex);
         this._private__sortedTimePoints = newTimePoints;
         return firstChangedPointIndex;
-    };
-    DataLayer.prototype._private__getBaseIndex = function () {
+    }
+    _private__getBaseIndex() {
         if (this._private__seriesRowsBySeries.size === 0) {
             // if we have no data then 'reset' the base index to null
             return null;
         }
-        var baseIndex = 0;
-        this._private__seriesRowsBySeries.forEach(function (data) {
+        let baseIndex = 0;
+        this._private__seriesRowsBySeries.forEach((data) => {
             if (data.length !== 0) {
                 baseIndex = Math.max(baseIndex, data[data.length - 1]._internal_index);
             }
         });
         return baseIndex;
-    };
-    DataLayer.prototype._private__getUpdateResponse = function (updatedSeries, firstChangedPointIndex, info) {
-        var dataUpdateResponse = {
+    }
+    _private__getUpdateResponse(updatedSeries, firstChangedPointIndex, info) {
+        const dataUpdateResponse = {
             _internal_series: new Map(),
             _internal_timeScale: {
                 _internal_baseIndex: this._private__getBaseIndex(),
@@ -11176,7 +11064,7 @@ var DataLayer = /** @class */ (function () {
         if (firstChangedPointIndex !== -1) {
             // TODO: it's possible to make perf improvements by checking what series has data after firstChangedPointIndex
             // but let's skip for now
-            this._private__seriesRowsBySeries.forEach(function (data, s) {
+            this._private__seriesRowsBySeries.forEach((data, s) => {
                 dataUpdateResponse._internal_series.set(s, {
                     _internal_data: data,
                     _internal_info: s === updatedSeries ? info : undefined,
@@ -11192,288 +11080,172 @@ var DataLayer = /** @class */ (function () {
             dataUpdateResponse._internal_timeScale._internal_firstChangedPointIndex = firstChangedPointIndex;
         }
         else {
-            var seriesData = this._private__seriesRowsBySeries.get(updatedSeries);
+            const seriesData = this._private__seriesRowsBySeries.get(updatedSeries);
             // if no seriesData found that means that we just removed the series
             dataUpdateResponse._internal_series.set(updatedSeries, { _internal_data: seriesData || [], _internal_info: info });
         }
         return dataUpdateResponse;
-    };
-    return DataLayer;
-}());
+    }
+}
 function assignIndexToPointData(pointData, index) {
     // first, nevertheless update index of point data ("make it valid")
     pointData._internal_index = index;
     // and then we need to sync indexes for all series
-    pointData._internal_mapping.forEach(function (seriesRow) {
+    pointData._internal_mapping.forEach((seriesRow) => {
         seriesRow._internal_index = index;
     });
 }
 
-function checkPriceLineOptions(options) {
-    // eslint-disable-next-line @typescript-eslint/tslint/config
-    assert(typeof options.price === 'number', "the type of 'price' price line's property must be a number, got '".concat(typeof options.price, "'"));
+function singleValueData(plotRow) {
+    return {
+        value: plotRow._internal_value[3 /* PlotRowValueIndex.Close */],
+        time: plotRow._internal_originalTime,
+    };
 }
-function checkItemsAreOrdered(data, allowDuplicates) {
-    if (allowDuplicates === void 0) { allowDuplicates = false; }
-    if (data.length === 0) {
-        return;
+function lineData(plotRow) {
+    const result = singleValueData(plotRow);
+    if (plotRow._internal_color !== undefined) {
+        result.color = plotRow._internal_color;
     }
-    var prevTime = convertTime(data[0].time)._internal_timestamp;
-    for (var i = 1; i < data.length; ++i) {
-        var currentTime = convertTime(data[i].time)._internal_timestamp;
-        var checkResult = allowDuplicates ? prevTime <= currentTime : prevTime < currentTime;
-        assert(checkResult, "data must be asc ordered by time, index=".concat(i, ", time=").concat(currentTime, ", prev time=").concat(prevTime));
-        prevTime = currentTime;
-    }
-}
-function checkSeriesValuesType(type, data) {
-    data.forEach(getChecker(type));
+    return result;
 }
-function getChecker(type) {
-    switch (type) {
-        case 'Bar':
-        case 'Candlestick':
-            return checkBarItem.bind(null, type);
-        case 'Area':
-        case 'Baseline':
-        case 'Line':
-        case 'Histogram':
-            return checkLineItem.bind(null, type);
+function areaData(plotRow) {
+    const result = singleValueData(plotRow);
+    if (plotRow._internal_lineColor !== undefined) {
+        result.lineColor = plotRow._internal_lineColor;
     }
-}
-function checkBarItem(type, barItem) {
-    if (!isFulfilledData(barItem)) {
-        return;
+    if (plotRow._internal_topColor !== undefined) {
+        result.topColor = plotRow._internal_topColor;
     }
-    assert(
-    // eslint-disable-next-line @typescript-eslint/tslint/config
-    typeof barItem.open === 'number', "".concat(type, " series item data value of open must be a number, got=").concat(typeof barItem.open, ", value=").concat(barItem.open));
-    assert(
-    // eslint-disable-next-line @typescript-eslint/tslint/config
-    typeof barItem.high === 'number', "".concat(type, " series item data value of high must be a number, got=").concat(typeof barItem.high, ", value=").concat(barItem.high));
-    assert(
-    // eslint-disable-next-line @typescript-eslint/tslint/config
-    typeof barItem.low === 'number', "".concat(type, " series item data value of low must be a number, got=").concat(typeof barItem.low, ", value=").concat(barItem.low));
-    assert(
-    // eslint-disable-next-line @typescript-eslint/tslint/config
-    typeof barItem.close === 'number', "".concat(type, " series item data value of close must be a number, got=").concat(typeof barItem.close, ", value=").concat(barItem.close));
-}
-function checkLineItem(type, lineItem) {
-    if (!isFulfilledData(lineItem)) {
-        return;
+    if (plotRow._internal_bottomColor !== undefined) {
+        result.bottomColor = plotRow._internal_bottomColor;
     }
-    assert(
-    // eslint-disable-next-line @typescript-eslint/tslint/config
-    typeof lineItem.value === 'number', "".concat(type, " series item data value must be a number, got=").concat(typeof lineItem.value, ", value=").concat(lineItem.value));
+    return result;
 }
-
-var priceLineOptionsDefaults = {
-    color: '#FF0000',
-    price: 0,
-    lineStyle: 2 /* Dashed */,
-    lineWidth: 1,
-    lineVisible: true,
-    axisLabelVisible: true,
-    title: '',
-};
-
-var PriceLine = /** @class */ (function () {
-    function PriceLine(priceLine) {
-        this._private__priceLine = priceLine;
+function baselineData(plotRow) {
+    const result = singleValueData(plotRow);
+    if (plotRow._internal_topLineColor !== undefined) {
+        result.topLineColor = plotRow._internal_topLineColor;
     }
-    PriceLine.prototype.applyOptions = function (options) {
-        this._private__priceLine._internal_applyOptions(options);
-    };
-    PriceLine.prototype.options = function () {
-        return this._private__priceLine._internal_options();
-    };
-    PriceLine.prototype._internal_priceLine = function () {
-        return this._private__priceLine;
+    if (plotRow._internal_bottomLineColor !== undefined) {
+        result.bottomLineColor = plotRow._internal_bottomLineColor;
+    }
+    if (plotRow._internal_topFillColor1 !== undefined) {
+        result.topFillColor1 = plotRow._internal_topFillColor1;
+    }
+    if (plotRow._internal_topFillColor2 !== undefined) {
+        result.topFillColor2 = plotRow._internal_topFillColor2;
+    }
+    if (plotRow._internal_bottomFillColor1 !== undefined) {
+        result.bottomFillColor1 = plotRow._internal_bottomFillColor1;
+    }
+    if (plotRow._internal_bottomFillColor2 !== undefined) {
+        result.bottomFillColor2 = plotRow._internal_bottomFillColor2;
+    }
+    return result;
+}
+function ohlcData(plotRow) {
+    return {
+        open: plotRow._internal_value[0 /* PlotRowValueIndex.Open */],
+        high: plotRow._internal_value[1 /* PlotRowValueIndex.High */],
+        low: plotRow._internal_value[2 /* PlotRowValueIndex.Low */],
+        close: plotRow._internal_value[3 /* PlotRowValueIndex.Close */],
+        time: plotRow._internal_originalTime,
     };
-    return PriceLine;
-}());
-
-function migrateOptions(options) {
-    // eslint-disable-next-line deprecation/deprecation
-    var overlay = options.overlay, res = __rest(options, ["overlay"]);
-    if (overlay) {
-        res.priceScaleId = '';
+}
+function barData(plotRow) {
+    const result = ohlcData(plotRow);
+    if (plotRow._internal_color !== undefined) {
+        result.color = plotRow._internal_color;
     }
-    return res;
+    return result;
 }
-var SeriesApi = /** @class */ (function () {
-    function SeriesApi(series, dataUpdatesConsumer, priceScaleApiProvider) {
-        this._internal__series = series;
-        this._internal__dataUpdatesConsumer = dataUpdatesConsumer;
-        this._private__priceScaleApiProvider = priceScaleApiProvider;
+function candlestickData(plotRow) {
+    const result = ohlcData(plotRow);
+    const { _internal_color: color, _internal_borderColor: borderColor, _internal_wickColor: wickColor } = plotRow;
+    if (color !== undefined) {
+        result.color = color;
     }
-    SeriesApi.prototype.priceFormatter = function () {
-        return this._internal__series._internal_formatter();
-    };
-    SeriesApi.prototype.priceToCoordinate = function (price) {
-        var firstValue = this._internal__series._internal_firstValue();
-        if (firstValue === null) {
-            return null;
-        }
-        return this._internal__series._internal_priceScale()._internal_priceToCoordinate(price, firstValue._internal_value);
-    };
-    SeriesApi.prototype.coordinateToPrice = function (coordinate) {
-        var firstValue = this._internal__series._internal_firstValue();
-        if (firstValue === null) {
-            return null;
-        }
-        return this._internal__series._internal_priceScale()._internal_coordinateToPrice(coordinate, firstValue._internal_value);
-    };
-    // eslint-disable-next-line complexity
-    SeriesApi.prototype.barsInLogicalRange = function (range) {
-        if (range === null) {
-            return null;
-        }
-        // we use TimeScaleVisibleRange here to convert LogicalRange to strict range properly
-        var correctedRange = new TimeScaleVisibleRange(new RangeImpl(range.from, range.to))._internal_strictRange();
-        var bars = this._internal__series._internal_bars();
-        if (bars._internal_isEmpty()) {
-            return null;
-        }
-        var dataFirstBarInRange = bars._internal_search(correctedRange._internal_left(), 1 /* NearestRight */);
-        var dataLastBarInRange = bars._internal_search(correctedRange._internal_right(), -1 /* NearestLeft */);
-        var dataFirstIndex = ensureNotNull(bars._internal_firstIndex());
-        var dataLastIndex = ensureNotNull(bars._internal_lastIndex());
-        // this means that we request data in the data gap
-        // e.g. let's say we have series with data [0..10, 30..60]
-        // and we request bars info in range [15, 25]
-        // thus, dataFirstBarInRange will be with index 30 and dataLastBarInRange with 10
-        if (dataFirstBarInRange !== null && dataLastBarInRange !== null && dataFirstBarInRange._internal_index > dataLastBarInRange._internal_index) {
-            return {
-                barsBefore: range.from - dataFirstIndex,
-                barsAfter: dataLastIndex - range.to,
-            };
-        }
-        var barsBefore = (dataFirstBarInRange === null || dataFirstBarInRange._internal_index === dataFirstIndex)
-            ? range.from - dataFirstIndex
-            : dataFirstBarInRange._internal_index - dataFirstIndex;
-        var barsAfter = (dataLastBarInRange === null || dataLastBarInRange._internal_index === dataLastIndex)
-            ? dataLastIndex - range.to
-            : dataLastIndex - dataLastBarInRange._internal_index;
-        var result = { barsBefore: barsBefore, barsAfter: barsAfter };
-        // actually they can't exist separately
-        if (dataFirstBarInRange !== null && dataLastBarInRange !== null) {
-            result.from = dataFirstBarInRange._internal_time._internal_businessDay || dataFirstBarInRange._internal_time._internal_timestamp;
-            result.to = dataLastBarInRange._internal_time._internal_businessDay || dataLastBarInRange._internal_time._internal_timestamp;
-        }
-        return result;
-    };
-    SeriesApi.prototype.setData = function (data) {
-        checkItemsAreOrdered(data);
-        checkSeriesValuesType(this._internal__series._internal_seriesType(), data);
-        this._internal__dataUpdatesConsumer._internal_applyNewData(this._internal__series, data);
-    };
-    SeriesApi.prototype.update = function (bar) {
-        checkSeriesValuesType(this._internal__series._internal_seriesType(), [bar]);
-        this._internal__dataUpdatesConsumer._internal_updateData(this._internal__series, bar);
-    };
-    SeriesApi.prototype.setMarkers = function (data) {
-        checkItemsAreOrdered(data, true);
-        var convertedMarkers = data.map(function (marker) { return (__assign(__assign({}, marker), { time: convertTime(marker.time) })); });
-        this._internal__series._internal_setMarkers(convertedMarkers);
-    };
-    SeriesApi.prototype.applyOptions = function (options) {
-        var migratedOptions = migrateOptions(options);
-        this._internal__series._internal_applyOptions(migratedOptions);
-    };
-    SeriesApi.prototype.options = function () {
-        return clone(this._internal__series._internal_options());
-    };
-    SeriesApi.prototype.priceScale = function () {
-        return this._private__priceScaleApiProvider.priceScale(this._internal__series._internal_priceScale()._internal_id());
-    };
-    SeriesApi.prototype.createPriceLine = function (options) {
-        checkPriceLineOptions(options);
-        var strictOptions = merge(clone(priceLineOptionsDefaults), options);
-        var priceLine = this._internal__series._internal_createPriceLine(strictOptions);
-        return new PriceLine(priceLine);
-    };
-    SeriesApi.prototype.removePriceLine = function (line) {
-        this._internal__series._internal_removePriceLine(line._internal_priceLine());
-    };
-    SeriesApi.prototype.seriesType = function () {
-        return this._internal__series._internal_seriesType();
-    };
-    return SeriesApi;
-}());
-
-var CandlestickSeriesApi = /** @class */ (function (_super) {
-    __extends(CandlestickSeriesApi, _super);
-    function CandlestickSeriesApi() {
-        return _super !== null && _super.apply(this, arguments) || this;
+    if (borderColor !== undefined) {
+        result.borderColor = borderColor;
     }
-    CandlestickSeriesApi.prototype.applyOptions = function (options) {
-        fillUpDownCandlesticksColors(options);
-        _super.prototype.applyOptions.call(this, options);
-    };
-    return CandlestickSeriesApi;
-}(SeriesApi));
+    if (wickColor !== undefined) {
+        result.wickColor = wickColor;
+    }
+    return result;
+}
+const seriesPlotRowToDataMap = {
+    Area: areaData,
+    Line: lineData,
+    Baseline: baselineData,
+    Histogram: lineData,
+    Bar: barData,
+    Candlestick: candlestickData,
+};
+function getSeriesDataCreator(seriesType) {
+    return seriesPlotRowToDataMap[seriesType];
+}
 
-var crosshairOptionsDefaults = {
+const crosshairOptionsDefaults = {
     vertLine: {
-        color: '#758696',
+        color: '#9598A1',
         width: 1,
-        style: 3 /* LargeDashed */,
+        style: 3 /* LineStyle.LargeDashed */,
         visible: true,
         labelVisible: true,
-        labelBackgroundColor: '#4c525e',
+        labelBackgroundColor: '#131722',
     },
     horzLine: {
-        color: '#758696',
+        color: '#9598A1',
         width: 1,
-        style: 3 /* LargeDashed */,
+        style: 3 /* LineStyle.LargeDashed */,
         visible: true,
         labelVisible: true,
-        labelBackgroundColor: '#4c525e',
+        labelBackgroundColor: '#131722',
     },
-    mode: 1 /* Magnet */,
+    mode: 1 /* CrosshairMode.Magnet */,
 };
 
-var gridOptionsDefaults = {
+const gridOptionsDefaults = {
     vertLines: {
         color: '#D6DCDE',
-        style: 0 /* Solid */,
+        style: 0 /* LineStyle.Solid */,
         visible: true,
     },
     horzLines: {
         color: '#D6DCDE',
-        style: 0 /* Solid */,
+        style: 0 /* LineStyle.Solid */,
         visible: true,
     },
 };
 
-var layoutOptionsDefaults = {
+const layoutOptionsDefaults = {
     background: {
-        type: "solid" /* Solid */,
+        type: "solid" /* ColorType.Solid */,
         color: '#FFFFFF',
     },
     textColor: '#191919',
-    fontSize: 11,
+    fontSize: 12,
     fontFamily: defaultFontFamily,
 };
 
-var priceScaleOptionsDefaults = {
+const priceScaleOptionsDefaults = {
     autoScale: true,
-    mode: 0 /* Normal */,
+    mode: 0 /* PriceScaleMode.Normal */,
     invertScale: false,
     alignLabels: true,
     borderVisible: true,
     borderColor: '#2B2B43',
     entireTextOnly: false,
     visible: false,
-    drawTicks: true,
+    ticksVisible: false,
     scaleMargins: {
         bottom: 0.1,
         top: 0.2,
     },
 };
 
-var timeScaleOptionsDefaults = {
+const timeScaleOptionsDefaults = {
     rightOffset: 0,
     barSpacing: 6,
     minBarSpacing: 0.5,
@@ -11487,9 +11259,10 @@ var timeScaleOptionsDefaults = {
     timeVisible: false,
     secondsVisible: true,
     shiftVisibleRangeOnNewBar: true,
+    ticksVisible: false,
 };
 
-var watermarkOptionsDefaults = {
+const watermarkOptionsDefaults = {
     color: 'rgba(0, 0, 0, 0)',
     visible: false,
     fontSize: 48,
@@ -11500,15 +11273,15 @@ var watermarkOptionsDefaults = {
     vertAlign: 'center',
 };
 
-var chartOptionsDefaults = {
+const chartOptionsDefaults = {
     width: 0,
     height: 0,
     layout: layoutOptionsDefaults,
     crosshair: crosshairOptionsDefaults,
     grid: gridOptionsDefaults,
-    overlayPriceScales: __assign({}, priceScaleOptionsDefaults),
-    leftPriceScale: __assign(__assign({}, priceScaleOptionsDefaults), { visible: false }),
-    rightPriceScale: __assign(__assign({}, priceScaleOptionsDefaults), { visible: true }),
+    overlayPriceScales: Object.assign({}, priceScaleOptionsDefaults),
+    leftPriceScale: Object.assign(Object.assign({}, priceScaleOptionsDefaults), { visible: false }),
+    rightPriceScale: Object.assign(Object.assign({}, priceScaleOptionsDefaults), { visible: true }),
     timeScale: timeScaleOptionsDefaults,
     watermark: watermarkOptionsDefaults,
     localization: {
@@ -11526,7 +11299,10 @@ var chartOptionsDefaults = {
             time: true,
             price: true,
         },
-        axisDoubleClickReset: true,
+        axisDoubleClickReset: {
+            time: true,
+            price: true,
+        },
         mouseWheel: true,
         pinch: true,
     },
@@ -11535,11 +11311,11 @@ var chartOptionsDefaults = {
         touch: true,
     },
     trackingMode: {
-        exitMode: 1 /* OnNextTap */,
+        exitMode: 1 /* TrackingModeExitMode.OnNextTap */,
     },
 };
 
-var candlestickStyleDefaults = {
+const candlestickStyleDefaults = {
     upColor: '#26a69a',
     downColor: '#ef5350',
     wickVisible: true,
@@ -11551,37 +11327,40 @@ var candlestickStyleDefaults = {
     wickUpColor: '#26a69a',
     wickDownColor: '#ef5350',
 };
-var barStyleDefaults = {
+const barStyleDefaults = {
     upColor: '#26a69a',
     downColor: '#ef5350',
     openVisible: true,
     thinBars: true,
 };
-var lineStyleDefaults = {
+const lineStyleDefaults = {
     color: '#2196f3',
-    lineStyle: 0 /* Solid */,
+    lineStyle: 0 /* LineStyle.Solid */,
     lineWidth: 3,
-    lineType: 0 /* Simple */,
+    lineType: 0 /* LineType.Simple */,
     crosshairMarkerVisible: true,
     crosshairMarkerRadius: 4,
     crosshairMarkerBorderColor: '',
+    crosshairMarkerBorderWidth: 2,
     crosshairMarkerBackgroundColor: '',
-    lastPriceAnimation: 0 /* Disabled */,
+    lastPriceAnimation: 0 /* LastPriceAnimationMode.Disabled */,
 };
-var areaStyleDefaults = {
+const areaStyleDefaults = {
     topColor: 'rgba( 46, 220, 135, 0.4)',
     bottomColor: 'rgba( 40, 221, 100, 0)',
+    invertFilledArea: false,
     lineColor: '#33D778',
-    lineStyle: 0 /* Solid */,
+    lineStyle: 0 /* LineStyle.Solid */,
     lineWidth: 3,
-    lineType: 0 /* Simple */,
+    lineType: 0 /* LineType.Simple */,
     crosshairMarkerVisible: true,
     crosshairMarkerRadius: 4,
     crosshairMarkerBorderColor: '',
+    crosshairMarkerBorderWidth: 2,
     crosshairMarkerBackgroundColor: '',
-    lastPriceAnimation: 0 /* Disabled */,
+    lastPriceAnimation: 0 /* LastPriceAnimationMode.Disabled */,
 };
-var baselineStyleDefaults = {
+const baselineStyleDefaults = {
     baseValue: {
         type: 'price',
         price: 0,
@@ -11593,30 +11372,32 @@ var baselineStyleDefaults = {
     bottomFillColor2: 'rgba(239, 83, 80, 0.28)',
     bottomLineColor: 'rgba(239, 83, 80, 1)',
     lineWidth: 3,
-    lineStyle: 0 /* Solid */,
+    lineStyle: 0 /* LineStyle.Solid */,
+    lineType: 0 /* LineType.Simple */,
     crosshairMarkerVisible: true,
     crosshairMarkerRadius: 4,
     crosshairMarkerBorderColor: '',
+    crosshairMarkerBorderWidth: 2,
     crosshairMarkerBackgroundColor: '',
-    lastPriceAnimation: 0 /* Disabled */,
+    lastPriceAnimation: 0 /* LastPriceAnimationMode.Disabled */,
 };
-var histogramStyleDefaults = {
+const histogramStyleDefaults = {
     color: '#26a69a',
     base: 0,
 };
-var seriesOptionsDefaults = {
+const seriesOptionsDefaults = {
     title: '',
     visible: true,
     lastValueVisible: true,
     priceLineVisible: true,
-    priceLineSource: 0 /* LastBar */,
+    priceLineSource: 0 /* PriceLineSource.LastBar */,
     priceLineWidth: 1,
     priceLineColor: '',
-    priceLineStyle: 2 /* Dashed */,
+    priceLineStyle: 2 /* LineStyle.Dashed */,
     baseLineVisible: true,
     baseLineWidth: 1,
     baseLineColor: '#B2B5BE',
-    baseLineStyle: 0 /* Solid */,
+    baseLineStyle: 0 /* LineStyle.Solid */,
     priceFormat: {
         type: 'price',
         precision: 2,
@@ -11624,31 +11405,252 @@ var seriesOptionsDefaults = {
     },
 };
 
-var PriceScaleApi = /** @class */ (function () {
-    function PriceScaleApi(chartWidget, priceScaleId) {
+class PriceScaleApi {
+    constructor(chartWidget, priceScaleId) {
         this._private__chartWidget = chartWidget;
         this._private__priceScaleId = priceScaleId;
     }
-    PriceScaleApi.prototype.applyOptions = function (options) {
+    applyOptions(options) {
         this._private__chartWidget._internal_model()._internal_applyPriceScaleOptions(this._private__priceScaleId, options);
-    };
-    PriceScaleApi.prototype.options = function () {
+    }
+    options() {
         return this._private__priceScale()._internal_options();
-    };
-    PriceScaleApi.prototype.width = function () {
+    }
+    width() {
         if (!isDefaultPriceScale(this._private__priceScaleId)) {
             return 0;
         }
-        return this._private__chartWidget._internal_getPriceAxisWidth(this._private__priceScaleId === "left" /* Left */ ? 'left' : 'right');
-    };
-    PriceScaleApi.prototype._private__priceScale = function () {
+        return this._private__chartWidget._internal_getPriceAxisWidth(this._private__priceScaleId);
+    }
+    _private__priceScale() {
         return ensureNotNull(this._private__chartWidget._internal_model()._internal_findPriceScale(this._private__priceScaleId))._internal_priceScale;
-    };
-    return PriceScaleApi;
-}());
+    }
+}
+
+/******************************************************************************
+Copyright (c) Microsoft Corporation.
+
+Permission to use, copy, modify, and/or distribute this software for any
+purpose with or without fee is hereby granted.
+
+THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
+REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
+AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
+INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
+LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
+OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
+PERFORMANCE OF THIS SOFTWARE.
+***************************************************************************** */
+
+function __rest(s, e) {
+    var t = {};
+    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
+        t[p] = s[p];
+    if (s != null && typeof Object.getOwnPropertySymbols === "function")
+        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
+            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
+                t[p[i]] = s[p[i]];
+        }
+    return t;
+}
 
-var TimeScaleApi = /** @class */ (function () {
-    function TimeScaleApi(model, timeAxisWidget) {
+function checkPriceLineOptions(options) {
+    // eslint-disable-next-line @typescript-eslint/tslint/config
+    assert(typeof options.price === 'number', `the type of 'price' price line's property must be a number, got '${typeof options.price}'`);
+}
+function checkItemsAreOrdered(data, allowDuplicates = false) {
+    if (data.length === 0) {
+        return;
+    }
+    let prevTime = convertTime(data[0].time)._internal_timestamp;
+    for (let i = 1; i < data.length; ++i) {
+        const currentTime = convertTime(data[i].time)._internal_timestamp;
+        const checkResult = allowDuplicates ? prevTime <= currentTime : prevTime < currentTime;
+        assert(checkResult, `data must be asc ordered by time, index=${i}, time=${currentTime}, prev time=${prevTime}`);
+        prevTime = currentTime;
+    }
+}
+function checkSeriesValuesType(type, data) {
+    data.forEach(getChecker(type));
+}
+function getChecker(type) {
+    switch (type) {
+        case 'Bar':
+        case 'Candlestick':
+            return checkBarItem.bind(null, type);
+        case 'Area':
+        case 'Baseline':
+        case 'Line':
+        case 'Histogram':
+            return checkLineItem.bind(null, type);
+    }
+}
+function checkBarItem(type, barItem) {
+    if (!isFulfilledData(barItem)) {
+        return;
+    }
+    assert(
+    // eslint-disable-next-line @typescript-eslint/tslint/config
+    typeof barItem.open === 'number', `${type} series item data value of open must be a number, got=${typeof barItem.open}, value=${barItem.open}`);
+    assert(
+    // eslint-disable-next-line @typescript-eslint/tslint/config
+    typeof barItem.high === 'number', `${type} series item data value of high must be a number, got=${typeof barItem.high}, value=${barItem.high}`);
+    assert(
+    // eslint-disable-next-line @typescript-eslint/tslint/config
+    typeof barItem.low === 'number', `${type} series item data value of low must be a number, got=${typeof barItem.low}, value=${barItem.low}`);
+    assert(
+    // eslint-disable-next-line @typescript-eslint/tslint/config
+    typeof barItem.close === 'number', `${type} series item data value of close must be a number, got=${typeof barItem.close}, value=${barItem.close}`);
+}
+function checkLineItem(type, lineItem) {
+    if (!isFulfilledData(lineItem)) {
+        return;
+    }
+    assert(
+    // eslint-disable-next-line @typescript-eslint/tslint/config
+    typeof lineItem.value === 'number', `${type} series item data value must be a number, got=${typeof lineItem.value}, value=${lineItem.value}`);
+}
+
+const priceLineOptionsDefaults = {
+    color: '#FF0000',
+    price: 0,
+    lineStyle: 2 /* LineStyle.Dashed */,
+    lineWidth: 1,
+    lineVisible: true,
+    axisLabelVisible: true,
+    title: '',
+};
+
+class PriceLine {
+    constructor(priceLine) {
+        this._private__priceLine = priceLine;
+    }
+    applyOptions(options) {
+        this._private__priceLine._internal_applyOptions(options);
+    }
+    options() {
+        return this._private__priceLine._internal_options();
+    }
+    _internal_priceLine() {
+        return this._private__priceLine;
+    }
+}
+
+class SeriesApi {
+    constructor(series, dataUpdatesConsumer, priceScaleApiProvider) {
+        this._internal__series = series;
+        this._internal__dataUpdatesConsumer = dataUpdatesConsumer;
+        this._private__priceScaleApiProvider = priceScaleApiProvider;
+    }
+    priceFormatter() {
+        return this._internal__series._internal_formatter();
+    }
+    priceToCoordinate(price) {
+        const firstValue = this._internal__series._internal_firstValue();
+        if (firstValue === null) {
+            return null;
+        }
+        return this._internal__series._internal_priceScale()._internal_priceToCoordinate(price, firstValue._internal_value);
+    }
+    coordinateToPrice(coordinate) {
+        const firstValue = this._internal__series._internal_firstValue();
+        if (firstValue === null) {
+            return null;
+        }
+        return this._internal__series._internal_priceScale()._internal_coordinateToPrice(coordinate, firstValue._internal_value);
+    }
+    // eslint-disable-next-line complexity
+    barsInLogicalRange(range) {
+        if (range === null) {
+            return null;
+        }
+        // we use TimeScaleVisibleRange here to convert LogicalRange to strict range properly
+        const correctedRange = new TimeScaleVisibleRange(new RangeImpl(range.from, range.to))._internal_strictRange();
+        const bars = this._internal__series._internal_bars();
+        if (bars._internal_isEmpty()) {
+            return null;
+        }
+        const dataFirstBarInRange = bars._internal_search(correctedRange._internal_left(), 1 /* MismatchDirection.NearestRight */);
+        const dataLastBarInRange = bars._internal_search(correctedRange._internal_right(), -1 /* MismatchDirection.NearestLeft */);
+        const dataFirstIndex = ensureNotNull(bars._internal_firstIndex());
+        const dataLastIndex = ensureNotNull(bars._internal_lastIndex());
+        // this means that we request data in the data gap
+        // e.g. let's say we have series with data [0..10, 30..60]
+        // and we request bars info in range [15, 25]
+        // thus, dataFirstBarInRange will be with index 30 and dataLastBarInRange with 10
+        if (dataFirstBarInRange !== null && dataLastBarInRange !== null && dataFirstBarInRange._internal_index > dataLastBarInRange._internal_index) {
+            return {
+                barsBefore: range.from - dataFirstIndex,
+                barsAfter: dataLastIndex - range.to,
+            };
+        }
+        const barsBefore = (dataFirstBarInRange === null || dataFirstBarInRange._internal_index === dataFirstIndex)
+            ? range.from - dataFirstIndex
+            : dataFirstBarInRange._internal_index - dataFirstIndex;
+        const barsAfter = (dataLastBarInRange === null || dataLastBarInRange._internal_index === dataLastIndex)
+            ? dataLastIndex - range.to
+            : dataLastIndex - dataLastBarInRange._internal_index;
+        const result = { barsBefore, barsAfter };
+        // actually they can't exist separately
+        if (dataFirstBarInRange !== null && dataLastBarInRange !== null) {
+            result.from = dataFirstBarInRange._internal_time._internal_businessDay || dataFirstBarInRange._internal_time._internal_timestamp;
+            result.to = dataLastBarInRange._internal_time._internal_businessDay || dataLastBarInRange._internal_time._internal_timestamp;
+        }
+        return result;
+    }
+    setData(data) {
+        checkItemsAreOrdered(data);
+        checkSeriesValuesType(this._internal__series._internal_seriesType(), data);
+        this._internal__dataUpdatesConsumer._internal_applyNewData(this._internal__series, data);
+    }
+    update(bar) {
+        checkSeriesValuesType(this._internal__series._internal_seriesType(), [bar]);
+        this._internal__dataUpdatesConsumer._internal_updateData(this._internal__series, bar);
+    }
+    dataByIndex(logicalIndex, mismatchDirection) {
+        const data = this._internal__series._internal_bars()._internal_search(logicalIndex, mismatchDirection);
+        if (data === null) {
+            // actually it can be a whitespace
+            return null;
+        }
+        return getSeriesDataCreator(this.seriesType())(data);
+    }
+    setMarkers(data) {
+        checkItemsAreOrdered(data, true);
+        const convertedMarkers = data.map((marker) => (Object.assign(Object.assign({}, marker), { originalTime: marker.time, time: convertTime(marker.time) })));
+        this._internal__series._internal_setMarkers(convertedMarkers);
+    }
+    markers() {
+        return this._internal__series._internal_markers().map((internalItem) => {
+            const { originalTime, time } = internalItem, item = __rest(internalItem, ["originalTime", "time"]);
+            return Object.assign({ time: originalTime }, item);
+        });
+    }
+    applyOptions(options) {
+        this._internal__series._internal_applyOptions(options);
+    }
+    options() {
+        return clone(this._internal__series._internal_options());
+    }
+    priceScale() {
+        return this._private__priceScaleApiProvider.priceScale(this._internal__series._internal_priceScale()._internal_id());
+    }
+    createPriceLine(options) {
+        checkPriceLineOptions(options);
+        const strictOptions = merge(clone(priceLineOptionsDefaults), options);
+        const priceLine = this._internal__series._internal_createPriceLine(strictOptions);
+        return new PriceLine(priceLine);
+    }
+    removePriceLine(line) {
+        this._internal__series._internal_removePriceLine(line._internal_priceLine());
+    }
+    seriesType() {
+        return this._internal__series._internal_seriesType();
+    }
+}
+
+class TimeScaleApi {
+    constructor(model, timeAxisWidget) {
         this._private__timeRangeChanged = new Delegate();
         this._private__logicalRangeChanged = new Delegate();
         this._private__sizeChanged = new Delegate();
@@ -11659,30 +11661,30 @@ var TimeScaleApi = /** @class */ (function () {
         this._private__timeScale._internal_logicalRangeChanged()._internal_subscribe(this._private__onVisibleLogicalRangeChanged.bind(this));
         this._private__timeAxisWidget._internal_sizeChanged()._internal_subscribe(this._private__onSizeChanged.bind(this));
     }
-    TimeScaleApi.prototype._internal_destroy = function () {
+    _internal_destroy() {
         this._private__timeScale._internal_visibleBarsChanged()._internal_unsubscribeAll(this);
         this._private__timeScale._internal_logicalRangeChanged()._internal_unsubscribeAll(this);
         this._private__timeAxisWidget._internal_sizeChanged()._internal_unsubscribeAll(this);
         this._private__timeRangeChanged._internal_destroy();
         this._private__logicalRangeChanged._internal_destroy();
         this._private__sizeChanged._internal_destroy();
-    };
-    TimeScaleApi.prototype.scrollPosition = function () {
+    }
+    scrollPosition() {
         return this._private__timeScale._internal_rightOffset();
-    };
-    TimeScaleApi.prototype.scrollToPosition = function (position, animated) {
+    }
+    scrollToPosition(position, animated) {
         if (!animated) {
             this._private__model._internal_setRightOffset(position);
             return;
         }
-        this._private__timeScale._internal_scrollToOffsetAnimated(position, 1000 /* AnimationDurationMs */);
-    };
-    TimeScaleApi.prototype.scrollToRealTime = function () {
+        this._private__timeScale._internal_scrollToOffsetAnimated(position, 1000 /* Constants.AnimationDurationMs */);
+    }
+    scrollToRealTime() {
         this._private__timeScale._internal_scrollToRealTime();
-    };
-    TimeScaleApi.prototype.getVisibleRange = function () {
+    }
+    getVisibleRange() {
         var _a, _b;
-        var timeRange = this._private__timeScale._internal_visibleTimeRange();
+        const timeRange = this._private__timeScale._internal_visibleTimeRange();
         if (timeRange === null) {
             return null;
         }
@@ -11690,17 +11692,17 @@ var TimeScaleApi = /** @class */ (function () {
             from: (_a = timeRange.from._internal_businessDay) !== null && _a !== void 0 ? _a : timeRange.from._internal_timestamp,
             to: (_b = timeRange.to._internal_businessDay) !== null && _b !== void 0 ? _b : timeRange.to._internal_timestamp,
         };
-    };
-    TimeScaleApi.prototype.setVisibleRange = function (range) {
-        var convertedRange = {
+    }
+    setVisibleRange(range) {
+        const convertedRange = {
             from: convertTime(range.from),
             to: convertTime(range.to),
         };
-        var logicalRange = this._private__timeScale._internal_logicalRangeForTimeRange(convertedRange);
+        const logicalRange = this._private__timeScale._internal_logicalRangeForTimeRange(convertedRange);
         this._private__model._internal_setTargetLogicalRange(logicalRange);
-    };
-    TimeScaleApi.prototype.getVisibleLogicalRange = function () {
-        var logicalRange = this._private__timeScale._internal_visibleLogicalRange();
+    }
+    getVisibleLogicalRange() {
+        const logicalRange = this._private__timeScale._internal_visibleLogicalRange();
         if (logicalRange === null) {
             return null;
         }
@@ -11708,112 +11710,114 @@ var TimeScaleApi = /** @class */ (function () {
             from: logicalRange._internal_left(),
             to: logicalRange._internal_right(),
         };
-    };
-    TimeScaleApi.prototype.setVisibleLogicalRange = function (range) {
+    }
+    setVisibleLogicalRange(range) {
         assert(range.from <= range.to, 'The from index cannot be after the to index.');
         this._private__model._internal_setTargetLogicalRange(range);
-    };
-    TimeScaleApi.prototype.resetTimeScale = function () {
+    }
+    resetTimeScale() {
         this._private__model._internal_resetTimeScale();
-    };
-    TimeScaleApi.prototype.fitContent = function () {
+    }
+    fitContent() {
         this._private__model._internal_fitContent();
-    };
-    TimeScaleApi.prototype.logicalToCoordinate = function (logical) {
-        var timeScale = this._private__model._internal_timeScale();
+    }
+    logicalToCoordinate(logical) {
+        const timeScale = this._private__model._internal_timeScale();
         if (timeScale._internal_isEmpty()) {
             return null;
         }
         else {
             return timeScale._internal_indexToCoordinate(logical);
         }
-    };
-    TimeScaleApi.prototype.coordinateToLogical = function (x) {
+    }
+    coordinateToLogical(x) {
         if (this._private__timeScale._internal_isEmpty()) {
             return null;
         }
         else {
             return this._private__timeScale._internal_coordinateToIndex(x);
         }
-    };
-    TimeScaleApi.prototype.timeToCoordinate = function (time) {
-        var timePoint = convertTime(time);
-        var timePointIndex = this._private__timeScale._internal_timeToIndex(timePoint, false);
+    }
+    timeToCoordinate(time) {
+        const timePoint = convertTime(time);
+        const timePointIndex = this._private__timeScale._internal_timeToIndex(timePoint, false);
         if (timePointIndex === null) {
             return null;
         }
         return this._private__timeScale._internal_indexToCoordinate(timePointIndex);
-    };
-    TimeScaleApi.prototype.coordinateToTime = function (x) {
+    }
+    coordinateToTime(x) {
         var _a;
-        var timeScale = this._private__model._internal_timeScale();
-        var timePointIndex = timeScale._internal_coordinateToIndex(x);
-        var timePoint = timeScale._internal_indexToTime(timePointIndex);
+        const timeScale = this._private__model._internal_timeScale();
+        const timePointIndex = timeScale._internal_coordinateToIndex(x);
+        const timePoint = timeScale._internal_indexToTime(timePointIndex);
         if (timePoint === null) {
             return null;
         }
         return (_a = timePoint._internal_businessDay) !== null && _a !== void 0 ? _a : timePoint._internal_timestamp;
-    };
-    TimeScaleApi.prototype.width = function () {
+    }
+    width() {
         return this._private__timeAxisWidget._internal_getSize()._internal_w;
-    };
-    TimeScaleApi.prototype.height = function () {
+    }
+    height() {
         return this._private__timeAxisWidget._internal_getSize()._internal_h;
-    };
-    TimeScaleApi.prototype.subscribeVisibleTimeRangeChange = function (handler) {
+    }
+    subscribeVisibleTimeRangeChange(handler) {
         this._private__timeRangeChanged._internal_subscribe(handler);
-    };
-    TimeScaleApi.prototype.unsubscribeVisibleTimeRangeChange = function (handler) {
+    }
+    unsubscribeVisibleTimeRangeChange(handler) {
         this._private__timeRangeChanged._internal_unsubscribe(handler);
-    };
-    TimeScaleApi.prototype.subscribeVisibleLogicalRangeChange = function (handler) {
+    }
+    subscribeVisibleLogicalRangeChange(handler) {
         this._private__logicalRangeChanged._internal_subscribe(handler);
-    };
-    TimeScaleApi.prototype.unsubscribeVisibleLogicalRangeChange = function (handler) {
+    }
+    unsubscribeVisibleLogicalRangeChange(handler) {
         this._private__logicalRangeChanged._internal_unsubscribe(handler);
-    };
-    TimeScaleApi.prototype.subscribeSizeChange = function (handler) {
+    }
+    subscribeSizeChange(handler) {
         this._private__sizeChanged._internal_subscribe(handler);
-    };
-    TimeScaleApi.prototype.unsubscribeSizeChange = function (handler) {
+    }
+    unsubscribeSizeChange(handler) {
         this._private__sizeChanged._internal_unsubscribe(handler);
-    };
-    TimeScaleApi.prototype.applyOptions = function (options) {
+    }
+    applyOptions(options) {
         this._private__timeScale._internal_applyOptions(options);
-    };
-    TimeScaleApi.prototype.options = function () {
+    }
+    options() {
         return clone(this._private__timeScale._internal_options());
-    };
-    TimeScaleApi.prototype._private__onVisibleBarsChanged = function () {
+    }
+    _private__onVisibleBarsChanged() {
         if (this._private__timeRangeChanged._internal_hasListeners()) {
             this._private__timeRangeChanged._internal_fire(this.getVisibleRange());
         }
-    };
-    TimeScaleApi.prototype._private__onVisibleLogicalRangeChanged = function () {
+    }
+    _private__onVisibleLogicalRangeChanged() {
         if (this._private__logicalRangeChanged._internal_hasListeners()) {
             this._private__logicalRangeChanged._internal_fire(this.getVisibleLogicalRange());
         }
-    };
-    TimeScaleApi.prototype._private__onSizeChanged = function (size) {
+    }
+    _private__onSizeChanged(size) {
         this._private__sizeChanged._internal_fire(size._internal_w, size._internal_h);
-    };
-    return TimeScaleApi;
-}());
+    }
+}
 
 function patchPriceFormat(priceFormat) {
     if (priceFormat === undefined || priceFormat.type === 'custom') {
         return;
     }
-    var priceFormatBuiltIn = priceFormat;
+    const priceFormatBuiltIn = priceFormat;
     if (priceFormatBuiltIn.minMove !== undefined && priceFormatBuiltIn.precision === undefined) {
         priceFormatBuiltIn.precision = precisionByMinMove(priceFormatBuiltIn.minMove);
     }
 }
 function migrateHandleScaleScrollOptions(options) {
     if (isBoolean(options.handleScale)) {
-        var handleScale = options.handleScale;
+        const handleScale = options.handleScale;
         options.handleScale = {
-            axisDoubleClickReset: handleScale,
+            axisDoubleClickReset: {
+                time: handleScale,
+                price: handleScale,
+            },
             axisPressedMouseMove: {
                 time: handleScale,
                 price: handleScale,
@@ -11822,14 +11826,22 @@ function migrateHandleScaleScrollOptions(options) {
             pinch: handleScale,
         };
     }
-    else if (options.handleScale !== undefined && isBoolean(options.handleScale.axisPressedMouseMove)) {
-        var axisPressedMouseMove = options.handleScale.axisPressedMouseMove;
-        options.handleScale.axisPressedMouseMove = {
-            time: axisPressedMouseMove,
-            price: axisPressedMouseMove,
-        };
+    else if (options.handleScale !== undefined) {
+        const { axisPressedMouseMove, axisDoubleClickReset } = options.handleScale;
+        if (isBoolean(axisPressedMouseMove)) {
+            options.handleScale.axisPressedMouseMove = {
+                time: axisPressedMouseMove,
+                price: axisPressedMouseMove,
+            };
+        }
+        if (isBoolean(axisDoubleClickReset)) {
+            options.handleScale.axisDoubleClickReset = {
+                time: axisDoubleClickReset,
+                price: axisDoubleClickReset,
+            };
+        }
     }
-    var handleScroll = options.handleScroll;
+    const handleScroll = options.handleScroll;
     if (isBoolean(handleScroll)) {
         options.handleScroll = {
             horzTouchDrag: handleScroll,
@@ -11839,82 +11851,35 @@ function migrateHandleScaleScrollOptions(options) {
         };
     }
 }
-function migratePriceScaleOptions(options) {
-    /* eslint-disable deprecation/deprecation */
-    if (options.priceScale) {
-        warn('"priceScale" option has been deprecated, use "leftPriceScale", "rightPriceScale" and "overlayPriceScales" instead');
-        options.leftPriceScale = options.leftPriceScale || {};
-        options.rightPriceScale = options.rightPriceScale || {};
-        var position = options.priceScale.position;
-        delete options.priceScale.position;
-        options.leftPriceScale = merge(options.leftPriceScale, options.priceScale);
-        options.rightPriceScale = merge(options.rightPriceScale, options.priceScale);
-        if (position === 'left') {
-            options.leftPriceScale.visible = true;
-            options.rightPriceScale.visible = false;
-        }
-        if (position === 'right') {
-            options.leftPriceScale.visible = false;
-            options.rightPriceScale.visible = true;
-        }
-        if (position === 'none') {
-            options.leftPriceScale.visible = false;
-            options.rightPriceScale.visible = false;
-        }
-        // copy defaults for overlays
-        options.overlayPriceScales = options.overlayPriceScales || {};
-        if (options.priceScale.invertScale !== undefined) {
-            options.overlayPriceScales.invertScale = options.priceScale.invertScale;
-        }
-        // do not migrate mode for backward compatibility
-        if (options.priceScale.scaleMargins !== undefined) {
-            options.overlayPriceScales.scaleMargins = options.priceScale.scaleMargins;
-        }
-    }
-    /* eslint-enable deprecation/deprecation */
-}
-function migrateLayoutOptions(options) {
-    /* eslint-disable deprecation/deprecation */
-    if (!options.layout) {
-        return;
-    }
-    if (options.layout.backgroundColor && !options.layout.background) {
-        options.layout.background = { type: "solid" /* Solid */, color: options.layout.backgroundColor };
-    }
-    /* eslint-enable deprecation/deprecation */
-}
 function toInternalOptions(options) {
     migrateHandleScaleScrollOptions(options);
-    migratePriceScaleOptions(options);
-    migrateLayoutOptions(options);
     return options;
 }
-var ChartApi = /** @class */ (function () {
-    function ChartApi(container, options) {
-        var _this = this;
+class ChartApi {
+    constructor(container, options) {
         this._private__dataLayer = new DataLayer();
         this._private__seriesMap = new Map();
         this._private__seriesMapReversed = new Map();
         this._private__clickedDelegate = new Delegate();
         this._private__crosshairMovedDelegate = new Delegate();
-        var internalOptions = (options === undefined) ?
+        const internalOptions = (options === undefined) ?
             clone(chartOptionsDefaults) :
             merge(clone(chartOptionsDefaults), toInternalOptions(options));
         this._private__chartWidget = new ChartWidget(container, internalOptions);
-        this._private__chartWidget._internal_clicked()._internal_subscribe(function (paramSupplier) {
-            if (_this._private__clickedDelegate._internal_hasListeners()) {
-                _this._private__clickedDelegate._internal_fire(_this._private__convertMouseParams(paramSupplier()));
+        this._private__chartWidget._internal_clicked()._internal_subscribe((paramSupplier) => {
+            if (this._private__clickedDelegate._internal_hasListeners()) {
+                this._private__clickedDelegate._internal_fire(this._private__convertMouseParams(paramSupplier()));
             }
         }, this);
-        this._private__chartWidget._internal_crosshairMoved()._internal_subscribe(function (paramSupplier) {
-            if (_this._private__crosshairMovedDelegate._internal_hasListeners()) {
-                _this._private__crosshairMovedDelegate._internal_fire(_this._private__convertMouseParams(paramSupplier()));
+        this._private__chartWidget._internal_crosshairMoved()._internal_subscribe((paramSupplier) => {
+            if (this._private__crosshairMovedDelegate._internal_hasListeners()) {
+                this._private__crosshairMovedDelegate._internal_fire(this._private__convertMouseParams(paramSupplier()));
             }
         }, this);
-        var model = this._private__chartWidget._internal_model();
+        const model = this._private__chartWidget._internal_model();
         this._private__timeScaleApi = new TimeScaleApi(model, this._private__chartWidget._internal_timeAxisWidget());
     }
-    ChartApi.prototype.remove = function () {
+    remove() {
         this._private__chartWidget._internal_clicked()._internal_unsubscribeAll(this);
         this._private__chartWidget._internal_crosshairMoved()._internal_unsubscribeAll(this);
         this._private__timeScaleApi._internal_destroy();
@@ -11924,150 +11889,107 @@ var ChartApi = /** @class */ (function () {
         this._private__clickedDelegate._internal_destroy();
         this._private__crosshairMovedDelegate._internal_destroy();
         this._private__dataLayer._internal_destroy();
-    };
-    ChartApi.prototype.resize = function (width, height, forceRepaint) {
+    }
+    resize(width, height, forceRepaint) {
         this._private__chartWidget._internal_resize(width, height, forceRepaint);
-    };
-    ChartApi.prototype.addAreaSeries = function (options) {
-        if (options === void 0) { options = {}; }
-        options = migrateOptions(options);
-        patchPriceFormat(options.priceFormat);
-        var strictOptions = merge(clone(seriesOptionsDefaults), areaStyleDefaults, options);
-        var series = this._private__chartWidget._internal_model()._internal_createSeries('Area', strictOptions);
-        var res = new SeriesApi(series, this, this);
-        this._private__seriesMap.set(res, series);
-        this._private__seriesMapReversed.set(series, res);
-        return res;
-    };
-    ChartApi.prototype.addBaselineSeries = function (options) {
-        if (options === void 0) { options = {}; }
-        options = migrateOptions(options);
-        patchPriceFormat(options.priceFormat);
-        // to avoid assigning fields to defaults we have to clone them
-        var strictOptions = merge(clone(seriesOptionsDefaults), clone(baselineStyleDefaults), options);
-        var series = this._private__chartWidget._internal_model()._internal_createSeries('Baseline', strictOptions);
-        var res = new SeriesApi(series, this, this);
-        this._private__seriesMap.set(res, series);
-        this._private__seriesMapReversed.set(series, res);
-        return res;
-    };
-    ChartApi.prototype.addBarSeries = function (options) {
-        if (options === void 0) { options = {}; }
-        options = migrateOptions(options);
-        patchPriceFormat(options.priceFormat);
-        var strictOptions = merge(clone(seriesOptionsDefaults), barStyleDefaults, options);
-        var series = this._private__chartWidget._internal_model()._internal_createSeries('Bar', strictOptions);
-        var res = new SeriesApi(series, this, this);
-        this._private__seriesMap.set(res, series);
-        this._private__seriesMapReversed.set(series, res);
-        return res;
-    };
-    ChartApi.prototype.addCandlestickSeries = function (options) {
-        if (options === void 0) { options = {}; }
-        options = migrateOptions(options);
+    }
+    addAreaSeries(options) {
+        return this._private__addSeriesImpl('Area', areaStyleDefaults, options);
+    }
+    addBaselineSeries(options) {
+        return this._private__addSeriesImpl('Baseline', baselineStyleDefaults, options);
+    }
+    addBarSeries(options) {
+        return this._private__addSeriesImpl('Bar', barStyleDefaults, options);
+    }
+    addCandlestickSeries(options = {}) {
         fillUpDownCandlesticksColors(options);
-        patchPriceFormat(options.priceFormat);
-        var strictOptions = merge(clone(seriesOptionsDefaults), candlestickStyleDefaults, options);
-        var series = this._private__chartWidget._internal_model()._internal_createSeries('Candlestick', strictOptions);
-        var res = new CandlestickSeriesApi(series, this, this);
-        this._private__seriesMap.set(res, series);
-        this._private__seriesMapReversed.set(series, res);
-        return res;
-    };
-    ChartApi.prototype.addHistogramSeries = function (options) {
-        if (options === void 0) { options = {}; }
-        options = migrateOptions(options);
-        patchPriceFormat(options.priceFormat);
-        var strictOptions = merge(clone(seriesOptionsDefaults), histogramStyleDefaults, options);
-        var series = this._private__chartWidget._internal_model()._internal_createSeries('Histogram', strictOptions);
-        var res = new SeriesApi(series, this, this);
-        this._private__seriesMap.set(res, series);
-        this._private__seriesMapReversed.set(series, res);
-        return res;
-    };
-    ChartApi.prototype.addLineSeries = function (options) {
-        if (options === void 0) { options = {}; }
-        options = migrateOptions(options);
-        patchPriceFormat(options.priceFormat);
-        var strictOptions = merge(clone(seriesOptionsDefaults), lineStyleDefaults, options);
-        var series = this._private__chartWidget._internal_model()._internal_createSeries('Line', strictOptions);
-        var res = new SeriesApi(series, this, this);
-        this._private__seriesMap.set(res, series);
-        this._private__seriesMapReversed.set(series, res);
-        return res;
-    };
-    ChartApi.prototype.removeSeries = function (seriesApi) {
-        var series = ensureDefined(this._private__seriesMap.get(seriesApi));
-        var update = this._private__dataLayer._internal_removeSeries(series);
-        var model = this._private__chartWidget._internal_model();
+        return this._private__addSeriesImpl('Candlestick', candlestickStyleDefaults, options);
+    }
+    addHistogramSeries(options) {
+        return this._private__addSeriesImpl('Histogram', histogramStyleDefaults, options);
+    }
+    addLineSeries(options) {
+        return this._private__addSeriesImpl('Line', lineStyleDefaults, options);
+    }
+    removeSeries(seriesApi) {
+        const series = ensureDefined(this._private__seriesMap.get(seriesApi));
+        const update = this._private__dataLayer._internal_removeSeries(series);
+        const model = this._private__chartWidget._internal_model();
         model._internal_removeSeries(series);
         this._private__sendUpdateToChart(update);
         this._private__seriesMap.delete(seriesApi);
         this._private__seriesMapReversed.delete(series);
-    };
-    ChartApi.prototype._internal_applyNewData = function (series, data) {
+    }
+    _internal_applyNewData(series, data) {
         this._private__sendUpdateToChart(this._private__dataLayer._internal_setSeriesData(series, data));
-    };
-    ChartApi.prototype._internal_updateData = function (series, data) {
+    }
+    _internal_updateData(series, data) {
         this._private__sendUpdateToChart(this._private__dataLayer._internal_updateSeriesData(series, data));
-    };
-    ChartApi.prototype.subscribeClick = function (handler) {
+    }
+    subscribeClick(handler) {
         this._private__clickedDelegate._internal_subscribe(handler);
-    };
-    ChartApi.prototype.unsubscribeClick = function (handler) {
+    }
+    unsubscribeClick(handler) {
         this._private__clickedDelegate._internal_unsubscribe(handler);
-    };
-    ChartApi.prototype.subscribeCrosshairMove = function (handler) {
+    }
+    subscribeCrosshairMove(handler) {
         this._private__crosshairMovedDelegate._internal_subscribe(handler);
-    };
-    ChartApi.prototype.unsubscribeCrosshairMove = function (handler) {
+    }
+    unsubscribeCrosshairMove(handler) {
         this._private__crosshairMovedDelegate._internal_unsubscribe(handler);
-    };
-    ChartApi.prototype.priceScale = function (priceScaleId) {
-        if (priceScaleId === undefined) {
-            warn('Using ChartApi.priceScale() method without arguments has been deprecated, pass valid price scale id instead');
-            priceScaleId = this._private__chartWidget._internal_model()._internal_defaultVisiblePriceScaleId();
-        }
+    }
+    priceScale(priceScaleId) {
         return new PriceScaleApi(this._private__chartWidget, priceScaleId);
-    };
-    ChartApi.prototype.timeScale = function () {
+    }
+    timeScale() {
         return this._private__timeScaleApi;
-    };
-    ChartApi.prototype.applyOptions = function (options) {
+    }
+    applyOptions(options) {
         this._private__chartWidget._internal_applyOptions(toInternalOptions(options));
-    };
-    ChartApi.prototype.options = function () {
+    }
+    options() {
         return this._private__chartWidget._internal_options();
-    };
-    ChartApi.prototype.takeScreenshot = function () {
+    }
+    takeScreenshot() {
         return this._private__chartWidget._internal_takeScreenshot();
-    };
-    ChartApi.prototype._private__sendUpdateToChart = function (update) {
-        var model = this._private__chartWidget._internal_model();
+    }
+    _private__addSeriesImpl(type, styleDefaults, options = {}) {
+        patchPriceFormat(options.priceFormat);
+        const strictOptions = merge(clone(seriesOptionsDefaults), clone(styleDefaults), options);
+        const series = this._private__chartWidget._internal_model()._internal_createSeries(type, strictOptions);
+        const res = new SeriesApi(series, this, this);
+        this._private__seriesMap.set(res, series);
+        this._private__seriesMapReversed.set(series, res);
+        return res;
+    }
+    _private__sendUpdateToChart(update) {
+        const model = this._private__chartWidget._internal_model();
         model._internal_updateTimeScale(update._internal_timeScale._internal_baseIndex, update._internal_timeScale._internal_points, update._internal_timeScale._internal_firstChangedPointIndex);
-        update._internal_series.forEach(function (value, series) { return series._internal_setData(value._internal_data, value._internal_info); });
+        update._internal_series.forEach((value, series) => series._internal_setData(value._internal_data, value._internal_info));
         model._internal_recalculateAllPanes();
-    };
-    ChartApi.prototype._private__mapSeriesToApi = function (series) {
+    }
+    _private__mapSeriesToApi(series) {
         return ensureDefined(this._private__seriesMapReversed.get(series));
-    };
-    ChartApi.prototype._private__convertMouseParams = function (param) {
-        var _this = this;
-        var seriesPrices = new Map();
-        param._internal_seriesPrices.forEach(function (price, series) {
-            seriesPrices.set(_this._private__mapSeriesToApi(series), price);
+    }
+    _private__convertMouseParams(param) {
+        const seriesData = new Map();
+        param._internal_seriesData.forEach((plotRow, series) => {
+            const data = getSeriesDataCreator(series._internal_seriesType())(plotRow);
+            assert(isFulfilledData(data));
+            seriesData.set(this._private__mapSeriesToApi(series), data);
         });
-        var hoveredSeries = param._internal_hoveredSeries === undefined ? undefined : this._private__mapSeriesToApi(param._internal_hoveredSeries);
+        const hoveredSeries = param._internal_hoveredSeries === undefined ? undefined : this._private__mapSeriesToApi(param._internal_hoveredSeries);
         return {
-            time: param._internal_time && (param._internal_time._internal_businessDay || param._internal_time._internal_timestamp),
+            time: param._internal_time,
+            logical: param._internal_index,
             point: param._internal_point,
-            hoveredSeries: hoveredSeries,
+            hoveredSeries,
             hoveredMarkerId: param._internal_hoveredObject,
-            seriesPrices: seriesPrices,
+            seriesData,
         };
-    };
-    return ChartApi;
-}());
+    }
+}
 
 /**
  * This function is the main entry point of the Lightweight Charting Library.
@@ -12077,10 +11999,10 @@ var ChartApi = /** @class */ (function () {
  * @returns An interface to the created chart
  */
 function createChart(container, options) {
-    var htmlElement;
+    let htmlElement;
     if (isString(container)) {
-        var element = document.getElementById(container);
-        assert(element !== null, "Cannot find element in DOM with id=".concat(container));
+        const element = document.getElementById(container);
+        assert(element !== null, `Cannot find element in DOM with id=${container}`);
         htmlElement = element;
     }
     else {
@@ -12094,7 +12016,7 @@ function createChart(container, options) {
  * Returns the current version as a string. For example `'3.3.0'`.
  */
 function version() {
-    return "3.8.0";
+    return "4.0.0";
 }
 
-export { ColorType, CrosshairMode, LastPriceAnimationMode as LasPriceAnimationMode, LastPriceAnimationMode, LineStyle, LineType, PriceLineSource, PriceScaleMode, TickMarkType, TrackingModeExitMode, createChart, isBusinessDay, isUTCTimestamp, version };
+export { ColorType, CrosshairMode, LastPriceAnimationMode, LineStyle, LineType, MismatchDirection, PriceLineSource, PriceScaleMode, TickMarkType, TrackingModeExitMode, createChart, isBusinessDay, isUTCTimestamp, version };
diff --git a/node_modules/lightweight-charts/dist/lightweight-charts.esm.production.js b/node_modules/lightweight-charts/dist/lightweight-charts.esm.production.js
index 6f491d9..b95a8ff 100644
--- a/node_modules/lightweight-charts/dist/lightweight-charts.esm.production.js
+++ b/node_modules/lightweight-charts/dist/lightweight-charts.esm.production.js
@@ -1,7 +1,7 @@
 /*!
  * @license
- * TradingView Lightweight Charts v3.8.0
- * Copyright (c) 2020 TradingView, Inc.
+ * TradingView Lightweight Charts v4.0.0
+ * Copyright (c) 2022 TradingView, Inc.
  * Licensed under Apache License 2.0 https://www.apache.org/licenses/LICENSE-2.0
  */
-import{bindToDevicePixelRatio as t}from"fancy-canvas/coordinate-space";var i,n;function s(t,i){var n,s=((n={})[0]=[],n[1]=[t.lineWidth,t.lineWidth],n[2]=[2*t.lineWidth,2*t.lineWidth],n[3]=[6*t.lineWidth,6*t.lineWidth],n[4]=[t.lineWidth,4*t.lineWidth],n)[i];t.setLineDash(s)}function h(t,i,n,s){t.beginPath();var h=t.lineWidth%2?.5:0;t.moveTo(n,i+h),t.lineTo(s,i+h),t.stroke()}function r(t,i){if(!t)throw new Error("Assertion failed"+(i?": "+i:""))}function e(t){if(void 0===t)throw new Error("Value is undefined");return t}function u(t){if(null===t)throw new Error("Value is null");return t}function a(t){return u(e(t))}!function(t){t[t.Simple=0]="Simple",t[t.WithSteps=1]="WithSteps"}(i||(i={})),function(t){t[t.Solid=0]="Solid",t[t.Dotted=1]="Dotted",t[t.Dashed=2]="Dashed",t[t.LargeDashed=3]="LargeDashed",t[t.SparseDotted=4]="SparseDotted"}(n||(n={}));var o={khaki:"#f0e68c",azure:"#f0ffff",aliceblue:"#f0f8ff",ghostwhite:"#f8f8ff",gold:"#ffd700",goldenrod:"#daa520",gainsboro:"#dcdcdc",gray:"#808080",green:"#008000",honeydew:"#f0fff0",floralwhite:"#fffaf0",lightblue:"#add8e6",lightcoral:"#f08080",lemonchiffon:"#fffacd",hotpink:"#ff69b4",lightyellow:"#ffffe0",greenyellow:"#adff2f",lightgoldenrodyellow:"#fafad2",limegreen:"#32cd32",linen:"#faf0e6",lightcyan:"#e0ffff",magenta:"#f0f",maroon:"#800000",olive:"#808000",orange:"#ffa500",oldlace:"#fdf5e6",mediumblue:"#0000cd",transparent:"#0000",lime:"#0f0",lightpink:"#ffb6c1",mistyrose:"#ffe4e1",moccasin:"#ffe4b5",midnightblue:"#191970",orchid:"#da70d6",mediumorchid:"#ba55d3",mediumturquoise:"#48d1cc",orangered:"#ff4500",royalblue:"#4169e1",powderblue:"#b0e0e6",red:"#f00",coral:"#ff7f50",turquoise:"#40e0d0",white:"#fff",whitesmoke:"#f5f5f5",wheat:"#f5deb3",teal:"#008080",steelblue:"#4682b4",bisque:"#ffe4c4",aquamarine:"#7fffd4",aqua:"#0ff",sienna:"#a0522d",silver:"#c0c0c0",springgreen:"#00ff7f",antiquewhite:"#faebd7",burlywood:"#deb887",brown:"#a52a2a",beige:"#f5f5dc",chocolate:"#d2691e",chartreuse:"#7fff00",cornflowerblue:"#6495ed",cornsilk:"#fff8dc",crimson:"#dc143c",cadetblue:"#5f9ea0",tomato:"#ff6347",fuchsia:"#f0f",blue:"#00f",salmon:"#fa8072",blanchedalmond:"#ffebcd",slateblue:"#6a5acd",slategray:"#708090",thistle:"#d8bfd8",tan:"#d2b48c",cyan:"#0ff",darkblue:"#00008b",darkcyan:"#008b8b",darkgoldenrod:"#b8860b",darkgray:"#a9a9a9",blueviolet:"#8a2be2",black:"#000",darkmagenta:"#8b008b",darkslateblue:"#483d8b",darkkhaki:"#bdb76b",darkorchid:"#9932cc",darkorange:"#ff8c00",darkgreen:"#006400",darkred:"#8b0000",dodgerblue:"#1e90ff",darkslategray:"#2f4f4f",dimgray:"#696969",deepskyblue:"#00bfff",firebrick:"#b22222",forestgreen:"#228b22",indigo:"#4b0082",ivory:"#fffff0",lavenderblush:"#fff0f5",feldspar:"#d19275",indianred:"#cd5c5c",lightgreen:"#90ee90",lightgrey:"#d3d3d3",lightskyblue:"#87cefa",lightslategray:"#789",lightslateblue:"#8470ff",snow:"#fffafa",lightseagreen:"#20b2aa",lightsalmon:"#ffa07a",darksalmon:"#e9967a",darkviolet:"#9400d3",mediumpurple:"#9370d8",mediumaquamarine:"#66cdaa",skyblue:"#87ceeb",lavender:"#e6e6fa",lightsteelblue:"#b0c4de",mediumvioletred:"#c71585",mintcream:"#f5fffa",navajowhite:"#ffdead",navy:"#000080",olivedrab:"#6b8e23",palevioletred:"#d87093",violetred:"#d02090",yellow:"#ff0",yellowgreen:"#9acd32",lawngreen:"#7cfc00",pink:"#ffc0cb",paleturquoise:"#afeeee",palegoldenrod:"#eee8aa",darkolivegreen:"#556b2f",darkseagreen:"#8fbc8f",darkturquoise:"#00ced1",peachpuff:"#ffdab9",deeppink:"#ff1493",violet:"#ee82ee",palegreen:"#98fb98",mediumseagreen:"#3cb371",peru:"#cd853f",saddlebrown:"#8b4513",sandybrown:"#f4a460",rosybrown:"#bc8f8f",purple:"#800080",seagreen:"#2e8b57",seashell:"#fff5ee",papayawhip:"#ffefd5",mediumslateblue:"#7b68ee",plum:"#dda0dd",mediumspringgreen:"#00fa9a"};function l(t){return t<0?0:t>255?255:Math.round(t)||0}function f(t){return t<=0||t>0?t<0?0:t>1?1:Math.round(1e4*t)/1e4:0}var c=/^#([0-9a-f])([0-9a-f])([0-9a-f])([0-9a-f])?$/i,v=/^#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})?$/i,_=/^rgb\(\s*(-?\d{1,10})\s*,\s*(-?\d{1,10})\s*,\s*(-?\d{1,10})\s*\)$/,d=/^rgba\(\s*(-?\d{1,10})\s*,\s*(-?\d{1,10})\s*,\s*(-?\d{1,10})\s*,\s*(-?[\d]{0,10}(?:\.\d+)?)\s*\)$/;function w(t){var i;if((t=t.toLowerCase())in o&&(t=o[t]),i=d.exec(t)||_.exec(t))return[l(parseInt(i[1],10)),l(parseInt(i[2],10)),l(parseInt(i[3],10)),f(i.length<5?1:parseFloat(i[4]))];if(i=v.exec(t))return[l(parseInt(i[1],16)),l(parseInt(i[2],16)),l(parseInt(i[3],16)),1];if(i=c.exec(t))return[l(17*parseInt(i[1],16)),l(17*parseInt(i[2],16)),l(17*parseInt(i[3],16)),1];throw new Error("Cannot parse color: ".concat(t))}function M(t){var i,n=w(t);return{t:"rgb(".concat(n[0],", ").concat(n[1],", ").concat(n[2],")"),i:(i=n,.199*i[0]+.687*i[1]+.114*i[2]>160?"black":"white")}}var b=function(t,i){return b=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,i){t.__proto__=i}||function(t,i){for(var n in i)Object.prototype.hasOwnProperty.call(i,n)&&(t[n]=i[n])},b(t,i)};function m(t,i){if("function"!=typeof i&&null!==i)throw new TypeError("Class extends value "+String(i)+" is not a constructor or null");function n(){this.constructor=t}b(t,i),t.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}var p=function(){return p=Object.assign||function(t){for(var i,n=1,s=arguments.length;n<s;n++)for(var h in i=arguments[n])Object.prototype.hasOwnProperty.call(i,h)&&(t[h]=i[h]);return t},p.apply(this,arguments)};function g(t,i,n){if(n||2===arguments.length)for(var s,h=0,r=i.length;h<r;h++)!s&&h in i||(s||(s=Array.prototype.slice.call(i,0,h)),s[h]=i[h]);return t.concat(s||Array.prototype.slice.call(i))}var y=function(){function t(){this.h=[]}return t.prototype.u=function(t,i,n){var s={o:t,l:i,v:!0===n};this.h.push(s)},t.prototype._=function(t){var i=this.h.findIndex((function(i){return t===i.o}));i>-1&&this.h.splice(i,1)},t.prototype.M=function(t){this.h=this.h.filter((function(i){return i.l!==t}))},t.prototype.m=function(t,i){var n=g([],this.h,!0);this.h=this.h.filter((function(t){return!t.v})),n.forEach((function(n){return n.o(t,i)}))},t.prototype.p=function(){return this.h.length>0},t.prototype.g=function(){this.h=[]},t}();function k(t){for(var i=[],n=1;n<arguments.length;n++)i[n-1]=arguments[n];for(var s=0,h=i;s<h.length;s++){var r=h[s];for(var e in r)void 0!==r[e]&&("object"!=typeof r[e]||void 0===t[e]?t[e]=r[e]:k(t[e],r[e]))}return t}function N(t){return"number"==typeof t&&isFinite(t)}function x(t){return"number"==typeof t&&t%1==0}function C(t){return"string"==typeof t}function S(t){return"boolean"==typeof t}function T(t){var i,n,s,h=t;if(!h||"object"!=typeof h)return h;for(n in i=Array.isArray(h)?[]:{},h)h.hasOwnProperty(n)&&(s=h[n],i[n]=s&&"object"==typeof s?T(s):s);return i}function D(t){return null!==t}function A(t){return null===t?void 0:t}var B="'Trebuchet MS', Roboto, Ubuntu, sans-serif";function L(t,i,n){return n=void 0!==n?"".concat(n," "):"",void 0===i&&(i=B),"".concat(n).concat(t,"px ").concat(i)}var E=function(){function t(t){this.k={N:1,C:4,S:NaN,T:"",D:"",A:"",B:0,L:0,F:0,O:0,V:0},this.P=t}return t.prototype.W=function(){var t=this.k,i=this.R(),n=this.I();return t.S===i&&t.D===n||(t.S=i,t.D=n,t.T=L(i,n),t.O=Math.floor(i/3.5),t.B=t.O,t.L=Math.max(Math.ceil(i/2-t.C/2),0),t.F=Math.ceil(i/2+t.C/2),t.V=Math.round(i/10)),t.A=this.j(),this.k},t.prototype.j=function(){return this.P.W().layout.textColor},t.prototype.R=function(){return this.P.W().layout.fontSize},t.prototype.I=function(){return this.P.W().layout.fontFamily},t}(),F=function(){function t(){this.q=[]}return t.prototype.U=function(t){this.q=t},t.prototype.H=function(t,i,n,s){this.q.forEach((function(h){t.save(),h.H(t,i,n,s),t.restore()}))},t}(),O=function(){function t(){}return t.prototype.H=function(t,i,n,s){t.save(),t.scale(i,i),this.Y(t,n,s),t.restore()},t.prototype.$=function(t,i,n,s){t.save(),t.scale(i,i),this.K(t,n,s),t.restore()},t.prototype.K=function(t,i,n){},t}(),V=function(t){function i(){var i=null!==t&&t.apply(this,arguments)||this;return i.X=null,i}return m(i,t),i.prototype.Z=function(t){this.X=t},i.prototype.Y=function(t){if(null!==this.X&&null!==this.X.J){var i=this.X.J,n=this.X,s=function(s){t.beginPath();for(var h=i.to-1;h>=i.from;--h){var r=n.G[h];t.moveTo(r.tt,r.it),t.arc(r.tt,r.it,s,0,2*Math.PI)}t.fill()};t.fillStyle=n.nt,s(n.st+2),t.fillStyle=n.ht,s(n.st)}},i}(O);function P(){return{G:[{tt:0,it:0,rt:0,et:0}],ht:"",nt:"",st:0,J:null}}var W={from:0,to:1},z=function(){function t(t,i){this.ut=new F,this.ot=[],this.lt=[],this.ft=!0,this.P=t,this.ct=i,this.ut.U(this.ot)}return t.prototype.vt=function(t){var i=this.P._t();i.length!==this.ot.length&&(this.lt=i.map(P),this.ot=this.lt.map((function(t){var i=new V;return i.Z(t),i})),this.ut.U(this.ot)),this.ft=!0},t.prototype.dt=function(t,i,n){return this.ft&&(this.wt(t),this.ft=!1),this.ut},t.prototype.wt=function(t){var i=this,n=this.P._t(),s=this.ct.Mt(),h=this.P.bt();n.forEach((function(n,r){var e,a=i.lt[r],o=n.gt(s);if(null!==o&&n.yt()){var l=u(n.kt());a.ht=o.Nt,a.st=o.st,a.G[0].et=o.et,a.G[0].it=n.Ct().xt(o.et,l.St),a.nt=null!==(e=o.Tt)&&void 0!==e?e:i.P.Dt(a.G[0].it/t),a.G[0].rt=s,a.G[0].tt=h.At(s),a.J=W}else a.J=null}))},t}(),R=function(){function t(t){this.Bt=t}return t.prototype.H=function(t,i,n,r){if(null!==this.Bt){var e=this.Bt.Lt.yt,u=this.Bt.Et.yt;if(e||u){t.save();var a=Math.round(this.Bt.tt*i),o=Math.round(this.Bt.it*i),l=Math.ceil(this.Bt.Ft*i),f=Math.ceil(this.Bt.Ot*i);t.lineCap="butt",e&&a>=0&&(t.lineWidth=Math.floor(this.Bt.Lt.Vt*i),t.strokeStyle=this.Bt.Lt.A,t.fillStyle=this.Bt.Lt.A,s(t,this.Bt.Lt.Pt),function(t,i,n,s){t.beginPath();var h=t.lineWidth%2?.5:0;t.moveTo(i+h,n),t.lineTo(i+h,s),t.stroke()}(t,a,0,f)),u&&o>=0&&(t.lineWidth=Math.floor(this.Bt.Et.Vt*i),t.strokeStyle=this.Bt.Et.A,t.fillStyle=this.Bt.Et.A,s(t,this.Bt.Et.Pt),h(t,o,0,l)),t.restore()}}},t}(),I=function(){function t(t){this.ft=!0,this.Wt={Lt:{Vt:1,Pt:0,A:"",yt:!1},Et:{Vt:1,Pt:0,A:"",yt:!1},Ft:0,Ot:0,tt:0,it:0},this.zt=new R(this.Wt),this.Rt=t}return t.prototype.vt=function(){this.ft=!0},t.prototype.dt=function(t,i){return this.ft&&(this.wt(),this.ft=!1),this.zt},t.prototype.wt=function(){var t=this.Rt.yt(),i=u(this.Rt.It()),n=i.jt().W().crosshair,s=this.Wt;s.Et.yt=t&&this.Rt.qt(i),s.Lt.yt=t&&this.Rt.Ut(),s.Et.Vt=n.horzLine.width,s.Et.Pt=n.horzLine.style,s.Et.A=n.horzLine.color,s.Lt.Vt=n.vertLine.width,s.Lt.Pt=n.vertLine.style,s.Lt.A=n.vertLine.color,s.Ft=i.Ht(),s.Ot=i.Yt(),s.tt=this.Rt.$t(),s.it=this.Rt.Kt()},t}();function j(t,i,n,s,h,r){t.fillRect(i+r,n,s-2*r,r),t.fillRect(i+r,n+h-r,s-2*r,r),t.fillRect(i,n,r,h),t.fillRect(i+s-r,n,r,h)}function q(t,i,n){t.save(),t.scale(i,i),n(),t.restore()}function U(t,i,n,s,h,r){t.save(),t.globalCompositeOperation="copy",t.fillStyle=r,t.fillRect(i,n,s,h),t.restore()}function H(t,i,n,s,h,r,e){t.save(),t.globalCompositeOperation="copy";var u=t.createLinearGradient(0,0,0,h);u.addColorStop(0,r),u.addColorStop(1,e),t.fillStyle=u,t.fillRect(i,n,s,h),t.restore()}var Y,$=function(){function t(t,i){this.Z(t,i)}return t.prototype.Z=function(t,i){this.Bt=t,this.Xt=i},t.prototype.H=function(t,i,n,s,h,r){if(this.Bt.yt){t.font=i.T;var e=this.Bt.Zt||!this.Bt.Jt?i.C:0,u=i.N,a=i.O,o=i.B,l=i.L,f=i.F,c=this.Bt.Gt,v=Math.ceil(n.Qt(t,c)),_=i.V,d=i.S+a+o,w=Math.ceil(.5*d),M=u+v+l+f+e,b=this.Xt.ti;this.Xt.ii&&(b=this.Xt.ii);var m,p,g=(b=Math.round(b))-w,y=g+d,k="right"===h,N=k?s:0,x=Math.ceil(s*r),C=N;if(t.fillStyle=this.Xt.t,t.lineWidth=1,t.lineCap="butt",c){k?(m=N-e,p=(C=N-M)+f):(C=N+M,m=N+e,p=N+u+e+l);var S=Math.max(1,Math.floor(r)),T=Math.max(1,Math.floor(u*r)),D=k?x:0,A=Math.round(g*r),B=Math.round(C*r),L=Math.round(b*r)-Math.floor(.5*r),E=L+S+(L-A),F=Math.round(m*r);t.save(),t.beginPath(),t.moveTo(D,A),t.lineTo(B,A),t.lineTo(B,E),t.lineTo(D,E),t.fill(),t.fillStyle=this.Bt.Tt,t.fillRect(k?x-T:0,A,T,E-A),this.Bt.Zt&&(t.fillStyle=this.Xt.A,t.fillRect(D,L,F-D,S)),t.textAlign="left",t.fillStyle=this.Xt.A,q(t,r,(function(){t.fillText(c,p,y-o-_)})),t.restore()}}},t.prototype.Yt=function(t,i){return this.Bt.yt?t.S+t.O+t.B:0},t}(),K=function(){function t(t){this.ni={ti:0,A:"#FFF",t:"#000"},this.si={Gt:"",yt:!1,Zt:!0,Jt:!1,Tt:""},this.hi={Gt:"",yt:!1,Zt:!1,Jt:!0,Tt:""},this.ft=!0,this.ri=new(t||$)(this.si,this.ni),this.ei=new(t||$)(this.hi,this.ni)}return t.prototype.Gt=function(){return this.ui(),this.si.Gt},t.prototype.ti=function(){return this.ui(),this.ni.ti},t.prototype.vt=function(){this.ft=!0},t.prototype.Yt=function(t,i){return void 0===i&&(i=!1),Math.max(this.ri.Yt(t,i),this.ei.Yt(t,i))},t.prototype.ai=function(){return this.ni.ii||0},t.prototype.oi=function(t){this.ni.ii=t},t.prototype.li=function(){return this.ui(),this.si.yt||this.hi.yt},t.prototype.fi=function(){return this.ui(),this.si.yt},t.prototype.dt=function(t){return this.ui(),this.si.Zt=this.si.Zt&&t.W().drawTicks,this.hi.Zt=this.hi.Zt&&t.W().drawTicks,this.ri.Z(this.si,this.ni),this.ei.Z(this.hi,this.ni),this.ri},t.prototype.ci=function(){return this.ui(),this.ri.Z(this.si,this.ni),this.ei.Z(this.hi,this.ni),this.ei},t.prototype.ui=function(){this.ft&&(this.si.Zt=!0,this.hi.Zt=!1,this.vi(this.si,this.hi,this.ni))},t}(),X=function(t){function i(i,n,s){var h=t.call(this)||this;return h.Rt=i,h._i=n,h.di=s,h}return m(i,t),i.prototype.vi=function(t,i,n){t.yt=!1;var s=this.Rt.W().horzLine;if(s.labelVisible){var h=this._i.kt();if(this.Rt.yt()&&!this._i.wi()&&null!==h){var r=M(s.labelBackgroundColor);n.t=r.t,n.A=r.i;var e=this.di(this._i);n.ti=e.ti,t.Gt=this._i.Mi(e.et,h),t.yt=!0}}},i}(K),Z=/[1-9]/g,J=function(){function t(){this.Bt=null}return t.prototype.Z=function(t){this.Bt=t},t.prototype.H=function(t,i,n){var s=this;if(null!==this.Bt&&!1!==this.Bt.yt&&0!==this.Bt.Gt.length){t.font=i.T;var h=Math.round(i.bi.Qt(t,this.Bt.Gt,Z));if(!(h<=0)){t.save();var r=i.mi,e=h+2*r,a=e/2,o=this.Bt.Ht,l=this.Bt.ti,f=Math.floor(l-a)+.5;f<0?(l+=Math.abs(0-f),f=Math.floor(l-a)+.5):f+e>o&&(l-=Math.abs(o-(f+e)),f=Math.floor(l-a)+.5);var c=f+e,v=0+i.N+i.O+i.S+i.B;t.fillStyle=this.Bt.t;var _=Math.round(f*n),d=Math.round(0*n),w=Math.round(c*n),M=Math.round(v*n);t.fillRect(_,d,w-_,M-d);var b=Math.round(this.Bt.ti*n),m=d,p=Math.round((m+i.N+i.C)*n);t.fillStyle=this.Bt.A;var g=Math.max(1,Math.floor(n)),y=Math.floor(.5*n);t.fillRect(b-y,m,g,p-m);var k=v-i.V-i.B;t.textAlign="left",t.fillStyle=this.Bt.A,q(t,n,(function(){t.fillText(u(s.Bt).Gt,f+r,k)})),t.restore()}}},t}(),G=function(){function t(t,i,n){this.ft=!0,this.zt=new J,this.Wt={yt:!1,t:"#4c525e",A:"white",Gt:"",Ht:0,ti:NaN},this.ct=t,this.pi=i,this.di=n}return t.prototype.vt=function(){this.ft=!0},t.prototype.dt=function(){return this.ft&&(this.wt(),this.ft=!1),this.zt.Z(this.Wt),this.zt},t.prototype.wt=function(){var t=this.Wt;t.yt=!1;var i=this.ct.W().vertLine;if(i.labelVisible){var n=this.pi.bt();if(!n.wi()){var s=n.gi(this.ct.Mt());t.Ht=n.Ht();var h=this.di();if(h.rt){t.ti=h.ti,t.Gt=n.yi(u(s)),t.yt=!0;var r=M(i.labelBackgroundColor);t.t=r.t,t.A=r.i}}}},t}(),Q=function(){function t(){this.ki=null,this.Ni=0}return t.prototype.xi=function(){return this.Ni},t.prototype.Ci=function(t){this.Ni=t},t.prototype.Ct=function(){return this.ki},t.prototype.Si=function(t){this.ki=t},t.prototype.Ti=function(){return[]},t.prototype.yt=function(){return!0},t}();!function(t){t[t.Normal=0]="Normal",t[t.Magnet=1]="Magnet"}(Y||(Y={}));var tt=function(t){function i(i,n){var s=t.call(this)||this;s.Di=null,s.Ai=NaN,s.Bi=0,s.Li=!0,s.Ei=new Map,s.Fi=!1,s.Oi=NaN,s.Vi=NaN,s.Pi=NaN,s.Wi=NaN,s.pi=i,s.zi=n,s.Ri=new z(i,s);var h,r;s.Ii=(h=function(){return s.Ai},r=function(){return s.Vi},function(t){var i=r(),n=h();if(t===u(s.Di).ji())return{et:n,ti:i};var e=u(t.kt());return{et:t.qi(i,e),ti:i}});var e=function(t,i){return function(){return{rt:s.pi.bt().gi(t()),ti:i()}}}((function(){return s.Bi}),(function(){return s.$t()}));return s.Ui=new G(s,i,e),s.Hi=new I(s),s}return m(i,t),i.prototype.W=function(){return this.zi},i.prototype.Yi=function(t,i){this.Pi=t,this.Wi=i},i.prototype.$i=function(){this.Pi=NaN,this.Wi=NaN},i.prototype.Ki=function(){return this.Pi},i.prototype.Xi=function(){return this.Wi},i.prototype.Zi=function(t,i,n){this.Fi||(this.Fi=!0),this.Li=!0,this.Ji(t,i,n)},i.prototype.Mt=function(){return this.Bi},i.prototype.$t=function(){return this.Oi},i.prototype.Kt=function(){return this.Vi},i.prototype.yt=function(){return this.Li},i.prototype.Gi=function(){this.Li=!1,this.Qi(),this.Ai=NaN,this.Oi=NaN,this.Vi=NaN,this.Di=null,this.$i()},i.prototype.tn=function(t){return null!==this.Di?[this.Hi,this.Ri]:[]},i.prototype.qt=function(t){return t===this.Di&&this.zi.horzLine.visible},i.prototype.Ut=function(){return this.zi.vertLine.visible},i.prototype.nn=function(t,i){this.Li&&this.Di===t||this.Ei.clear();var n=[];return this.Di===t&&n.push(this.sn(this.Ei,i,this.Ii)),n},i.prototype.Ti=function(){return this.Li?[this.Ui]:[]},i.prototype.It=function(){return this.Di},i.prototype.hn=function(){this.Hi.vt(),this.Ei.forEach((function(t){return t.vt()})),this.Ui.vt(),this.Ri.vt()},i.prototype.rn=function(t){return t&&!t.ji().wi()?t.ji():null},i.prototype.Ji=function(t,i,n){this.en(t,i,n)&&this.hn()},i.prototype.en=function(t,i,n){var s=this.Oi,h=this.Vi,r=this.Ai,e=this.Bi,u=this.Di,a=this.rn(n);this.Bi=t,this.Oi=isNaN(t)?NaN:this.pi.bt().At(t),this.Di=n;var o=null!==a?a.kt():null;return null!==a&&null!==o?(this.Ai=i,this.Vi=a.xt(i,o)):(this.Ai=NaN,this.Vi=NaN),s!==this.Oi||h!==this.Vi||e!==this.Bi||r!==this.Ai||u!==this.Di},i.prototype.Qi=function(){var t=this.pi._t().map((function(t){return t.an().un()})).filter(D),i=0===t.length?null:Math.max.apply(Math,t);this.Bi=null!==i?i:NaN},i.prototype.sn=function(t,i,n){var s=t.get(i);return void 0===s&&(s=new X(this,i,n),t.set(i,s)),s},i}(Q);function it(t){return"left"===t||"right"===t}var nt=function(){function t(t){this.on=new Map,this.ln=[],this.fn=t}return t.prototype.cn=function(t,i){var n=function(t,i){return void 0===t?i:{vn:Math.max(t.vn,i.vn),_n:t._n||i._n}}(this.on.get(t),i);this.on.set(t,n)},t.prototype.dn=function(){return this.fn},t.prototype.wn=function(t){var i=this.on.get(t);return void 0===i?{vn:this.fn}:{vn:Math.max(this.fn,i.vn),_n:i._n}},t.prototype.Mn=function(){this.ln=[{bn:0}]},t.prototype.mn=function(t){this.ln=[{bn:1,St:t}]},t.prototype.pn=function(){this.ln=[{bn:4}]},t.prototype.gn=function(t){this.ln.push({bn:2,St:t})},t.prototype.yn=function(t){this.ln.push({bn:3,St:t})},t.prototype.kn=function(){return this.ln},t.prototype.Nn=function(t){for(var i=this,n=0,s=t.ln;n<s.length;n++){var h=s[n];this.xn(h)}this.fn=Math.max(this.fn,t.fn),t.on.forEach((function(t,n){i.cn(n,t)}))},t.prototype.xn=function(t){switch(t.bn){case 0:this.Mn();break;case 1:this.mn(t.St);break;case 2:this.gn(t.St);break;case 3:this.yn(t.St);break;case 4:this.pn()}},t}(),st=".";function ht(t,i){if(!N(t))return"n/a";if(!x(i))throw new TypeError("invalid length");if(i<0||i>16)throw new TypeError("invalid length");if(0===i)return t.toString();return("0000000000000000"+t.toString()).slice(-i)}var rt=function(){function t(t,i){if(i||(i=1),N(t)&&x(t)||(t=100),t<0)throw new TypeError("invalid base");this._i=t,this.Cn=i,this.Sn()}return t.prototype.format=function(t){var i=t<0?"−":"";return t=Math.abs(t),i+this.Tn(t)},t.prototype.Sn=function(){if(this.Dn=0,this._i>0&&this.Cn>0)for(var t=this._i;t>1;)t/=10,this.Dn++},t.prototype.Tn=function(t){var i=this._i/this.Cn,n=Math.floor(t),s="",h=void 0!==this.Dn?this.Dn:NaN;if(i>1){var r=+(Math.round(t*i)-n*i).toFixed(this.Dn);r>=i&&(r-=i,n+=1),s=st+ht(+r.toFixed(this.Dn)*this.Cn,h)}else n=Math.round(n*i)/i,h>0&&(s=st+ht(0,h));return n.toFixed(0)+s},t}(),et=function(t){function i(i){return void 0===i&&(i=100),t.call(this,i)||this}return m(i,t),i.prototype.format=function(i){return"".concat(t.prototype.format.call(this,i),"%")},i}(rt),ut=function(){function t(t){this.An=t}return t.prototype.format=function(t){var i="";return t<0&&(i="-",t=-t),t<995?i+this.Bn(t):t<999995?i+this.Bn(t/1e3)+"K":t<999999995?(t=1e3*Math.round(t/1e3),i+this.Bn(t/1e6)+"M"):(t=1e6*Math.round(t/1e6),i+this.Bn(t/1e9)+"B")},t.prototype.Bn=function(t){var i=Math.pow(10,this.An);return((t=Math.round(t*i)/i)>=1e-15&&t<1?t.toFixed(this.An).replace(/\.?0+$/,""):String(t)).replace(/(\.[1-9]*)0+$/,(function(t,i){return i}))},t}();function at(t,i,n,s){if(0!==i.length){var h=i[s.from].tt,r=i[s.from].it;t.moveTo(h,r);for(var e=s.from+1;e<s.to;++e){var u=i[e];if(1===n){var a=i[e-1].it,o=u.tt;t.lineTo(o,a)}t.lineTo(u.tt,u.it)}}}var ot=function(t){function i(){var i=null!==t&&t.apply(this,arguments)||this;return i.X=null,i}return m(i,t),i.prototype.Z=function(t){this.X=t},i.prototype.Y=function(t){if(null!==this.X&&0!==this.X.G.length&&null!==this.X.J){if(t.lineCap="butt",t.lineJoin="round",t.lineWidth=this.X.Vt,s(t,this.X.Pt),t.lineWidth=1,t.beginPath(),1===this.X.G.length){var i=this.X.G[0],n=this.X.Ln/2;t.moveTo(i.tt-n,this.X.En),t.lineTo(i.tt-n,i.it),t.lineTo(i.tt+n,i.it),t.lineTo(i.tt+n,this.X.En)}else t.moveTo(this.X.G[this.X.J.from].tt,this.X.En),t.lineTo(this.X.G[this.X.J.from].tt,this.X.G[this.X.J.from].it),at(t,this.X.G,this.X.Fn,this.X.J),this.X.J.to>this.X.J.from&&(t.lineTo(this.X.G[this.X.J.to-1].tt,this.X.En),t.lineTo(this.X.G[this.X.J.from].tt,this.X.En));t.closePath(),t.fillStyle=this.On(t),t.fill()}},i}(O),lt=function(t){function i(){return null!==t&&t.apply(this,arguments)||this}return m(i,t),i.prototype.On=function(t){var i=this.X,n=t.createLinearGradient(0,0,0,i.Vn);return n.addColorStop(0,i.Pn),n.addColorStop(1,i.Wn),n},i}(ot),ft=function(t){function i(){var i=null!==t&&t.apply(this,arguments)||this;return i.X=null,i}return m(i,t),i.prototype.Z=function(t){this.X=t},i.prototype.Y=function(t){if(null!==this.X&&0!==this.X.G.length&&null!==this.X.J)if(t.lineCap="butt",t.lineWidth=this.X.Vt,s(t,this.X.Pt),t.strokeStyle=this.zn(t),t.lineJoin="round",1===this.X.G.length){t.beginPath();var i=this.X.G[0];t.moveTo(i.tt-this.X.Ln/2,i.it),t.lineTo(i.tt+this.X.Ln/2,i.it),void 0!==i.A&&(t.strokeStyle=i.A),t.stroke()}else this.Rn(t,this.X)},i.prototype.Rn=function(t,i){t.beginPath(),at(t,i.G,i.Fn,i.J),t.stroke()},i}(O),ct=function(t){function i(){return null!==t&&t.apply(this,arguments)||this}return m(i,t),i.prototype.Rn=function(t,i){var n,s,h=i.G,r=i.J,e=i.Fn,u=i.ht;if(0!==h.length&&null!==r){t.beginPath();var a=h[r.from];t.moveTo(a.tt,a.it);var o=null!==(n=a.A)&&void 0!==n?n:u;t.strokeStyle=o;for(var l=function(i){t.stroke(),t.beginPath(),t.strokeStyle=i,o=i},f=r.from+1;f<r.to;++f){var c=h[f],v=h[f-1],_=null!==(s=c.A)&&void 0!==s?s:u;1===e&&(t.lineTo(c.tt,v.it),_!==o&&(l(_),t.moveTo(c.tt,v.it))),t.lineTo(c.tt,c.it),1!==e&&_!==o&&(l(_),t.moveTo(c.tt,c.it))}t.stroke()}},i.prototype.zn=function(){return this.X.ht},i}(ft);function vt(t,i,n,s,h){void 0===s&&(s=0),void 0===h&&(h=t.length);for(var r=h-s;0<r;){var e=r>>1,u=s+e;n(t[u],i)?(s=u+1,r-=e+1):r=e}return s}function _t(t,i,n,s,h){void 0===s&&(s=0),void 0===h&&(h=t.length);for(var r=h-s;0<r;){var e=r>>1,u=s+e;n(i,t[u])?r=e:(s=u+1,r-=e+1)}return s}function dt(t,i){return t.rt<i}function wt(t,i){return t<i.rt}function Mt(t,i,n){var s=i.In(),h=i.jn(),r=vt(t,s,dt),e=_t(t,h,wt);if(!n)return{from:r,to:e};var u=r,a=e;return r>0&&r<t.length&&t[r].rt>=s&&(u=r-1),e>0&&e<t.length&&t[e-1].rt<=h&&(a=e+1),{from:u,to:a}}var bt=function(){function t(t,i,n){this.qn=!0,this.Un=!0,this.Hn=!0,this.Yn=[],this.$n=null,this.Kn=t,this.Xn=i,this.Zn=n}return t.prototype.vt=function(t){this.qn=!0,"data"===t&&(this.Un=!0),"options"===t&&(this.Hn=!0)},t.prototype.Jn=function(){this.Un&&(this.Gn(),this.Un=!1),this.qn&&(this.Qn(),this.qn=!1),this.Hn&&(this.ts(),this.Hn=!1)},t.prototype.ns=function(){this.$n=null},t.prototype.Qn=function(){var t=this.Kn.Ct(),i=this.Xn.bt();if(this.ns(),!i.wi()&&!t.wi()){var n=i.ss();if(null!==n&&0!==this.Kn.an().hs()){var s=this.Kn.kt();null!==s&&(this.$n=Mt(this.Yn,n,this.Zn),this.rs(t,i,s.St))}}},t}(),mt=function(t){function i(i,n){return t.call(this,i,n,!0)||this}return m(i,t),i.prototype.rs=function(t,i,n){i.es(this.Yn,A(this.$n)),t.us(this.Yn,n,A(this.$n))},i.prototype.os=function(t,i){return{rt:t,et:i,tt:NaN,it:NaN}},i.prototype.ts=function(){},i.prototype.Gn=function(){var t=this,i=this.Kn.ls();this.Yn=this.Kn.an().fs().map((function(n){var s=n.St[3];return t.cs(n.vs,s,i)}))},i}(bt),pt=function(t){function i(i,n){var s=t.call(this,i,n)||this;return s.zt=new F,s._s=new lt,s.ds=new ct,s.zt.U([s._s,s.ds]),s}return m(i,t),i.prototype.dt=function(t,i){if(!this.Kn.yt())return null;var n=this.Kn.W();return this.Jn(),this._s.Z({Fn:n.lineType,G:this.Yn,Pt:n.lineStyle,Vt:n.lineWidth,Pn:n.topColor,Wn:n.bottomColor,En:t,Vn:t,J:this.$n,Ln:this.Xn.bt().ws()}),this.ds.Z({Fn:n.lineType,G:this.Yn,ht:n.lineColor,Pt:n.lineStyle,Vt:n.lineWidth,J:this.$n,Ln:this.Xn.bt().ws()}),this.zt},i.prototype.cs=function(t,i){return this.os(t,i)},i}(mt);var gt=function(){function t(){this.Bt=null,this.Ms=0,this.bs=0}return t.prototype.Z=function(t){this.Bt=t},t.prototype.H=function(t,i,n,s){if(null!==this.Bt&&0!==this.Bt.an.length&&null!==this.Bt.J){if(this.Ms=this.ps(i),this.Ms>=2)Math.max(1,Math.floor(i))%2!=this.Ms%2&&this.Ms--;this.bs=this.Bt.gs?Math.min(this.Ms,Math.floor(i)):this.Ms;for(var h=null,r=this.bs<=this.Ms&&this.Bt.ws>=Math.floor(1.5*i),e=this.Bt.J.from;e<this.Bt.J.to;++e){var u=this.Bt.an[e];h!==u.A&&(t.fillStyle=u.A,h=u.A);var a=Math.floor(.5*this.bs),o=Math.round(u.tt*i),l=o-a,f=this.bs,c=l+f-1,v=Math.min(u.ys,u.ks),_=Math.max(u.ys,u.ks),d=Math.round(v*i)-a,w=Math.round(_*i)+a,M=Math.max(w-d,this.bs);t.fillRect(l,d,f,M);var b=Math.ceil(1.5*this.Ms);if(r){if(this.Bt.Ns){var m=o-b,p=Math.max(d,Math.round(u.xs*i)-a),g=p+f-1;g>d+M-1&&(p=(g=d+M-1)-f+1),t.fillRect(m,p,l-m,g-p+1)}var y=o+b,k=Math.max(d,Math.round(u.Cs*i)-a),N=k+f-1;N>d+M-1&&(k=(N=d+M-1)-f+1),t.fillRect(c+1,k,y-c,N-k+1)}}}},t.prototype.ps=function(t){var i=Math.floor(t);return Math.max(i,Math.floor(function(t,i){return Math.floor(.3*t*i)}(u(this.Bt).ws,t)))},t}(),yt=function(t){function i(i,n){return t.call(this,i,n,!1)||this}return m(i,t),i.prototype.rs=function(t,i,n){i.es(this.Yn,A(this.$n)),t.Ss(this.Yn,n,A(this.$n))},i.prototype.Ts=function(t,i,n){return{rt:t,open:i.St[0],high:i.St[1],low:i.St[2],close:i.St[3],tt:NaN,xs:NaN,ys:NaN,ks:NaN,Cs:NaN}},i.prototype.Gn=function(){var t=this,i=this.Kn.ls();this.Yn=this.Kn.an().fs().map((function(n){return t.cs(n.vs,n,i)}))},i}(bt),kt=function(t){function i(){var i=null!==t&&t.apply(this,arguments)||this;return i.zt=new gt,i}return m(i,t),i.prototype.dt=function(t,i){if(!this.Kn.yt())return null;var n=this.Kn.W();this.Jn();var s={an:this.Yn,ws:this.Xn.bt().ws(),Ns:n.openVisible,gs:n.thinBars,J:this.$n};return this.zt.Z(s),this.zt},i.prototype.ts=function(){var t=this;this.Yn.forEach((function(i){i.A=t.Kn.ls().As(i.rt).Ds}))},i.prototype.cs=function(t,i,n){return p(p({},this.Ts(t,i,n)),{A:n.As(t).Ds})},i}(yt);function Nt(t,i,n){return Math.min(Math.max(t,i),n)}function xt(t,i,n){return i-t<=n}function Ct(t){return t<=0?NaN:Math.log(t)/Math.log(10)}function St(t){var i=Math.ceil(t);return i%2!=0?i-1:i}function Tt(t){var i=Math.ceil(t);return i%2==0?i-1:i}var Dt=function(t){function i(){return null!==t&&t.apply(this,arguments)||this}return m(i,t),i.prototype.On=function(t){var i=this.X,n=t.createLinearGradient(0,0,0,i.Vn),s=Nt(i.En/i.Vn,0,1);return n.addColorStop(0,i.Bs),n.addColorStop(s,i.Ls),n.addColorStop(s,i.Es),n.addColorStop(1,i.Fs),n},i}(ot),At=function(t){function i(){return null!==t&&t.apply(this,arguments)||this}return m(i,t),i.prototype.zn=function(t){var i=this.X,n=t.createLinearGradient(0,0,0,i.Vn),s=Nt(i.En/i.Vn,0,1);return n.addColorStop(0,i.Pn),n.addColorStop(s,i.Pn),n.addColorStop(s,i.Wn),n.addColorStop(1,i.Wn),n},i}(ft),Bt=function(t){function i(i,n){var s=t.call(this,i,n)||this;return s.Os=new Dt,s.Vs=new At,s.ut=new F,s.ut.U([s.Os,s.Vs]),s}return m(i,t),i.prototype.dt=function(t,i){if(!this.Kn.yt())return null;var n=this.Kn.kt();if(null===n)return null;var s=this.Kn.W();this.Jn();var h=this.Kn.Ct().xt(s.baseValue.price,n.St),r=this.Xn.bt().ws();return this.Os.Z({G:this.Yn,Bs:s.topFillColor1,Ls:s.topFillColor2,Es:s.bottomFillColor1,Fs:s.bottomFillColor2,Vt:s.lineWidth,Pt:s.lineStyle,Fn:0,En:h,Vn:t,J:this.$n,Ln:r}),this.Vs.Z({G:this.Yn,Pn:s.topLineColor,Wn:s.bottomLineColor,Vt:s.lineWidth,Pt:s.lineStyle,Fn:0,En:h,Vn:t,J:this.$n,Ln:r}),this.ut},i.prototype.cs=function(t,i){return this.os(t,i)},i}(mt),Lt=function(){function t(){this.Bt=null,this.Ms=0}return t.prototype.Z=function(t){this.Bt=t},t.prototype.H=function(t,i,n,s){if(null!==this.Bt&&0!==this.Bt.an.length&&null!==this.Bt.J){if(this.Ms=function(t,i){if(t>=2.5&&t<=4)return Math.floor(3*i);var n=1-.2*Math.atan(Math.max(4,t)-4)/(.5*Math.PI),s=Math.floor(t*n*i),h=Math.floor(t*i),r=Math.min(s,h);return Math.max(Math.floor(i),r)}(this.Bt.ws,i),this.Ms>=2)Math.floor(i)%2!=this.Ms%2&&this.Ms--;var h=this.Bt.an;this.Bt.Ps&&this.Ws(t,h,this.Bt.J,i),this.Bt.zs&&this.Rs(t,h,this.Bt.J,this.Bt.ws,i);var r=this.Is(i);(!this.Bt.zs||this.Ms>2*r)&&this.js(t,h,this.Bt.J,i)}},t.prototype.Ws=function(t,i,n,s){if(null!==this.Bt){var h="",r=Math.min(Math.floor(s),Math.floor(this.Bt.ws*s));r=Math.max(Math.floor(s),Math.min(r,this.Ms));for(var e=Math.floor(.5*r),u=null,a=n.from;a<n.to;a++){var o=i[a];o.qs!==h&&(t.fillStyle=o.qs,h=o.qs);var l=Math.round(Math.min(o.xs,o.Cs)*s),f=Math.round(Math.max(o.xs,o.Cs)*s),c=Math.round(o.ys*s),v=Math.round(o.ks*s),_=Math.round(s*o.tt)-e,d=_+r-1;null!==u&&(_=Math.max(u+1,_),_=Math.min(_,d));var w=d-_+1;t.fillRect(_,c,w,l-c),t.fillRect(_,f+1,w,v-f),u=d}}},t.prototype.Is=function(t){var i=Math.floor(1*t);this.Ms<=2*i&&(i=Math.floor(.5*(this.Ms-1)));var n=Math.max(Math.floor(t),i);return this.Ms<=2*n?Math.max(Math.floor(t),Math.floor(1*t)):n},t.prototype.Rs=function(t,i,n,s,h){if(null!==this.Bt)for(var r="",e=this.Is(h),u=null,a=n.from;a<n.to;a++){var o=i[a];o.Tt!==r&&(t.fillStyle=o.Tt,r=o.Tt);var l=Math.round(o.tt*h)-Math.floor(.5*this.Ms),f=l+this.Ms-1,c=Math.round(Math.min(o.xs,o.Cs)*h),v=Math.round(Math.max(o.xs,o.Cs)*h);if(null!==u&&(l=Math.max(u+1,l),l=Math.min(l,f)),this.Bt.ws*h>2*e)j(t,l,c,f-l+1,v-c+1,e);else{var _=f-l+1;t.fillRect(l,c,_,v-c+1)}u=f}},t.prototype.js=function(t,i,n,s){if(null!==this.Bt)for(var h="",r=this.Is(s),e=n.from;e<n.to;e++){var u=i[e],a=Math.round(Math.min(u.xs,u.Cs)*s),o=Math.round(Math.max(u.xs,u.Cs)*s),l=Math.round(u.tt*s)-Math.floor(.5*this.Ms),f=l+this.Ms-1;if(u.A!==h){var c=u.A;t.fillStyle=c,h=c}this.Bt.zs&&(l+=r,a+=r,f-=r,o-=r),a>o||t.fillRect(l,a,f-l+1,o-a+1)}},t}(),Et=function(t){function i(){var i=null!==t&&t.apply(this,arguments)||this;return i.zt=new Lt,i}return m(i,t),i.prototype.dt=function(t,i){if(!this.Kn.yt())return null;var n=this.Kn.W();this.Jn();var s={an:this.Yn,ws:this.Xn.bt().ws(),Ps:n.wickVisible,zs:n.borderVisible,J:this.$n};return this.zt.Z(s),this.zt},i.prototype.ts=function(){var t=this;this.Yn.forEach((function(i){var n=t.Kn.ls().As(i.rt);i.A=n.Ds,i.qs=n.Us,i.Tt=n.Hs}))},i.prototype.cs=function(t,i,n){var s=n.As(t);return p(p({},this.Ts(t,i,n)),{A:s.Ds,qs:s.Us,Tt:s.Hs})},i}(yt),Ft=function(){function t(){this.Bt=null,this.Ys=[]}return t.prototype.Z=function(t){this.Bt=t,this.Ys=[]},t.prototype.H=function(t,i,n,s){if(null!==this.Bt&&0!==this.Bt.G.length&&null!==this.Bt.J){this.Ys.length||this.$s(i);for(var h=Math.max(1,Math.floor(i)),r=Math.round(this.Bt.Ks*i)-Math.floor(h/2),e=r+h,u=this.Bt.J.from;u<this.Bt.J.to;u++){var a=this.Bt.G[u],o=this.Ys[u-this.Bt.J.from],l=Math.round(a.it*i);t.fillStyle=a.A;var f=void 0,c=void 0;l<=r?(f=l,c=e):(f=r,c=l-Math.floor(h/2)+h),t.fillRect(o.In,f,o.jn-o.In+1,c-f)}}},t.prototype.$s=function(t){if(null!==this.Bt&&0!==this.Bt.G.length&&null!==this.Bt.J){var i=Math.ceil(this.Bt.ws*t)<=1?0:Math.max(1,Math.floor(t)),n=Math.round(this.Bt.ws*t)-i;this.Ys=new Array(this.Bt.J.to-this.Bt.J.from);for(var s=this.Bt.J.from;s<this.Bt.J.to;s++){var h,r=this.Bt.G[s],e=Math.round(r.tt*t),u=void 0,a=void 0;if(n%2)u=e-(h=(n-1)/2),a=e+h;else u=e-(h=n/2),a=e+h-1;this.Ys[s-this.Bt.J.from]={In:u,jn:a,Xs:e,Zs:r.tt*t,rt:r.rt}}for(s=this.Bt.J.from+1;s<this.Bt.J.to;s++){var o=this.Ys[s-this.Bt.J.from],l=this.Ys[s-this.Bt.J.from-1];o.rt===l.rt+1&&(o.In-l.jn!==i+1&&(l.Xs>l.Zs?l.jn=o.In-i-1:o.In=l.jn+i+1))}var f=Math.ceil(this.Bt.ws*t);for(s=this.Bt.J.from;s<this.Bt.J.to;s++){(o=this.Ys[s-this.Bt.J.from]).jn<o.In&&(o.jn=o.In);var c=o.jn-o.In+1;f=Math.min(c,f)}if(i>0&&f<4)for(s=this.Bt.J.from;s<this.Bt.J.to;s++){(c=(o=this.Ys[s-this.Bt.J.from]).jn-o.In+1)>f&&(o.Xs>o.Zs?o.jn-=1:o.In+=1)}}else this.Ys=[]},t}();function Ot(t){return{G:[],ws:t,Ks:NaN,J:null}}function Vt(t,i,n){return{rt:t,et:i,tt:NaN,it:NaN,A:n}}var Pt=function(t){function i(i,n){var s=t.call(this,i,n,!1)||this;return s.ut=new F,s.Js=Ot(0),s.zt=new Ft,s}return m(i,t),i.prototype.dt=function(t,i){return this.Kn.yt()?(this.Jn(),this.ut):null},i.prototype.Gn=function(){var t=this.Xn.bt().ws();this.Js=Ot(t);for(var i=0,n=0,s=this.Kn.W().color,h=0,r=this.Kn.an().fs();h<r.length;h++){var e=r[h],u=e.St[3],a=void 0!==e.A?e.A:s,o=Vt(e.vs,u,a);++i<this.Js.G.length?this.Js.G[i]=o:this.Js.G.push(o),this.Yn[n++]={rt:e.vs,tt:0}}this.zt.Z(this.Js),this.ut.U([this.zt])},i.prototype.ts=function(){},i.prototype.ns=function(){t.prototype.ns.call(this),this.Js.J=null},i.prototype.rs=function(t,i,n){if(null!==this.$n){var s=i.ws(),h=u(i.ss()),r=t.xt(this.Kn.W().base,n);i.es(this.Js.G),t.us(this.Js.G,n),this.Js.Ks=r,this.Js.J=Mt(this.Js.G,h,!1),this.Js.ws=s,this.zt.Z(this.Js)}},i}(bt),Wt=function(t){function i(i,n){var s=t.call(this,i,n)||this;return s.ds=new ct,s}return m(i,t),i.prototype.dt=function(t,i){if(!this.Kn.yt())return null;var n=this.Kn.W();this.Jn();var s={G:this.Yn,ht:n.color,Pt:n.lineStyle,Fn:n.lineType,Vt:n.lineWidth,J:this.$n,Ln:this.Xn.bt().ws()};return this.ds.Z(s),this.ds},i.prototype.ts=function(){var t=this;this.Yn.forEach((function(i){i.A=t.Kn.ls().As(i.rt).Ds}))},i.prototype.cs=function(t,i,n){var s=this.os(t,i);return s.A=n.As(t).Ds,s},i}(mt),zt=/[2-9]/g,Rt=function(){function t(t){void 0===t&&(t=50),this.Gs=new Map,this.Qs=0,this.th=Array.from(new Array(t))}return t.prototype.ih=function(){this.Gs.clear(),this.th.fill(void 0)},t.prototype.Qt=function(t,i,n){var s=n||zt,h=String(i).replace(s,"0"),r=this.Gs.get(h);if(void 0===r){if(0===(r=t.measureText(h).width)&&0!==i.length)return 0;var e=this.th[this.Qs];void 0!==e&&this.Gs.delete(e),this.th[this.Qs]=h,this.Qs=(this.Qs+1)%this.th.length,this.Gs.set(h,r)}return r},t}(),It=function(){function t(t){this.nh=null,this.k=null,this.sh="right",this.hh=0,this.rh=t}return t.prototype.eh=function(t,i,n,s){this.nh=t,this.k=i,this.hh=n,this.sh=s},t.prototype.H=function(t,i){null!==this.k&&null!==this.nh&&this.nh.H(t,this.k,this.rh,this.hh,this.sh,i)},t}(),jt=function(){function t(t,i,n){this.uh=t,this.rh=new Rt(50),this.ah=i,this.P=n,this.R=-1,this.zt=new It(this.rh)}return t.prototype.dt=function(t,i){var n=this.P.oh(this.ah);if(null===n)return null;var s=n.lh(this.ah)?n.fh():this.ah.Ct();if(null===s)return null;var h=n._h(s);if("overlay"===h)return null;var r=this.P.dh();return r.S!==this.R&&(this.R=r.S,this.rh.ih()),this.zt.eh(this.uh.ci(),r,i,h),this.zt},t}(),qt=function(){function t(){this.Bt=null}return t.prototype.Z=function(t){this.Bt=t},t.prototype.H=function(t,i,n,r){if(null!==this.Bt&&!1!==this.Bt.yt){var e=Math.round(this.Bt.it*i);if(!(e<0||e>Math.ceil(this.Bt.Yt*i))){var u=Math.ceil(this.Bt.Ht*i);t.lineCap="butt",t.strokeStyle=this.Bt.A,t.lineWidth=Math.floor(this.Bt.Vt*i),s(t,this.Bt.Pt),h(t,e,0,u)}}},t}(),Ut=function(){function t(t){this.wh={Ht:0,Yt:0,it:0,A:"rgba(0, 0, 0, 0)",Vt:1,Pt:0,yt:!1},this.Mh=new qt,this.ft=!0,this.Kn=t,this.Xn=t.jt(),this.Mh.Z(this.wh)}return t.prototype.vt=function(){this.ft=!0},t.prototype.dt=function(t,i){return this.Kn.yt()?(this.ft&&(this.bh(t,i),this.ft=!1),this.Mh):null},t}(),Ht=function(t){function i(i){return t.call(this,i)||this}return m(i,t),i.prototype.bh=function(t,i){this.wh.yt=!1;var n=this.Kn.Ct(),s=n.mh().mh;if(2===s||3===s){var h=this.Kn.W();if(h.baseLineVisible&&this.Kn.yt()){var r=this.Kn.kt();null!==r&&(this.wh.yt=!0,this.wh.it=n.xt(r.St,r.St),this.wh.Ht=i,this.wh.Yt=t,this.wh.A=h.baseLineColor,this.wh.Vt=h.baseLineWidth,this.wh.Pt=h.baseLineStyle)}}},i}(Ut),Yt=function(){function t(){this.Bt=null}return t.prototype.Z=function(t){this.Bt=t},t.prototype.ph=function(){return this.Bt},t.prototype.H=function(t,i,n,s){var h=this.Bt;if(null!==h){t.save();var r=Math.max(1,Math.floor(i)),e=r%2/2,u=Math.round(h.Zs.x*i)+e,a=h.Zs.y*i;t.fillStyle=h.gh,t.beginPath();var o=Math.max(2,1.5*h.yh)*i;t.arc(u,a,o,0,2*Math.PI,!1),t.fill(),t.fillStyle=h.kh,t.beginPath(),t.arc(u,a,h.st*i,0,2*Math.PI,!1),t.fill(),t.lineWidth=r,t.strokeStyle=h.Nh,t.beginPath(),t.arc(u,a,h.st*i+r/2,0,2*Math.PI,!1),t.stroke(),t.restore()}},t}(),$t=[{xh:0,Ch:.25,Sh:4,Th:10,Dh:.25,Ah:0,Bh:.4,Lh:.8},{xh:.25,Ch:.525,Sh:10,Th:14,Dh:0,Ah:0,Bh:.8,Lh:0},{xh:.525,Ch:1,Sh:14,Th:14,Dh:0,Ah:0,Bh:0,Lh:0}];function Kt(t,i,n,s){return function(t,i){if("transparent"===t)return t;var n=w(t),s=n[3];return"rgba(".concat(n[0],", ").concat(n[1],", ").concat(n[2],", ").concat(i*s,")")}(t,n+(s-n)*i)}function Xt(t,i){for(var n,s=t%2600/2600,h=0,e=$t;h<e.length;h++){var u=e[h];if(s>=u.xh&&s<=u.Ch){n=u;break}}r(void 0!==n,"Last price animation internal logic error");var a,o,l,f=(s-n.xh)/(n.Ch-n.xh);return{kh:Kt(i,f,n.Dh,n.Ah),Nh:Kt(i,f,n.Bh,n.Lh),st:(a=f,o=n.Sh,l=n.Th,o+(l-o)*a)}}var Zt=function(){function t(t){this.zt=new Yt,this.ft=!0,this.Eh=!0,this.Fh=performance.now(),this.Oh=this.Fh-1,this.Vh=t}return t.prototype.Ph=function(){this.Oh=this.Fh-1,this.vt()},t.prototype.Wh=function(){if(this.vt(),2===this.Vh.W().lastPriceAnimation){var t=performance.now(),i=this.Oh-t;if(i>0)return void(i<650&&(this.Oh+=2600));this.Fh=t,this.Oh=t+2600}},t.prototype.vt=function(){this.ft=!0},t.prototype.zh=function(){this.Eh=!0},t.prototype.yt=function(){return 0!==this.Vh.W().lastPriceAnimation},t.prototype.Rh=function(){switch(this.Vh.W().lastPriceAnimation){case 0:return!1;case 1:return!0;case 2:return performance.now()<=this.Oh}},t.prototype.dt=function(t,i){return this.ft?(this.wt(t,i),this.ft=!1,this.Eh=!1):this.Eh&&(this.Ih(),this.Eh=!1),this.zt},t.prototype.wt=function(t,i){this.zt.Z(null);var n=this.Vh.jt().bt(),s=n.ss(),h=this.Vh.kt();if(null!==s&&null!==h){var r=this.Vh.jh(!0);if(!r.qh&&s.Uh(r.vs)){var e={x:n.At(r.vs),y:this.Vh.Ct().xt(r.et,h.St)},u=r.A,a=this.Vh.W().lineWidth,o=Xt(this.Hh(),u);this.zt.Z({gh:u,yh:a,kh:o.kh,Nh:o.Nh,st:o.st,Zs:e})}}},t.prototype.Ih=function(){var t=this.zt.ph();if(null!==t){var i=Xt(this.Hh(),t.gh);t.kh=i.kh,t.Nh=i.Nh,t.st=i.st}},t.prototype.Hh=function(){return this.Rh()?performance.now()-this.Fh:2599},t}();function Jt(t,i){return Tt(Math.min(Math.max(t,12),30)*i)}function Gt(t,i){switch(t){case"arrowDown":case"arrowUp":return Jt(i,1);case"circle":return Jt(i,.8);case"square":return Jt(i,.7)}}function Qt(t){return St(Jt(t,1))}function ti(t){return Math.max(Jt(t,.1),3)}function ii(t,i,n,s,h){var r=Gt("square",n),e=(r-1)/2,u=t-e,a=i-e;return s>=u&&s<=u+r&&h>=a&&h<=a+r}function ni(t,i,n,s,h){var r=(Gt("arrowUp",h)-1)/2,e=(Tt(h/2)-1)/2;i.beginPath(),t?(i.moveTo(n-r,s),i.lineTo(n,s-r),i.lineTo(n+r,s),i.lineTo(n+e,s),i.lineTo(n+e,s+r),i.lineTo(n-e,s+r),i.lineTo(n-e,s)):(i.moveTo(n-r,s),i.lineTo(n,s+r),i.lineTo(n+r,s),i.lineTo(n+e,s),i.lineTo(n+e,s-r),i.lineTo(n-e,s-r),i.lineTo(n-e,s)),i.fill()}function si(t,i,n,s,h,r){return ii(i,n,s,h,r)}var hi=function(t){function i(){var i=null!==t&&t.apply(this,arguments)||this;return i.Bt=null,i.rh=new Rt,i.R=-1,i.I="",i.Yh="",i}return m(i,t),i.prototype.Z=function(t){this.Bt=t},i.prototype.eh=function(t,i){this.R===t&&this.I===i||(this.R=t,this.I=i,this.Yh=L(t,i),this.rh.ih())},i.prototype.$h=function(t,i){if(null===this.Bt||null===this.Bt.J)return null;for(var n=this.Bt.J.from;n<this.Bt.J.to;n++){var s=this.Bt.G[n];if(ei(s,t,i))return{Kh:s.Xh,Zh:s.Zh}}return null},i.prototype.Y=function(t,i,n){if(null!==this.Bt&&null!==this.Bt.J){t.textBaseline="middle",t.font=this.Yh;for(var s=this.Bt.J.from;s<this.Bt.J.to;s++){var h=this.Bt.G[s];void 0!==h.Gt&&(h.Gt.Ht=this.rh.Qt(t,h.Gt.Jh),h.Gt.Yt=this.R),ri(h,t)}}},i}(O);function ri(t,i){i.fillStyle=t.A,void 0!==t.Gt&&function(t,i,n,s){t.fillText(i,n,s)}(i,t.Gt.Jh,t.tt-t.Gt.Ht/2,t.Gt.it),function(t,i){if(0===t.hs)return;switch(t.Gh){case"arrowDown":return void ni(!1,i,t.tt,t.it,t.hs);case"arrowUp":return void ni(!0,i,t.tt,t.it,t.hs);case"circle":return void function(t,i,n,s){var h=(Gt("circle",s)-1)/2;t.beginPath(),t.arc(i,n,h,0,2*Math.PI,!1),t.fill()}(i,t.tt,t.it,t.hs);case"square":return void function(t,i,n,s){var h=Gt("square",s),r=(h-1)/2,e=i-r,u=n-r;t.fillRect(e,u,h,h)}(i,t.tt,t.it,t.hs)}t.Gh}(t,i)}function ei(t,i,n){return!(void 0===t.Gt||!function(t,i,n,s,h,r){var e=s/2;return h>=t&&h<=t+n&&r>=i-e&&r<=i+e}(t.tt,t.Gt.it,t.Gt.Ht,t.Gt.Yt,i,n))||function(t,i,n){if(0===t.hs)return!1;switch(t.Gh){case"arrowDown":case"arrowUp":return si(0,t.tt,t.it,t.hs,i,n);case"circle":return function(t,i,n,s,h){var r=2+Gt("circle",n)/2,e=t-s,u=i-h;return Math.sqrt(e*e+u*u)<=r}(t.tt,t.it,t.hs,i,n);case"square":return ii(t.tt,t.it,t.hs,i,n)}}(t,i,n)}function ui(t,i,n,s,h,r,e,u,a){var o=N(n)?n:n.close,l=N(n)?n:n.high,f=N(n)?n:n.low,c=N(i.size)?Math.max(i.size,0):1,v=Qt(u.ws())*c,_=v/2;switch(t.hs=v,i.position){case"inBar":return t.it=e.xt(o,a),void(void 0!==t.Gt&&(t.Gt.it=t.it+_+r+.6*h));case"aboveBar":return t.it=e.xt(l,a)-_-s.Qh,void 0!==t.Gt&&(t.Gt.it=t.it-_-.6*h,s.Qh+=1.2*h),void(s.Qh+=v+r);case"belowBar":return t.it=e.xt(f,a)+_+s.tr,void 0!==t.Gt&&(t.Gt.it=t.it+_+r+.6*h,s.tr+=1.2*h),void(s.tr+=v+r)}i.position}var ai=function(){function t(t,i){this.ft=!0,this.ir=!0,this.nr=!0,this.sr=null,this.zt=new hi,this.Vh=t,this.pi=i,this.Bt={G:[],J:null}}return t.prototype.vt=function(t){this.ft=!0,this.nr=!0,"data"===t&&(this.ir=!0)},t.prototype.dt=function(t,i,n){if(!this.Vh.yt())return null;this.ft&&this.Jn();var s=this.pi.W().layout;return this.zt.eh(s.fontSize,s.fontFamily),this.zt.Z(this.Bt),this.zt},t.prototype.hr=function(){if(this.nr){if(this.Vh.rr().length>0){var t=this.pi.bt().ws(),i=ti(t),n=1.5*Qt(t)+2*i;this.sr={above:n,below:n}}else this.sr=null;this.nr=!1}return this.sr},t.prototype.Jn=function(){var t=this.Vh.Ct(),i=this.pi.bt(),n=this.Vh.rr();this.ir&&(this.Bt.G=n.map((function(t){return{rt:t.time,tt:0,it:0,hs:0,Gh:t.shape,A:t.color,Xh:t.Xh,Zh:t.id,Gt:void 0}})),this.ir=!1);var s=this.pi.W().layout;this.Bt.J=null;var h=i.ss();if(null!==h){var r=this.Vh.kt();if(null!==r&&0!==this.Bt.G.length){var e=NaN,u=ti(i.ws()),a={Qh:u,tr:u};this.Bt.J=Mt(this.Bt.G,h,!0);for(var o=this.Bt.J.from;o<this.Bt.J.to;o++){var l=n[o];l.time!==e&&(a.Qh=u,a.tr=u,e=l.time);var f=this.Bt.G[o];f.tt=i.At(l.time),void 0!==l.text&&l.text.length>0&&(f.Gt={Jh:l.text,it:0,Ht:0,Yt:0});var c=this.Vh.er(l.time);null!==c&&ui(f,l,c,a,s.fontSize,u,t,i,r.St)}this.ft=!1}}},t}(),oi=function(t){function i(i){return t.call(this,i)||this}return m(i,t),i.prototype.bh=function(t,i){var n=this.wh;n.yt=!1;var s=this.Kn.W();if(s.priceLineVisible&&this.Kn.yt()){var h=this.Kn.jh(0===s.priceLineSource);h.qh||(n.yt=!0,n.it=h.ti,n.A=this.Kn.ur(h.A),n.Ht=i,n.Yt=t,n.Vt=s.priceLineWidth,n.Pt=s.priceLineStyle)}},i}(Ut),li=function(t){function i(i){var n=t.call(this)||this;return n.Rt=i,n}return m(i,t),i.prototype.vi=function(t,i,n){t.yt=!1,i.yt=!1;var s=this.Rt;if(s.yt()){var h=s.W(),r=h.lastValueVisible,e=""!==s.ar(),u=0===h.seriesLastValueMode,a=s.jh(!1);if(!a.qh){r&&(t.Gt=this.lr(a,r,u),t.yt=0!==t.Gt.length),(e||u)&&(i.Gt=this.cr(a,r,e,u),i.yt=i.Gt.length>0);var o=s.ur(a.A),l=M(o);n.t=l.t,n.A=l.i,n.ti=a.ti,i.Tt=s.jt().Dt(a.ti/s.Ct().Yt()),t.Tt=o}}},i.prototype.cr=function(t,i,n,s){var h="",r=this.Rt.ar();return n&&0!==r.length&&(h+="".concat(r," ")),i&&s&&(h+=this.Rt.Ct().vr()?t._r:t.dr),h.trim()},i.prototype.lr=function(t,i,n){return i?n?this.Rt.Ct().vr()?t.dr:t._r:t.Gt:""},i}(K),fi=function(){function t(t,i){this.wr=t,this.Mr=i}return t.prototype.br=function(t){return null!==t&&(this.wr===t.wr&&this.Mr===t.Mr)},t.prototype.mr=function(){return new t(this.wr,this.Mr)},t.prototype.pr=function(){return this.wr},t.prototype.gr=function(){return this.Mr},t.prototype.yr=function(){return this.Mr-this.wr},t.prototype.wi=function(){return this.Mr===this.wr||Number.isNaN(this.Mr)||Number.isNaN(this.wr)},t.prototype.Nn=function(i){return null===i?this:new t(Math.min(this.pr(),i.pr()),Math.max(this.gr(),i.gr()))},t.prototype.kr=function(t){if(N(t)&&0!==this.Mr-this.wr){var i=.5*(this.Mr+this.wr),n=this.Mr-i,s=this.wr-i;n*=t,s*=t,this.Mr=i+n,this.wr=i+s}},t.prototype.Nr=function(t){N(t)&&(this.Mr+=t,this.wr+=t)},t.prototype.Cr=function(){return{minValue:this.wr,maxValue:this.Mr}},t.Sr=function(i){return null===i?null:new t(i.minValue,i.maxValue)},t}(),ci=function(){function t(t,i){this.Tr=t,this.Dr=i||null}return t.prototype.Ar=function(){return this.Tr},t.prototype.Br=function(){return this.Dr},t.prototype.Cr=function(){return null===this.Tr?null:{priceRange:this.Tr.Cr(),margins:this.Dr||void 0}},t.Sr=function(i){return null===i?null:new t(fi.Sr(i.priceRange),i.margins)},t}(),vi=function(t){function i(i,n){var s=t.call(this,i)||this;return s.Lr=n,s}return m(i,t),i.prototype.bh=function(t,i){var n=this.wh;n.yt=!1;var s=this.Lr.W();if(this.Kn.yt()&&s.lineVisible){var h=this.Lr.Er();null!==h&&(n.yt=!0,n.it=h,n.A=s.color,n.Ht=i,n.Yt=t,n.Vt=s.lineWidth,n.Pt=s.lineStyle)}},i}(Ut),_i=function(t){function i(i,n){var s=t.call(this)||this;return s.Vh=i,s.Lr=n,s}return m(i,t),i.prototype.vi=function(t,i,n){t.yt=!1,i.yt=!1;var s=this.Lr.W(),h=s.axisLabelVisible,r=""!==s.title,e=this.Vh;if(h&&e.yt()){var u=this.Lr.Er();if(null!==u){r&&(i.Gt=s.title,i.yt=!0),i.Tt=e.jt().Dt(u/e.Ct().Yt()),t.Gt=e.Ct().Fr(s.price),t.yt=!0;var a=M(s.color);n.t=a.t,n.A=a.i,n.ti=u}}},i}(K),di=function(){function t(t,i){this.Vh=t,this.zi=i,this.Or=new vi(t,this),this.uh=new _i(t,this),this.Vr=new jt(this.uh,t,t.jt())}return t.prototype.Pr=function(t){k(this.zi,t),this.vt(),this.Vh.jt().Wr()},t.prototype.W=function(){return this.zi},t.prototype.tn=function(){return[this.Or,this.Vr]},t.prototype.zr=function(){return this.uh},t.prototype.vt=function(){this.Or.vt(),this.uh.vt()},t.prototype.Er=function(){var t=this.Vh,i=t.Ct();if(t.jt().bt().wi()||i.wi())return null;var n=t.kt();return null===n?null:i.xt(this.zi.price,n.St)},t}(),wi=function(t){function i(i){var n=t.call(this)||this;return n.pi=i,n}return m(i,t),i.prototype.jt=function(){return this.pi},i}(Q),Mi={Ds:"",Hs:"",Us:""},bi=function(){function t(t){this.Vh=t}return t.prototype.As=function(t,i){var n=this.Vh.Rr(),s=this.Vh.W();switch(n){case"Line":return this.Ir(s,t,i);case"Area":return this.jr(s);case"Baseline":return this.qr(s,t,i);case"Bar":return this.Ur(s,t,i);case"Candlestick":return this.Hr(s,t,i);case"Histogram":return this.Yr(s,t,i)}throw new Error("Unknown chart style")},t.prototype.Ur=function(t,i,n){var s=p({},Mi),h=t.upColor,r=t.downColor,e=h,o=r,l=u(this.$r(i,n)),f=a(l.St[0])<=a(l.St[3]);return void 0!==l.A?(s.Ds=l.A,s.Hs=l.A):(s.Ds=f?h:r,s.Hs=f?e:o),s},t.prototype.Hr=function(t,i,n){var s,h,r,e=p({},Mi),o=t.upColor,l=t.downColor,f=t.borderUpColor,c=t.borderDownColor,v=t.wickUpColor,_=t.wickDownColor,d=u(this.$r(i,n)),w=a(d.St[0])<=a(d.St[3]);return e.Ds=null!==(s=d.A)&&void 0!==s?s:w?o:l,e.Hs=null!==(h=d.Tt)&&void 0!==h?h:w?f:c,e.Us=null!==(r=d.qs)&&void 0!==r?r:w?v:_,e},t.prototype.jr=function(t){return p(p({},Mi),{Ds:t.lineColor})},t.prototype.qr=function(t,i,n){var s=u(this.$r(i,n)).St[3]>=t.baseValue.price;return p(p({},Mi),{Ds:s?t.topLineColor:t.bottomLineColor})},t.prototype.Ir=function(t,i,n){var s,h=u(this.$r(i,n));return p(p({},Mi),{Ds:null!==(s=h.A)&&void 0!==s?s:t.color})},t.prototype.Yr=function(t,i,n){var s=p({},Mi),h=u(this.$r(i,n));return s.Ds=void 0!==h.A?h.A:t.color,s},t.prototype.$r=function(t,i){return void 0!==i?i.St:this.Vh.an().Kr(t)},t}(),mi=function(){function t(){this.Xr=[],this.Zr=new Map,this.Jr=new Map}return t.prototype.Gr=function(){return this.hs()>0?this.Xr[this.Xr.length-1]:null},t.prototype.Qr=function(){return this.hs()>0?this.te(0):null},t.prototype.un=function(){return this.hs()>0?this.te(this.Xr.length-1):null},t.prototype.hs=function(){return this.Xr.length},t.prototype.wi=function(){return 0===this.hs()},t.prototype.Uh=function(t){return null!==this.ie(t,0)},t.prototype.Kr=function(t){return this.ne(t)},t.prototype.ne=function(t,i){void 0===i&&(i=0);var n=this.ie(t,i);return null===n?null:p(p({},this.se(n)),{vs:this.te(n)})},t.prototype.fs=function(){return this.Xr},t.prototype.he=function(t,i,n){if(this.wi())return null;for(var s=null,h=0,r=n;h<r.length;h++){var e=r[h];s=pi(s,this.re(t,i,e))}return s},t.prototype.Z=function(t){this.Jr.clear(),this.Zr.clear(),this.Xr=t},t.prototype.te=function(t){return this.Xr[t].vs},t.prototype.se=function(t){return this.Xr[t]},t.prototype.ie=function(t,i){var n=this.ee(t);if(null===n&&0!==i)switch(i){case-1:return this.ue(t);case 1:return this.ae(t);default:throw new TypeError("Unknown search mode")}return n},t.prototype.ue=function(t){var i=this.oe(t);return i>0&&(i-=1),i!==this.Xr.length&&this.te(i)<t?i:null},t.prototype.ae=function(t){var i=this.le(t);return i!==this.Xr.length&&t<this.te(i)?i:null},t.prototype.ee=function(t){var i=this.oe(t);return i===this.Xr.length||t<this.Xr[i].vs?null:i},t.prototype.oe=function(t){return vt(this.Xr,t,(function(t,i){return t.vs<i}))},t.prototype.le=function(t){return _t(this.Xr,t,(function(t,i){return i.vs>t}))},t.prototype.fe=function(t,i,n){for(var s=null,h=t;h<i;h++){var r=this.Xr[h].St[n];Number.isNaN(r)||(null===s?s={ce:r,ve:r}:(r<s.ce&&(s.ce=r),r>s.ve&&(s.ve=r)))}return s},t.prototype.re=function(t,i,n){if(this.wi())return null;var s=null,h=u(this.Qr()),r=u(this.un()),e=Math.max(t,h),a=Math.min(i,r),o=30*Math.ceil(e/30),l=Math.max(o,30*Math.floor(a/30)),f=this.oe(e),c=this.le(Math.min(a,o,i));s=pi(s,this.fe(f,c,n));var v=this.Zr.get(n);void 0===v&&(v=new Map,this.Zr.set(n,v));for(var _=Math.max(o+1,e);_<l;_+=30){var d=Math.floor(_/30),w=v.get(d);if(void 0===w){var M=this.oe(30*d),b=this.le(30*(d+1)-1);w=this.fe(M,b,n),v.set(d,w)}s=pi(s,w)}f=this.oe(l),c=this.le(a);return s=pi(s,this.fe(f,c,n))},t}();function pi(t,i){return null===t?i:null===i?t:{ce:Math.min(t.ce,i.ce),ve:Math.max(t.ve,i.ve)}}var gi=function(t){function i(i,n,s){var h=t.call(this,i)||this;h.Bt=new mi,h.Or=new oi(h),h._e=[],h.de=new Ht(h),h.we=null,h.Me=null,h.be=[],h.me=[],h.pe=null,h.zi=n,h.ge=s;var r=new li(h);return h.Ei=[r],h.Vr=new jt(r,h,i),"Area"!==s&&"Line"!==s&&"Baseline"!==s||(h.we=new Zt(h)),h.ye(),h.ke(),h}return m(i,t),i.prototype.g=function(){null!==this.pe&&clearTimeout(this.pe)},i.prototype.ur=function(t){return this.zi.priceLineColor||t},i.prototype.jh=function(t){var i={qh:!0},n=this.Ct();if(this.jt().bt().wi()||n.wi()||this.Bt.wi())return i;var s,h,r=this.jt().bt().ss(),e=this.kt();if(null===r||null===e)return i;if(t){var u=this.Bt.Gr();if(null===u)return i;s=u,h=u.vs}else{var a=this.Bt.ne(r.jn(),-1);if(null===a)return i;if(null===(s=this.Bt.Kr(a.vs)))return i;h=a.vs}var o=s.St[3],l=this.ls().As(h,{St:s}),f=n.xt(o,e.St);return{qh:!1,et:o,Gt:n.Mi(o,e.St),_r:n.Fr(o),dr:n.Ne(o,e.St),A:l.Ds,ti:f,vs:h}},i.prototype.ls=function(){return null!==this.Me||(this.Me=new bi(this)),this.Me},i.prototype.W=function(){return this.zi},i.prototype.Pr=function(t){var i=t.priceScaleId;void 0!==i&&i!==this.zi.priceScaleId&&this.jt().xe(this,i),k(this.zi,t),null!==this.ki&&void 0!==t.scaleMargins&&this.ki.Pr({scaleMargins:t.scaleMargins}),void 0!==t.priceFormat&&(this.ye(),this.jt().Ce()),this.jt().Se(this),this.jt().Te(),this.Hi.vt("options")},i.prototype.Z=function(t,i){this.Bt.Z(t),this.De(),this.Hi.vt("data"),this.Ri.vt("data"),null!==this.we&&(i&&i.Ae?this.we.Wh():0===t.length&&this.we.Ph());var n=this.jt().oh(this);this.jt().Be(n),this.jt().Se(this),this.jt().Te(),this.jt().Wr()},i.prototype.Le=function(t){this.be=t.map((function(t){return p({},t)})),this.De();var i=this.jt().oh(this);this.Ri.vt("data"),this.jt().Be(i),this.jt().Se(this),this.jt().Te(),this.jt().Wr()},i.prototype.rr=function(){return this.me},i.prototype.Ee=function(t){var i=new di(this,t);return this._e.push(i),this.jt().Se(this),i},i.prototype.Fe=function(t){var i=this._e.indexOf(t);-1!==i&&this._e.splice(i,1),this.jt().Se(this)},i.prototype.Rr=function(){return this.ge},i.prototype.kt=function(){var t=this.Oe();return null===t?null:{St:t.St[3],Ve:t.rt}},i.prototype.Oe=function(){var t=this.jt().bt().ss();if(null===t)return null;var i=t.In();return this.Bt.ne(i,1)},i.prototype.an=function(){return this.Bt},i.prototype.er=function(t){var i=this.Bt.Kr(t);return null===i?null:"Bar"===this.ge||"Candlestick"===this.ge?{open:i.St[0],high:i.St[1],low:i.St[2],close:i.St[3]}:i.St[3]},i.prototype.Pe=function(t){var i=this,n=this.we;return null!==n&&n.yt()?(null===this.pe&&n.Rh()&&(this.pe=setTimeout((function(){i.pe=null,i.jt().We()}),0)),n.zh(),[n]):[]},i.prototype.tn=function(){var t=[];this.ze()||t.push(this.de);for(var i=0,n=this._e;i<n.length;i++){var s=n[i];t.push.apply(t,s.tn())}return t.push(this.Hi,this.Or,this.Vr,this.Ri),t},i.prototype.nn=function(t,i){if(i!==this.ki&&!this.ze())return[];for(var n=g([],this.Ei,!0),s=0,h=this._e;s<h.length;s++){var r=h[s];n.push(r.zr())}return n},i.prototype.Re=function(t,i){var n=this;if(void 0!==this.zi.autoscaleInfoProvider){var s=this.zi.autoscaleInfoProvider((function(){var s=n.Ie(t,i);return null===s?null:s.Cr()}));return ci.Sr(s)}return this.Ie(t,i)},i.prototype.je=function(){return this.zi.priceFormat.minMove},i.prototype.qe=function(){return this.Ue},i.prototype.hn=function(){var t;this.Hi.vt(),this.Ri.vt();for(var i=0,n=this.Ei;i<n.length;i++){n[i].vt()}for(var s=0,h=this._e;s<h.length;s++){h[s].vt()}this.Or.vt(),this.de.vt(),null===(t=this.we)||void 0===t||t.vt()},i.prototype.Ct=function(){return u(t.prototype.Ct.call(this))},i.prototype.gt=function(t){if(!(("Line"===this.ge||"Area"===this.ge||"Baseline"===this.ge)&&this.zi.crosshairMarkerVisible))return null;var i=this.Bt.Kr(t);return null===i?null:{et:i.St[3],st:this.He(),Tt:this.Ye(),Nt:this.$e(t)}},i.prototype.ar=function(){return this.zi.title},i.prototype.yt=function(){return this.zi.visible},i.prototype.ze=function(){return!it(this.Ct().Ke())},i.prototype.Ie=function(t,i){if(!x(t)||!x(i)||this.Bt.wi())return null;var n="Line"===this.ge||"Area"===this.ge||"Baseline"===this.ge||"Histogram"===this.ge?[3]:[2,1],s=this.Bt.he(t,i,n),h=null!==s?new fi(s.ce,s.ve):null;if("Histogram"===this.Rr()){var r=this.zi.base,e=new fi(r,r);h=null!==h?h.Nn(e):e}return new ci(h,this.Ri.hr())},i.prototype.He=function(){switch(this.ge){case"Line":case"Area":case"Baseline":return this.zi.crosshairMarkerRadius}return 0},i.prototype.Ye=function(){switch(this.ge){case"Line":case"Area":case"Baseline":var t=this.zi.crosshairMarkerBorderColor;if(0!==t.length)return t}return null},i.prototype.$e=function(t){switch(this.ge){case"Line":case"Area":case"Baseline":var i=this.zi.crosshairMarkerBackgroundColor;if(0!==i.length)return i}return this.ls().As(t).Ds},i.prototype.ye=function(){switch(this.zi.priceFormat.type){case"custom":this.Ue={format:this.zi.priceFormat.formatter};break;case"volume":this.Ue=new ut(this.zi.priceFormat.precision);break;case"percent":this.Ue=new et(this.zi.priceFormat.precision);break;default:var t=Math.pow(10,this.zi.priceFormat.precision);this.Ue=new rt(t,this.zi.priceFormat.minMove*t)}null!==this.ki&&this.ki.Xe()},i.prototype.De=function(){var t=this,i=this.jt().bt();if(i.wi()||0===this.Bt.hs())this.me=[];else{var n=u(this.Bt.Qr());this.me=this.be.map((function(s,h){var r=u(i.Ze(s.time,!0)),e=r<n?1:-1;return{time:u(t.Bt.ne(r,e)).vs,position:s.position,shape:s.shape,color:s.color,id:s.id,Xh:h,text:s.text,size:s.size}}))}},i.prototype.ke=function(){switch(this.Ri=new ai(this,this.jt()),this.ge){case"Bar":this.Hi=new kt(this,this.jt());break;case"Candlestick":this.Hi=new Et(this,this.jt());break;case"Line":this.Hi=new Wt(this,this.jt());break;case"Area":this.Hi=new pt(this,this.jt());break;case"Baseline":this.Hi=new Bt(this,this.jt());break;case"Histogram":this.Hi=new Pt(this,this.jt());break;default:throw Error("Unknown chart style assigned: "+this.ge)}},i}(wi),yi=function(){function t(t){this.zi=t}return t.prototype.Je=function(t,i,n){var s=t;if(0===this.zi.mode)return s;var h=n.ji(),r=h.kt();if(null===r)return s;var e=h.xt(t,r),u=n.Ge().filter((function(t){return t instanceof gi})).reduce((function(t,s){if(n.lh(s)||!s.yt())return t;var h=s.Ct(),r=s.an();if(h.wi()||!r.Uh(i))return t;var e=r.Kr(i);if(null===e)return t;var u=a(s.kt());return t.concat([h.xt(e.St[3],u.St)])}),[]);if(0===u.length)return s;u.sort((function(t,i){return Math.abs(t-e)-Math.abs(i-e)}));var o=u[0];return s=h.qi(o,r)},t}(),ki=function(){function t(){this.Bt=null}return t.prototype.Z=function(t){this.Bt=t},t.prototype.H=function(t,i,n,h){var r=this;if(null!==this.Bt){var e=Math.max(1,Math.floor(i));t.lineWidth=e;var a=Math.ceil(this.Bt.Ot*i),o=Math.ceil(this.Bt.Ft*i);!function(t,i){t.save(),t.lineWidth%2&&t.translate(.5,.5),i(),t.restore()}(t,(function(){var n=u(r.Bt);if(n.Qe){t.strokeStyle=n.tu,s(t,n.iu),t.beginPath();for(var h=0,l=n.nu;h<l.length;h++){var f=l[h],c=Math.round(f.su*i);t.moveTo(c,-e),t.lineTo(c,a+e)}t.stroke()}if(n.hu){t.strokeStyle=n.ru,s(t,n.eu),t.beginPath();for(var v=0,_=n.uu;v<_.length;v++){var d=_[v],w=Math.round(d.su*i);t.moveTo(-e,w),t.lineTo(o+e,w)}t.stroke()}}))}},t}(),Ni=function(){function t(t){this.zt=new ki,this.ft=!0,this.Di=t}return t.prototype.vt=function(){this.ft=!0},t.prototype.dt=function(t,i){if(this.ft){var n=this.Di.jt().W().grid,s={Ot:t,Ft:i,hu:n.horzLines.visible,Qe:n.vertLines.visible,ru:n.horzLines.color,tu:n.vertLines.color,eu:n.horzLines.style,iu:n.vertLines.style,uu:this.Di.ji().au(),nu:this.Di.jt().bt().au()||[]};this.zt.Z(s),this.ft=!1}return this.zt},t}(),xi=function(){function t(t){this.Hi=new Ni(t)}return t.prototype.ou=function(){return this.Hi},t}(),Ci={lu:4,fu:1e-4};function Si(t,i){var n=100*(t-i)/i;return i<0?-n:n}function Ti(t,i){var n=Si(t.pr(),i),s=Si(t.gr(),i);return new fi(n,s)}function Di(t,i){var n=100*(t-i)/i+100;return i<0?-n:n}function Ai(t,i){var n=Di(t.pr(),i),s=Di(t.gr(),i);return new fi(n,s)}function Bi(t,i){var n=Math.abs(t);if(n<1e-15)return 0;var s=Ct(n+i.fu)+i.lu;return t<0?-s:s}function Li(t,i){var n=Math.abs(t);if(n<1e-15)return 0;var s=Math.pow(10,n-i.lu)-i.fu;return t<0?-s:s}function Ei(t,i){if(null===t)return null;var n=Bi(t.pr(),i),s=Bi(t.gr(),i);return new fi(n,s)}function Fi(t,i){if(null===t)return null;var n=Li(t.pr(),i),s=Li(t.gr(),i);return new fi(n,s)}function Oi(t){if(null===t)return Ci;var i=Math.abs(t.gr()-t.pr());if(i>=1||i<1e-15)return Ci;var n=Math.ceil(Math.abs(Math.log10(i))),s=Ci.lu+n;return{lu:s,fu:1/Math.pow(10,s)}}var Vi,Pi=function(){function t(t,i){if(this.cu=t,this.vu=i,function(t){if(t<0)return!1;for(var i=t;i>1;i/=10)if(i%10!=0)return!1;return!0}(this.cu))this._u=[2,2.5,2];else{this._u=[];for(var n=this.cu;1!==n;){if(n%2==0)this._u.push(2),n/=2;else{if(n%5!=0)throw new Error("unexpected base");this._u.push(2,2.5),n/=5}if(this._u.length>100)throw new Error("something wrong with base")}}}return t.prototype.du=function(t,i,n){for(var s,h,r,e=0===this.cu?0:1/this.cu,u=Math.pow(10,Math.max(0,Math.ceil(Ct(t-i)))),a=0,o=this.vu[0];;){var l=xt(u,e,1e-14)&&u>e+1e-14,f=xt(u,n*o,1e-14),c=xt(u,1,1e-14);if(!(l&&f&&c))break;u/=o,o=this.vu[++a%this.vu.length]}if(u<=e+1e-14&&(u=e),u=Math.max(1,u),this._u.length>0&&(s=u,h=1,r=1e-14,Math.abs(s-h)<r))for(a=0,o=this._u[0];xt(u,n*o,1e-14)&&u>e+1e-14;)u/=o,o=this._u[++a%this._u.length];return u},t}(),Wi=function(){function t(t,i,n,s){this.wu=[],this._i=t,this.cu=i,this.Mu=n,this.bu=s}return t.prototype.du=function(t,i){if(t<i)throw new Error("high < low");var n=this._i.Yt(),s=(t-i)*this.mu()/n,h=new Pi(this.cu,[2,2.5,2]),r=new Pi(this.cu,[2,2,2.5]),e=new Pi(this.cu,[2.5,2,2]),u=[];return u.push(h.du(t,i,s),r.du(t,i,s),e.du(t,i,s)),function(t){if(t.length<1)throw Error("array is empty");for(var i=t[0],n=1;n<t.length;++n)t[n]<i&&(i=t[n]);return i}(u)},t.prototype.pu=function(){var t=this._i,i=t.kt();if(null!==i){var n=t.Yt(),s=this.Mu(n-1,i),h=this.Mu(0,i),r=this._i.W().entireTextOnly?this.gu()/2:0,e=r,u=n-1-r,a=Math.max(s,h),o=Math.min(s,h);if(a!==o){for(var l=this.du(a,o),f=a%l,c=a>=o?1:-1,v=null,_=0,d=a-(f+=f<0?l:0);d>o;d-=l){var w=this.bu(d,i,!0);null!==v&&Math.abs(w-v)<this.mu()||(w<e||w>u||(_<this.wu.length?(this.wu[_].su=w,this.wu[_].yu=t.ku(d)):this.wu.push({su:w,yu:t.ku(d)}),_++,v=w,t.Nu()&&(l=this.du(d*c,o))))}this.wu.length=_}else this.wu=[]}else this.wu=[]},t.prototype.au=function(){return this.wu},t.prototype.gu=function(){return this._i.S()},t.prototype.mu=function(){return Math.ceil(2.5*this.gu())},t}();function zi(t){return t.slice().sort((function(t,i){return u(t.xi())-u(i.xi())}))}!function(t){t[t.Normal=0]="Normal",t[t.Logarithmic=1]="Logarithmic",t[t.Percentage=2]="Percentage",t[t.IndexedTo100=3]="IndexedTo100"}(Vi||(Vi={}));var Ri=new et,Ii=new rt(100,1),ji=function(){function t(t,i,n,s){this.xu=0,this.Cu=null,this.Tr=null,this.Su=null,this.Tu={Du:!1,Au:null},this.Bu=0,this.Lu=0,this.Eu=new y,this.Fu=new y,this.Ou=[],this.Vu=null,this.Pu=null,this.Wu=null,this.zu=null,this.Ue=Ii,this.Ru=Oi(null),this.Iu=t,this.zi=i,this.ju=n,this.qu=s,this.Uu=new Wi(this,100,this.Hu.bind(this),this.Yu.bind(this))}return t.prototype.Ke=function(){return this.Iu},t.prototype.W=function(){return this.zi},t.prototype.Pr=function(t){if(k(this.zi,t),this.Xe(),void 0!==t.mode&&this.$u({mh:t.mode}),void 0!==t.scaleMargins){var i=e(t.scaleMargins.top),n=e(t.scaleMargins.bottom);if(i<0||i>1)throw new Error("Invalid top margin - expect value between 0 and 1, given=".concat(i));if(n<0||n>1||i+n>1)throw new Error("Invalid bottom margin - expect value between 0 and 1, given=".concat(n));if(i+n>1)throw new Error("Invalid margins - sum of margins must be less than 1, given=".concat(i+n));this.Ku(),this.Pu=null}},t.prototype.Xu=function(){return this.zi.autoScale},t.prototype.Nu=function(){return 1===this.zi.mode},t.prototype.vr=function(){return 2===this.zi.mode},t.prototype.Zu=function(){return 3===this.zi.mode},t.prototype.mh=function(){return{_n:this.zi.autoScale,Ju:this.zi.invertScale,mh:this.zi.mode}},t.prototype.$u=function(t){var i=this.mh(),n=null;void 0!==t._n&&(this.zi.autoScale=t._n),void 0!==t.mh&&(this.zi.mode=t.mh,2!==t.mh&&3!==t.mh||(this.zi.autoScale=!0),this.Tu.Du=!1),1===i.mh&&t.mh!==i.mh&&(!function(t,i){if(null===t)return!1;var n=Li(t.pr(),i),s=Li(t.gr(),i);return isFinite(n)&&isFinite(s)}(this.Tr,this.Ru)?this.zi.autoScale=!0:null!==(n=Fi(this.Tr,this.Ru))&&this.Gu(n)),1===t.mh&&t.mh!==i.mh&&null!==(n=Ei(this.Tr,this.Ru))&&this.Gu(n);var s=i.mh!==this.zi.mode;s&&(2===i.mh||this.vr())&&this.Xe(),s&&(3===i.mh||this.Zu())&&this.Xe(),void 0!==t.Ju&&i.Ju!==t.Ju&&(this.zi.invertScale=t.Ju,this.Qu()),this.Fu.m(i,this.mh())},t.prototype.ta=function(){return this.Fu},t.prototype.S=function(){return this.ju.fontSize},t.prototype.Yt=function(){return this.xu},t.prototype.ia=function(t){this.xu!==t&&(this.xu=t,this.Ku(),this.Pu=null)},t.prototype.na=function(){if(this.Cu)return this.Cu;var t=this.Yt()-this.sa()-this.ha();return this.Cu=t,t},t.prototype.Ar=function(){return this.ra(),this.Tr},t.prototype.Gu=function(t,i){var n=this.Tr;(i||null===n&&null!==t||null!==n&&!n.br(t))&&(this.Pu=null,this.Tr=t)},t.prototype.wi=function(){return this.ra(),0===this.xu||!this.Tr||this.Tr.wi()},t.prototype.ea=function(t){return this.Ju()?t:this.Yt()-1-t},t.prototype.xt=function(t,i){return this.vr()?t=Si(t,i):this.Zu()&&(t=Di(t,i)),this.Yu(t,i)},t.prototype.us=function(t,i,n){this.ra();for(var s=this.ha(),h=u(this.Ar()),r=h.pr(),e=h.gr(),a=this.na()-1,o=this.Ju(),l=a/(e-r),f=void 0===n?0:n.from,c=void 0===n?t.length:n.to,v=this.ua(),_=f;_<c;_++){var d=t[_],w=d.et;if(!isNaN(w)){var M=w;null!==v&&(M=v(d.et,i));var b=s+l*(M-r),m=o?b:this.xu-1-b;d.it=m}}},t.prototype.Ss=function(t,i,n){this.ra();for(var s=this.ha(),h=u(this.Ar()),r=h.pr(),e=h.gr(),a=this.na()-1,o=this.Ju(),l=a/(e-r),f=void 0===n?0:n.from,c=void 0===n?t.length:n.to,v=this.ua(),_=f;_<c;_++){var d=t[_],w=d.open,M=d.high,b=d.low,m=d.close;null!==v&&(w=v(d.open,i),M=v(d.high,i),b=v(d.low,i),m=v(d.close,i));var p=s+l*(w-r),g=o?p:this.xu-1-p;d.xs=g,p=s+l*(M-r),g=o?p:this.xu-1-p,d.ys=g,p=s+l*(b-r),g=o?p:this.xu-1-p,d.ks=g,p=s+l*(m-r),g=o?p:this.xu-1-p,d.Cs=g}},t.prototype.qi=function(t,i){var n=this.Hu(t,i);return this.aa(n,i)},t.prototype.aa=function(t,i){var n=t;return this.vr()?n=function(t,i){return i<0&&(t=-t),t/100*i+i}(n,i):this.Zu()&&(n=function(t,i){return t-=100,i<0&&(t=-t),t/100*i+i}(n,i)),n},t.prototype.Ge=function(){return this.Ou},t.prototype.oa=function(){if(this.Vu)return this.Vu;for(var t=[],i=0;i<this.Ou.length;i++){var n=this.Ou[i];null===n.xi()&&n.Ci(i+1),t.push(n)}return t=zi(t),this.Vu=t,this.Vu},t.prototype.la=function(t){-1===this.Ou.indexOf(t)&&(this.Ou.push(t),this.Xe(),this.fa())},t.prototype.ca=function(t){var i=this.Ou.indexOf(t);if(-1===i)throw new Error("source is not attached to scale");this.Ou.splice(i,1),0===this.Ou.length&&(this.$u({_n:!0}),this.Gu(null)),this.Xe(),this.fa()},t.prototype.kt=function(){for(var t=null,i=0,n=this.Ou;i<n.length;i++){var s=n[i].kt();null!==s&&((null===t||s.Ve<t.Ve)&&(t=s))}return null===t?null:t.St},t.prototype.Ju=function(){return this.zi.invertScale},t.prototype.au=function(){var t=null===this.kt();if(null!==this.Pu&&(t||this.Pu.va===t))return this.Pu.au;this.Uu.pu();var i=this.Uu.au();return this.Pu={au:i,va:t},this.Eu.m(),i},t.prototype._a=function(){return this.Eu},t.prototype.da=function(t){this.vr()||this.Zu()||null===this.Wu&&null===this.Su&&(this.wi()||(this.Wu=this.xu-t,this.Su=u(this.Ar()).mr()))},t.prototype.wa=function(t){if(!this.vr()&&!this.Zu()&&null!==this.Wu){this.$u({_n:!1}),(t=this.xu-t)<0&&(t=0);var i=(this.Wu+.2*(this.xu-1))/(t+.2*(this.xu-1)),n=u(this.Su).mr();i=Math.max(i,.1),n.kr(i),this.Gu(n)}},t.prototype.Ma=function(){this.vr()||this.Zu()||(this.Wu=null,this.Su=null)},t.prototype.ba=function(t){this.Xu()||null===this.zu&&null===this.Su&&(this.wi()||(this.zu=t,this.Su=u(this.Ar()).mr()))},t.prototype.ma=function(t){if(!this.Xu()&&null!==this.zu){var i=u(this.Ar()).yr()/(this.na()-1),n=t-this.zu;this.Ju()&&(n*=-1);var s=n*i,h=u(this.Su).mr();h.Nr(s),this.Gu(h,!0),this.Pu=null}},t.prototype.pa=function(){this.Xu()||null!==this.zu&&(this.zu=null,this.Su=null)},t.prototype.qe=function(){return this.Ue||this.Xe(),this.Ue},t.prototype.Mi=function(t,i){switch(this.zi.mode){case 2:return this.qe().format(Si(t,i));case 3:return this.qe().format(Di(t,i));default:return this.ga(t)}},t.prototype.ku=function(t){switch(this.zi.mode){case 2:case 3:return this.qe().format(t);default:return this.ga(t)}},t.prototype.Fr=function(t){return this.ga(t,u(this.ya()).qe())},t.prototype.Ne=function(t,i){return t=Si(t,i),Ri.format(t)},t.prototype.ka=function(){return this.Ou},t.prototype.Na=function(t){this.Tu={Au:t,Du:!1}},t.prototype.hn=function(){this.Ou.forEach((function(t){return t.hn()}))},t.prototype.Xe=function(){this.Pu=null;var t=this.ya(),i=100;null!==t&&(i=Math.round(1/t.je())),this.Ue=Ii,this.vr()?(this.Ue=Ri,i=100):this.Zu()?(this.Ue=new rt(100,1),i=100):null!==t&&(this.Ue=t.qe()),this.Uu=new Wi(this,i,this.Hu.bind(this),this.Yu.bind(this)),this.Uu.pu()},t.prototype.fa=function(){this.Vu=null},t.prototype.ya=function(){return this.Ou[0]||null},t.prototype.sa=function(){return this.Ju()?this.zi.scaleMargins.bottom*this.Yt()+this.Lu:this.zi.scaleMargins.top*this.Yt()+this.Bu},t.prototype.ha=function(){return this.Ju()?this.zi.scaleMargins.top*this.Yt()+this.Bu:this.zi.scaleMargins.bottom*this.Yt()+this.Lu},t.prototype.ra=function(){this.Tu.Du||(this.Tu.Du=!0,this.xa())},t.prototype.Ku=function(){this.Cu=null},t.prototype.Yu=function(t,i){if(this.ra(),this.wi())return 0;t=this.Nu()&&t?Bi(t,this.Ru):t;var n=u(this.Ar()),s=this.ha()+(this.na()-1)*(t-n.pr())/n.yr();return this.ea(s)},t.prototype.Hu=function(t,i){if(this.ra(),this.wi())return 0;var n=this.ea(t),s=u(this.Ar()),h=s.pr()+s.yr()*((n-this.ha())/(this.na()-1));return this.Nu()?Li(h,this.Ru):h},t.prototype.Qu=function(){this.Pu=null,this.Uu.pu()},t.prototype.xa=function(){var t=this.Tu.Au;if(null!==t){for(var i,n,s=null,h=0,r=0,e=0,a=this.ka();e<a.length;e++){var o=a[e];if(o.yt()){var l=o.kt();if(null!==l){var f=o.Re(t.In(),t.jn()),c=f&&f.Ar();if(null!==c){switch(this.zi.mode){case 1:c=Ei(c,this.Ru);break;case 2:c=Ti(c,l.St);break;case 3:c=Ai(c,l.St)}if(s=null===s?c:s.Nn(u(c)),null!==f){var v=f.Br();null!==v&&(h=Math.max(h,v.above),r=Math.max(h,v.below))}}}}}if(h===this.Bu&&r===this.Lu||(this.Bu=h,this.Lu=r,this.Pu=null,this.Ku()),null!==s){if(s.pr()===s.gr()){var _=this.ya(),d=5*(null===_||this.vr()||this.Zu()?1:_.je());this.Nu()&&(s=Fi(s,this.Ru)),s=new fi(s.pr()-d,s.gr()+d),this.Nu()&&(s=Ei(s,this.Ru))}if(this.Nu()){var w=Fi(s,this.Ru),M=Oi(w);if(i=M,n=this.Ru,i.lu!==n.lu||i.fu!==n.fu){var b=null!==this.Su?Fi(this.Su,this.Ru):null;this.Ru=M,s=Ei(w,M),null!==b&&(this.Su=Ei(b,M))}}this.Gu(s)}else null===this.Tr&&(this.Gu(new fi(-.5,.5)),this.Ru=Oi(null));this.Tu.Du=!0}},t.prototype.ua=function(){var t=this;return this.vr()?Si:this.Zu()?Di:this.Nu()?function(i){return Bi(i,t.Ru)}:null},t.prototype.ga=function(t,i){return void 0===this.qu.priceFormatter?(void 0===i&&(i=this.qe()),i.format(t)):this.qu.priceFormatter(t)},t}(),qi=function(){function t(t,i){this.Ou=[],this.Ca=new Map,this.xu=0,this.hh=0,this.Sa=1e3,this.Vu=null,this.Ta=new y,this.Da=t,this.pi=i,this.Aa=new xi(this);var n=i.W();this.Ba=this.La("left",n.leftPriceScale),this.Ea=this.La("right",n.rightPriceScale),this.Ba.ta().u(this.Fa.bind(this,this.Ba),this),this.Ea.ta().u(this.Fa.bind(this,this.Ba),this),this.Oa(n)}return t.prototype.Oa=function(t){if(t.leftPriceScale&&this.Ba.Pr(t.leftPriceScale),t.rightPriceScale&&this.Ea.Pr(t.rightPriceScale),t.localization&&(this.Ba.Xe(),this.Ea.Xe()),t.overlayPriceScales)for(var i=0,n=Array.from(this.Ca.values());i<n.length;i++){var s=u(n[i][0].Ct());s.Pr(t.overlayPriceScales),t.localization&&s.Xe()}},t.prototype.Va=function(t){switch(t){case"left":return this.Ba;case"right":return this.Ea}return this.Ca.has(t)?e(this.Ca.get(t))[0].Ct():null},t.prototype.g=function(){this.jt().Pa().M(this),this.Ba.ta().M(this),this.Ea.ta().M(this),this.Ou.forEach((function(t){t.g&&t.g()})),this.Ta.m()},t.prototype.Wa=function(){return this.Sa},t.prototype.za=function(t){this.Sa=t},t.prototype.jt=function(){return this.pi},t.prototype.Ht=function(){return this.hh},t.prototype.Yt=function(){return this.xu},t.prototype.Ra=function(t){this.hh=t,this.Ia()},t.prototype.ia=function(t){var i=this;this.xu=t,this.Ba.ia(t),this.Ea.ia(t),this.Ou.forEach((function(n){if(i.lh(n)){var s=n.Ct();null!==s&&s.ia(t)}})),this.Ia()},t.prototype.Ge=function(){return this.Ou},t.prototype.lh=function(t){var i=t.Ct();return null===i||this.Ba!==i&&this.Ea!==i},t.prototype.la=function(t,i,n){var s=void 0!==n?n:this.qa().ja+1;this.Ua(t,i,s)},t.prototype.ca=function(t){var i=this.Ou.indexOf(t);r(-1!==i,"removeDataSource: invalid data source"),this.Ou.splice(i,1);var n=u(t.Ct()).Ke();if(this.Ca.has(n)){var s=e(this.Ca.get(n)),h=s.indexOf(t);-1!==h&&(s.splice(h,1),0===s.length&&this.Ca.delete(n))}var a=t.Ct();a&&a.Ge().indexOf(t)>=0&&a.ca(t),null!==a&&(a.fa(),this.Ha(a)),this.Vu=null},t.prototype._h=function(t){return t===this.Ba?"left":t===this.Ea?"right":"overlay"},t.prototype.Ya=function(){return this.Ba},t.prototype.$a=function(){return this.Ea},t.prototype.Ka=function(t,i){t.da(i)},t.prototype.Xa=function(t,i){t.wa(i),this.Ia()},t.prototype.Za=function(t){t.Ma()},t.prototype.Ja=function(t,i){t.ba(i)},t.prototype.Ga=function(t,i){t.ma(i),this.Ia()},t.prototype.Qa=function(t){t.pa()},t.prototype.Ia=function(){this.Ou.forEach((function(t){t.hn()}))},t.prototype.ji=function(){var t=null;return this.pi.W().rightPriceScale.visible&&0!==this.Ea.Ge().length?t=this.Ea:this.pi.W().leftPriceScale.visible&&0!==this.Ba.Ge().length?t=this.Ba:0!==this.Ou.length&&(t=this.Ou[0].Ct()),null===t&&(t=this.Ea),t},t.prototype.fh=function(){var t=null;return this.pi.W().rightPriceScale.visible?t=this.Ea:this.pi.W().leftPriceScale.visible&&(t=this.Ba),t},t.prototype.Ha=function(t){null!==t&&t.Xu()&&this.io(t)},t.prototype.no=function(t){var i=this.Da.ss();t.$u({_n:!0}),null!==i&&t.Na(i),this.Ia()},t.prototype.so=function(){this.io(this.Ba),this.io(this.Ea)},t.prototype.ho=function(){var t=this;this.Ha(this.Ba),this.Ha(this.Ea),this.Ou.forEach((function(i){t.lh(i)&&t.Ha(i.Ct())})),this.Ia(),this.pi.Wr()},t.prototype.oa=function(){return null===this.Vu&&(this.Vu=zi(this.Ou)),this.Vu},t.prototype.ro=function(){return this.Ta},t.prototype.eo=function(){return this.Aa},t.prototype.io=function(t){var i=t.ka();if(i&&i.length>0&&!this.Da.wi()){var n=this.Da.ss();null!==n&&t.Na(n)}t.hn()},t.prototype.qa=function(){var t=this.oa();if(0===t.length)return{uo:0,ja:0};for(var i=0,n=0,s=0;s<t.length;s++){var h=t[s].xi();null!==h&&(h<i&&(i=h),h>n&&(n=h))}return{uo:i,ja:n}},t.prototype.Ua=function(t,i,n){var s=this.Va(i);if(null===s&&(s=this.La(i,this.pi.W().overlayPriceScales)),this.Ou.push(t),!it(i)){var h=this.Ca.get(i)||[];h.push(t),this.Ca.set(i,h)}s.la(t),t.Si(s),t.Ci(n),this.Ha(s),this.Vu=null},t.prototype.Fa=function(t,i,n){i.mh!==n.mh&&this.io(t)},t.prototype.La=function(t,i){var n=p({visible:!0,autoScale:!0},T(i)),s=new ji(t,n,this.pi.W().layout,this.pi.W().localization);return s.ia(this.Yt()),s},t}(),Ui=function(t){return t.getUTCFullYear()};function Hi(t,i,n){return i.replace(/yyyy/g,function(t){return ht(Ui(t),4)}(t)).replace(/yy/g,function(t){return ht(Ui(t)%100,2)}(t)).replace(/MMMM/g,function(t,i){return new Date(t.getUTCFullYear(),t.getUTCMonth(),1).toLocaleString(i,{month:"long"})}(t,n)).replace(/MMM/g,function(t,i){return new Date(t.getUTCFullYear(),t.getUTCMonth(),1).toLocaleString(i,{month:"short"})}(t,n)).replace(/MM/g,function(t){return ht(function(t){return t.getUTCMonth()+1}(t),2)}(t)).replace(/dd/g,function(t){return ht(function(t){return t.getUTCDate()}(t),2)}(t))}var Yi=function(){function t(t,i){void 0===t&&(t="yyyy-MM-dd"),void 0===i&&(i="default"),this.ao=t,this.oo=i}return t.prototype.lo=function(t){return Hi(t,this.ao,this.oo)},t}(),$i=function(){function t(t){this.fo=t||"%h:%m:%s"}return t.prototype.lo=function(t){return this.fo.replace("%h",ht(t.getUTCHours(),2)).replace("%m",ht(t.getUTCMinutes(),2)).replace("%s",ht(t.getUTCSeconds(),2))},t}(),Ki={co:"yyyy-MM-dd",vo:"%h:%m:%s",_o:" ",do:"default"},Xi=function(){function t(t){void 0===t&&(t={});var i=p(p({},Ki),t);this.wo=new Yi(i.co,i.do),this.Mo=new $i(i.vo),this.bo=i._o}return t.prototype.lo=function(t){return"".concat(this.wo.lo(t)).concat(this.bo).concat(this.Mo.lo(t))},t}();var Zi=function(){function t(t,i){void 0===i&&(i=50),this.mo=0,this.po=1,this.yo=1,this.Gs=new Map,this.ko=new Map,this.No=t,this.xo=i}return t.prototype.lo=function(t){var i=void 0===t.Co?new Date(1e3*t.So).getTime():new Date(Date.UTC(t.Co.year,t.Co.month-1,t.Co.day)).getTime(),n=this.Gs.get(i);if(void 0!==n)return n.To;if(this.mo===this.xo){var s=this.ko.get(this.yo);this.ko.delete(this.yo),this.Gs.delete(e(s)),this.yo++,this.mo--}var h=this.No(t);return this.Gs.set(i,{To:h,Do:this.po}),this.ko.set(this.po,i),this.mo++,this.po++,h},t}(),Ji=function(){function t(t,i){r(t<=i,"right should be >= left"),this.Ao=t,this.Bo=i}return t.prototype.In=function(){return this.Ao},t.prototype.jn=function(){return this.Bo},t.prototype.Lo=function(){return this.Bo-this.Ao+1},t.prototype.Uh=function(t){return this.Ao<=t&&t<=this.Bo},t.prototype.br=function(t){return this.Ao===t.In()&&this.Bo===t.jn()},t}();function Gi(t,i){return null===t||null===i?t===i:t.br(i)}var Qi,tn=function(){function t(){this.Eo=new Map,this.Gs=null}return t.prototype.Fo=function(t,i){this.Oo(i),this.Gs=null;for(var n=i;n<t.length;++n){var s=t[n],h=this.Eo.get(s.Vo);void 0===h&&(h=[],this.Eo.set(s.Vo,h)),h.push({vs:n,rt:s.rt,Po:s.Vo})}},t.prototype.Wo=function(t,i){var n=Math.ceil(i/t);return null!==this.Gs&&this.Gs.zo===n||(this.Gs={au:this.Ro(n),zo:n}),this.Gs.au},t.prototype.Oo=function(t){if(0!==t){var i=[];this.Eo.forEach((function(n,s){t<=n[0].vs?i.push(s):n.splice(vt(n,t,(function(i){return i.vs<t})),1/0)}));for(var n=0,s=i;n<s.length;n++){var h=s[n];this.Eo.delete(h)}}else this.Eo.clear()},t.prototype.Ro=function(t){for(var i=[],n=0,s=Array.from(this.Eo.keys()).sort((function(t,i){return i-t}));n<s.length;n++){var h=s[n];if(this.Eo.get(h)){var r=i;i=[];for(var u=r.length,a=0,o=e(this.Eo.get(h)),l=o.length,f=1/0,c=-1/0,v=0;v<l;v++){for(var _=o[v],d=_.vs;a<u;){var w=r[a],M=w.vs;if(!(M<d)){f=M;break}a++,i.push(w),c=M,f=1/0}f-d>=t&&d-c>=t&&(i.push(_),c=d)}for(;a<u;a++)i.push(r[a])}}return i},t}(),nn=function(){function t(t){this.Io=t}return t.prototype.jo=function(){return null===this.Io?null:new Ji(Math.floor(this.Io.In()),Math.ceil(this.Io.jn()))},t.prototype.qo=function(){return this.Io},t.Uo=function(){return new t(null)},t}();!function(t){t[t.Year=0]="Year",t[t.Month=1]="Month",t[t.DayOfMonth=2]="DayOfMonth",t[t.Time=3]="Time",t[t.TimeWithSeconds=4]="TimeWithSeconds"}(Qi||(Qi={}));var sn=function(){function t(t,i,n){this.hh=0,this.Ho=null,this.Yo=[],this.zu=null,this.Wu=null,this.$o=new tn,this.Ko=new Map,this.Xo=nn.Uo(),this.Zo=!0,this.Jo=new y,this.Go=new y,this.Qo=new y,this.tl=null,this.il=null,this.nl=[],this.zi=i,this.qu=n,this.sl=i.rightOffset,this.hl=i.barSpacing,this.pi=t,this.rl()}return t.prototype.W=function(){return this.zi},t.prototype.el=function(t){k(this.qu,t),this.ul(),this.rl()},t.prototype.Pr=function(t,i){var n;k(this.zi,t),this.zi.fixLeftEdge&&this.al(),this.zi.fixRightEdge&&this.ol(),void 0!==t.barSpacing&&this.pi.gn(t.barSpacing),void 0!==t.rightOffset&&this.pi.yn(t.rightOffset),void 0!==t.minBarSpacing&&this.pi.gn(null!==(n=t.barSpacing)&&void 0!==n?n:this.hl),this.ul(),this.rl(),this.Qo.m()},t.prototype.gi=function(t){var i;return(null===(i=this.Yo[t])||void 0===i?void 0:i.rt)||null},t.prototype.Ze=function(t,i){if(this.Yo.length<1)return null;if(t.So>this.Yo[this.Yo.length-1].rt.So)return i?this.Yo.length-1:null;var n=vt(this.Yo,t.So,(function(t,i){return t.rt.So<i}));return t.So<this.Yo[n].rt.So?i?n:null:n},t.prototype.wi=function(){return 0===this.hh||0===this.Yo.length||null===this.Ho},t.prototype.ss=function(){return this.ll(),this.Xo.jo()},t.prototype.fl=function(){return this.ll(),this.Xo.qo()},t.prototype.cl=function(){var t=this.ss();if(null===t)return null;var i={from:t.In(),to:t.jn()};return this.vl(i)},t.prototype.vl=function(t){var i=Math.round(t.from),n=Math.round(t.to),s=u(this._l()),h=u(this.dl());return{from:u(this.gi(Math.max(s,i))),to:u(this.gi(Math.min(h,n)))}},t.prototype.wl=function(t){return{from:u(this.Ze(t.from,!0)),to:u(this.Ze(t.to,!0))}},t.prototype.Ht=function(){return this.hh},t.prototype.Ra=function(t){if(isFinite(t)&&!(t<=0)&&this.hh!==t){if(this.zi.lockVisibleTimeRangeOnResize&&this.hh){var i=this.hl*t/this.hh;this.hl=i}if(this.zi.fixLeftEdge){var n=this.ss();if(null!==n)if(n.In()<=0){var s=this.hh-t;this.sl-=Math.round(s/this.hl)+1}}this.hh=t,this.Zo=!0,this.Ml(),this.bl()}},t.prototype.At=function(t){if(this.wi()||!x(t))return 0;var i=this.ml()+this.sl-t;return this.hh-(i+.5)*this.hl-1},t.prototype.es=function(t,i){for(var n=this.ml(),s=void 0===i?0:i.from,h=void 0===i?t.length:i.to,r=s;r<h;r++){var e=t[r].rt,u=n+this.sl-e,a=this.hh-(u+.5)*this.hl-1;t[r].tt=a}},t.prototype.pl=function(t){return Math.ceil(this.gl(t))},t.prototype.yn=function(t){this.Zo=!0,this.sl=t,this.bl(),this.pi.yl(),this.pi.Wr()},t.prototype.ws=function(){return this.hl},t.prototype.gn=function(t){this.kl(t),this.bl(),this.pi.yl(),this.pi.Wr()},t.prototype.Nl=function(){return this.sl},t.prototype.au=function(){if(this.wi())return null;if(null!==this.il)return this.il;for(var t=this.hl,i=5*(this.pi.W().layout.fontSize+4),n=Math.round(i/t),s=u(this.ss()),h=Math.max(s.In(),s.In()-n),r=Math.max(s.jn(),s.jn()-n),e=this.$o.Wo(t,i),a=this._l()+n,o=this.dl()-n,l=this.xl(),f=this.zi.fixLeftEdge||l,c=this.zi.fixRightEdge||l,v=0,_=0,d=e;_<d.length;_++){var w=d[_];if(h<=w.vs&&w.vs<=r){var M=void 0;v<this.nl.length?((M=this.nl[v]).su=this.At(w.vs),M.yu=this.Cl(w.rt,w.Po),M.Po=w.Po):(M={Sl:!1,su:this.At(w.vs),yu:this.Cl(w.rt,w.Po),Po:w.Po},this.nl.push(M)),this.hl>i/2&&!l?M.Sl=!1:M.Sl=f&&w.vs<=a||c&&w.vs>=o,v++}}return this.nl.length=v,this.il=this.nl,this.nl},t.prototype.Tl=function(){this.Zo=!0,this.gn(this.zi.barSpacing),this.yn(this.zi.rightOffset)},t.prototype.Dl=function(t){this.Zo=!0,this.Ho=t,this.bl(),this.al()},t.prototype.Al=function(t,i){var n=this.gl(t),s=this.ws(),h=s+i*(s/10);this.gn(h),this.zi.rightBarStaysOnScroll||this.yn(this.Nl()+(n-this.gl(t)))},t.prototype.da=function(t){this.zu&&this.pa(),null===this.Wu&&null===this.tl&&(this.wi()||(this.Wu=t,this.Bl()))},t.prototype.wa=function(t){if(null!==this.tl){var i=Nt(this.hh-t,0,this.hh),n=Nt(this.hh-u(this.Wu),0,this.hh);0!==i&&0!==n&&this.gn(this.tl.ws*i/n)}},t.prototype.Ma=function(){null!==this.Wu&&(this.Wu=null,this.Ll())},t.prototype.ba=function(t){null===this.zu&&null===this.tl&&(this.wi()||(this.zu=t,this.Bl()))},t.prototype.ma=function(t){if(null!==this.zu){var i=(this.zu-t)/this.ws();this.sl=u(this.tl).Nl+i,this.Zo=!0,this.bl()}},t.prototype.pa=function(){null!==this.zu&&(this.zu=null,this.Ll())},t.prototype.El=function(){this.Fl(this.zi.rightOffset)},t.prototype.Fl=function(t,i){var n=this;if(void 0===i&&(i=400),!isFinite(t))throw new RangeError("offset is required and must be finite number");if(!isFinite(i)||i<=0)throw new RangeError("animationDuration (optional) must be finite positive number");var s=this.sl,h=performance.now(),r=function(){var e=(performance.now()-h)/i,u=e>=1,a=u?t:s+(t-s)*e;n.yn(a),u||setTimeout(r,20)};r()},t.prototype.vt=function(t,i){this.Zo=!0,this.Yo=t,this.$o.Fo(t,i),this.bl()},t.prototype.Ol=function(){return this.Jo},t.prototype.Vl=function(){return this.Go},t.prototype.Pl=function(){return this.Qo},t.prototype.ml=function(){return this.Ho||0},t.prototype.Wl=function(t){var i=t.Lo();this.kl(this.hh/i),this.sl=t.jn()-this.ml(),this.bl(),this.Zo=!0,this.pi.yl(),this.pi.Wr()},t.prototype.zl=function(){var t=this._l(),i=this.dl();null!==t&&null!==i&&this.Wl(new Ji(t,i+this.zi.rightOffset))},t.prototype.Rl=function(t){var i=new Ji(t.from,t.to);this.Wl(i)},t.prototype.yi=function(t){return void 0!==this.qu.timeFormatter?this.qu.timeFormatter(t.Co||t.So):this.Il.lo(new Date(1e3*t.So))},t.prototype.xl=function(){var t=this.pi.W(),i=t.handleScroll,n=t.handleScale;return!(i.horzTouchDrag||i.mouseWheel||i.pressedMouseMove||i.vertTouchDrag||n.axisDoubleClickReset||n.axisPressedMouseMove.time||n.mouseWheel||n.pinch)},t.prototype._l=function(){return 0===this.Yo.length?null:0},t.prototype.dl=function(){return 0===this.Yo.length?null:this.Yo.length-1},t.prototype.jl=function(t){return(this.hh-1-t)/this.hl},t.prototype.gl=function(t){var i=this.jl(t),n=this.ml()+this.sl-i;return Math.round(1e6*n)/1e6},t.prototype.kl=function(t){var i=this.hl;this.hl=t,this.Ml(),i!==this.hl&&(this.Zo=!0,this.ql())},t.prototype.ll=function(){if(this.Zo)if(this.Zo=!1,this.wi())this.Ul(nn.Uo());else{var t=this.ml(),i=this.hh/this.hl,n=this.sl+t,s=new Ji(n-i+1,n);this.Ul(new nn(s))}},t.prototype.Ml=function(){var t=this.Hl();if(this.hl<t&&(this.hl=t,this.Zo=!0),0!==this.hh){var i=.5*this.hh;this.hl>i&&(this.hl=i,this.Zo=!0)}},t.prototype.Hl=function(){return this.zi.fixLeftEdge&&this.zi.fixRightEdge&&0!==this.Yo.length?this.hh/this.Yo.length:this.zi.minBarSpacing},t.prototype.bl=function(){var t=this.Yl();this.sl>t&&(this.sl=t,this.Zo=!0);var i=this.$l();null!==i&&this.sl<i&&(this.sl=i,this.Zo=!0)},t.prototype.$l=function(){var t=this._l(),i=this.Ho;return null===t||null===i?null:t-i-1+(this.zi.fixLeftEdge?this.hh/this.hl:Math.min(2,this.Yo.length))},t.prototype.Yl=function(){return this.zi.fixRightEdge?0:this.hh/this.hl-Math.min(2,this.Yo.length)},t.prototype.Bl=function(){this.tl={ws:this.ws(),Nl:this.Nl()}},t.prototype.Ll=function(){this.tl=null},t.prototype.Cl=function(t,i){var n=this,s=this.Ko.get(i);return void 0===s&&(s=new Zi((function(t){return n.Kl(t,i)})),this.Ko.set(i,s)),s.lo(t)},t.prototype.Kl=function(t,i){var n,s=function(t,i,n){switch(t){case 0:case 10:return i?n?4:3:2;case 20:case 21:case 22:case 30:case 31:case 32:case 33:return i?3:2;case 50:return 2;case 60:return 1;case 70:return 0}}(i,this.zi.timeVisible,this.zi.secondsVisible);return void 0!==this.zi.tickMarkFormatter?this.zi.tickMarkFormatter(null!==(n=t.Co)&&void 0!==n?n:t.So,s,this.qu.locale):function(t,i,n){var s={};switch(i){case 0:s.year="numeric";break;case 1:s.month="short";break;case 2:s.day="numeric";break;case 3:s.hour12=!1,s.hour="2-digit",s.minute="2-digit";break;case 4:s.hour12=!1,s.hour="2-digit",s.minute="2-digit",s.second="2-digit"}var h=void 0===t.Co?new Date(1e3*t.So):new Date(Date.UTC(t.Co.year,t.Co.month-1,t.Co.day));return new Date(h.getUTCFullYear(),h.getUTCMonth(),h.getUTCDate(),h.getUTCHours(),h.getUTCMinutes(),h.getUTCSeconds(),h.getUTCMilliseconds()).toLocaleString(n,s)}(t,s,this.qu.locale)},t.prototype.Ul=function(t){var i=this.Xo;this.Xo=t,Gi(i.jo(),this.Xo.jo())||this.Jo.m(),Gi(i.qo(),this.Xo.qo())||this.Go.m(),this.ql()},t.prototype.ql=function(){this.il=null},t.prototype.ul=function(){this.ql(),this.Ko.clear()},t.prototype.rl=function(){var t=this.qu.dateFormat;this.zi.timeVisible?this.Il=new Xi({co:t,vo:this.zi.secondsVisible?"%h:%m:%s":"%h:%m",_o:"   ",do:this.qu.locale}):this.Il=new Yi(t,this.qu.locale)},t.prototype.al=function(){if(this.zi.fixLeftEdge){var t=this._l();if(null!==t){var i=this.ss();if(null!==i){var n=i.In()-t;if(n<0){var s=this.sl-n-1;this.yn(s)}this.Ml()}}}},t.prototype.ol=function(){this.bl(),this.Ml()},t}();var hn,rn=function(t){function i(i){var n=t.call(this)||this;return n.Xl=new Map,n.Bt=i,n}return m(i,t),i.prototype.Y=function(t){},i.prototype.K=function(t){if(this.Bt.yt){t.save();for(var i=0,n=0,s=this.Bt.Zl;n<s.length;n++){if(0!==(a=s[n]).Gt.length){t.font=a.T;var h=this.Jl(t,a.Gt);h>this.Bt.Ht?a.Al=this.Bt.Ht/h:a.Al=1,i+=a.Gl*a.Al}}var r=0;switch(this.Bt.Ql){case"top":r=0;break;case"center":r=Math.max((this.Bt.Yt-i)/2,0);break;case"bottom":r=Math.max(this.Bt.Yt-i,0)}t.fillStyle=this.Bt.A;for(var e=0,u=this.Bt.Zl;e<u.length;e++){var a=u[e];t.save();var o=0;switch(this.Bt.tf){case"left":t.textAlign="left",o=a.Gl/2;break;case"center":t.textAlign="center",o=this.Bt.Ht/2;break;case"right":t.textAlign="right",o=this.Bt.Ht-1-a.Gl/2}t.translate(o,r),t.textBaseline="top",t.font=a.T,t.scale(a.Al,a.Al),t.fillText(a.Gt,0,a.if),t.restore(),r+=a.Gl*a.Al}t.restore()}},i.prototype.Jl=function(t,i){var n=this.nf(t.font),s=n.get(i);return void 0===s&&(s=t.measureText(i).width,n.set(i,s)),s},i.prototype.nf=function(t){var i=this.Xl.get(t);return void 0===i&&(i=new Map,this.Xl.set(t,i)),i},i}(O),en=function(){function t(t){this.ft=!0,this.Wt={yt:!1,A:"",Yt:0,Ht:0,Zl:[],Ql:"center",tf:"center"},this.zt=new rn(this.Wt),this.Rt=t}return t.prototype.vt=function(){this.ft=!0},t.prototype.dt=function(t,i){return this.ft&&(this.wt(t,i),this.ft=!1),this.zt},t.prototype.wt=function(t,i){var n=this.Rt.W(),s=this.Wt;s.yt=n.visible,s.yt&&(s.A=n.color,s.Ht=i,s.Yt=t,s.tf=n.horzAlign,s.Ql=n.vertAlign,s.Zl=[{Gt:n.text,T:L(n.fontSize,n.fontFamily,n.fontStyle),Gl:1.2*n.fontSize,if:0,Al:0}])},t}(),un=function(t){function i(i,n){var s=t.call(this)||this;return s.zi=n,s.Hi=new en(s),s}return m(i,t),i.prototype.nn=function(){return[]},i.prototype.tn=function(){return[this.Hi]},i.prototype.W=function(){return this.zi},i.prototype.hn=function(){this.Hi.vt()},i}(Q);!function(t){t[t.OnTouchEnd=0]="OnTouchEnd",t[t.OnNextTap=1]="OnNextTap"}(hn||(hn={}));var an,on,ln,fn=function(){function t(t,i){this.sf=[],this.hf=[],this.hh=0,this.rf=null,this.ef=null,this.uf=new y,this.af=new y,this.lf=null,this.ff=t,this.zi=i,this.cf=new E(this),this.Da=new sn(this,i.timeScale,this.zi.localization),this.ct=new tt(this,i.crosshair),this.vf=new yi(i.crosshair),this._f=new un(this,i.watermark),this.df(),this.sf[0].za(2e3),this.wf=this.Mf(0),this.bf=this.Mf(1)}return t.prototype.Ce=function(){this.mf(new nt(3))},t.prototype.Wr=function(){this.mf(new nt(2))},t.prototype.We=function(){this.mf(new nt(1))},t.prototype.Se=function(t){var i=this.pf(t);this.mf(i)},t.prototype.gf=function(){return this.ef},t.prototype.yf=function(t){var i=this.ef;this.ef=t,null!==i&&this.Se(i.kf),null!==t&&this.Se(t.kf)},t.prototype.W=function(){return this.zi},t.prototype.Pr=function(t){k(this.zi,t),this.sf.forEach((function(i){return i.Oa(t)})),void 0!==t.timeScale&&this.Da.Pr(t.timeScale),void 0!==t.localization&&this.Da.el(t.localization),(t.leftPriceScale||t.rightPriceScale)&&this.uf.m(),this.wf=this.Mf(0),this.bf=this.Mf(1),this.Ce()},t.prototype.Nf=function(t,i){if("left"!==t)if("right"!==t){var n=this.xf(t);null!==n&&(n.Ct.Pr(i),this.uf.m())}else this.Pr({rightPriceScale:i});else this.Pr({leftPriceScale:i})},t.prototype.xf=function(t){for(var i=0,n=this.sf;i<n.length;i++){var s=n[i],h=s.Va(t);if(null!==h)return{It:s,Ct:h}}return null},t.prototype.bt=function(){return this.Da},t.prototype.Cf=function(){return this.sf},t.prototype.Sf=function(){return this._f},t.prototype.Tf=function(){return this.ct},t.prototype.Df=function(){return this.af},t.prototype.Af=function(t,i){t.ia(i),this.yl()},t.prototype.Ra=function(t){this.hh=t,this.Da.Ra(this.hh),this.sf.forEach((function(i){return i.Ra(t)})),this.yl()},t.prototype.df=function(t){var i=new qi(this.Da,this);void 0!==t?this.sf.splice(t,0,i):this.sf.push(i);var n=void 0===t?this.sf.length-1:t,s=new nt(3);return s.cn(n,{vn:0,_n:!0}),this.mf(s),i},t.prototype.Ka=function(t,i,n){t.Ka(i,n)},t.prototype.Xa=function(t,i,n){t.Xa(i,n),this.Te(),this.mf(this.Bf(t,2))},t.prototype.Za=function(t,i){t.Za(i),this.mf(this.Bf(t,2))},t.prototype.Ja=function(t,i,n){i.Xu()||t.Ja(i,n)},t.prototype.Ga=function(t,i,n){i.Xu()||(t.Ga(i,n),this.Te(),this.mf(this.Bf(t,2)))},t.prototype.Qa=function(t,i){i.Xu()||(t.Qa(i),this.mf(this.Bf(t,2)))},t.prototype.no=function(t,i){t.no(i),this.mf(this.Bf(t,2))},t.prototype.Lf=function(t){this.Da.da(t)},t.prototype.Ef=function(t,i){var n=this.bt();if(!n.wi()&&0!==i){var s=n.Ht();t=Math.max(1,Math.min(t,s)),n.Al(t,i),this.yl()}},t.prototype.Ff=function(t){this.Of(0),this.Vf(t),this.Pf()},t.prototype.Wf=function(t){this.Da.wa(t),this.yl()},t.prototype.zf=function(){this.Da.Ma(),this.Wr()},t.prototype.Of=function(t){this.rf=t,this.Da.ba(t)},t.prototype.Vf=function(t){var i=!1;return null!==this.rf&&Math.abs(t-this.rf)>20&&(this.rf=null,i=!0),this.Da.ma(t),this.yl(),i},t.prototype.Pf=function(){this.Da.pa(),this.Wr(),this.rf=null},t.prototype._t=function(){return this.hf},t.prototype.Rf=function(t,i,n){this.ct.Yi(t,i);var s=NaN,h=this.Da.pl(t),r=this.Da.ss();null!==r&&(h=Math.min(Math.max(r.In(),h),r.jn()));var e=n.ji(),u=e.kt();null!==u&&(s=e.qi(i,u)),s=this.vf.Je(s,h,n),this.ct.Zi(h,s,n),this.We(),this.af.m(this.ct.Mt(),{x:t,y:i})},t.prototype.If=function(){this.Tf().Gi(),this.We(),this.af.m(null,null)},t.prototype.Te=function(){var t=this.ct.It();if(null!==t){var i=this.ct.Ki(),n=this.ct.Xi();this.Rf(i,n,t)}this.ct.hn()},t.prototype.jf=function(t,i,n){var s=this.Da.gi(0);void 0!==i&&void 0!==n&&this.Da.vt(i,n);var h=this.Da.gi(0),r=this.Da.ml(),e=this.Da.ss();if(null!==e&&null!==s&&null!==h){var u=e.Uh(r),a=s.So>h.So,o=null!==t&&t>r&&!a,l=u&&this.Da.W().shiftVisibleRangeOnNewBar;if(o&&!l){var f=t-r;this.Da.yn(this.Da.Nl()-f)}}this.Da.Dl(t)},t.prototype.Be=function(t){null!==t&&t.ho()},t.prototype.oh=function(t){var i=this.sf.find((function(i){return i.oa().includes(t)}));return void 0===i?null:i},t.prototype.yl=function(){this._f.hn(),this.sf.forEach((function(t){return t.ho()})),this.Te()},t.prototype.g=function(){this.sf.forEach((function(t){return t.g()})),this.sf.length=0,this.zi.localization.priceFormatter=void 0,this.zi.localization.timeFormatter=void 0},t.prototype.qf=function(){return this.cf},t.prototype.dh=function(){return this.cf.W()},t.prototype.Pa=function(){return this.uf},t.prototype.Uf=function(t,i){var n=this.sf[0],s=this.Hf(i,t,n);return this.hf.push(s),1===this.hf.length?this.Ce():this.Wr(),s},t.prototype.Yf=function(t){var i=this.oh(t),n=this.hf.indexOf(t);r(-1!==n,"Series not found"),this.hf.splice(n,1),u(i).ca(t),t.g&&t.g()},t.prototype.xe=function(t,i){var n=u(this.oh(t));n.ca(t);var s=this.xf(i);if(null===s){var h=t.xi();n.la(t,i,h)}else{h=s.It===n?t.xi():void 0;s.It.la(t,i,h)}},t.prototype.zl=function(){var t=new nt(2);t.Mn(),this.mf(t)},t.prototype.$f=function(t){var i=new nt(2);i.mn(t),this.mf(i)},t.prototype.pn=function(){var t=new nt(2);t.pn(),this.mf(t)},t.prototype.gn=function(t){var i=new nt(2);i.gn(t),this.mf(i)},t.prototype.yn=function(t){var i=new nt(2);i.yn(t),this.mf(i)},t.prototype.Kf=function(){return this.zi.rightPriceScale.visible?"right":"left"},t.prototype.Xf=function(){return this.bf},t.prototype.Zf=function(){return this.wf},t.prototype.Dt=function(t){var i=this.bf,n=this.wf;if(i===n)return i;if(t=Math.max(0,Math.min(100,Math.round(100*t))),null===this.lf||this.lf.Pn!==n||this.lf.Wn!==i)this.lf={Pn:n,Wn:i,Jf:new Map};else{var s=this.lf.Jf.get(t);if(void 0!==s)return s}var h=function(t,i,n){var s=w(t),h=s[0],r=s[1],e=s[2],u=s[3],a=w(i),o=a[0],c=a[1],v=a[2],_=a[3],d=[l(h+n*(o-h)),l(r+n*(c-r)),l(e+n*(v-e)),f(u+n*(_-u))];return"rgba(".concat(d[0],", ").concat(d[1],", ").concat(d[2],", ").concat(d[3],")")}(n,i,t/100);return this.lf.Jf.set(t,h),h},t.prototype.Bf=function(t,i){var n=new nt(i);if(null!==t){var s=this.sf.indexOf(t);n.cn(s,{vn:i})}return n},t.prototype.pf=function(t,i){return void 0===i&&(i=2),this.Bf(this.oh(t),i)},t.prototype.mf=function(t){this.ff&&this.ff(t),this.sf.forEach((function(t){return t.eo().ou().vt()}))},t.prototype.Hf=function(t,i,n){var s=new gi(this,t,i),h=void 0!==t.priceScaleId?t.priceScaleId:this.Kf();return n.la(s,h),it(h)||s.Pr(t),s},t.prototype.Mf=function(t){var i=this.zi.layout;return"gradient"===i.background.type?0===t?i.background.topColor:i.background.bottomColor:i.background.color},t}();function cn(t){void 0!==t.borderColor&&(t.borderUpColor=t.borderColor,t.borderDownColor=t.borderColor),void 0!==t.wickColor&&(t.wickUpColor=t.wickColor,t.wickDownColor=t.wickColor)}function vn(t){return!N(t)&&!C(t)}function _n(t){return N(t)}!function(t){t[t.Disabled=0]="Disabled",t[t.Continuous=1]="Continuous",t[t.OnDataUpdate=2]="OnDataUpdate"}(an||(an={})),function(t){t[t.LastBar=0]="LastBar",t[t.LastVisible=1]="LastVisible"}(on||(on={})),function(t){t.Solid="solid",t.VerticalGradient="gradient"}(ln||(ln={}));var dn=function(){function t(t,i){this.Ft=t,this.Ot=i}return t.prototype.br=function(t){return this.Ft===t.Ft&&this.Ot===t.Ot},t}();function wn(t){return t.ownerDocument&&t.ownerDocument.defaultView&&t.ownerDocument.defaultView.devicePixelRatio||1}function Mn(t){var i=u(t.getContext("2d"));return i.setTransform(1,0,0,1,0,0),i}function bn(t,i){var n=t.createElement("canvas"),s=wn(n);return n.style.width="".concat(i.Ft,"px"),n.style.height="".concat(i.Ot,"px"),n.width=i.Ft*s,n.height=i.Ot*s,n}function mn(i,n){var s=u(i.ownerDocument).createElement("canvas");i.appendChild(s);var h=t(s,{allowDownsampling:!1});return h.resizeCanvas({width:n.Ft,height:n.Ot}),h}function pn(t,i){return t.Gf-i.Gf}function gn(t,i,n){var s=(t.Gf-i.Gf)/(t.rt-i.rt);return Math.sign(s)*Math.min(Math.abs(s),n)}var yn=function(){function t(t,i,n,s){this.Qf=null,this.tc=null,this.ic=null,this.nc=null,this.sc=null,this.hc=0,this.rc=0,this.ec=!1,this.uc=t,this.ac=i,this.oc=n,this.Cn=s}return t.prototype.lc=function(t,i){if(null!==this.Qf){if(this.Qf.rt===i)return void(this.Qf.Gf=t);if(Math.abs(this.Qf.Gf-t)<this.Cn)return}this.nc=this.ic,this.ic=this.tc,this.tc=this.Qf,this.Qf={rt:i,Gf:t}},t.prototype.xh=function(t,i){if(null!==this.Qf&&null!==this.tc&&!(i-this.Qf.rt>50)){var n=0,s=gn(this.Qf,this.tc,this.ac),h=pn(this.Qf,this.tc),r=[s],e=[h];if(n+=h,null!==this.ic){var u=gn(this.tc,this.ic,this.ac);if(Math.sign(u)===Math.sign(s)){var a=pn(this.tc,this.ic);if(r.push(u),e.push(a),n+=a,null!==this.nc){var o=gn(this.ic,this.nc,this.ac);if(Math.sign(o)===Math.sign(s)){var l=pn(this.ic,this.nc);r.push(o),e.push(l),n+=l}}}}for(var f,c,v,_=0,d=0;d<r.length;++d)_+=e[d]/n*r[d];if(!(Math.abs(_)<this.uc))this.sc={Gf:t,rt:i},this.rc=_,this.hc=(f=Math.abs(_),c=this.oc,v=Math.log(c),Math.log(1*v/-f)/v)}},t.prototype.fc=function(t){var i=u(this.sc),n=t-i.rt;return i.Gf+this.rc*(Math.pow(this.oc,n)-1)/Math.log(this.oc)},t.prototype.cc=function(t){return null===this.sc||this.vc(t)===this.hc},t.prototype._c=function(){return this.ec},t.prototype.dc=function(){this.ec=!0},t.prototype.vc=function(t){var i=t-u(this.sc).rt;return Math.min(i,this.hc)},t}(),kn="undefined"!=typeof window;function Nn(){return!!kn&&window.navigator.userAgent.toLowerCase().indexOf("firefox")>-1}function xn(){return!!kn&&/iPhone|iPad|iPod/.test(window.navigator.platform)}function Cn(t){kn&&void 0!==window.chrome&&t.addEventListener("mousedown",(function(t){if(1===t.button)return t.preventDefault(),!1}))}var Sn=function(){function t(t,i,n){var s=this;this.wc=0,this.Mc=null,this.bc={tt:Number.NEGATIVE_INFINITY,it:Number.POSITIVE_INFINITY},this.mc=0,this.gc=null,this.yc={tt:Number.NEGATIVE_INFINITY,it:Number.POSITIVE_INFINITY},this.kc=null,this.Nc=!1,this.xc=null,this.Cc=null,this.Sc=!1,this.Tc=!1,this.Dc=!1,this.Ac=null,this.Bc=null,this.Lc=null,this.Ec=null,this.Fc=null,this.Oc=null,this.Vc=null,this.Pc=0,this.Wc=!1,this.zc=!1,this.Rc=!1,this.Ic=0,this.jc=null,this.qc=!xn(),this.Uc=function(t){s.Hc(t)},this.Yc=function(t){if(s.$c(t)){var i=s.Kc(t);if(++s.mc,s.gc&&s.mc>1)s.Zc(An(t),s.yc).Xc<30&&!s.Dc&&s.Jc(i,s.Qc.Gc),s.tv()}else{i=s.Kc(t);if(++s.wc,s.Mc&&s.wc>1)s.Zc(An(t),s.bc).Xc<5&&!s.Tc&&s.iv(i,s.Qc.nv),s.sv()}},this.hv=t,this.Qc=i,this.zi=n,this.rv()}return t.prototype.g=function(){null!==this.Ac&&(this.Ac(),this.Ac=null),null!==this.Bc&&(this.Bc(),this.Bc=null),null!==this.Ec&&(this.Ec(),this.Ec=null),null!==this.Fc&&(this.Fc(),this.Fc=null),null!==this.Oc&&(this.Oc(),this.Oc=null),null!==this.Lc&&(this.Lc(),this.Lc=null),this.ev(),this.sv()},t.prototype.uv=function(t){var i=this;this.Ec&&this.Ec();var n=this.av.bind(this);if(this.Ec=function(){i.hv.removeEventListener("mousemove",n)},this.hv.addEventListener("mousemove",n),!this.$c(t)){var s=this.Kc(t);this.iv(s,this.Qc.ov),this.qc=!0}},t.prototype.sv=function(){null!==this.Mc&&clearTimeout(this.Mc),this.wc=0,this.Mc=null,this.bc={tt:Number.NEGATIVE_INFINITY,it:Number.POSITIVE_INFINITY}},t.prototype.tv=function(){null!==this.gc&&clearTimeout(this.gc),this.mc=0,this.gc=null,this.yc={tt:Number.NEGATIVE_INFINITY,it:Number.POSITIVE_INFINITY}},t.prototype.av=function(t){if(!this.Rc&&null===this.Cc&&!this.$c(t)){var i=this.Kc(t);this.iv(i,this.Qc.lv),this.qc=!0}},t.prototype.fv=function(t){var i=Ln(t.changedTouches,u(this.jc));if(null!==i&&(this.Ic=Bn(t),null===this.Vc&&!this.zc)){this.Wc=!0;var n=this.Zc(An(i),u(this.Cc)),s=n.cv,h=n.vv,r=n.Xc;if(this.Sc||!(r<5)){if(!this.Sc){var e=.5*s,a=h>=e&&!this.zi._v(),o=e>h&&!this.zi.dv();a||o||(this.zc=!0),this.Sc=!0,this.Dc=!0,this.ev(),this.tv()}if(!this.zc){var l=this.Kc(t,i);this.Jc(l,this.Qc.wv),Dn(t)}}}},t.prototype.Mv=function(t){if(0===t.button&&(this.Zc(An(t),u(this.xc)).Xc>=5&&(this.Tc=!0,this.sv()),this.Tc)){var i=this.Kc(t);this.iv(i,this.Qc.bv)}},t.prototype.Zc=function(t,i){var n=Math.abs(i.tt-t.tt),s=Math.abs(i.it-t.it);return{cv:n,vv:s,Xc:n+s}},t.prototype.mv=function(t){var i=Ln(t.changedTouches,u(this.jc));if(null===i&&0===t.touches.length&&(i=t.changedTouches[0]),null!==i){this.jc=null,this.Ic=Bn(t),this.ev(),this.Cc=null,this.Oc&&(this.Oc(),this.Oc=null);var n=this.Kc(t,i);if(this.Jc(n,this.Qc.pv),++this.mc,this.gc&&this.mc>1)this.Zc(An(i),this.yc).Xc<30&&!this.Dc&&this.Jc(n,this.Qc.Gc),this.tv();else this.Dc||(this.Jc(n,this.Qc.gv),this.Qc.gv&&Dn(t));0===this.mc&&Dn(t),0===t.touches.length&&this.Nc&&(this.Nc=!1,Dn(t))}},t.prototype.Hc=function(t){if(0===t.button){var i=this.Kc(t);if(this.xc=null,this.Rc=!1,this.Fc&&(this.Fc(),this.Fc=null),Nn())this.hv.ownerDocument.documentElement.removeEventListener("mouseleave",this.Uc);if(!this.$c(t))if(this.iv(i,this.Qc.yv),++this.wc,this.Mc&&this.wc>1)this.Zc(An(t),this.bc).Xc<5&&!this.Tc&&this.iv(i,this.Qc.nv),this.sv();else this.Tc||this.iv(i,this.Qc.kv)}},t.prototype.ev=function(){null!==this.kc&&(clearTimeout(this.kc),this.kc=null)},t.prototype.Nv=function(t){if(null===this.jc){var i=t.changedTouches[0];this.jc=i.identifier,this.Ic=Bn(t);var n=this.hv.ownerDocument.documentElement;this.Dc=!1,this.Sc=!1,this.zc=!1,this.Cc=An(i),this.Oc&&(this.Oc(),this.Oc=null);var s=this.fv.bind(this),h=this.mv.bind(this);this.Oc=function(){n.removeEventListener("touchmove",s),n.removeEventListener("touchend",h)},n.addEventListener("touchmove",s,{passive:!1}),n.addEventListener("touchend",h,{passive:!1}),this.ev(),this.kc=setTimeout(this.xv.bind(this,t),240);var r=this.Kc(t,i);this.Jc(r,this.Qc.Cv),this.gc||(this.mc=0,this.gc=setTimeout(this.tv.bind(this),500),this.yc=An(i))}},t.prototype.Sv=function(t){if(0===t.button){var i=this.hv.ownerDocument.documentElement;Nn()&&i.addEventListener("mouseleave",this.Uc),this.Tc=!1,this.xc=An(t),this.Fc&&(this.Fc(),this.Fc=null);var n=this.Mv.bind(this),s=this.Hc.bind(this);if(this.Fc=function(){i.removeEventListener("mousemove",n),i.removeEventListener("mouseup",s)},i.addEventListener("mousemove",n),i.addEventListener("mouseup",s),this.Rc=!0,!this.$c(t)){var h=this.Kc(t);this.iv(h,this.Qc.Tv),this.Mc||(this.wc=0,this.Mc=setTimeout(this.sv.bind(this),500),this.bc=An(t))}}},t.prototype.rv=function(){var t=this;this.hv.addEventListener("mouseenter",this.uv.bind(this)),this.hv.addEventListener("touchcancel",this.ev.bind(this));var i=this.hv.ownerDocument,n=function(i){t.Qc.Dv&&(i.target&&t.hv.contains(i.target)||t.Qc.Dv())};this.Bc=function(){i.removeEventListener("touchstart",n)},this.Ac=function(){i.removeEventListener("mousedown",n)},i.addEventListener("mousedown",n),i.addEventListener("touchstart",n,{passive:!0}),xn()&&(this.Lc=function(){t.hv.removeEventListener("dblclick",t.Yc)},this.hv.addEventListener("dblclick",this.Yc)),this.hv.addEventListener("mouseleave",this.Av.bind(this)),this.hv.addEventListener("touchstart",this.Nv.bind(this),{passive:!0}),Cn(this.hv),this.hv.addEventListener("mousedown",this.Sv.bind(this)),this.Bv(),this.hv.addEventListener("touchmove",(function(){}),{passive:!1})},t.prototype.Bv=function(){var t=this;void 0===this.Qc.Lv&&void 0===this.Qc.Ev&&void 0===this.Qc.Fv||(this.hv.addEventListener("touchstart",(function(i){return t.Ov(i.touches)}),{passive:!0}),this.hv.addEventListener("touchmove",(function(i){if(2===i.touches.length&&null!==t.Vc&&void 0!==t.Qc.Ev){var n=Tn(i.touches[0],i.touches[1])/t.Pc;t.Qc.Ev(t.Vc,n),Dn(i)}}),{passive:!1}),this.hv.addEventListener("touchend",(function(i){t.Ov(i.touches)})))},t.prototype.Ov=function(t){1===t.length&&(this.Wc=!1),2!==t.length||this.Wc||this.Nc?this.Vv():this.Pv(t)},t.prototype.Pv=function(t){var i=this.hv.getBoundingClientRect()||{left:0,top:0};this.Vc={tt:(t[0].clientX-i.left+(t[1].clientX-i.left))/2,it:(t[0].clientY-i.top+(t[1].clientY-i.top))/2},this.Pc=Tn(t[0],t[1]),void 0!==this.Qc.Lv&&this.Qc.Lv(),this.ev()},t.prototype.Vv=function(){null!==this.Vc&&(this.Vc=null,void 0!==this.Qc.Fv&&this.Qc.Fv())},t.prototype.Av=function(t){if(this.Ec&&this.Ec(),!this.$c(t)&&this.qc){var i=this.Kc(t);this.iv(i,this.Qc.Wv),this.qc=!xn()}},t.prototype.xv=function(t){var i=Ln(t.touches,u(this.jc));if(null!==i){var n=this.Kc(t,i);this.Jc(n,this.Qc.zv),this.Dc=!0,this.Nc=!0}},t.prototype.$c=function(t){return t.sourceCapabilities&&void 0!==t.sourceCapabilities.firesTouchEvents?t.sourceCapabilities.firesTouchEvents:Bn(t)<this.Ic+500},t.prototype.Jc=function(t,i){i&&i.call(this.Qc,t)},t.prototype.iv=function(t,i){i&&i.call(this.Qc,t)},t.prototype.Kc=function(t,i){var n=i||t,s=this.hv.getBoundingClientRect()||{left:0,top:0};return{Rv:n.clientX,Iv:n.clientY,jv:n.pageX,qv:n.pageY,Uv:n.screenX,Hv:n.screenY,Yv:n.clientX-s.left,$v:n.clientY-s.top,Kv:t.ctrlKey,Xv:t.altKey,Zv:t.shiftKey,Jv:t.metaKey,Gv:!t.type.startsWith("mouse")&&"contextmenu"!==t.type&&"click"!==t.type,Qv:t.type,t_:n.target,i_:t.view,n_:function(){"touchstart"!==t.type&&Dn(t)}}},t}();function Tn(t,i){var n=t.clientX-i.clientX,s=t.clientY-i.clientY;return Math.sqrt(n*n+s*s)}function Dn(t){t.cancelable&&t.preventDefault()}function An(t){return{tt:t.pageX,it:t.pageY}}function Bn(t){return t.timeStamp||performance.now()}function Ln(t,i){for(var n=0;n<t.length;++n)if(t[n].identifier===i)return t[n];return null}var En=function(){function t(t,i,n,s){this.rh=new Rt(200),this.R=0,this.s_="",this.Yh="",this.th=[],this.h_=new Map,this.R=t,this.s_=i,this.Yh=L(t,n,s)}return t.prototype.g=function(){this.rh.ih(),this.th=[],this.h_.clear()},t.prototype.r_=function(t,i,n,s,h){var r=this.e_(t,i);if("left"!==h){var e=wn(t.canvas);n-=Math.floor(r.u_*e)}s-=Math.floor(r.Yt/2),t.drawImage(r.a_,n,s,r.Ht,r.Yt)},t.prototype.e_=function(t,i){var n,s=this;if(this.h_.has(i))n=e(this.h_.get(i));else{if(this.th.length>=200){var h=e(this.th.shift());this.h_.delete(h)}var r=wn(t.canvas),u=Math.ceil(this.R/4.5),a=Math.round(this.R/10),o=Math.ceil(this.rh.Qt(t,i)),l=St(Math.round(o+2*u)),f=St(this.R+2*u),c=bn(document,new dn(l,f));n={Gt:i,u_:Math.round(Math.max(1,o)),Ht:Math.ceil(l*r),Yt:Math.ceil(f*r),a_:c},0!==o&&(this.th.push(n.Gt),this.h_.set(n.Gt,n)),q(t=Mn(n.a_),r,(function(){t.font=s.Yh,t.fillStyle=s.s_,t.fillText(i,0,f-u-a)}))}return n},t}(),Fn=function(){function t(t,i,n,s){var h=this;this._i=null,this.o_=null,this.l_=!1,this.f_=new Rt(50),this.c_=new En(11,"#000"),this.s_=null,this.Yh=null,this.v_=0,this.__=!1,this.d_=function(){h.w_(h.cf.W()),h.__||h.Di.M_().jt().Wr()},this.b_=function(){h.__||h.Di.M_().jt().Wr()},this.Di=t,this.zi=i,this.cf=n,this.m_="left"===s,this.p_=document.createElement("div"),this.p_.style.height="100%",this.p_.style.overflow="hidden",this.p_.style.width="25px",this.p_.style.left="0",this.p_.style.position="relative",this.g_=mn(this.p_,new dn(16,16)),this.g_.subscribeCanvasConfigured(this.d_);var r=this.g_.canvas;r.style.position="absolute",r.style.zIndex="1",r.style.left="0",r.style.top="0",this.y_=mn(this.p_,new dn(16,16)),this.y_.subscribeCanvasConfigured(this.b_);var e=this.y_.canvas;e.style.position="absolute",e.style.zIndex="2",e.style.left="0",e.style.top="0";var u={Tv:this.k_.bind(this),Cv:this.k_.bind(this),bv:this.N_.bind(this),wv:this.N_.bind(this),Dv:this.x_.bind(this),yv:this.C_.bind(this),pv:this.C_.bind(this),nv:this.S_.bind(this),Gc:this.S_.bind(this),ov:this.T_.bind(this),Wv:this.D_.bind(this)};this.A_=new Sn(this.y_.canvas,u,{_v:function(){return!1},dv:function(){return!0}})}return t.prototype.g=function(){this.A_.g(),this.y_.unsubscribeCanvasConfigured(this.b_),this.y_.destroy(),this.g_.unsubscribeCanvasConfigured(this.d_),this.g_.destroy(),null!==this._i&&this._i._a().M(this),this._i=null,this.c_.g()},t.prototype.B_=function(){return this.p_},t.prototype.ht=function(){return u(this._i).W().borderColor},t.prototype.L_=function(){return this.zi.textColor},t.prototype.S=function(){return this.zi.fontSize},t.prototype.E_=function(){return L(this.S(),this.zi.fontFamily)},t.prototype.F_=function(){var t=this.cf.W(),i=this.s_!==t.A,n=this.Yh!==t.T;return(i||n)&&(this.w_(t),this.s_=t.A),n&&(this.f_.ih(),this.Yh=t.T),t},t.prototype.O_=function(){if(null===this._i)return 0;var t=0,i=this.F_(),n=Mn(this.g_.canvas),s=this._i.au();n.font=this.E_(),s.length>0&&(t=Math.max(this.f_.Qt(n,s[0].yu),this.f_.Qt(n,s[s.length-1].yu)));for(var h=this.V_(),r=h.length;r--;){var e=this.f_.Qt(n,h[r].Gt());e>t&&(t=e)}var u=this._i.kt();if(null!==u&&null!==this.o_){var a=this._i.qi(1,u),o=this._i.qi(this.o_.Ot-2,u);t=Math.max(t,this.f_.Qt(n,this._i.Mi(Math.floor(Math.min(a,o))+.11111111111111,u)),this.f_.Qt(n,this._i.Mi(Math.ceil(Math.max(a,o))-.11111111111111,u)))}var l=t||34,f=Math.ceil(i.N+i.C+i.L+i.F+l);return f+=f%2},t.prototype.P_=function(t){if(t.Ft<0||t.Ot<0)throw new Error("Try to set invalid size to PriceAxisWidget "+JSON.stringify(t));null!==this.o_&&this.o_.br(t)||(this.o_=t,this.__=!0,this.g_.resizeCanvas({width:t.Ft,height:t.Ot}),this.y_.resizeCanvas({width:t.Ft,height:t.Ot}),this.__=!1,this.p_.style.width=t.Ft+"px",this.p_.style.height=t.Ot+"px",this.p_.style.minWidth=t.Ft+"px")},t.prototype.W_=function(){return u(this.o_).Ft},t.prototype.Si=function(t){this._i!==t&&(null!==this._i&&this._i._a().M(this),this._i=t,t._a().u(this.Eu.bind(this),this))},t.prototype.Ct=function(){return this._i},t.prototype.ih=function(){var t=this.Di.z_();this.Di.M_().jt().no(t,u(this.Ct()))},t.prototype.R_=function(t){if(null!==this.o_){if(1!==t){var i=Mn(this.g_.canvas);this.I_(),this.j_(i,this.g_.pixelRatio),this.Rs(i,this.g_.pixelRatio),this.q_(i,this.g_.pixelRatio),this.U_(i,this.g_.pixelRatio)}var n=Mn(this.y_.canvas),s=this.o_.Ft,h=this.o_.Ot;q(n,this.y_.pixelRatio,(function(){n.clearRect(0,0,s,h)})),this.H_(n,this.y_.pixelRatio)}},t.prototype.Y_=function(){return this.g_.canvas},t.prototype.vt=function(){var t;null===(t=this._i)||void 0===t||t.au()},t.prototype.k_=function(t){if(null!==this._i&&!this._i.wi()&&this.Di.M_().W().handleScale.axisPressedMouseMove.price){var i=this.Di.M_().jt(),n=this.Di.z_();this.l_=!0,i.Ka(n,this._i,t.$v)}},t.prototype.N_=function(t){if(null!==this._i&&this.Di.M_().W().handleScale.axisPressedMouseMove.price){var i=this.Di.M_().jt(),n=this.Di.z_(),s=this._i;i.Xa(n,s,t.$v)}},t.prototype.x_=function(){if(null!==this._i&&this.Di.M_().W().handleScale.axisPressedMouseMove.price){var t=this.Di.M_().jt(),i=this.Di.z_(),n=this._i;this.l_&&(this.l_=!1,t.Za(i,n))}},t.prototype.C_=function(t){if(null!==this._i&&this.Di.M_().W().handleScale.axisPressedMouseMove.price){var i=this.Di.M_().jt(),n=this.Di.z_();this.l_=!1,i.Za(n,this._i)}},t.prototype.S_=function(t){this.Di.M_().W().handleScale.axisDoubleClickReset&&this.ih()},t.prototype.T_=function(t){null!==this._i&&(!this.Di.M_().jt().W().handleScale.axisPressedMouseMove.price||this._i.vr()||this._i.Zu()||this.K_(1))},t.prototype.D_=function(t){this.K_(0)},t.prototype.V_=function(){var t=this,i=[],n=null===this._i?void 0:this._i;return function(s){for(var h=0;h<s.length;++h)for(var r=s[h].nn(t.Di.z_(),n),e=0;e<r.length;e++)i.push(r[e])}(this.Di.z_().oa()),i},t.prototype.j_=function(t,i){var n=this;if(null!==this.o_){var s=this.o_.Ft,h=this.o_.Ot;q(t,i,(function(){var i=n.Di.z_().jt(),r=i.Zf(),e=i.Xf();r===e?U(t,0,0,s,h,r):H(t,0,0,s,h,r,e)}))}},t.prototype.Rs=function(t,i){if(null!==this.o_&&null!==this._i&&this._i.W().borderVisible){t.save(),t.fillStyle=this.ht();var n,s=Math.max(1,Math.floor(this.F_().N*i));n=this.m_?Math.floor(this.o_.Ft*i)-s:0,t.fillRect(n,0,s,Math.ceil(this.o_.Ot*i)),t.restore()}},t.prototype.q_=function(t,i){if(null!==this.o_&&null!==this._i){var n=this._i.au();t.save(),t.strokeStyle=this.ht(),t.font=this.E_(),t.fillStyle=this.ht();var s=this.F_(),h=this._i.W().borderVisible&&this._i.W().drawTicks,r=this.m_?Math.floor((this.o_.Ft-s.C)*i-s.N*i):Math.floor(s.N*i),e=this.m_?Math.round(r-s.L*i):Math.round(r+s.C*i+s.L*i),u=this.m_?"right":"left",a=Math.max(1,Math.floor(i)),o=Math.floor(.5*i);if(h){var l=Math.round(s.C*i);t.beginPath();for(var f=0,c=n;f<c.length;f++){var v=c[f];t.rect(r,Math.round(v.su*i)-o,l,a)}t.fill()}t.fillStyle=this.L_();for(var _=0,d=n;_<d.length;_++){v=d[_];this.c_.r_(t,v.yu,e,Math.round(v.su*i),u)}t.restore()}},t.prototype.I_=function(){if(null!==this.o_&&null!==this._i){var t=this.o_.Ot/2,i=[],n=this._i.oa().slice(),s=this.Di.z_(),h=this.F_();this._i===s.fh()&&this.Di.z_().oa().forEach((function(t){s.lh(t)&&n.push(t)}));var r=this._i.Ge()[0],e=this._i;n.forEach((function(n){var h=n.nn(s,e);h.forEach((function(t){t.oi(null),t.li()&&i.push(t)})),r===n&&h.length>0&&(t=h[0].ti())}));var u=i.filter((function(i){return i.ti()<=t})),a=i.filter((function(i){return i.ti()>t}));if(u.sort((function(t,i){return i.ti()-t.ti()})),u.length&&a.length&&a.push(u[0]),a.sort((function(t,i){return t.ti()-i.ti()})),i.forEach((function(t){return t.oi(t.ti())})),this._i.W().alignLabels){for(var o=1;o<u.length;o++){var l=u[o],f=(v=u[o-1]).Yt(h,!1);l.ti()>(_=v.ai())-f&&l.oi(_-f)}for(var c=1;c<a.length;c++){var v,_;l=a[c],f=(v=a[c-1]).Yt(h,!0);l.ti()<(_=v.ai())+f&&l.oi(_+f)}}}},t.prototype.U_=function(t,i){var n=this;if(null!==this.o_){t.save();var s=this.o_,h=this.V_(),r=this.F_(),e=this.m_?"right":"left";h.forEach((function(h){if(h.fi()){var a=h.dt(u(n._i));t.save(),a.H(t,r,n.f_,s.Ft,e,i),t.restore()}})),t.restore()}},t.prototype.H_=function(t,i){var n=this;if(null!==this.o_&&null!==this._i){t.save();var s=this.o_,h=this.Di.M_().jt(),r=[],e=this.Di.z_(),a=h.Tf().nn(e,this._i);a.length&&r.push(a);var o=this.F_(),l=this.m_?"right":"left";r.forEach((function(h){h.forEach((function(h){t.save(),h.dt(u(n._i)).H(t,o,n.f_,s.Ft,l,i),t.restore()}))})),t.restore()}},t.prototype.K_=function(t){this.p_.style.cursor=1===t?"ns-resize":"default"},t.prototype.Eu=function(){var t=this.O_();this.v_<t&&this.Di.M_().jt().Ce(),this.v_=t},t.prototype.w_=function(t){this.c_.g(),this.c_=new En(t.S,t.A,t.D)},t}();function On(t,i,n,s,h){t.$&&t.$(i,n,s,h)}function Vn(t,i,n,s,h){t.H(i,n,s,h)}function Pn(t,i){return t.tn(i)}function Wn(t,i){return void 0!==t.Pe?t.Pe(i):[]}var zn=function(){function t(t,i){var n=this;this.o_=new dn(0,0),this.X_=null,this.Z_=null,this.J_=null,this.G_=!1,this.Q_=new y,this.td=0,this.nd=!1,this.sd=null,this.hd=!1,this.rd=null,this.ed=null,this.__=!1,this.d_=function(){n.__||null===n.ud||n.pi().Wr()},this.b_=function(){n.__||null===n.ud||n.pi().Wr()},this.ad=t,this.ud=i,this.ud.ro().u(this.od.bind(this),this,!0),this.ld=document.createElement("td"),this.ld.style.padding="0",this.ld.style.position="relative";var s=document.createElement("div");s.style.width="100%",s.style.height="100%",s.style.position="relative",s.style.overflow="hidden",this.fd=document.createElement("td"),this.fd.style.padding="0",this.vd=document.createElement("td"),this.vd.style.padding="0",this.ld.appendChild(s),this.g_=mn(s,new dn(16,16)),this.g_.subscribeCanvasConfigured(this.d_);var h=this.g_.canvas;h.style.position="absolute",h.style.zIndex="1",h.style.left="0",h.style.top="0",this.y_=mn(s,new dn(16,16)),this.y_.subscribeCanvasConfigured(this.b_);var r=this.y_.canvas;r.style.position="absolute",r.style.zIndex="2",r.style.left="0",r.style.top="0",this._d=document.createElement("tr"),this._d.appendChild(this.fd),this._d.appendChild(this.ld),this._d.appendChild(this.vd),this.dd(),this.A_=new Sn(this.y_.canvas,this,{_v:function(){return null===n.sd&&!n.ad.W().handleScroll.vertTouchDrag},dv:function(){return null===n.sd&&!n.ad.W().handleScroll.horzTouchDrag}})}return t.prototype.g=function(){null!==this.X_&&this.X_.g(),null!==this.Z_&&this.Z_.g(),this.y_.unsubscribeCanvasConfigured(this.b_),this.y_.destroy(),this.g_.unsubscribeCanvasConfigured(this.d_),this.g_.destroy(),null!==this.ud&&this.ud.ro().M(this),this.A_.g()},t.prototype.z_=function(){return u(this.ud)},t.prototype.wd=function(i){null!==this.ud&&this.ud.ro().M(this),this.ud=i,null!==this.ud&&this.ud.ro().u(t.prototype.od.bind(this),this,!0),this.dd()},t.prototype.M_=function(){return this.ad},t.prototype.B_=function(){return this._d},t.prototype.dd=function(){if(null!==this.ud&&(this.Md(),0!==this.pi()._t().length)){if(null!==this.X_){var t=this.ud.Ya();this.X_.Si(u(t))}if(null!==this.Z_){var i=this.ud.$a();this.Z_.Si(u(i))}}},t.prototype.bd=function(){null!==this.X_&&this.X_.vt(),null!==this.Z_&&this.Z_.vt()},t.prototype.Wa=function(){return null!==this.ud?this.ud.Wa():0},t.prototype.za=function(t){this.ud&&this.ud.za(t)},t.prototype.ov=function(t){if(this.ud){this.md();var i=t.Yv,n=t.$v;this.pd(i,n)}},t.prototype.Tv=function(t){this.md(),this.gd(),this.pd(t.Yv,t.$v)},t.prototype.lv=function(t){if(this.ud){this.md();var i=t.Yv,n=t.$v;this.pd(i,n);var s=this.$h(i,n);this.pi().yf(s&&{kf:s.kf,yd:s.yd})}},t.prototype.kv=function(t){if(null!==this.ud){this.md();var i=t.Yv,n=t.$v;if(this.Q_.p()){var s=this.pi().Tf().Mt();this.Q_.m(s,{x:i,y:n})}}},t.prototype.bv=function(t){this.md(),this.kd(t),this.pd(t.Yv,t.$v)},t.prototype.yv=function(t){null!==this.ud&&(this.md(),this.nd=!1,this.Nd(t))},t.prototype.zv=function(t){if(this.nd=!0,null===this.sd){var i={x:t.Yv,y:t.$v};this.xd(i,i)}},t.prototype.Wv=function(t){null!==this.ud&&(this.md(),this.ud.jt().yf(null),this.Cd())},t.prototype.Sd=function(){return this.Q_},t.prototype.Lv=function(){this.td=1,this.Td()},t.prototype.Ev=function(t,i){if(this.ad.W().handleScale.pinch){var n=5*(i-this.td);this.td=i,this.pi().Ef(t.tt,n)}},t.prototype.Cv=function(t){if(this.nd=!1,this.hd=null!==this.sd,this.gd(),null!==this.sd){var i=this.pi().Tf();this.rd={x:i.$t(),y:i.Kt()},this.sd={x:t.Yv,y:t.$v}}},t.prototype.wv=function(t){if(null!==this.ud){var i=t.Yv,n=t.$v;if(null===this.sd)this.kd(t);else{this.hd=!1;var s=u(this.rd),h=s.x+(i-this.sd.x),r=s.y+(n-this.sd.y);this.pd(h,r)}}},t.prototype.pv=function(t){0===this.M_().W().trackingMode.exitMode&&(this.hd=!0),this.Dd(),this.Nd(t)},t.prototype.$h=function(t,i){var n=this.ud;if(null===n)return null;for(var s=0,h=n.oa();s<h.length;s++){var r=h[s],e=this.Ad(r.tn(n),t,i);if(null!==e)return{kf:r,i_:e.i_,yd:e.yd}}return null},t.prototype.Bd=function(t,i){u("left"===i?this.X_:this.Z_).P_(new dn(t,this.o_.Ot))},t.prototype.Ld=function(){return this.o_},t.prototype.P_=function(t){if(t.Ft<0||t.Ot<0)throw new Error("Try to set invalid size to PaneWidget "+JSON.stringify(t));this.o_.br(t)||(this.o_=t,this.__=!0,this.g_.resizeCanvas({width:t.Ft,height:t.Ot}),this.y_.resizeCanvas({width:t.Ft,height:t.Ot}),this.__=!1,this.ld.style.width=t.Ft+"px",this.ld.style.height=t.Ot+"px")},t.prototype.Ed=function(){var t=u(this.ud);t.Ha(t.Ya()),t.Ha(t.$a());for(var i=0,n=t.Ge();i<n.length;i++){var s=n[i];if(t.lh(s)){var h=s.Ct();null!==h&&t.Ha(h),s.hn()}}},t.prototype.Y_=function(){return this.g_.canvas},t.prototype.R_=function(t){if(0!==t&&null!==this.ud){if(t>1&&this.Ed(),null!==this.X_&&this.X_.R_(t),null!==this.Z_&&this.Z_.R_(t),1!==t){var i=Mn(this.g_.canvas);i.save(),this.j_(i,this.g_.pixelRatio),this.ud&&(this.Fd(i,this.g_.pixelRatio),this.Od(i,this.g_.pixelRatio),this.Vd(i,this.g_.pixelRatio,Pn)),i.restore()}var n=Mn(this.y_.canvas);n.clearRect(0,0,Math.ceil(this.o_.Ft*this.y_.pixelRatio),Math.ceil(this.o_.Ot*this.y_.pixelRatio)),this.Vd(n,this.g_.pixelRatio,Wn),this.Pd(n,this.y_.pixelRatio)}},t.prototype.Wd=function(){return this.X_},t.prototype.zd=function(){return this.Z_},t.prototype.od=function(){null!==this.ud&&this.ud.ro().M(this),this.ud=null},t.prototype.j_=function(t,i){var n=this;q(t,i,(function(){var i=n.pi(),s=i.Zf(),h=i.Xf();s===h?U(t,0,0,n.o_.Ft,n.o_.Ot,h):H(t,0,0,n.o_.Ft,n.o_.Ot,s,h)}))},t.prototype.Fd=function(t,i){var n=u(this.ud),s=n.eo().ou().dt(n.Yt(),n.Ht());null!==s&&(t.save(),s.H(t,i,!1),t.restore())},t.prototype.Od=function(t,i){var n=this.pi().Sf();this.Rd(t,i,Pn,On,n),this.Rd(t,i,Pn,Vn,n)},t.prototype.Pd=function(t,i){this.Rd(t,i,Pn,Vn,this.pi().Tf())},t.prototype.Vd=function(t,i,n){for(var s=u(this.ud).oa(),h=0,r=s;h<r.length;h++){var e=r[h];this.Rd(t,i,n,On,e)}for(var a=0,o=s;a<o.length;a++){e=o[a];this.Rd(t,i,n,Vn,e)}},t.prototype.Rd=function(t,i,n,s,h){for(var r=u(this.ud),e=n(h,r),a=r.Yt(),o=r.Ht(),l=r.jt().gf(),f=null!==l&&l.kf===h,c=null!==l&&f&&void 0!==l.yd?l.yd.Kh:void 0,v=0,_=e;v<_.length;v++){var d=_[v].dt(a,o);null!==d&&(t.save(),s(d,t,i,f,c),t.restore())}},t.prototype.Ad=function(t,i,n){for(var s=0,h=t;s<h.length;s++){var r=h[s],e=r.dt(this.o_.Ot,this.o_.Ft);if(null!==e&&e.$h){var u=e.$h(i,n);if(null!==u)return{i_:r,yd:u}}}return null},t.prototype.Md=function(){if(null!==this.ud){var t=this.ad,i=this.ud.Ya().W().visible,n=this.ud.$a().W().visible;i||null===this.X_||(this.fd.removeChild(this.X_.B_()),this.X_.g(),this.X_=null),n||null===this.Z_||(this.vd.removeChild(this.Z_.B_()),this.Z_.g(),this.Z_=null);var s=t.jt().qf();i&&null===this.X_&&(this.X_=new Fn(this,t.W().layout,s,"left"),this.fd.appendChild(this.X_.B_())),n&&null===this.Z_&&(this.Z_=new Fn(this,t.W().layout,s,"right"),this.vd.appendChild(this.Z_.B_()))}},t.prototype.Id=function(t){return t.Gv&&this.nd||null!==this.sd},t.prototype.jd=function(t){return Math.max(0,Math.min(t,this.o_.Ft-1))},t.prototype.qd=function(t){return Math.max(0,Math.min(t,this.o_.Ot-1))},t.prototype.pd=function(t,i){this.pi().Rf(this.jd(t),this.qd(i),u(this.ud))},t.prototype.Cd=function(){this.pi().If()},t.prototype.Dd=function(){this.hd&&(this.sd=null,this.Cd())},t.prototype.xd=function(t,i){this.sd=t,this.hd=!1,this.pd(i.x,i.y);var n=this.pi().Tf();this.rd={x:n.$t(),y:n.Kt()}},t.prototype.pi=function(){return this.ad.jt()},t.prototype.Ud=function(){var t=this.pi(),i=this.z_(),n=i.ji();t.Qa(i,n),t.Pf(),this.J_=null,this.G_=!1},t.prototype.Nd=function(t){var i=this;if(this.G_){var n=performance.now();if(null!==this.ed&&this.ed.xh(t.Yv,n),null===this.ed||this.ed.cc(n))this.Ud();else{var s=this.pi(),h=s.bt(),r=this.ed,e=function(){if(!r._c()){var t=performance.now(),n=r.cc(t);if(!r._c()){var u=h.Nl();s.Vf(r.fc(t)),u===h.Nl()&&(n=!0,i.ed=null)}n?i.Ud():requestAnimationFrame(e)}};requestAnimationFrame(e)}}},t.prototype.md=function(){this.sd=null},t.prototype.gd=function(){if(this.ud){if(this.Td(),document.activeElement!==document.body&&document.activeElement!==document.documentElement)u(document.activeElement).blur();else{var t=document.getSelection();null!==t&&t.removeAllRanges()}!this.ud.ji().wi()&&this.pi().bt().wi()}},t.prototype.kd=function(t){if(null!==this.ud){var i=this.pi();if(!i.bt().wi()){var n=this.ad.W(),s=n.handleScroll,h=n.kineticScroll;if(s.pressedMouseMove&&!t.Gv||(s.horzTouchDrag||s.vertTouchDrag)&&t.Gv){var r=this.ud.ji(),e=performance.now();null!==this.J_||this.Id(t)||(this.J_={x:t.Rv,y:t.Iv,So:e,Yv:t.Yv,$v:t.$v}),null!==this.ed&&this.ed.lc(t.Yv,e),null===this.J_||this.G_||this.J_.x===t.Rv&&this.J_.y===t.Iv||(null===this.ed&&(t.Gv&&h.touch||!t.Gv&&h.mouse)&&(this.ed=new yn(.2,7,.997,15),this.ed.lc(this.J_.Yv,this.J_.So),this.ed.lc(t.Yv,e)),r.wi()||i.Ja(this.ud,r,t.$v),i.Of(t.Yv),this.G_=!0),this.G_&&(r.wi()||i.Ga(this.ud,r,t.$v),i.Vf(t.Yv))}}}},t.prototype.Td=function(){var t=performance.now(),i=null===this.ed||this.ed.cc(t);null!==this.ed&&(i||this.Ud()),null!==this.ed&&(this.ed.dc(),this.ed=null)},t}(),Rn=function(){function t(t,i,n,s,h){var r=this;this.ft=!0,this.o_=new dn(0,0),this.d_=function(){return r.R_(3)},this.m_="left"===t,this.cf=n.qf,this.zi=i,this.Hd=s,this.Yd=h,this.p_=document.createElement("div"),this.p_.style.width="25px",this.p_.style.height="100%",this.p_.style.overflow="hidden",this.g_=mn(this.p_,new dn(16,16)),this.g_.subscribeCanvasConfigured(this.d_)}return t.prototype.g=function(){this.g_.unsubscribeCanvasConfigured(this.d_),this.g_.destroy()},t.prototype.B_=function(){return this.p_},t.prototype.Ld=function(){return this.o_},t.prototype.P_=function(t){if(t.Ft<0||t.Ot<0)throw new Error("Try to set invalid size to PriceAxisStub "+JSON.stringify(t));this.o_.br(t)||(this.o_=t,this.g_.resizeCanvas({width:t.Ft,height:t.Ot}),this.p_.style.width="".concat(t.Ft,"px"),this.p_.style.minWidth="".concat(t.Ft,"px"),this.p_.style.height="".concat(t.Ot,"px"),this.ft=!0)},t.prototype.R_=function(t){if((!(t<3)||this.ft)&&0!==this.o_.Ft&&0!==this.o_.Ot){this.ft=!1;var i=Mn(this.g_.canvas);this.j_(i,this.g_.pixelRatio),this.Rs(i,this.g_.pixelRatio)}},t.prototype.Y_=function(){return this.g_.canvas},t.prototype.Rs=function(t,i){if(this.Hd()){var n=this.o_.Ft;t.save(),t.fillStyle=this.zi.timeScale.borderColor;var s=Math.floor(this.cf.W().N*i),h=this.m_?Math.round(n*i)-s:0;t.fillRect(h,0,s,s),t.restore()}},t.prototype.j_=function(t,i){var n=this;q(t,i,(function(){U(t,0,0,n.o_.Ft,n.o_.Ot,n.Yd())}))},t}();function In(t,i){return t.Po>i.Po?t:i}var jn=function(){function t(t){var i=this;this.$d=null,this.Kd=null,this.k=null,this.Xd=!1,this.o_=new dn(0,0),this.Zd=new y,this.f_=new Rt(5),this.__=!1,this.d_=function(){i.__||i.ad.jt().Wr()},this.b_=function(){i.__||i.ad.jt().Wr()},this.ad=t,this.zi=t.W().layout,this.Jd=document.createElement("tr"),this.Gd=document.createElement("td"),this.Gd.style.padding="0",this.Qd=document.createElement("td"),this.Qd.style.padding="0",this.p_=document.createElement("td"),this.p_.style.height="25px",this.p_.style.padding="0",this.tw=document.createElement("div"),this.tw.style.width="100%",this.tw.style.height="100%",this.tw.style.position="relative",this.tw.style.overflow="hidden",this.p_.appendChild(this.tw),this.g_=mn(this.tw,new dn(16,16)),this.g_.subscribeCanvasConfigured(this.d_);var n=this.g_.canvas;n.style.position="absolute",n.style.zIndex="1",n.style.left="0",n.style.top="0",this.y_=mn(this.tw,new dn(16,16)),this.y_.subscribeCanvasConfigured(this.b_);var s=this.y_.canvas;s.style.position="absolute",s.style.zIndex="2",s.style.left="0",s.style.top="0",this.Jd.appendChild(this.Gd),this.Jd.appendChild(this.p_),this.Jd.appendChild(this.Qd),this.iw(),this.ad.jt().Pa().u(this.iw.bind(this),this),this.A_=new Sn(this.y_.canvas,this,{_v:function(){return!0},dv:function(){return!1}})}return t.prototype.g=function(){this.A_.g(),null!==this.$d&&this.$d.g(),null!==this.Kd&&this.Kd.g(),this.y_.unsubscribeCanvasConfigured(this.b_),this.y_.destroy(),this.g_.unsubscribeCanvasConfigured(this.d_),this.g_.destroy()},t.prototype.B_=function(){return this.Jd},t.prototype.nw=function(){return this.$d},t.prototype.sw=function(){return this.Kd},t.prototype.Tv=function(t){if(!this.Xd){this.Xd=!0;var i=this.ad.jt();!i.bt().wi()&&this.ad.W().handleScale.axisPressedMouseMove.time&&i.Lf(t.Yv)}},t.prototype.Cv=function(t){this.Tv(t)},t.prototype.Dv=function(){var t=this.ad.jt();!t.bt().wi()&&this.Xd&&(this.Xd=!1,this.ad.W().handleScale.axisPressedMouseMove.time&&t.zf())},t.prototype.bv=function(t){var i=this.ad.jt();!i.bt().wi()&&this.ad.W().handleScale.axisPressedMouseMove.time&&i.Wf(t.Yv)},t.prototype.wv=function(t){this.bv(t)},t.prototype.yv=function(){this.Xd=!1;var t=this.ad.jt();t.bt().wi()&&!this.ad.W().handleScale.axisPressedMouseMove.time||t.zf()},t.prototype.pv=function(){this.yv()},t.prototype.nv=function(){this.ad.W().handleScale.axisDoubleClickReset&&this.ad.jt().pn()},t.prototype.Gc=function(){this.nv()},t.prototype.ov=function(){this.ad.jt().W().handleScale.axisPressedMouseMove.time&&this.K_(1)},t.prototype.Wv=function(){this.K_(0)},t.prototype.Ld=function(){return this.o_},t.prototype.hw=function(){return this.Zd},t.prototype.rw=function(t,i,n){this.o_&&this.o_.br(t)||(this.o_=t,this.__=!0,this.g_.resizeCanvas({width:t.Ft,height:t.Ot}),this.y_.resizeCanvas({width:t.Ft,height:t.Ot}),this.__=!1,this.p_.style.width=t.Ft+"px",this.p_.style.height=t.Ot+"px",this.Zd.m(t)),null!==this.$d&&this.$d.P_(new dn(i,t.Ot)),null!==this.Kd&&this.Kd.P_(new dn(n,t.Ot))},t.prototype.ew=function(){var t=this.uw();return Math.ceil(t.N+t.C+t.S+t.O+t.B)},t.prototype.vt=function(){this.ad.jt().bt().au()},t.prototype.Y_=function(){return this.g_.canvas},t.prototype.R_=function(t){if(0!==t){if(1!==t){var i=Mn(this.g_.canvas);this.j_(i,this.g_.pixelRatio),this.Rs(i,this.g_.pixelRatio),this.q_(i,this.g_.pixelRatio),null!==this.$d&&this.$d.R_(t),null!==this.Kd&&this.Kd.R_(t)}var n=Mn(this.y_.canvas),s=this.y_.pixelRatio;n.clearRect(0,0,Math.ceil(this.o_.Ft*s),Math.ceil(this.o_.Ot*s)),this.aw([this.ad.jt().Tf()],n,s)}},t.prototype.j_=function(t,i){var n=this;q(t,i,(function(){U(t,0,0,n.o_.Ft,n.o_.Ot,n.ad.jt().Xf())}))},t.prototype.Rs=function(t,i){if(this.ad.W().timeScale.borderVisible){t.save(),t.fillStyle=this.ow();var n=Math.max(1,Math.floor(this.uw().N*i));t.fillRect(0,0,Math.ceil(this.o_.Ft*i),n),t.restore()}},t.prototype.q_=function(t,i){var n=this,s=this.ad.jt().bt().au();if(s&&0!==s.length){var h=s.reduce(In,s[0]).Po;h>30&&h<50&&(h=30),t.save(),t.strokeStyle=this.ow();var r=this.uw(),e=r.N+r.C+r.O+r.S-r.V;t.textAlign="center",t.fillStyle=this.ow();var u=Math.floor(this.uw().N*i),a=Math.max(1,Math.floor(i)),o=Math.floor(.5*i);if(this.ad.jt().bt().W().borderVisible){t.beginPath();for(var l=Math.round(r.C*i),f=s.length;f--;){var c=Math.round(s[f].su*i);t.rect(c-o,u,a,l)}t.fill()}t.fillStyle=this.j(),q(t,i,(function(){t.font=n.lw();for(var i=0,r=s;i<r.length;i++){if((l=r[i]).Po<h){var u=l.Sl?n.fw(t,l.su,l.yu):l.su;t.fillText(l.yu,u,e)}}t.font=n.cw();for(var a=0,o=s;a<o.length;a++){var l;if((l=o[a]).Po>=h){u=l.Sl?n.fw(t,l.su,l.yu):l.su;t.fillText(l.yu,u,e)}}})),t.restore()}},t.prototype.fw=function(t,i,n){var s=this.f_.Qt(t,n),h=s/2,r=Math.floor(i-h)+.5;return r<0?i+=Math.abs(0-r):r+s>this.o_.Ft&&(i-=Math.abs(this.o_.Ft-(r+s))),i},t.prototype.aw=function(t,i,n){for(var s=this.uw(),h=0,r=t;h<r.length;h++)for(var e=0,u=r[h].Ti();e<u.length;e++){var a=u[e];i.save(),a.dt().H(i,s,n),i.restore()}},t.prototype.ow=function(){return this.ad.W().timeScale.borderColor},t.prototype.j=function(){return this.zi.textColor},t.prototype.R=function(){return this.zi.fontSize},t.prototype.lw=function(){return L(this.R(),this.zi.fontFamily)},t.prototype.cw=function(){return L(this.R(),this.zi.fontFamily,"bold")},t.prototype.uw=function(){null===this.k&&(this.k={N:1,V:NaN,O:NaN,B:NaN,mi:NaN,C:3,S:NaN,T:"",bi:new Rt});var t=this.k,i=this.lw();if(t.T!==i){var n=this.R();t.S=n,t.T=i,t.O=Math.ceil(n/2.5),t.B=t.O,t.mi=Math.ceil(n/2),t.V=Math.round(this.R()/5),t.bi.ih()}return this.k},t.prototype.K_=function(t){this.p_.style.cursor=1===t?"ew-resize":"default"},t.prototype.iw=function(){var t=this.ad.jt(),i=t.W();i.leftPriceScale.visible||null===this.$d||(this.Gd.removeChild(this.$d.B_()),this.$d.g(),this.$d=null),i.rightPriceScale.visible||null===this.Kd||(this.Qd.removeChild(this.Kd.B_()),this.Kd.g(),this.Kd=null);var n={qf:this.ad.jt().qf()},s=function(){return i.leftPriceScale.borderVisible&&t.bt().W().borderVisible},h=function(){return t.Xf()};i.leftPriceScale.visible&&null===this.$d&&(this.$d=new Rn("left",i,n,s,h),this.Gd.appendChild(this.$d.B_())),i.rightPriceScale.visible&&null===this.Kd&&(this.Kd=new Rn("right",i,n,s,h),this.Qd.appendChild(this.Kd.B_()))},t}(),qn=function(){function t(t,i){var n;this._w=[],this.dw=0,this.xu=0,this.hh=0,this.ww=0,this.Mw=0,this.bw=null,this.mw=!1,this.Q_=new y,this.af=new y,this.zi=i,this.Jd=document.createElement("div"),this.Jd.classList.add("tv-lightweight-charts"),this.Jd.style.overflow="hidden",this.Jd.style.width="100%",this.Jd.style.height="100%",(n=this.Jd).style.userSelect="none",n.style.webkitUserSelect="none",n.style.msUserSelect="none",n.style.MozUserSelect="none",n.style.webkitTapHighlightColor="transparent",this.pw=document.createElement("table"),this.pw.setAttribute("cellspacing","0"),this.Jd.appendChild(this.pw),this.gw=this.yw.bind(this),this.Jd.addEventListener("wheel",this.gw,{passive:!1}),this.pi=new fn(this.ff.bind(this),this.zi),this.jt().Df().u(this.kw.bind(this),this),this.Nw=new jn(this),this.pw.appendChild(this.Nw.B_());var s=this.zi.width,h=this.zi.height;if(0===s||0===h){var r=t.getBoundingClientRect();0===s&&(s=Math.floor(r.width),s-=s%2),0===h&&(h=Math.floor(r.height),h-=h%2)}this.xw(s,h),this.Cw(),t.appendChild(this.Jd),this.Sw(),this.pi.bt().Pl().u(this.pi.Ce.bind(this.pi),this),this.pi.Pa().u(this.pi.Ce.bind(this.pi),this)}return t.prototype.jt=function(){return this.pi},t.prototype.W=function(){return this.zi},t.prototype.Tw=function(){return this._w},t.prototype.Dw=function(){return this.Nw},t.prototype.g=function(){this.Jd.removeEventListener("wheel",this.gw),0!==this.dw&&window.cancelAnimationFrame(this.dw),this.pi.Df().M(this),this.pi.bt().Pl().M(this),this.pi.Pa().M(this),this.pi.g();for(var t=0,i=this._w;t<i.length;t++){var n=i[t];this.pw.removeChild(n.B_()),n.Sd().M(this),n.g()}this._w=[],u(this.Nw).g(),null!==this.Jd.parentElement&&this.Jd.parentElement.removeChild(this.Jd),this.af.g(),this.Q_.g()},t.prototype.xw=function(t,i,n){if(void 0===n&&(n=!1),this.xu!==i||this.hh!==t){this.xu=i,this.hh=t;var s=i+"px",h=t+"px";u(this.Jd).style.height=s,u(this.Jd).style.width=h,this.pw.style.height=s,this.pw.style.width=h,n?this.Aw(new nt(3)):this.pi.Ce()}},t.prototype.R_=function(t){void 0===t&&(t=new nt(3));for(var i=0;i<this._w.length;i++)this._w[i].R_(t.wn(i).vn);this.zi.timeScale.visible&&this.Nw.R_(t.dn())},t.prototype.Pr=function(t){this.pi.Pr(t),this.Sw();var i=t.width||this.hh,n=t.height||this.xu;this.xw(i,n)},t.prototype.Sd=function(){return this.Q_},t.prototype.Df=function(){return this.af},t.prototype.Bw=function(){var t=this;null!==this.bw&&(this.Aw(this.bw),this.bw=null);var i=this._w[0],n=bn(document,new dn(this.hh,this.xu)),s=Mn(n),h=wn(n);return q(s,h,(function(){var n=0,h=0,r=function(i){for(var r=0;r<t._w.length;r++){var e=t._w[r],a=e.Ld().Ot,o=u("left"===i?e.Wd():e.zd()),l=o.Y_();s.drawImage(l,n,h,o.W_(),a),h+=a}};t.Lw()&&(r("left"),n=u(i.Wd()).W_()),h=0;for(var e=0;e<t._w.length;e++){var a=t._w[e],o=a.Ld(),l=a.Y_();s.drawImage(l,n,h,o.Ft,o.Ot),h+=o.Ot}n+=i.Ld().Ft,t.Ew()&&(h=0,r("right"));var f=function(i){var r=u("left"===i?t.Nw.nw():t.Nw.sw()),e=r.Ld(),a=r.Y_();s.drawImage(a,n,h,e.Ft,e.Ot)};if(t.zi.timeScale.visible){n=0,t.Lw()&&(f("left"),n=u(i.Wd()).W_());var c=t.Nw.Ld();l=t.Nw.Y_();s.drawImage(l,n,h,c.Ft,c.Ot),t.Ew()&&(n+=i.Ld().Ft,f("right"),s.restore())}})),n},t.prototype.Fw=function(t){return"none"===t?0:("left"!==t||this.Lw())&&("right"!==t||this.Ew())?0===this._w.length?0:u("left"===t?this._w[0].Wd():this._w[0].zd()).W_():0},t.prototype.Ow=function(){for(var t=0,i=0,n=0,s=0,h=this._w;s<h.length;s++){var r=h[s];this.Lw()&&(i=Math.max(i,u(r.Wd()).O_())),this.Ew()&&(n=Math.max(n,u(r.zd()).O_())),t+=r.Wa()}var e=this.hh,a=this.xu,o=Math.max(e-i-n,0),l=this.zi.timeScale.visible,f=l?this.Nw.ew():0;f%2&&(f+=1);for(var c=0+f,v=a<c?0:a-c,_=v/t,d=0,w=0;w<this._w.length;++w){(r=this._w[w]).wd(this.pi.Cf()[w]);var M,b=0;b=w===this._w.length-1?v-d:Math.round(r.Wa()*_),d+=M=Math.max(b,2),r.P_(new dn(o,M)),this.Lw()&&r.Bd(i,"left"),this.Ew()&&r.Bd(n,"right"),r.z_()&&this.pi.Af(r.z_(),M)}this.Nw.rw(new dn(l?o:0,f),l?i:0,l?n:0),this.pi.Ra(o),this.ww!==i&&(this.ww=i),this.Mw!==n&&(this.Mw=n)},t.prototype.yw=function(t){var i=t.deltaX/100,n=-t.deltaY/100;if(0!==i&&this.zi.handleScroll.mouseWheel||0!==n&&this.zi.handleScale.mouseWheel){switch(t.cancelable&&t.preventDefault(),t.deltaMode){case t.DOM_DELTA_PAGE:i*=120,n*=120;break;case t.DOM_DELTA_LINE:i*=32,n*=32}if(0!==n&&this.zi.handleScale.mouseWheel){var s=Math.sign(n)*Math.min(1,Math.abs(n)),h=t.clientX-this.Jd.getBoundingClientRect().left;this.jt().Ef(h,s)}0!==i&&this.zi.handleScroll.mouseWheel&&this.jt().Ff(-80*i)}},t.prototype.Aw=function(t){var i,n=t.dn();3===n&&this.Vw(),3!==n&&2!==n||(this.Pw(t),this.Ww(t),this.Nw.vt(),this._w.forEach((function(t){t.bd()})),3===(null===(i=this.bw)||void 0===i?void 0:i.dn())&&(this.bw.Nn(t),this.Vw(),this.Pw(this.bw),this.Ww(this.bw),t=this.bw,this.bw=null)),this.R_(t)},t.prototype.Ww=function(t){for(var i=0,n=t.kn();i<n.length;i++){var s=n[i];this.xn(s)}},t.prototype.Pw=function(t){for(var i=this.pi.Cf(),n=0;n<i.length;n++)t.wn(n)._n&&i[n].so()},t.prototype.xn=function(t){var i=this.pi.bt();switch(t.bn){case 0:i.zl();break;case 1:i.Rl(t.St);break;case 2:i.gn(t.St);break;case 3:i.yn(t.St);break;case 4:i.Tl()}},t.prototype.ff=function(t){var i=this;null!==this.bw?this.bw.Nn(t):this.bw=t,this.mw||(this.mw=!0,this.dw=window.requestAnimationFrame((function(){if(i.mw=!1,i.dw=0,null!==i.bw){var t=i.bw;i.bw=null,i.Aw(t)}})))},t.prototype.Vw=function(){this.Cw()},t.prototype.Cw=function(){for(var t=this.pi.Cf(),i=t.length,n=this._w.length,s=i;s<n;s++){var h=e(this._w.pop());this.pw.removeChild(h.B_()),h.Sd().M(this),h.g()}for(s=n;s<i;s++){(h=new zn(this,t[s])).Sd().u(this.zw.bind(this),this),this._w.push(h),this.pw.insertBefore(h.B_(),this.Nw.B_())}for(s=0;s<i;s++){var r=t[s];(h=this._w[s]).z_()!==r?h.wd(r):h.dd()}this.Sw(),this.Ow()},t.prototype.Rw=function(t,i){var n,s=new Map;null!==t&&this.pi._t().forEach((function(i){var n=i.er(t);null!==n&&s.set(i,n)}));if(null!==t){var h=this.pi.bt().gi(t);null!==h&&(n=h)}var r=this.jt().gf(),e=null!==r&&r.kf instanceof gi?r.kf:void 0,u=null!==r&&void 0!==r.yd?r.yd.Zh:void 0;return{rt:n,Iw:i||void 0,jw:e,qw:s,Uw:u}},t.prototype.zw=function(t,i){var n=this;this.Q_.m((function(){return n.Rw(t,i)}))},t.prototype.kw=function(t,i){var n=this;this.af.m((function(){return n.Rw(t,i)}))},t.prototype.Sw=function(){var t=this.zi.timeScale.visible?"":"none";this.Nw.B_().style.display=t},t.prototype.Lw=function(){return this._w[0].z_().Ya().W().visible},t.prototype.Ew=function(){return this._w[0].z_().$a().W().visible},t}();function Un(t,i,n){var s=n.value;return{vs:i,rt:t,St:[s,s,s,s]}}function Hn(t,i,n){var s=n.value,h={vs:i,rt:t,St:[s,s,s,s]};return"color"in n&&void 0!==n.color&&(h.A=n.color),h}function Yn(t){return void 0!==t.St}function $n(t){return function(i,n,s){return void 0===(h=s).open&&void 0===h.value?{rt:i,vs:n}:t(i,n,s);var h}}var Kn={Candlestick:$n((function(t,i,n){var s={vs:i,rt:t,St:[n.open,n.high,n.low,n.close]};return"color"in n&&void 0!==n.color&&(s.A=n.color),"borderColor"in n&&void 0!==n.borderColor&&(s.Tt=n.borderColor),"wickColor"in n&&void 0!==n.wickColor&&(s.qs=n.wickColor),s})),Bar:$n((function(t,i,n){var s={vs:i,rt:t,St:[n.open,n.high,n.low,n.close]};return"color"in n&&void 0!==n.color&&(s.A=n.color),s})),Area:$n(Un),Baseline:$n(Un),Histogram:$n(Hn),Line:$n(Hn)};function Xn(t){return Kn[t]}function Zn(t){return 60*t*60*1e3}function Jn(t){return 60*t*1e3}var Gn,Qn=[{Hw:(Gn=1,1e3*Gn),Po:10},{Hw:Jn(1),Po:20},{Hw:Jn(5),Po:21},{Hw:Jn(30),Po:22},{Hw:Zn(1),Po:30},{Hw:Zn(3),Po:31},{Hw:Zn(6),Po:32},{Hw:Zn(12),Po:33}];function ts(t,i){if(t.getUTCFullYear()!==i.getUTCFullYear())return 70;if(t.getUTCMonth()!==i.getUTCMonth())return 60;if(t.getUTCDate()!==i.getUTCDate())return 50;for(var n=Qn.length-1;n>=0;--n)if(Math.floor(i.getTime()/Qn[n].Hw)!==Math.floor(t.getTime()/Qn[n].Hw))return Qn[n].Po;return 0}function is(t,i){if(void 0===i&&(i=0),0!==t.length){for(var n=0===i?null:t[i-1].rt.So,s=null!==n?new Date(1e3*n):null,h=0,r=i;r<t.length;++r){var e=t[r],u=new Date(1e3*e.rt.So);null!==s&&(e.Vo=ts(u,s)),h+=e.rt.So-(n||e.rt.So),n=e.rt.So,s=u}if(0===i&&t.length>1){var a=Math.ceil(h/(t.length-1)),o=new Date(1e3*(t[0].rt.So-a));t[0].Vo=ts(new Date(1e3*t[0].rt.So),o)}}}function ns(t){if(!vn(t))throw new Error("time must be of type BusinessDay");var i=new Date(Date.UTC(t.year,t.month-1,t.day,0,0,0,0));return{So:Math.round(i.getTime()/1e3),Co:t}}function ss(t){if(!_n(t))throw new Error("time must be of type isUTCTimestamp");return{So:t}}function hs(t){return 0===t.length?null:vn(t[0].time)?ns:ss}function rs(t){return _n(t)?ss(t):vn(t)?ns(t):ns(es(t))}function es(t){var i=new Date(t);if(isNaN(i.getTime()))throw new Error("Invalid date string=".concat(t,", expected format=yyyy-mm-dd"));return{day:i.getUTCDate(),month:i.getUTCMonth()+1,year:i.getUTCFullYear()}}function us(t){C(t.time)&&(t.time=es(t.time))}function as(t){return{vs:0,Yw:new Map,Ve:t}}function os(t){if(void 0!==t&&0!==t.length)return{$w:t[0].rt.So,Kw:t[t.length-1].rt.So}}var ls=function(){function t(){this.Xw=new Map,this.Zw=new Map,this.Jw=new Map,this.Gw=[]}return t.prototype.g=function(){this.Xw.clear(),this.Zw.clear(),this.Jw.clear(),this.Gw=[]},t.prototype.Qw=function(t,i){var n=this,s=0!==this.Xw.size,h=!1,r=this.Zw.get(t);if(void 0!==r)if(1===this.Zw.size)s=!1,h=!0,this.Xw.clear();else for(var e=0,a=this.Gw;e<a.length;e++){a[e].pointData.Yw.delete(t)&&(h=!0)}var o=[];if(0!==i.length){!function(t){t.forEach(us)}(i);var l=u(hs(i)),f=Xn(t.Rr());o=i.map((function(i){var s=l(i.time),r=n.Xw.get(s.So);void 0===r&&(r=as(s),n.Xw.set(s.So,r),h=!0);var e=f(s,r.vs,i);return r.Yw.set(t,e),e}))}s&&this.tM(),this.iM(t,o);var c=-1;if(h){var v=[];this.Xw.forEach((function(t){v.push({Vo:0,rt:t.Ve,pointData:t})})),v.sort((function(t,i){return t.rt.So-i.rt.So})),c=this.nM(v)}return this.sM(t,c,function(t,i){var n=os(t),s=os(i);if(void 0!==n&&void 0!==s)return{Ae:n.Kw>=s.Kw&&n.$w>=s.$w}}(this.Zw.get(t),r))},t.prototype.Yf=function(t){return this.Qw(t,[])},t.prototype.hM=function(t,i){us(i);var n=u(hs([i]))(i.time),s=this.Jw.get(t);if(void 0!==s&&n.So<s.So)throw new Error("Cannot update oldest data, last time=".concat(s.So,", new time=").concat(n.So));var h=this.Xw.get(n.So),r=void 0===h;void 0===h&&(h=as(n),this.Xw.set(n.So,h));var e=Xn(t.Rr())(n,h.vs,i);h.Yw.set(t,e),this.rM(t,e);var a={Ae:Yn(e)};if(!r)return this.sM(t,-1,a);var o={Vo:0,rt:h.Ve,pointData:h},l=vt(this.Gw,o.rt.So,(function(t,i){return t.rt.So<i}));this.Gw.splice(l,0,o);for(var f=l;f<this.Gw.length;++f)fs(this.Gw[f].pointData,f);return is(this.Gw,l),this.sM(t,l,a)},t.prototype.rM=function(t,i){var n=this.Zw.get(t);void 0===n&&(n=[],this.Zw.set(t,n));var s=0!==n.length?n[n.length-1]:null;null===s||i.rt.So>s.rt.So?Yn(i)&&n.push(i):Yn(i)?n[n.length-1]=i:n.splice(-1,1),this.Jw.set(t,i.rt)},t.prototype.iM=function(t,i){0!==i.length?(this.Zw.set(t,i.filter(Yn)),this.Jw.set(t,i[i.length-1].rt)):(this.Zw.delete(t),this.Jw.delete(t))},t.prototype.tM=function(){for(var t=0,i=this.Gw;t<i.length;t++){var n=i[t];0===n.pointData.Yw.size&&this.Xw.delete(n.rt.So)}},t.prototype.nM=function(t){for(var i=-1,n=0;n<this.Gw.length&&n<t.length;++n){var s=this.Gw[n],h=t[n];if(s.rt.So!==h.rt.So){i=n;break}h.Vo=s.Vo,fs(h.pointData,n)}if(-1===i&&this.Gw.length!==t.length&&(i=Math.min(this.Gw.length,t.length)),-1===i)return-1;for(n=i;n<t.length;++n)fs(t[n].pointData,n);return is(t,i),this.Gw=t,i},t.prototype.eM=function(){if(0===this.Zw.size)return null;var t=0;return this.Zw.forEach((function(i){0!==i.length&&(t=Math.max(t,i[i.length-1].vs))})),t},t.prototype.sM=function(t,i,n){var s={uM:new Map,bt:{ml:this.eM()}};if(-1!==i)this.Zw.forEach((function(i,h){s.uM.set(h,{ph:i,aM:h===t?n:void 0})})),this.Zw.has(t)||s.uM.set(t,{ph:[],aM:n}),s.bt.oM=this.Gw,s.bt.lM=i;else{var h=this.Zw.get(t);s.uM.set(t,{ph:h||[],aM:n})}return s},t}();function fs(t,i){t.vs=i,t.Yw.forEach((function(t){t.vs=i}))}var cs={color:"#FF0000",price:0,lineStyle:2,lineWidth:1,lineVisible:!0,axisLabelVisible:!0,title:""},vs=function(){function t(t){this.Lr=t}return t.prototype.applyOptions=function(t){this.Lr.Pr(t)},t.prototype.options=function(){return this.Lr.W()},t.prototype.fM=function(){return this.Lr},t}();function _s(t){var i=t.overlay,n=function(t,i){var n={};for(var s in t)Object.prototype.hasOwnProperty.call(t,s)&&i.indexOf(s)<0&&(n[s]=t[s]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var h=0;for(s=Object.getOwnPropertySymbols(t);h<s.length;h++)i.indexOf(s[h])<0&&Object.prototype.propertyIsEnumerable.call(t,s[h])&&(n[s[h]]=t[s[h]])}return n}(t,["overlay"]);return i&&(n.priceScaleId=""),n}var ds=function(){function t(t,i,n){this.Kn=t,this.cM=i,this.vM=n}return t.prototype.priceFormatter=function(){return this.Kn.qe()},t.prototype.priceToCoordinate=function(t){var i=this.Kn.kt();return null===i?null:this.Kn.Ct().xt(t,i.St)},t.prototype.coordinateToPrice=function(t){var i=this.Kn.kt();return null===i?null:this.Kn.Ct().qi(t,i.St)},t.prototype.barsInLogicalRange=function(t){if(null===t)return null;var i=new nn(new Ji(t.from,t.to)).jo(),n=this.Kn.an();if(n.wi())return null;var s=n.ne(i.In(),1),h=n.ne(i.jn(),-1),r=u(n.Qr()),e=u(n.un());if(null!==s&&null!==h&&s.vs>h.vs)return{barsBefore:t.from-r,barsAfter:e-t.to};var a={barsBefore:null===s||s.vs===r?t.from-r:s.vs-r,barsAfter:null===h||h.vs===e?e-t.to:e-h.vs};return null!==s&&null!==h&&(a.from=s.rt.Co||s.rt.So,a.to=h.rt.Co||h.rt.So),a},t.prototype.setData=function(t){this.Kn.Rr(),this.cM._M(this.Kn,t)},t.prototype.update=function(t){this.Kn.Rr(),this.cM.dM(this.Kn,t)},t.prototype.setMarkers=function(t){var i=t.map((function(t){return p(p({},t),{time:rs(t.time)})}));this.Kn.Le(i)},t.prototype.applyOptions=function(t){var i=_s(t);this.Kn.Pr(i)},t.prototype.options=function(){return T(this.Kn.W())},t.prototype.priceScale=function(){return this.vM.priceScale(this.Kn.Ct().Ke())},t.prototype.createPriceLine=function(t){var i=k(T(cs),t),n=this.Kn.Ee(i);return new vs(n)},t.prototype.removePriceLine=function(t){this.Kn.Fe(t.fM())},t.prototype.seriesType=function(){return this.Kn.Rr()},t}(),ws=function(t){function i(){return null!==t&&t.apply(this,arguments)||this}return m(i,t),i.prototype.applyOptions=function(i){cn(i),t.prototype.applyOptions.call(this,i)},i}(ds),Ms={autoScale:!0,mode:0,invertScale:!1,alignLabels:!0,borderVisible:!0,borderColor:"#2B2B43",entireTextOnly:!1,visible:!1,drawTicks:!0,scaleMargins:{bottom:.1,top:.2}},bs={color:"rgba(0, 0, 0, 0)",visible:!1,fontSize:48,fontFamily:B,fontStyle:"",text:"",horzAlign:"center",vertAlign:"center"},ms={width:0,height:0,layout:{background:{type:"solid",color:"#FFFFFF"},textColor:"#191919",fontSize:11,fontFamily:B},crosshair:{vertLine:{color:"#758696",width:1,style:3,visible:!0,labelVisible:!0,labelBackgroundColor:"#4c525e"},horzLine:{color:"#758696",width:1,style:3,visible:!0,labelVisible:!0,labelBackgroundColor:"#4c525e"},mode:1},grid:{vertLines:{color:"#D6DCDE",style:0,visible:!0},horzLines:{color:"#D6DCDE",style:0,visible:!0}},overlayPriceScales:p({},Ms),leftPriceScale:p(p({},Ms),{visible:!1}),rightPriceScale:p(p({},Ms),{visible:!0}),timeScale:{rightOffset:0,barSpacing:6,minBarSpacing:.5,fixLeftEdge:!1,fixRightEdge:!1,lockVisibleTimeRangeOnResize:!1,rightBarStaysOnScroll:!1,borderVisible:!0,borderColor:"#2B2B43",visible:!0,timeVisible:!1,secondsVisible:!0,shiftVisibleRangeOnNewBar:!0},watermark:bs,localization:{locale:kn?navigator.language:"",dateFormat:"dd MMM 'yy"},handleScroll:{mouseWheel:!0,pressedMouseMove:!0,horzTouchDrag:!0,vertTouchDrag:!0},handleScale:{axisPressedMouseMove:{time:!0,price:!0},axisDoubleClickReset:!0,mouseWheel:!0,pinch:!0},kineticScroll:{mouse:!1,touch:!0},trackingMode:{exitMode:1}},ps={upColor:"#26a69a",downColor:"#ef5350",wickVisible:!0,borderVisible:!0,borderColor:"#378658",borderUpColor:"#26a69a",borderDownColor:"#ef5350",wickColor:"#737375",wickUpColor:"#26a69a",wickDownColor:"#ef5350"},gs={upColor:"#26a69a",downColor:"#ef5350",openVisible:!0,thinBars:!0},ys={color:"#2196f3",lineStyle:0,lineWidth:3,lineType:0,crosshairMarkerVisible:!0,crosshairMarkerRadius:4,crosshairMarkerBorderColor:"",crosshairMarkerBackgroundColor:"",lastPriceAnimation:0},ks={topColor:"rgba( 46, 220, 135, 0.4)",bottomColor:"rgba( 40, 221, 100, 0)",lineColor:"#33D778",lineStyle:0,lineWidth:3,lineType:0,crosshairMarkerVisible:!0,crosshairMarkerRadius:4,crosshairMarkerBorderColor:"",crosshairMarkerBackgroundColor:"",lastPriceAnimation:0},Ns={baseValue:{type:"price",price:0},topFillColor1:"rgba(38, 166, 154, 0.28)",topFillColor2:"rgba(38, 166, 154, 0.05)",topLineColor:"rgba(38, 166, 154, 1)",bottomFillColor1:"rgba(239, 83, 80, 0.05)",bottomFillColor2:"rgba(239, 83, 80, 0.28)",bottomLineColor:"rgba(239, 83, 80, 1)",lineWidth:3,lineStyle:0,crosshairMarkerVisible:!0,crosshairMarkerRadius:4,crosshairMarkerBorderColor:"",crosshairMarkerBackgroundColor:"",lastPriceAnimation:0},xs={color:"#26a69a",base:0},Cs={title:"",visible:!0,lastValueVisible:!0,priceLineVisible:!0,priceLineSource:0,priceLineWidth:1,priceLineColor:"",priceLineStyle:2,baseLineVisible:!0,baseLineWidth:1,baseLineColor:"#B2B5BE",baseLineStyle:0,priceFormat:{type:"price",precision:2,minMove:.01}},Ss=function(){function t(t,i){this.wM=t,this.MM=i}return t.prototype.applyOptions=function(t){this.wM.jt().Nf(this.MM,t)},t.prototype.options=function(){return this._i().W()},t.prototype.width=function(){return it(this.MM)?this.wM.Fw("left"===this.MM?"left":"right"):0},t.prototype._i=function(){return u(this.wM.jt().xf(this.MM)).Ct},t}(),Ts=function(){function t(t,i){this.bM=new y,this.Go=new y,this.Zd=new y,this.pi=t,this.Da=t.bt(),this.Nw=i,this.Da.Ol().u(this.mM.bind(this)),this.Da.Vl().u(this.pM.bind(this)),this.Nw.hw().u(this.gM.bind(this))}return t.prototype.g=function(){this.Da.Ol().M(this),this.Da.Vl().M(this),this.Nw.hw().M(this),this.bM.g(),this.Go.g(),this.Zd.g()},t.prototype.scrollPosition=function(){return this.Da.Nl()},t.prototype.scrollToPosition=function(t,i){i?this.Da.Fl(t,1e3):this.pi.yn(t)},t.prototype.scrollToRealTime=function(){this.Da.El()},t.prototype.getVisibleRange=function(){var t,i,n=this.Da.cl();return null===n?null:{from:null!==(t=n.from.Co)&&void 0!==t?t:n.from.So,to:null!==(i=n.to.Co)&&void 0!==i?i:n.to.So}},t.prototype.setVisibleRange=function(t){var i={from:rs(t.from),to:rs(t.to)},n=this.Da.wl(i);this.pi.$f(n)},t.prototype.getVisibleLogicalRange=function(){var t=this.Da.fl();return null===t?null:{from:t.In(),to:t.jn()}},t.prototype.setVisibleLogicalRange=function(t){r(t.from<=t.to,"The from index cannot be after the to index."),this.pi.$f(t)},t.prototype.resetTimeScale=function(){this.pi.pn()},t.prototype.fitContent=function(){this.pi.zl()},t.prototype.logicalToCoordinate=function(t){var i=this.pi.bt();return i.wi()?null:i.At(t)},t.prototype.coordinateToLogical=function(t){return this.Da.wi()?null:this.Da.pl(t)},t.prototype.timeToCoordinate=function(t){var i=rs(t),n=this.Da.Ze(i,!1);return null===n?null:this.Da.At(n)},t.prototype.coordinateToTime=function(t){var i,n=this.pi.bt(),s=n.pl(t),h=n.gi(s);return null===h?null:null!==(i=h.Co)&&void 0!==i?i:h.So},t.prototype.width=function(){return this.Nw.Ld().Ft},t.prototype.height=function(){return this.Nw.Ld().Ot},t.prototype.subscribeVisibleTimeRangeChange=function(t){this.bM.u(t)},t.prototype.unsubscribeVisibleTimeRangeChange=function(t){this.bM._(t)},t.prototype.subscribeVisibleLogicalRangeChange=function(t){this.Go.u(t)},t.prototype.unsubscribeVisibleLogicalRangeChange=function(t){this.Go._(t)},t.prototype.subscribeSizeChange=function(t){this.Zd.u(t)},t.prototype.unsubscribeSizeChange=function(t){this.Zd._(t)},t.prototype.applyOptions=function(t){this.Da.Pr(t)},t.prototype.options=function(){return T(this.Da.W())},t.prototype.mM=function(){this.bM.p()&&this.bM.m(this.getVisibleRange())},t.prototype.pM=function(){this.Go.p()&&this.Go.m(this.getVisibleLogicalRange())},t.prototype.gM=function(t){this.Zd.m(t.Ft,t.Ot)},t}();function Ds(t){if(void 0!==t&&"custom"!==t.type){var i=t;void 0!==i.minMove&&void 0===i.precision&&(i.precision=function(t){if(t>=1)return 0;for(var i=0;i<8;i++){var n=Math.round(t);if(Math.abs(n-t)<1e-8)return i;t*=10}return i}(i.minMove))}}function As(t){return function(t){if(S(t.handleScale)){var i=t.handleScale;t.handleScale={axisDoubleClickReset:i,axisPressedMouseMove:{time:i,price:i},mouseWheel:i,pinch:i}}else if(void 0!==t.handleScale&&S(t.handleScale.axisPressedMouseMove)){var n=t.handleScale.axisPressedMouseMove;t.handleScale.axisPressedMouseMove={time:n,price:n}}var s=t.handleScroll;S(s)&&(t.handleScroll={horzTouchDrag:s,vertTouchDrag:s,mouseWheel:s,pressedMouseMove:s})}(t),function(t){if(t.priceScale){t.leftPriceScale=t.leftPriceScale||{},t.rightPriceScale=t.rightPriceScale||{};var i=t.priceScale.position;delete t.priceScale.position,t.leftPriceScale=k(t.leftPriceScale,t.priceScale),t.rightPriceScale=k(t.rightPriceScale,t.priceScale),"left"===i&&(t.leftPriceScale.visible=!0,t.rightPriceScale.visible=!1),"right"===i&&(t.leftPriceScale.visible=!1,t.rightPriceScale.visible=!0),"none"===i&&(t.leftPriceScale.visible=!1,t.rightPriceScale.visible=!1),t.overlayPriceScales=t.overlayPriceScales||{},void 0!==t.priceScale.invertScale&&(t.overlayPriceScales.invertScale=t.priceScale.invertScale),void 0!==t.priceScale.scaleMargins&&(t.overlayPriceScales.scaleMargins=t.priceScale.scaleMargins)}}(t),function(t){t.layout&&t.layout.backgroundColor&&!t.layout.background&&(t.layout.background={type:"solid",color:t.layout.backgroundColor})}(t),t}var Bs=function(){function t(t,i){var n=this;this.yM=new ls,this.kM=new Map,this.NM=new Map,this.xM=new y,this.CM=new y;var s=void 0===i?T(ms):k(T(ms),As(i));this.wM=new qn(t,s),this.wM.Sd().u((function(t){n.xM.p()&&n.xM.m(n.SM(t()))}),this),this.wM.Df().u((function(t){n.CM.p()&&n.CM.m(n.SM(t()))}),this);var h=this.wM.jt();this.TM=new Ts(h,this.wM.Dw())}return t.prototype.remove=function(){this.wM.Sd().M(this),this.wM.Df().M(this),this.TM.g(),this.wM.g(),this.kM.clear(),this.NM.clear(),this.xM.g(),this.CM.g(),this.yM.g()},t.prototype.resize=function(t,i,n){this.wM.xw(t,i,n)},t.prototype.addAreaSeries=function(t){void 0===t&&(t={}),Ds((t=_s(t)).priceFormat);var i=k(T(Cs),ks,t),n=this.wM.jt().Uf("Area",i),s=new ds(n,this,this);return this.kM.set(s,n),this.NM.set(n,s),s},t.prototype.addBaselineSeries=function(t){void 0===t&&(t={}),Ds((t=_s(t)).priceFormat);var i=k(T(Cs),T(Ns),t),n=this.wM.jt().Uf("Baseline",i),s=new ds(n,this,this);return this.kM.set(s,n),this.NM.set(n,s),s},t.prototype.addBarSeries=function(t){void 0===t&&(t={}),Ds((t=_s(t)).priceFormat);var i=k(T(Cs),gs,t),n=this.wM.jt().Uf("Bar",i),s=new ds(n,this,this);return this.kM.set(s,n),this.NM.set(n,s),s},t.prototype.addCandlestickSeries=function(t){void 0===t&&(t={}),cn(t=_s(t)),Ds(t.priceFormat);var i=k(T(Cs),ps,t),n=this.wM.jt().Uf("Candlestick",i),s=new ws(n,this,this);return this.kM.set(s,n),this.NM.set(n,s),s},t.prototype.addHistogramSeries=function(t){void 0===t&&(t={}),Ds((t=_s(t)).priceFormat);var i=k(T(Cs),xs,t),n=this.wM.jt().Uf("Histogram",i),s=new ds(n,this,this);return this.kM.set(s,n),this.NM.set(n,s),s},t.prototype.addLineSeries=function(t){void 0===t&&(t={}),Ds((t=_s(t)).priceFormat);var i=k(T(Cs),ys,t),n=this.wM.jt().Uf("Line",i),s=new ds(n,this,this);return this.kM.set(s,n),this.NM.set(n,s),s},t.prototype.removeSeries=function(t){var i=e(this.kM.get(t)),n=this.yM.Yf(i);this.wM.jt().Yf(i),this.DM(n),this.kM.delete(t),this.NM.delete(i)},t.prototype._M=function(t,i){this.DM(this.yM.Qw(t,i))},t.prototype.dM=function(t,i){this.DM(this.yM.hM(t,i))},t.prototype.subscribeClick=function(t){this.xM.u(t)},t.prototype.unsubscribeClick=function(t){this.xM._(t)},t.prototype.subscribeCrosshairMove=function(t){this.CM.u(t)},t.prototype.unsubscribeCrosshairMove=function(t){this.CM._(t)},t.prototype.priceScale=function(t){return void 0===t&&(t=this.wM.jt().Kf()),new Ss(this.wM,t)},t.prototype.timeScale=function(){return this.TM},t.prototype.applyOptions=function(t){this.wM.Pr(As(t))},t.prototype.options=function(){return this.wM.W()},t.prototype.takeScreenshot=function(){return this.wM.Bw()},t.prototype.DM=function(t){var i=this.wM.jt();i.jf(t.bt.ml,t.bt.oM,t.bt.lM),t.uM.forEach((function(t,i){return i.Z(t.ph,t.aM)})),i.yl()},t.prototype.AM=function(t){return e(this.NM.get(t))},t.prototype.SM=function(t){var i=this,n=new Map;t.qw.forEach((function(t,s){n.set(i.AM(s),t)}));var s=void 0===t.jw?void 0:this.AM(t.jw);return{time:t.rt&&(t.rt.Co||t.rt.So),point:t.Iw,hoveredSeries:s,hoveredMarkerId:t.Uw,seriesPrices:n}},t}();function Ls(t,i){var n;if(C(t)){var s=document.getElementById(t);r(null!==s,"Cannot find element in DOM with id=".concat(t)),n=s}else n=t;return new Bs(n,i)}function Es(){return"3.8.0"}export{ln as ColorType,Y as CrosshairMode,an as LasPriceAnimationMode,an as LastPriceAnimationMode,n as LineStyle,i as LineType,on as PriceLineSource,Vi as PriceScaleMode,Qi as TickMarkType,hn as TrackingModeExitMode,Ls as createChart,vn as isBusinessDay,_n as isUTCTimestamp,Es as version};
+import{bindToDevicePixelRatio as t}from"fancy-canvas/coordinate-space";var i,s;function n(t,i){const s={0:[],1:[t.lineWidth,t.lineWidth],2:[2*t.lineWidth,2*t.lineWidth],3:[6*t.lineWidth,6*t.lineWidth],4:[t.lineWidth,4*t.lineWidth]}[i];t.setLineDash(s)}function e(t,i,s,n){t.beginPath();const e=t.lineWidth%2?.5:0;t.moveTo(s,i+e),t.lineTo(n,i+e),t.stroke()}function r(t,i){if(!t)throw new Error("Assertion failed"+(i?": "+i:""))}function h(t){if(void 0===t)throw new Error("Value is undefined");return t}function l(t){if(null===t)throw new Error("Value is null");return t}function a(t){return l(h(t))}!function(t){t[t.Simple=0]="Simple",t[t.WithSteps=1]="WithSteps",t[t.Curved=2]="Curved"}(i||(i={})),function(t){t[t.Solid=0]="Solid",t[t.Dotted=1]="Dotted",t[t.Dashed=2]="Dashed",t[t.LargeDashed=3]="LargeDashed",t[t.SparseDotted=4]="SparseDotted"}(s||(s={}));const o={khaki:"#f0e68c",azure:"#f0ffff",aliceblue:"#f0f8ff",ghostwhite:"#f8f8ff",gold:"#ffd700",goldenrod:"#daa520",gainsboro:"#dcdcdc",gray:"#808080",green:"#008000",honeydew:"#f0fff0",floralwhite:"#fffaf0",lightblue:"#add8e6",lightcoral:"#f08080",lemonchiffon:"#fffacd",hotpink:"#ff69b4",lightyellow:"#ffffe0",greenyellow:"#adff2f",lightgoldenrodyellow:"#fafad2",limegreen:"#32cd32",linen:"#faf0e6",lightcyan:"#e0ffff",magenta:"#f0f",maroon:"#800000",olive:"#808000",orange:"#ffa500",oldlace:"#fdf5e6",mediumblue:"#0000cd",transparent:"#0000",lime:"#0f0",lightpink:"#ffb6c1",mistyrose:"#ffe4e1",moccasin:"#ffe4b5",midnightblue:"#191970",orchid:"#da70d6",mediumorchid:"#ba55d3",mediumturquoise:"#48d1cc",orangered:"#ff4500",royalblue:"#4169e1",powderblue:"#b0e0e6",red:"#f00",coral:"#ff7f50",turquoise:"#40e0d0",white:"#fff",whitesmoke:"#f5f5f5",wheat:"#f5deb3",teal:"#008080",steelblue:"#4682b4",bisque:"#ffe4c4",aquamarine:"#7fffd4",aqua:"#0ff",sienna:"#a0522d",silver:"#c0c0c0",springgreen:"#00ff7f",antiquewhite:"#faebd7",burlywood:"#deb887",brown:"#a52a2a",beige:"#f5f5dc",chocolate:"#d2691e",chartreuse:"#7fff00",cornflowerblue:"#6495ed",cornsilk:"#fff8dc",crimson:"#dc143c",cadetblue:"#5f9ea0",tomato:"#ff6347",fuchsia:"#f0f",blue:"#00f",salmon:"#fa8072",blanchedalmond:"#ffebcd",slateblue:"#6a5acd",slategray:"#708090",thistle:"#d8bfd8",tan:"#d2b48c",cyan:"#0ff",darkblue:"#00008b",darkcyan:"#008b8b",darkgoldenrod:"#b8860b",darkgray:"#a9a9a9",blueviolet:"#8a2be2",black:"#000",darkmagenta:"#8b008b",darkslateblue:"#483d8b",darkkhaki:"#bdb76b",darkorchid:"#9932cc",darkorange:"#ff8c00",darkgreen:"#006400",darkred:"#8b0000",dodgerblue:"#1e90ff",darkslategray:"#2f4f4f",dimgray:"#696969",deepskyblue:"#00bfff",firebrick:"#b22222",forestgreen:"#228b22",indigo:"#4b0082",ivory:"#fffff0",lavenderblush:"#fff0f5",feldspar:"#d19275",indianred:"#cd5c5c",lightgreen:"#90ee90",lightgrey:"#d3d3d3",lightskyblue:"#87cefa",lightslategray:"#789",lightslateblue:"#8470ff",snow:"#fffafa",lightseagreen:"#20b2aa",lightsalmon:"#ffa07a",darksalmon:"#e9967a",darkviolet:"#9400d3",mediumpurple:"#9370d8",mediumaquamarine:"#66cdaa",skyblue:"#87ceeb",lavender:"#e6e6fa",lightsteelblue:"#b0c4de",mediumvioletred:"#c71585",mintcream:"#f5fffa",navajowhite:"#ffdead",navy:"#000080",olivedrab:"#6b8e23",palevioletred:"#d87093",violetred:"#d02090",yellow:"#ff0",yellowgreen:"#9acd32",lawngreen:"#7cfc00",pink:"#ffc0cb",paleturquoise:"#afeeee",palegoldenrod:"#eee8aa",darkolivegreen:"#556b2f",darkseagreen:"#8fbc8f",darkturquoise:"#00ced1",peachpuff:"#ffdab9",deeppink:"#ff1493",violet:"#ee82ee",palegreen:"#98fb98",mediumseagreen:"#3cb371",peru:"#cd853f",saddlebrown:"#8b4513",sandybrown:"#f4a460",rosybrown:"#bc8f8f",purple:"#800080",seagreen:"#2e8b57",seashell:"#fff5ee",papayawhip:"#ffefd5",mediumslateblue:"#7b68ee",plum:"#dda0dd",mediumspringgreen:"#00fa9a"};function _(t){return t<0?0:t>255?255:Math.round(t)||0}function u(t){return t<=0||t>0?t<0?0:t>1?1:Math.round(1e4*t)/1e4:0}const c=/^#([0-9a-f])([0-9a-f])([0-9a-f])([0-9a-f])?$/i,d=/^#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})?$/i,f=/^rgb\(\s*(-?\d{1,10})\s*,\s*(-?\d{1,10})\s*,\s*(-?\d{1,10})\s*\)$/,p=/^rgba\(\s*(-?\d{1,10})\s*,\s*(-?\d{1,10})\s*,\s*(-?\d{1,10})\s*,\s*(-?[\d]{0,10}(?:\.\d+)?)\s*\)$/;function v(t){(t=t.toLowerCase())in o&&(t=o[t]);{const i=p.exec(t)||f.exec(t);if(i)return[_(parseInt(i[1],10)),_(parseInt(i[2],10)),_(parseInt(i[3],10)),u(i.length<5?1:parseFloat(i[4]))]}{const i=d.exec(t);if(i)return[_(parseInt(i[1],16)),_(parseInt(i[2],16)),_(parseInt(i[3],16)),1]}{const i=c.exec(t);if(i)return[_(17*parseInt(i[1],16)),_(17*parseInt(i[2],16)),_(17*parseInt(i[3],16)),1]}throw new Error(`Cannot parse color: ${t}`)}function m(t){const i=v(t);return{t:`rgb(${i[0]}, ${i[1]}, ${i[2]})`,i:(s=i,.199*s[0]+.687*s[1]+.114*s[2]>160?"black":"white")};var s}class b{constructor(){this.h=[]}l(t,i,s){const n={o:t,_:i,u:!0===s};this.h.push(n)}p(t){const i=this.h.findIndex((i=>t===i.o));i>-1&&this.h.splice(i,1)}v(t){this.h=this.h.filter((i=>i._!==t))}m(t,i){const s=[...this.h];this.h=this.h.filter((t=>!t.u)),s.forEach((s=>s.o(t,i)))}g(){return this.h.length>0}M(){this.h=[]}}function w(t,...i){for(const s of i)for(const i in s)void 0!==s[i]&&("object"!=typeof s[i]||void 0===t[i]?t[i]=s[i]:w(t[i],s[i]));return t}function g(t){return"number"==typeof t&&isFinite(t)}function M(t){return"number"==typeof t&&t%1==0}function S(t){return"string"==typeof t}function y(t){return"boolean"==typeof t}function k(t){const i=t;if(!i||"object"!=typeof i)return i;let s,n,e;for(n in s=Array.isArray(i)?[]:{},i)i.hasOwnProperty(n)&&(e=i[n],s[n]=e&&"object"==typeof e?k(e):e);return s}function C(t){return null!==t}function x(t){return null===t?void 0:t}const T="'Trebuchet MS', Roboto, Ubuntu, sans-serif";function D(t,i,s){return void 0===i&&(i=T),`${s=void 0!==s?`${s} `:""}${t}px ${i}`}class P{constructor(t){this.S={k:1,C:5,T:NaN,D:"",P:"",R:"",A:"",L:0,O:0,B:0,I:0,V:0},this.N=t}F(){const t=this.S,i=this.W(),s=this.j();return t.T===i&&t.P===s||(t.T=i,t.P=s,t.D=D(i,s),t.I=2.5/12*i,t.L=t.I,t.O=i/12*t.C,t.B=i/12*t.C,t.V=0),t.R=this.$(),t.A=this.H(),this.S}$(){return this.N.F().layout.textColor}H(){return this.N.U()}W(){return this.N.F().layout.fontSize}j(){return this.N.F().layout.fontFamily}}class R{constructor(){this.q=[]}Y(t){this.q=t}X(t,i,s,n){this.q.forEach((e=>{t.save(),e.X(t,i,s,n),t.restore()}))}}class A{X(t,i,s,n){t.save(),t.scale(i,i),this.Z(t,s,n),t.restore()}K(t,i,s,n){t.save(),t.scale(i,i),this.G(t,s,n),t.restore()}G(t,i,s){}}class L extends A{constructor(){super(...arguments),this.J=null}tt(t){this.J=t}Z(t){if(null===this.J||null===this.J.it)return;const i=this.J.it,s=this.J,n=n=>{t.beginPath();for(let e=i.to-1;e>=i.from;--e){const i=s.st[e];t.moveTo(i.nt,i.et),t.arc(i.nt,i.et,n,0,2*Math.PI)}t.fill()};s.rt>0&&(t.fillStyle=s.ht,n(s.lt+s.rt)),t.fillStyle=s.ot,n(s.lt)}}function O(){return{st:[{nt:0,et:0,_t:0,ut:0}],ot:"",ht:"",lt:0,rt:0,it:null}}const B={from:0,to:1};class E{constructor(t,i){this.ct=new R,this.dt=[],this.ft=[],this.vt=!0,this.N=t,this.bt=i,this.ct.Y(this.dt)}wt(t){const i=this.N.gt();i.length!==this.dt.length&&(this.ft=i.map(O),this.dt=this.ft.map((t=>{const i=new L;return i.tt(t),i})),this.ct.Y(this.dt)),this.vt=!0}Mt(t,i,s){return this.vt&&(this.St(t),this.vt=!1),this.ct}St(t){const i=this.N.gt(),s=this.bt.yt(),n=this.N.kt();i.forEach(((i,e)=>{var r;const h=this.ft[e],a=i.Ct(s);if(null===a||!i.xt())return void(h.it=null);const o=l(i.Tt());h.ot=a.Dt,h.lt=a.lt,h.rt=a.Pt,h.st[0].ut=a.ut,h.st[0].et=i.At().Rt(a.ut,o.Lt),h.ht=null!==(r=a.Ot)&&void 0!==r?r:this.N.Bt(h.st[0].et/t),h.st[0]._t=s,h.st[0].nt=n.Et(s),h.it=B}))}}class I{constructor(t){this.It=t}X(t,i,s,r){if(null===this.It)return;const h=this.It.Vt.xt,l=this.It.Nt.xt;if(!h&&!l)return;t.save();const a=Math.round(this.It.nt*i),o=Math.round(this.It.et*i),_=Math.ceil(this.It.Ft*i),u=Math.ceil(this.It.Wt*i);t.lineCap="butt",h&&a>=0&&(t.lineWidth=Math.floor(this.It.Vt.rt*i),t.strokeStyle=this.It.Vt.R,t.fillStyle=this.It.Vt.R,n(t,this.It.Vt.zt),function(t,i,s,n){t.beginPath();const e=t.lineWidth%2?.5:0;t.moveTo(i+e,s),t.lineTo(i+e,n),t.stroke()}(t,a,0,u)),l&&o>=0&&(t.lineWidth=Math.floor(this.It.Nt.rt*i),t.strokeStyle=this.It.Nt.R,t.fillStyle=this.It.Nt.R,n(t,this.It.Nt.zt),e(t,o,0,_)),t.restore()}}class V{constructor(t){this.vt=!0,this.jt={Vt:{rt:1,zt:0,R:"",xt:!1},Nt:{rt:1,zt:0,R:"",xt:!1},Ft:0,Wt:0,nt:0,et:0},this.$t=new I(this.jt),this.Ht=t}wt(){this.vt=!0}Mt(t,i){return this.vt&&(this.St(),this.vt=!1),this.$t}St(){const t=this.Ht.xt(),i=l(this.Ht.Ut()),s=i.qt().F().crosshair,n=this.jt;n.Nt.xt=t&&this.Ht.Yt(i),n.Vt.xt=t&&this.Ht.Xt(),n.Nt.rt=s.horzLine.width,n.Nt.zt=s.horzLine.style,n.Nt.R=s.horzLine.color,n.Vt.rt=s.vertLine.width,n.Vt.zt=s.vertLine.style,n.Vt.R=s.vertLine.color,n.Ft=i.Zt(),n.Wt=i.Kt(),n.nt=this.Ht.Gt(),n.et=this.Ht.Jt()}}function N(t,i,s,n,e,r){t.fillRect(i+r,s,n-2*r,r),t.fillRect(i+r,s+e-r,n-2*r,r),t.fillRect(i,s,r,e),t.fillRect(i+n-r,s,r,e)}function F(t,i,s){t.save(),t.scale(i,i),s(),t.restore()}function W(t,i,s,n,e,r){t.save(),t.globalCompositeOperation="copy",t.fillStyle=r,t.fillRect(i,s,n,e),t.restore()}function z(t,i){return Array.isArray(t)?t.map((t=>0===t?t:t+i)):t+i}function j(t,i,s,n,e,r){let h,l,a,o;if(Array.isArray(r))if(2===r.length){const t=Math.max(0,r[0]),i=Math.max(0,r[1]);h=t,l=t,a=i,o=i}else{if(4!==r.length)throw new Error("Wrong border radius - it should be like css border radius");h=Math.max(0,r[0]),l=Math.max(0,r[1]),a=Math.max(0,r[2]),o=Math.max(0,r[3])}else{const t=Math.max(0,r);h=t,l=t,a=t,o=t}t.beginPath(),t.moveTo(i+h,s),t.lineTo(i+n-l,s),0!==l&&t.arcTo(i+n,s,i+n,s+l,l),t.lineTo(i+n,s+e-a),0!==a&&t.arcTo(i+n,s+e,i+n-a,s+e,a),t.lineTo(i+o,s+e),0!==o&&t.arcTo(i,s+e,i,s+e-o,o),t.lineTo(i,s+h),0!==h&&t.arcTo(i,s,i+h,s,h)}function $(t,i,s,n,e,r,h=0,l=0,a=""){if(t.save(),!h||!a||a===r)return j(t,i,s,n,e,l),t.fillStyle=r,t.fill(),void t.restore();const o=h/2;if("transparent"!==r){j(t,i+h,s+h,n-2*h,e-2*h,z(l,-h)),t.fillStyle=r,t.fill()}if("transparent"!==a){j(t,i+o,s+o,n-h,e-h,z(l,-o)),t.lineWidth=h,t.strokeStyle=a,t.closePath(),t.stroke()}}function H(t,i,s,n,e,r,h){t.save(),t.globalCompositeOperation="copy";const l=t.createLinearGradient(0,0,0,e);l.addColorStop(0,r),l.addColorStop(1,h),t.fillStyle=l,t.fillRect(i,s,n,e),t.restore()}class U{constructor(t,i){this.tt(t,i)}tt(t,i){this.It=t,this.Qt=i}X(t,i,s,n,e,r){if(!this.It.xt)return;t.font=i.D;const h=this.ti(t,i,s,n,e,r),l=this.It.R||this.Qt.R,a=this.Qt.t;if(t.fillStyle=this.Qt.t,this.It.ii){const s=(i,s)=>{h.si?$(t,h.ni,h.ei,h.ri,h.hi,i,h.li,[h.lt,0,0,h.lt],s):$(t,h.ai,h.ei,h.ri,h.hi,i,h.li,[0,h.lt,h.lt,0],s)};s(a,"transparent"),this.It.oi&&(t.fillStyle=l,t.fillRect(h.ai,h._i,h.ui-h.ai,h.ci)),s("transparent",a),this.It.di&&(t.fillStyle=i.A,t.fillRect(h.si?h.fi-h.li:0,h.ei,h.li,h.pi-h.ei)),t.save(),t.translate(h.vi,(h.ei+h.pi)/2+h.mi),F(t,r,(()=>{t.fillStyle=l,t.fillText(this.It.ii,0,0)})),t.restore()}}Kt(t,i){return this.It.xt?t.T+t.I+t.L:0}ti(t,i,s,n,e,r){const h=this.It.oi||!this.It.bi?i.C:0,l=i.k,a=i.I+this.Qt.wi,o=i.L+this.Qt.gi,_=i.O,u=i.B,c=this.It.ii,d=i.T,f=s.Mi(t,c)*r,p=d+a+o,v=l+_+u+Math.ceil(s.Si(t,c))+h,m=Math.max(1,Math.floor(r));let b=Math.round(p*r);b%2!=m%2&&(b+=1);const w=this.It.yi?Math.max(1,Math.floor(l*r)):0,g=Math.round(v*r),M=Math.round(h*r),S=Math.ceil(n*r),y=Math.ceil(_*r);let k=this.Qt.ki;this.Qt.Ci&&(k=this.Qt.Ci),k=Math.round(k*r)-Math.floor(.5*r);const C=Math.floor(k+m/2-b/2),x=C+b,T="right"===e,D=T?S-w:w,P=S;let R,A,L=D;const O=2*r;return t.textAlign=T?"right":"left",t.textBaseline="middle",T?(L=D-g,R=D-M,A=D-M-y-1):(L=D+g,R=D+M,A=D+M+y),{si:T,ei:C,_i:k,pi:x,ri:g,hi:b,lt:O,li:w,ni:L,ai:D,ui:R,vi:A,ci:m,fi:P,mi:f}}}class q{constructor(t){this.xi={ki:0,R:"#FFF",t:"#000",gi:0,wi:0},this.Ti={ii:"",xt:!1,oi:!0,bi:!1,Ot:"",R:"#FFF",di:!1,yi:!1},this.Di={ii:"",xt:!1,oi:!1,bi:!0,Ot:"",R:"#FFF",di:!0,yi:!0},this.vt=!0,this.Pi=new(t||U)(this.Ti,this.xi),this.Ri=new(t||U)(this.Di,this.xi)}ii(){return this.Ai(),this.Ti.ii}ki(){return this.Ai(),this.xi.ki}wt(){this.vt=!0}Kt(t,i=!1){return Math.max(this.Pi.Kt(t,i),this.Ri.Kt(t,i))}Li(){return this.xi.Ci||0}Oi(t){this.xi.Ci=t}Bi(){return this.Ai(),this.Ti.xt||this.Di.xt}Ei(){return this.Ai(),this.Ti.xt}Mt(t){return this.Ai(),this.Ti.oi=this.Ti.oi&&t.F().ticksVisible,this.Di.oi=this.Di.oi&&t.F().ticksVisible,this.Pi.tt(this.Ti,this.xi),this.Ri.tt(this.Di,this.xi),this.Pi}Ii(){return this.Ai(),this.Pi.tt(this.Ti,this.xi),this.Ri.tt(this.Di,this.xi),this.Ri}Ai(){this.vt&&(this.Ti.oi=!0,this.Di.oi=!1,this.Vi(this.Ti,this.Di,this.xi))}}class Y extends q{constructor(t,i,s){super(),this.Ht=t,this.Ni=i,this.Fi=s}Vi(t,i,s){t.xt=!1;const n=this.Ht.F().horzLine;if(!n.labelVisible)return;const e=this.Ni.Tt();if(!this.Ht.xt()||this.Ni.Wi()||null===e)return;const r=m(n.labelBackgroundColor);s.t=r.t,s.R=r.i;const h=2/12*this.Ni.T();s.wi=h,s.gi=h;const l=this.Fi(this.Ni);s.ki=l.ki,t.ii=this.Ni.zi(l.ut,e),t.xt=!0}}const X=/[1-9]/g;class Z{constructor(){this.It=null}tt(t){this.It=t}X(t,i,s){if(null===this.It||!1===this.It.xt||0===this.It.ii.length)return;t.font=i.D;const n=Math.round(i.ji.Si(t,this.It.ii,X));if(n<=0)return;t.save();const e=i.$i,r=n+2*e,h=r/2,a=this.It.Zt;let o=this.It.ki,_=Math.floor(o-h)+.5;_<0?(o+=Math.abs(0-_),_=Math.floor(o-h)+.5):_+r>a&&(o-=Math.abs(a-(_+r)),_=Math.floor(o-h)+.5);const u=_+r,c=Math.ceil(0+i.k+i.C+i.I+i.T+i.L);t.fillStyle=this.It.t;const d=Math.round(_*s),f=Math.round(0*s),p=Math.round(u*s),v=Math.round(c*s),m=Math.round(2*s);if(t.beginPath(),t.moveTo(d,f),t.lineTo(d,v-m),t.arcTo(d,v,d+m,v,m),t.lineTo(p-m,v),t.arcTo(p,v,p,v-m,m),t.lineTo(p,f),t.fill(),this.It.oi){const n=Math.round(this.It.ki*s),e=f,r=Math.round((e+i.C)*s);t.fillStyle=this.It.R;const h=Math.max(1,Math.floor(s)),l=Math.floor(.5*s);t.fillRect(n-l,e,h,r-e)}const b=0+i.k+i.C+i.I+i.T/2;t.textAlign="left",t.textBaseline="middle",t.fillStyle=this.It.R;const w=i.ji.Mi(t,"Apr0");t.translate((_+e)*s,(b+w)*s),F(t,s,(()=>t.fillText(l(this.It).ii,0,0))),t.restore()}}class K{constructor(t,i,s){this.vt=!0,this.$t=new Z,this.jt={xt:!1,t:"#4c525e",R:"white",ii:"",Zt:0,ki:NaN,oi:!0},this.bt=t,this.Hi=i,this.Fi=s}wt(){this.vt=!0}Mt(){return this.vt&&(this.St(),this.vt=!1),this.$t.tt(this.jt),this.$t}St(){const t=this.jt;t.xt=!1;const i=this.bt.F().vertLine;if(!i.labelVisible)return;const s=this.Hi.kt();if(s.Wi())return;t.Zt=s.Zt();const n=this.Fi();if(!n._t)return;t.ki=n.ki;const e=s.Ui(this.bt.yt());t.ii=s.qi(l(e)),t.xt=!0;const r=m(i.labelBackgroundColor);t.t=r.t,t.R=r.i,t.oi=s.F().ticksVisible}}class G{constructor(){this.Yi=null,this.Xi=0}Zi(){return this.Xi}Ki(t){this.Xi=t}At(){return this.Yi}Gi(t){this.Yi=t}Ji(t){return[]}Qi(){return[]}xt(){return!0}}var J;!function(t){t[t.Normal=0]="Normal",t[t.Magnet=1]="Magnet"}(J||(J={}));class Q extends G{constructor(t,i){super(),this.ts=null,this.ss=NaN,this.ns=0,this.es=!0,this.rs=new Map,this.hs=!1,this.ls=NaN,this.os=NaN,this._s=NaN,this.us=NaN,this.Hi=t,this.cs=i,this.ds=new E(t,this);this.fs=((t,i)=>s=>{const n=i(),e=t();if(s===l(this.ts).ps())return{ut:e,ki:n};{const t=l(s.Tt());return{ut:s.vs(n,t),ki:n}}})((()=>this.ss),(()=>this.os));const s=((t,i)=>()=>({_t:this.Hi.kt().bs(t()),ki:i()}))((()=>this.ns),(()=>this.Gt()));this.ws=new K(this,t,s),this.gs=new V(this)}F(){return this.cs}Ms(t,i){this._s=t,this.us=i}Ss(){this._s=NaN,this.us=NaN}ys(){return this._s}ks(){return this.us}Cs(t,i,s){this.hs||(this.hs=!0),this.es=!0,this.xs(t,i,s)}yt(){return this.ns}Gt(){return this.ls}Jt(){return this.os}xt(){return this.es}Ts(){this.es=!1,this.Ds(),this.ss=NaN,this.ls=NaN,this.os=NaN,this.ts=null,this.Ss()}Ps(t){return null!==this.ts?[this.gs,this.ds]:[]}Yt(t){return t===this.ts&&this.cs.horzLine.visible}Xt(){return this.cs.vertLine.visible}Rs(t,i){this.es&&this.ts===t||this.rs.clear();const s=[];return this.ts===t&&s.push(this.As(this.rs,i,this.fs)),s}Qi(){return this.es?[this.ws]:[]}Ut(){return this.ts}Ls(){this.gs.wt(),this.rs.forEach((t=>t.wt())),this.ws.wt(),this.ds.wt()}Os(t){return t&&!t.ps().Wi()?t.ps():null}xs(t,i,s){this.Bs(t,i,s)&&this.Ls()}Bs(t,i,s){const n=this.ls,e=this.os,r=this.ss,h=this.ns,l=this.ts,a=this.Os(s);this.ns=t,this.ls=isNaN(t)?NaN:this.Hi.kt().Et(t),this.ts=s;const o=null!==a?a.Tt():null;return null!==a&&null!==o?(this.ss=i,this.os=a.Rt(i,o)):(this.ss=NaN,this.os=NaN),n!==this.ls||e!==this.os||h!==this.ns||r!==this.ss||l!==this.ts}Ds(){const t=this.Hi.gt().map((t=>t.Is().Es())).filter(C),i=0===t.length?null:Math.max(...t);this.ns=null!==i?i:NaN}As(t,i,s){let n=t.get(i);return void 0===n&&(n=new Y(this,i,s),t.set(i,n)),n}}function tt(t){return"left"===t||"right"===t}class it{constructor(t){this.Vs=new Map,this.Ns=[],this.Fs=t}Ws(t,i){const s=function(t,i){return void 0===t?i:{zs:Math.max(t.zs,i.zs),js:t.js||i.js}}(this.Vs.get(t),i);this.Vs.set(t,s)}$s(){return this.Fs}Hs(t){const i=this.Vs.get(t);return void 0===i?{zs:this.Fs}:{zs:Math.max(this.Fs,i.zs),js:i.js}}Us(){this.qs(),this.Ns=[{Ys:0}]}Xs(t){this.qs(),this.Ns=[{Ys:1,Lt:t}]}Zs(t){this.Ks(),this.Ns.push({Ys:5,Lt:t})}qs(){this.Ks(),this.Ns.push({Ys:6})}Gs(){this.qs(),this.Ns=[{Ys:4}]}Js(t){this.qs(),this.Ns.push({Ys:2,Lt:t})}Qs(t){this.qs(),this.Ns.push({Ys:3,Lt:t})}tn(){return this.Ns}sn(t){for(const i of t.Ns)this.nn(i);this.Fs=Math.max(this.Fs,t.Fs),t.Vs.forEach(((t,i)=>{this.Ws(i,t)}))}static en(){return new it(2)}static rn(){return new it(3)}nn(t){switch(t.Ys){case 0:this.Us();break;case 1:this.Xs(t.Lt);break;case 2:this.Js(t.Lt);break;case 3:this.Qs(t.Lt);break;case 4:this.Gs();break;case 5:this.Zs(t.Lt);break;case 6:this.Ks()}}Ks(){const t=this.Ns.findIndex((t=>5===t.Ys));-1!==t&&this.Ns.splice(t,1)}}const st=".";function nt(t,i){if(!g(t))return"n/a";if(!M(i))throw new TypeError("invalid length");if(i<0||i>16)throw new TypeError("invalid length");if(0===i)return t.toString();return("0000000000000000"+t.toString()).slice(-i)}class et{constructor(t,i){if(i||(i=1),g(t)&&M(t)||(t=100),t<0)throw new TypeError("invalid base");this.Ni=t,this.hn=i,this.ln()}format(t){const i=t<0?"−":"";return t=Math.abs(t),i+this.an(t)}ln(){if(this.on=0,this.Ni>0&&this.hn>0){let t=this.Ni;for(;t>1;)t/=10,this.on++}}an(t){const i=this.Ni/this.hn;let s=Math.floor(t),n="";const e=void 0!==this.on?this.on:NaN;if(i>1){let r=+(Math.round(t*i)-s*i).toFixed(this.on);r>=i&&(r-=i,s+=1),n=st+nt(+r.toFixed(this.on)*this.hn,e)}else s=Math.round(s*i)/i,e>0&&(n=st+nt(0,e));return s.toFixed(0)+n}}class rt extends et{constructor(t=100){super(t)}format(t){return`${super.format(t)}%`}}class ht{constructor(t){this._n=t}format(t){let i="";return t<0&&(i="-",t=-t),t<995?i+this.un(t):t<999995?i+this.un(t/1e3)+"K":t<999999995?(t=1e3*Math.round(t/1e3),i+this.un(t/1e6)+"M"):(t=1e6*Math.round(t/1e6),i+this.un(t/1e9)+"B")}un(t){let i;const s=Math.pow(10,this._n);return i=(t=Math.round(t*s)/s)>=1e-15&&t<1?t.toFixed(this._n).replace(/\.?0+$/,""):String(t),i.replace(/(\.[1-9]*)0+$/,((t,i)=>i))}}function lt(t,i,s,n,e,r,h){if(0===i.length||n.from>=i.length)return;const l=i[n.from];let a=r(t,l),o=l;if(n.to-n.from<2){const i=e/2;t.beginPath();const s={nt:l.nt-i,et:l.et},n={nt:l.nt+i,et:l.et};return t.moveTo(s.nt,s.et),t.lineTo(n.nt,n.et),void h(t,a,s,n)}const _=(i,s)=>{h(t,a,o,s),t.beginPath(),a=i,o=s};let u=o;t.beginPath(),t.moveTo(l.nt,l.et);for(let e=n.from+1;e<n.to;++e){u=i[e];const n=r(t,u);switch(s){case 0:t.lineTo(u.nt,u.et);break;case 1:t.lineTo(u.nt,i[e-1].et),n!==a&&(_(n,u),t.lineTo(u.nt,i[e-1].et)),t.lineTo(u.nt,u.et);break;case 2:{const[s,n]=_t(i,e-1,e);t.bezierCurveTo(s.nt,s.et,n.nt,n.et,u.nt,u.et);break}}1!==s&&n!==a&&(_(n,u),t.moveTo(u.nt,u.et))}(o!==u||o===u&&1===s)&&h(t,a,o,u)}function at(t,i){return{nt:t.nt-i.nt,et:t.et-i.et}}function ot(t,i){return{nt:t.nt/i,et:t.et/i}}function _t(t,i,s){const n=Math.max(0,i-1),e=Math.min(t.length-1,s+1);var r,h;return[(r=t[i],h=ot(at(t[s],t[n]),6),{nt:r.nt+h.nt,et:r.et+h.et}),at(t[s],ot(at(t[e],t[i]),6))]}function ut(t,i,s,n,e){i.lineTo(e.nt,t),i.lineTo(n.nt,t),i.closePath(),i.fillStyle=s,i.fill()}class ct extends A{constructor(){super(...arguments),this.J=null}tt(t){this.J=t}Z(t){if(null===this.J)return;const{st:i,it:s,cn:e,rt:r,zt:h,dn:l,fn:a}=this.J;null!==s&&(t.lineCap="butt",t.lineJoin="round",t.lineWidth=r,n(t,h),t.lineWidth=1,lt(t,i,l,s,e,this.pn.bind(this),ut.bind(null,a)))}}class dt extends ct{constructor(){super(...arguments),this.vn=null}pn(t,i){const s=this.J,{mn:n,bn:e}=i,r=s.wn;if(null!==this.vn&&this.vn.topColor===n&&this.vn.bottomColor===e&&this.vn.bottom===r)return this.vn.fillStyle;const h=t.createLinearGradient(0,0,0,r);return h.addColorStop(0,n),h.addColorStop(1,e),this.vn={topColor:n,bottomColor:e,fillStyle:h,bottom:r},h}}function ft(t,i){t.strokeStyle=i,t.stroke()}class pt extends A{constructor(){super(...arguments),this.J=null}tt(t){this.J=t}Z(t){if(null===this.J)return;const{st:i,it:s,cn:e,dn:r,rt:h,zt:l}=this.J;null!==s&&(t.lineCap="butt",t.lineWidth=h,n(t,l),t.lineJoin="round",lt(t,i,r,s,e,this.gn.bind(this),ft))}}class vt extends pt{gn(t,i){return i.ot}}function mt(t,i,s,n=0,e=t.length){let r=e-n;for(;0<r;){const e=r>>1,h=n+e;s(t[h],i)?(n=h+1,r-=e+1):r=e}return n}function bt(t,i,s,n=0,e=t.length){let r=e-n;for(;0<r;){const e=r>>1,h=n+e;s(i,t[h])?r=e:(n=h+1,r-=e+1)}return n}function wt(t,i){return t._t<i}function gt(t,i){return t<i._t}function Mt(t,i,s){const n=i.Mn(),e=i.Sn(),r=mt(t,n,wt),h=bt(t,e,gt);if(!s)return{from:r,to:h};let l=r,a=h;return r>0&&r<t.length&&t[r]._t>=n&&(l=r-1),h>0&&h<t.length&&t[h-1]._t<=e&&(a=h+1),{from:l,to:a}}class St{constructor(t,i,s){this.yn=!0,this.kn=!0,this.Cn=!0,this.xn=[],this.Tn=null,this.Dn=t,this.Pn=i,this.Rn=s}wt(t){this.yn=!0,"data"===t&&(this.kn=!0),"options"===t&&(this.Cn=!0)}Mt(t,i){return this.Dn.xt()?(this.An(i,t),null===this.Tn?null:this.Ln):null}On(){this.xn=this.xn.map((t=>Object.assign(Object.assign({},t),this.Dn.En().Bn(t._t))))}In(){this.Tn=null}An(t,i){this.kn&&(this.Vn(),this.kn=!1),this.Cn&&(this.On(),this.Cn=!1),this.yn&&(this.Nn(t,i),this.yn=!1)}Nn(t,i){const s=this.Dn.At(),n=this.Pn.kt();if(this.In(),n.Wi()||s.Wi())return;const e=n.Fn();if(null===e)return;if(0===this.Dn.Is().Wn())return;const r=this.Dn.Tt();null!==r&&(this.Tn=Mt(this.xn,e,this.Rn),this.zn(s,n,r.Lt),this.jn(t,i))}}class yt extends St{constructor(t,i){super(t,i,!0)}zn(t,i,s){i.$n(this.xn,x(this.Tn)),t.Hn(this.xn,s,x(this.Tn))}Un(t,i){return{_t:t,ut:i,nt:NaN,et:NaN}}Vn(){const t=this.Dn.En();this.xn=this.Dn.Is().qn().map((i=>{const s=i.Lt[3];return this.Yn(i.Xn,s,t)}))}}class kt extends yt{constructor(t,i){super(t,i),this.Ln=new R,this.Zn=new dt,this.Kn=new vt,this.Ln.Y([this.Zn,this.Kn])}Yn(t,i,s){return Object.assign(Object.assign({},this.Un(t,i)),s.Bn(t))}jn(t,i){const s=this.Dn.F(),n=s.invertFilledArea?0:i;this.Zn.tt({dn:s.lineType,st:this.xn,zt:s.lineStyle,rt:s.lineWidth,fn:n,wn:i,it:this.Tn,cn:this.Pn.kt().Gn()}),this.Kn.tt({dn:s.lineType,st:this.xn,zt:s.lineStyle,rt:s.lineWidth,it:this.Tn,cn:this.Pn.kt().Gn()})}}class Ct{constructor(){this.It=null,this.Jn=0,this.Qn=0}tt(t){this.It=t}X(t,i,s,n){if(null===this.It||0===this.It.Is.length||null===this.It.it)return;if(this.Jn=this.te(i),this.Jn>=2){Math.max(1,Math.floor(i))%2!=this.Jn%2&&this.Jn--}this.Qn=this.It.ie?Math.min(this.Jn,Math.floor(i)):this.Jn;let e=null;const r=this.Qn<=this.Jn&&this.It.Gn>=Math.floor(1.5*i);for(let s=this.It.it.from;s<this.It.it.to;++s){const n=this.It.Is[s];e!==n.se&&(t.fillStyle=n.se,e=n.se);const h=Math.floor(.5*this.Qn),l=Math.round(n.nt*i),a=l-h,o=this.Qn,_=a+o-1,u=Math.min(n.ne,n.ee),c=Math.max(n.ne,n.ee),d=Math.round(u*i)-h,f=Math.round(c*i)+h,p=Math.max(f-d,this.Qn);t.fillRect(a,d,o,p);const v=Math.ceil(1.5*this.Jn);if(r){if(this.It.re){const s=l-v;let e=Math.max(d,Math.round(n.he*i)-h),r=e+o-1;r>d+p-1&&(r=d+p-1,e=r-o+1),t.fillRect(s,e,a-s,r-e+1)}const s=l+v;let e=Math.max(d,Math.round(n.le*i)-h),r=e+o-1;r>d+p-1&&(r=d+p-1,e=r-o+1),t.fillRect(_+1,e,s-_,r-e+1)}}}te(t){const i=Math.floor(t);return Math.max(i,Math.floor(function(t,i){return Math.floor(.3*t*i)}(l(this.It).Gn,t)))}}class xt extends St{constructor(t,i){super(t,i,!1)}zn(t,i,s){i.$n(this.xn,x(this.Tn)),t.ae(this.xn,s,x(this.Tn))}oe(t,i,s){return{_t:t,_e:i.Lt[0],ue:i.Lt[1],ce:i.Lt[2],de:i.Lt[3],nt:NaN,he:NaN,ne:NaN,ee:NaN,le:NaN}}Vn(){const t=this.Dn.En();this.xn=this.Dn.Is().qn().map((i=>this.Yn(i.Xn,i,t)))}}class Tt extends xt{constructor(){super(...arguments),this.Ln=new Ct}Yn(t,i,s){return Object.assign(Object.assign({},this.oe(t,i,s)),s.Bn(t))}jn(){const t=this.Dn.F();this.Ln.tt({Is:this.xn,Gn:this.Pn.kt().Gn(),re:t.openVisible,ie:t.thinBars,it:this.Tn})}}function Dt(t,i,s){return Math.min(Math.max(t,i),s)}function Pt(t,i,s){return i-t<=s}function Rt(t){return t<=0?NaN:Math.log(t)/Math.log(10)}function At(t){const i=Math.ceil(t);return i%2==0?i-1:i}class Lt extends ct{constructor(){super(...arguments),this.vn=null}pn(t,i){const s=this.J,{fe:n,pe:e,ve:r,me:h}=i,{fn:l,wn:a}=s;if(null!==this.vn&&this.vn.topFillColor1===n&&this.vn.topFillColor2===e&&this.vn.bottomFillColor1===r&&this.vn.bottomFillColor2===h&&this.vn.baseLevelCoordinate===l&&this.vn.bottom===a)return this.vn.fillStyle;const o=t.createLinearGradient(0,0,0,a),_=Dt(l/a,0,1);return o.addColorStop(0,n),o.addColorStop(_,e),o.addColorStop(_,r),o.addColorStop(1,h),this.vn={topFillColor1:n,topFillColor2:e,bottomFillColor1:r,bottomFillColor2:h,fillStyle:o,baseLevelCoordinate:l,bottom:a},o}}class Ot extends pt{constructor(){super(...arguments),this.be=null}gn(t,i){const s=this.J,{we:n,ge:e}=i,{fn:r,wn:h}=s;if(null!==this.be&&this.be.topLineColor===n&&this.be.bottomLineColor===e&&this.be.baseLevelCoordinate===r&&this.be.bottom===h)return this.be.strokeStyle;const l=t.createLinearGradient(0,0,0,h),a=Dt(r/h,0,1);return l.addColorStop(0,n),l.addColorStop(a,n),l.addColorStop(a,e),l.addColorStop(1,e),this.be={topLineColor:n,bottomLineColor:e,strokeStyle:l,baseLevelCoordinate:r,bottom:h},l}}class Bt extends yt{constructor(t,i){super(t,i),this.Ln=new R,this.Me=new Lt,this.Se=new Ot,this.Ln.Y([this.Me,this.Se])}Yn(t,i,s){return Object.assign(Object.assign({},this.Un(t,i)),s.Bn(t))}jn(t,i){const s=this.Dn.Tt();if(null===s)return;const n=this.Dn.F(),e=this.Dn.At().Rt(n.baseValue.price,s.Lt),r=this.Pn.kt().Gn();this.Me.tt({st:this.xn,rt:n.lineWidth,zt:n.lineStyle,dn:n.lineType,fn:e,wn:i,it:this.Tn,cn:r}),this.Se.tt({st:this.xn,rt:n.lineWidth,zt:n.lineStyle,dn:n.lineType,fn:e,wn:i,it:this.Tn,cn:r})}}class Et{constructor(){this.It=null,this.Jn=0}tt(t){this.It=t}X(t,i,s,n){if(null===this.It||0===this.It.Is.length||null===this.It.it)return;if(this.Jn=function(t,i){if(t>=2.5&&t<=4)return Math.floor(3*i);const s=1-.2*Math.atan(Math.max(4,t)-4)/(.5*Math.PI),n=Math.floor(t*s*i),e=Math.floor(t*i),r=Math.min(n,e);return Math.max(Math.floor(i),r)}(this.It.Gn,i),this.Jn>=2){Math.floor(i)%2!=this.Jn%2&&this.Jn--}const e=this.It.Is;this.It.ye&&this.ke(t,e,this.It.it,i),this.It.di&&this.Ce(t,e,this.It.it,this.It.Gn,i);const r=this.xe(i);(!this.It.di||this.Jn>2*r)&&this.Te(t,e,this.It.it,i)}ke(t,i,s,n){if(null===this.It)return;let e="",r=Math.min(Math.floor(n),Math.floor(this.It.Gn*n));r=Math.max(Math.floor(n),Math.min(r,this.Jn));const h=Math.floor(.5*r);let l=null;for(let a=s.from;a<s.to;a++){const s=i[a];s.De!==e&&(t.fillStyle=s.De,e=s.De);const o=Math.round(Math.min(s.he,s.le)*n),_=Math.round(Math.max(s.he,s.le)*n),u=Math.round(s.ne*n),c=Math.round(s.ee*n);let d=Math.round(n*s.nt)-h;const f=d+r-1;null!==l&&(d=Math.max(l+1,d),d=Math.min(d,f));const p=f-d+1;t.fillRect(d,u,p,o-u),t.fillRect(d,_+1,p,c-_),l=f}}xe(t){let i=Math.floor(1*t);this.Jn<=2*i&&(i=Math.floor(.5*(this.Jn-1)));const s=Math.max(Math.floor(t),i);return this.Jn<=2*s?Math.max(Math.floor(t),Math.floor(1*t)):s}Ce(t,i,s,n,e){if(null===this.It)return;let r="";const h=this.xe(e);let l=null;for(let n=s.from;n<s.to;n++){const s=i[n];s.Pe!==r&&(t.fillStyle=s.Pe,r=s.Pe);let a=Math.round(s.nt*e)-Math.floor(.5*this.Jn);const o=a+this.Jn-1,_=Math.round(Math.min(s.he,s.le)*e),u=Math.round(Math.max(s.he,s.le)*e);if(null!==l&&(a=Math.max(l+1,a),a=Math.min(a,o)),this.It.Gn*e>2*h)N(t,a,_,o-a+1,u-_+1,h);else{const i=o-a+1;t.fillRect(a,_,i,u-_+1)}l=o}}Te(t,i,s,n){if(null===this.It)return;let e="";const r=this.xe(n);for(let h=s.from;h<s.to;h++){const s=i[h];let l=Math.round(Math.min(s.he,s.le)*n),a=Math.round(Math.max(s.he,s.le)*n),o=Math.round(s.nt*n)-Math.floor(.5*this.Jn),_=o+this.Jn-1;if(s.se!==e){const i=s.se;t.fillStyle=i,e=i}this.It.di&&(o+=r,l+=r,_-=r,a-=r),l>a||t.fillRect(o,l,_-o+1,a-l+1)}}}class It extends xt{constructor(){super(...arguments),this.Ln=new Et}Yn(t,i,s){return Object.assign(Object.assign({},this.oe(t,i,s)),s.Bn(t))}jn(){const t=this.Dn.F();this.Ln.tt({Is:this.xn,Gn:this.Pn.kt().Gn(),ye:t.wickVisible,di:t.borderVisible,it:this.Tn})}}class Vt{constructor(){this.It=null,this.Re=[]}tt(t){this.It=t,this.Re=[]}X(t,i,s,n){if(null===this.It||0===this.It.st.length||null===this.It.it)return;this.Re.length||this.Ae(i);const e=Math.max(1,Math.floor(i)),r=Math.round(this.It.Le*i)-Math.floor(e/2),h=r+e;for(let s=this.It.it.from;s<this.It.it.to;s++){const n=this.It.st[s],l=this.Re[s-this.It.it.from],a=Math.round(n.et*i);let o,_;t.fillStyle=n.se,a<=r?(o=a,_=h):(o=r,_=a-Math.floor(e/2)+e),t.fillRect(l.Mn,o,l.Sn-l.Mn+1,_-o)}}Ae(t){if(null===this.It||0===this.It.st.length||null===this.It.it)return void(this.Re=[]);const i=Math.ceil(this.It.Gn*t)<=1?0:Math.max(1,Math.floor(t)),s=Math.round(this.It.Gn*t)-i;this.Re=new Array(this.It.it.to-this.It.it.from);for(let i=this.It.it.from;i<this.It.it.to;i++){const n=this.It.st[i],e=Math.round(n.nt*t);let r,h;if(s%2){const t=(s-1)/2;r=e-t,h=e+t}else{const t=s/2;r=e-t,h=e+t-1}this.Re[i-this.It.it.from]={Mn:r,Sn:h,Oe:e,Be:n.nt*t,_t:n._t}}for(let t=this.It.it.from+1;t<this.It.it.to;t++){const s=this.Re[t-this.It.it.from],n=this.Re[t-this.It.it.from-1];s._t===n._t+1&&(s.Mn-n.Sn!==i+1&&(n.Oe>n.Be?n.Sn=s.Mn-i-1:s.Mn=n.Sn+i+1))}let n=Math.ceil(this.It.Gn*t);for(let t=this.It.it.from;t<this.It.it.to;t++){const i=this.Re[t-this.It.it.from];i.Sn<i.Mn&&(i.Sn=i.Mn);const s=i.Sn-i.Mn+1;n=Math.min(s,n)}if(i>0&&n<4)for(let t=this.It.it.from;t<this.It.it.to;t++){const i=this.Re[t-this.It.it.from];i.Sn-i.Mn+1>n&&(i.Oe>i.Be?i.Sn-=1:i.Mn+=1)}}}class Nt extends yt{constructor(){super(...arguments),this.Ln=new Vt}Yn(t,i,s){return Object.assign(Object.assign({},this.Un(t,i)),s.Bn(t))}jn(){const t={st:this.xn,Gn:this.Pn.kt().Gn(),it:this.Tn,Le:this.Dn.At().Rt(this.Dn.F().base,l(this.Dn.Tt()).Lt)};this.Ln.tt(t)}}class Ft extends yt{constructor(){super(...arguments),this.Ln=new vt}Yn(t,i,s){return Object.assign(Object.assign({},this.Un(t,i)),s.Bn(t))}jn(){const t=this.Dn.F(),i={st:this.xn,zt:t.lineStyle,dn:t.lineType,rt:t.lineWidth,it:this.Tn,cn:this.Pn.kt().Gn()};this.Ln.tt(i)}}const Wt=/[2-9]/g;class zt{constructor(t=50){this.Ee=0,this.Ie=1,this.Ve=1,this.Ne={},this.Fe=new Map,this.We=t}ze(){this.Ee=0,this.Fe.clear(),this.Ie=1,this.Ve=1,this.Ne={}}Si(t,i,s){return this.je(t,i,s).width}Mi(t,i,s){const n=this.je(t,i,s);return((n.actualBoundingBoxAscent||0)-(n.actualBoundingBoxDescent||0))/2}je(t,i,s){const n=s||Wt,e=String(i).replace(n,"0");if(this.Fe.has(e))return h(this.Fe.get(e)).$e;if(this.Ee===this.We){const t=this.Ne[this.Ve];delete this.Ne[this.Ve],this.Fe.delete(t),this.Ve++,this.Ee--}t.save(),t.textBaseline="middle";const r=t.measureText(e);return t.restore(),0===r.width&&i.length||(this.Fe.set(e,{$e:r,He:this.Ie}),this.Ne[this.Ie]=e,this.Ee++,this.Ie++),r}}class jt{constructor(t){this.Ue=null,this.S=null,this.qe="right",this.Ye=0,this.Xe=t}Ze(t,i,s,n){this.Ue=t,this.S=i,this.Ye=s,this.qe=n}X(t,i){null!==this.S&&null!==this.Ue&&this.Ue.X(t,this.S,this.Xe,this.Ye,this.qe,i)}}class $t{constructor(t,i,s){this.Ke=t,this.Xe=new zt(50),this.Ge=i,this.N=s,this.W=-1,this.$t=new jt(this.Xe)}Mt(t,i){const s=this.N.Je(this.Ge);if(null===s)return null;const n=s.Qe(this.Ge)?s.tr():this.Ge.At();if(null===n)return null;const e=s.ir(n);if("overlay"===e)return null;const r=this.N.sr();return r.T!==this.W&&(this.W=r.T,this.Xe.ze()),this.$t.Ze(this.Ke.Ii(),r,i,e),this.$t}}class Ht{constructor(){this.It=null}tt(t){this.It=t}X(t,i,s,r){if(null===this.It)return;if(!1===this.It.xt)return;const h=Math.round(this.It.et*i);if(h<0||h>Math.ceil(this.It.Kt*i))return;const l=Math.ceil(this.It.Zt*i);t.lineCap="butt",t.strokeStyle=this.It.R,t.lineWidth=Math.floor(this.It.rt*i),n(t,this.It.zt),e(t,h,0,l)}}class Ut{constructor(t){this.nr={Zt:0,Kt:0,et:0,R:"rgba(0, 0, 0, 0)",rt:1,zt:0,xt:!1},this.er=new Ht,this.vt=!0,this.Dn=t,this.Pn=t.qt(),this.er.tt(this.nr)}wt(){this.vt=!0}Mt(t,i){return this.Dn.xt()?(this.vt&&(this.rr(t,i),this.vt=!1),this.er):null}}class qt extends Ut{constructor(t){super(t)}rr(t,i){this.nr.xt=!1;const s=this.Dn.At(),n=s.hr().hr;if(2!==n&&3!==n)return;const e=this.Dn.F();if(!e.baseLineVisible||!this.Dn.xt())return;const r=this.Dn.Tt();null!==r&&(this.nr.xt=!0,this.nr.et=s.Rt(r.Lt,r.Lt),this.nr.Zt=i,this.nr.Kt=t,this.nr.R=e.baseLineColor,this.nr.rt=e.baseLineWidth,this.nr.zt=e.baseLineStyle)}}class Yt{constructor(){this.It=null}tt(t){this.It=t}lr(){return this.It}X(t,i,s,n){const e=this.It;if(null===e)return;t.save();const r=Math.max(1,Math.floor(i)),h=r%2/2,l=Math.round(e.Be.x*i)+h,a=e.Be.y*i;t.fillStyle=e.ar,t.beginPath();const o=Math.max(2,1.5*e._r)*i;t.arc(l,a,o,0,2*Math.PI,!1),t.fill(),t.fillStyle=e.ur,t.beginPath(),t.arc(l,a,e.lt*i,0,2*Math.PI,!1),t.fill(),t.lineWidth=r,t.strokeStyle=e.cr,t.beginPath(),t.arc(l,a,e.lt*i+r/2,0,2*Math.PI,!1),t.stroke(),t.restore()}}const Xt=[{dr:0,pr:.25,vr:4,mr:10,br:.25,wr:0,gr:.4,Mr:.8},{dr:.25,pr:.525,vr:10,mr:14,br:0,wr:0,gr:.8,Mr:0},{dr:.525,pr:1,vr:14,mr:14,br:0,wr:0,gr:0,Mr:0}];function Zt(t,i,s,n){return function(t,i){if("transparent"===t)return t;const s=v(t),n=s[3];return`rgba(${s[0]}, ${s[1]}, ${s[2]}, ${i*n})`}(t,s+(n-s)*i)}function Kt(t,i){const s=t%2600/2600;let n;for(const t of Xt)if(s>=t.dr&&s<=t.pr){n=t;break}r(void 0!==n,"Last price animation internal logic error");const e=(s-n.dr)/(n.pr-n.dr);return{ur:Zt(i,e,n.br,n.wr),cr:Zt(i,e,n.gr,n.Mr),lt:(h=e,l=n.vr,a=n.mr,l+(a-l)*h)};var h,l,a}class Gt{constructor(t){this.$t=new Yt,this.vt=!0,this.Sr=!0,this.yr=performance.now(),this.kr=this.yr-1,this.Cr=t}Tr(){this.kr=this.yr-1,this.wt()}Dr(){if(this.wt(),2===this.Cr.F().lastPriceAnimation){const t=performance.now(),i=this.kr-t;if(i>0)return void(i<650&&(this.kr+=2600));this.yr=t,this.kr=t+2600}}wt(){this.vt=!0}Pr(){this.Sr=!0}xt(){return 0!==this.Cr.F().lastPriceAnimation}Rr(){switch(this.Cr.F().lastPriceAnimation){case 0:return!1;case 1:return!0;case 2:return performance.now()<=this.kr}}Mt(t,i){return this.vt?(this.St(t,i),this.vt=!1,this.Sr=!1):this.Sr&&(this.Ar(),this.Sr=!1),this.$t}St(t,i){this.$t.tt(null);const s=this.Cr.qt().kt(),n=s.Fn(),e=this.Cr.Tt();if(null===n||null===e)return;const r=this.Cr.Lr(!0);if(r.Or||!n.Br(r.Xn))return;const h={x:s.Et(r.Xn),y:this.Cr.At().Rt(r.ut,e.Lt)},l=r.R,a=this.Cr.F().lineWidth,o=Kt(this.Er(),l);this.$t.tt({ar:l,_r:a,ur:o.ur,cr:o.cr,lt:o.lt,Be:h})}Ar(){const t=this.$t.lr();if(null!==t){const i=Kt(this.Er(),t.ar);t.ur=i.ur,t.cr=i.cr,t.lt=i.lt}}Er(){return this.Rr()?performance.now()-this.yr:2599}}function Jt(t,i){return At(Math.min(Math.max(t,12),30)*i)}function Qt(t,i){switch(t){case"arrowDown":case"arrowUp":return Jt(i,1);case"circle":return Jt(i,.8);case"square":return Jt(i,.7)}}function ti(t){return function(t){const i=Math.ceil(t);return i%2!=0?i-1:i}(Jt(t,1))}function ii(t){return Math.max(Jt(t,.1),3)}function si(t,i,s,n,e){const r=Qt("square",s),h=(r-1)/2,l=t-h,a=i-h;return n>=l&&n<=l+r&&e>=a&&e<=a+r}function ni(t,i,s,n,e){const r=(Qt("arrowUp",e)-1)/2,h=(At(e/2)-1)/2;i.beginPath(),t?(i.moveTo(s-r,n),i.lineTo(s,n-r),i.lineTo(s+r,n),i.lineTo(s+h,n),i.lineTo(s+h,n+r),i.lineTo(s-h,n+r),i.lineTo(s-h,n)):(i.moveTo(s-r,n),i.lineTo(s,n+r),i.lineTo(s+r,n),i.lineTo(s+h,n),i.lineTo(s+h,n-r),i.lineTo(s-h,n-r),i.lineTo(s-h,n)),i.fill()}function ei(t,i,s,n,e,r){return si(i,s,n,e,r)}class ri extends A{constructor(){super(...arguments),this.It=null,this.Xe=new zt,this.W=-1,this.j="",this.Ir=""}tt(t){this.It=t}Ze(t,i){this.W===t&&this.j===i||(this.W=t,this.j=i,this.Ir=D(t,i),this.Xe.ze())}Vr(t,i){if(null===this.It||null===this.It.it)return null;for(let s=this.It.it.from;s<this.It.it.to;s++){const n=this.It.st[s];if(li(n,t,i))return{Nr:n.Fr,Wr:n.Wr}}return null}Z(t,i,s){if(null!==this.It&&null!==this.It.it){t.textBaseline="middle",t.font=this.Ir;for(let i=this.It.it.from;i<this.It.it.to;i++){const s=this.It.st[i];void 0!==s.ii&&(s.ii.Zt=this.Xe.Si(t,s.ii.zr),s.ii.Kt=this.W),hi(s,t)}}}}function hi(t,i){i.fillStyle=t.R,void 0!==t.ii&&function(t,i,s,n){t.fillText(i,s,n)}(i,t.ii.zr,t.nt-t.ii.Zt/2,t.ii.et),function(t,i){if(0===t.Wn)return;switch(t.jr){case"arrowDown":return void ni(!1,i,t.nt,t.et,t.Wn);case"arrowUp":return void ni(!0,i,t.nt,t.et,t.Wn);case"circle":return void function(t,i,s,n){const e=(Qt("circle",n)-1)/2;t.beginPath(),t.arc(i,s,e,0,2*Math.PI,!1),t.fill()}(i,t.nt,t.et,t.Wn);case"square":return void function(t,i,s,n){const e=Qt("square",n),r=(e-1)/2,h=i-r,l=s-r;t.fillRect(h,l,e,e)}(i,t.nt,t.et,t.Wn)}t.jr}(t,i)}function li(t,i,s){return!(void 0===t.ii||!function(t,i,s,n,e,r){const h=n/2;return e>=t&&e<=t+s&&r>=i-h&&r<=i+h}(t.nt,t.ii.et,t.ii.Zt,t.ii.Kt,i,s))||function(t,i,s){if(0===t.Wn)return!1;switch(t.jr){case"arrowDown":case"arrowUp":return ei(0,t.nt,t.et,t.Wn,i,s);case"circle":return function(t,i,s,n,e){const r=2+Qt("circle",s)/2,h=t-n,l=i-e;return Math.sqrt(h*h+l*l)<=r}(t.nt,t.et,t.Wn,i,s);case"square":return si(t.nt,t.et,t.Wn,i,s)}}(t,i,s)}function ai(t,i,s,n,e,r,h,l,a){const o=g(s)?s:s.de,_=g(s)?s:s.ue,u=g(s)?s:s.ce,c=g(i.size)?Math.max(i.size,0):1,d=ti(l.Gn())*c,f=d/2;switch(t.Wn=d,i.position){case"inBar":return t.et=h.Rt(o,a),void(void 0!==t.ii&&(t.ii.et=t.et+f+r+.6*e));case"aboveBar":return t.et=h.Rt(_,a)-f-n.$r,void 0!==t.ii&&(t.ii.et=t.et-f-.6*e,n.$r+=1.2*e),void(n.$r+=d+r);case"belowBar":return t.et=h.Rt(u,a)+f+n.Hr,void 0!==t.ii&&(t.ii.et=t.et+f+r+.6*e,n.Hr+=1.2*e),void(n.Hr+=d+r)}i.position}class oi{constructor(t,i){this.vt=!0,this.Ur=!0,this.qr=!0,this.Yr=null,this.$t=new ri,this.Cr=t,this.Hi=i,this.It={st:[],it:null}}wt(t){this.vt=!0,this.qr=!0,"data"===t&&(this.Ur=!0)}Mt(t,i,s){if(!this.Cr.xt())return null;this.vt&&this.Xr();const n=this.Hi.F().layout;return this.$t.Ze(n.fontSize,n.fontFamily),this.$t.tt(this.It),this.$t}Zr(){if(this.qr){if(this.Cr.Kr().length>0){const t=this.Hi.kt().Gn(),i=ii(t),s=1.5*ti(t)+2*i;this.Yr={above:s,below:s}}else this.Yr=null;this.qr=!1}return this.Yr}Xr(){const t=this.Cr.At(),i=this.Hi.kt(),s=this.Cr.Kr();this.Ur&&(this.It.st=s.map((t=>({_t:t.time,nt:0,et:0,Wn:0,jr:t.shape,R:t.color,Fr:t.internalId,Wr:t.id,ii:void 0}))),this.Ur=!1);const n=this.Hi.F().layout;this.It.it=null;const e=i.Fn();if(null===e)return;const r=this.Cr.Tt();if(null===r)return;if(0===this.It.st.length)return;let h=NaN;const l=ii(i.Gn()),a={$r:l,Hr:l};this.It.it=Mt(this.It.st,e,!0);for(let e=this.It.it.from;e<this.It.it.to;e++){const o=s[e];o.time!==h&&(a.$r=l,a.Hr=l,h=o.time);const _=this.It.st[e];_.nt=i.Et(o.time),void 0!==o.text&&o.text.length>0&&(_.ii={zr:o.text,et:0,Zt:0,Kt:0});const u=this.Cr.Gr(o.time);null!==u&&ai(_,o,u,a,n.fontSize,l,t,i,r.Lt)}this.vt=!1}}class _i extends Ut{constructor(t){super(t)}rr(t,i){const s=this.nr;s.xt=!1;const n=this.Dn.F();if(!n.priceLineVisible||!this.Dn.xt())return;const e=this.Dn.Lr(0===n.priceLineSource);e.Or||(s.xt=!0,s.et=e.ki,s.R=this.Dn.Jr(e.R),s.Zt=i,s.Kt=t,s.rt=n.priceLineWidth,s.zt=n.priceLineStyle)}}class ui extends q{constructor(t){super(),this.Ht=t}Vi(t,i,s){t.xt=!1,i.xt=!1;const n=this.Ht;if(!n.xt())return;const e=n.F(),r=e.lastValueVisible,h=""!==n.Qr(),l=0===e.seriesLastValueMode,a=n.Lr(!1);if(a.Or)return;r&&(t.ii=this.th(a,r,l),t.xt=0!==t.ii.length),(h||l)&&(i.ii=this.ih(a,r,h,l),i.xt=i.ii.length>0);const o=n.Jr(a.R),_=m(o);s.t=_.t,s.R=_.i,s.ki=a.ki,i.Ot=n.qt().Bt(a.ki/n.At().Kt()),t.Ot=o,t.R=s.R,i.R=s.R}ih(t,i,s,n){let e="";const r=this.Ht.Qr();return s&&0!==r.length&&(e+=`${r} `),i&&n&&(e+=this.Ht.At().sh()?t.nh:t.eh),e.trim()}th(t,i,s){return i?s?this.Ht.At().sh()?t.eh:t.nh:t.ii:""}}class ci{constructor(t,i){this.rh=t,this.hh=i}lh(t){return null!==t&&(this.rh===t.rh&&this.hh===t.hh)}ah(){return new ci(this.rh,this.hh)}oh(){return this.rh}_h(){return this.hh}uh(){return this.hh-this.rh}Wi(){return this.hh===this.rh||Number.isNaN(this.hh)||Number.isNaN(this.rh)}sn(t){return null===t?this:new ci(Math.min(this.oh(),t.oh()),Math.max(this._h(),t._h()))}dh(t){if(!g(t))return;if(0===this.hh-this.rh)return;const i=.5*(this.hh+this.rh);let s=this.hh-i,n=this.rh-i;s*=t,n*=t,this.hh=i+s,this.rh=i+n}fh(t){g(t)&&(this.hh+=t,this.rh+=t)}ph(){return{minValue:this.rh,maxValue:this.hh}}static mh(t){return null===t?null:new ci(t.minValue,t.maxValue)}}class di{constructor(t,i){this.bh=t,this.wh=i||null}gh(){return this.bh}Mh(){return this.wh}ph(){return null===this.bh?null:{priceRange:this.bh.ph(),margins:this.wh||void 0}}static mh(t){return null===t?null:new di(ci.mh(t.priceRange),t.margins)}}class fi extends Ut{constructor(t,i){super(t),this.Sh=i}rr(t,i){const s=this.nr;s.xt=!1;const n=this.Sh.F();if(!this.Dn.xt()||!n.lineVisible)return;const e=this.Sh.yh();null!==e&&(s.xt=!0,s.et=e,s.R=n.color,s.Zt=i,s.Kt=t,s.rt=n.lineWidth,s.zt=n.lineStyle)}}class pi extends q{constructor(t,i){super(),this.Cr=t,this.Sh=i}Vi(t,i,s){t.xt=!1,i.xt=!1;const n=this.Sh.F(),e=n.axisLabelVisible,r=""!==n.title,h=this.Cr;if(!e||!h.xt())return;const l=this.Sh.yh();if(null===l)return;r&&(i.ii=n.title,i.xt=!0),i.Ot=h.qt().Bt(l/h.At().Kt()),t.ii=this.kh(n.price),t.xt=!0;const a=m(n.color);s.t=a.t,s.R=a.i,s.ki=l}kh(t){const i=this.Cr.Tt();return null===i?"":this.Cr.At().zi(t,i.Lt)}}class vi{constructor(t,i){this.Cr=t,this.cs=i,this.Ch=new fi(t,this),this.Ke=new pi(t,this),this.xh=new $t(this.Ke,t,t.qt())}Th(t){w(this.cs,t),this.wt(),this.Cr.qt().Dh()}F(){return this.cs}Ph(){return this.Ch}Rh(){return this.xh}Ah(){return this.Ke}wt(){this.Ch.wt(),this.Ke.wt()}yh(){const t=this.Cr,i=t.At();if(t.qt().kt().Wi()||i.Wi())return null;const s=t.Tt();return null===s?null:i.Rt(this.cs.price,s.Lt)}}class mi extends G{constructor(t){super(),this.Hi=t}qt(){return this.Hi}}const bi={Bar:(t,i,s,n)=>{var e;const r=i.upColor,h=i.downColor,o=l(t(s,n)),_=a(o.Lt[0])<=a(o.Lt[3]);return{se:null!==(e=o.R)&&void 0!==e?e:_?r:h}},Candlestick:(t,i,s,n)=>{var e,r,h;const o=i.upColor,_=i.downColor,u=i.borderUpColor,c=i.borderDownColor,d=i.wickUpColor,f=i.wickDownColor,p=l(t(s,n)),v=a(p.Lt[0])<=a(p.Lt[3]);return{se:null!==(e=p.R)&&void 0!==e?e:v?o:_,Pe:null!==(r=p.Ot)&&void 0!==r?r:v?u:c,De:null!==(h=p.Lh)&&void 0!==h?h:v?d:f}},Area:(t,i,s,n)=>{var e,r,h,a;const o=l(t(s,n));return{se:null!==(e=o.ot)&&void 0!==e?e:i.lineColor,ot:null!==(r=o.ot)&&void 0!==r?r:i.lineColor,mn:null!==(h=o.mn)&&void 0!==h?h:i.topColor,bn:null!==(a=o.bn)&&void 0!==a?a:i.bottomColor}},Baseline:(t,i,s,n)=>{var e,r,h,a,o,_;const u=l(t(s,n));return{se:u.Lt[3]>=i.baseValue.price?i.topLineColor:i.bottomLineColor,we:null!==(e=u.we)&&void 0!==e?e:i.topLineColor,ge:null!==(r=u.ge)&&void 0!==r?r:i.bottomLineColor,fe:null!==(h=u.fe)&&void 0!==h?h:i.topFillColor1,pe:null!==(a=u.pe)&&void 0!==a?a:i.topFillColor2,ve:null!==(o=u.ve)&&void 0!==o?o:i.bottomFillColor1,me:null!==(_=u.me)&&void 0!==_?_:i.bottomFillColor2}},Line:(t,i,s,n)=>{var e,r;const h=l(t(s,n));return{se:null!==(e=h.R)&&void 0!==e?e:i.color,ot:null!==(r=h.R)&&void 0!==r?r:i.color}},Histogram:(t,i,s,n)=>{var e;return{se:null!==(e=l(t(s,n)).R)&&void 0!==e?e:i.color}}};class wi{constructor(t){this.Oh=(t,i)=>void 0!==i?i.Lt:this.Cr.Is().Bh(t),this.Cr=t,this.Eh=bi[t.Ih()]}Bn(t,i){return this.Eh(this.Oh,this.Cr.F(),t,i)}}var gi;!function(t){t[t.NearestLeft=-1]="NearestLeft",t[t.None=0]="None",t[t.NearestRight=1]="NearestRight"}(gi||(gi={}));class Mi{constructor(){this.Vh=[],this.Nh=new Map,this.Fh=new Map}Wh(){return this.Wn()>0?this.Vh[this.Vh.length-1]:null}zh(){return this.Wn()>0?this.jh(0):null}Es(){return this.Wn()>0?this.jh(this.Vh.length-1):null}Wn(){return this.Vh.length}Wi(){return 0===this.Wn()}Br(t){return null!==this.$h(t,0)}Bh(t){return this.Hh(t)}Hh(t,i=0){const s=this.$h(t,i);return null===s?null:Object.assign(Object.assign({},this.Uh(s)),{Xn:this.jh(s)})}qn(){return this.Vh}qh(t,i,s){if(this.Wi())return null;let n=null;for(const e of s){n=Si(n,this.Yh(t,i,e))}return n}tt(t){this.Fh.clear(),this.Nh.clear(),this.Vh=t}jh(t){return this.Vh[t].Xn}Uh(t){return this.Vh[t]}$h(t,i){const s=this.Xh(t);if(null===s&&0!==i)switch(i){case-1:return this.Zh(t);case 1:return this.Kh(t);default:throw new TypeError("Unknown search mode")}return s}Zh(t){let i=this.Gh(t);return i>0&&(i-=1),i!==this.Vh.length&&this.jh(i)<t?i:null}Kh(t){const i=this.Jh(t);return i!==this.Vh.length&&t<this.jh(i)?i:null}Xh(t){const i=this.Gh(t);return i===this.Vh.length||t<this.Vh[i].Xn?null:i}Gh(t){return mt(this.Vh,t,((t,i)=>t.Xn<i))}Jh(t){return bt(this.Vh,t,((t,i)=>i.Xn>t))}Qh(t,i,s){let n=null;for(let e=t;e<i;e++){const t=this.Vh[e].Lt[s];Number.isNaN(t)||(null===n?n={tl:t,il:t}:(t<n.tl&&(n.tl=t),t>n.il&&(n.il=t)))}return n}Yh(t,i,s){if(this.Wi())return null;let n=null;const e=l(this.zh()),r=l(this.Es()),h=Math.max(t,e),a=Math.min(i,r),o=30*Math.ceil(h/30),_=Math.max(o,30*Math.floor(a/30));{const t=this.Gh(h),e=this.Jh(Math.min(a,o,i));n=Si(n,this.Qh(t,e,s))}let u=this.Nh.get(s);void 0===u&&(u=new Map,this.Nh.set(s,u));for(let t=Math.max(o+1,h);t<_;t+=30){const i=Math.floor(t/30);let e=u.get(i);if(void 0===e){const t=this.Gh(30*i),n=this.Jh(30*(i+1)-1);e=this.Qh(t,n,s),u.set(i,e)}n=Si(n,e)}{const t=this.Gh(_),i=this.Jh(a);n=Si(n,this.Qh(t,i,s))}return n}}function Si(t,i){if(null===t)return i;if(null===i)return t;return{tl:Math.min(t.tl,i.tl),il:Math.max(t.il,i.il)}}class yi extends mi{constructor(t,i,s){super(t),this.It=new Mi,this.Ch=new _i(this),this.sl=[],this.nl=new qt(this),this.el=null,this.rl=null,this.hl=[],this.ll=[],this.al=null,this.cs=i,this.ol=s;const n=new ui(this);this.rs=[n],this.xh=new $t(n,this,t),"Area"!==s&&"Line"!==s&&"Baseline"!==s||(this.el=new Gt(this)),this._l(),this.ul()}M(){null!==this.al&&clearTimeout(this.al)}Jr(t){return this.cs.priceLineColor||t}Lr(t){const i={Or:!0},s=this.At();if(this.qt().kt().Wi()||s.Wi()||this.It.Wi())return i;const n=this.qt().kt().Fn(),e=this.Tt();if(null===n||null===e)return i;let r,h;if(t){const t=this.It.Wh();if(null===t)return i;r=t,h=t.Xn}else{const t=this.It.Hh(n.Sn(),-1);if(null===t)return i;if(r=this.It.Bh(t.Xn),null===r)return i;h=t.Xn}const l=r.Lt[3],a=this.En().Bn(h,{Lt:r}),o=s.Rt(l,e.Lt);return{Or:!1,ut:l,ii:s.zi(l,e.Lt),nh:s.cl(l),eh:s.dl(l,e.Lt),R:a.se,ki:o,Xn:h}}En(){return null!==this.rl||(this.rl=new wi(this)),this.rl}F(){return this.cs}Th(t){const i=t.priceScaleId;void 0!==i&&i!==this.cs.priceScaleId&&this.qt().fl(this,i),w(this.cs,t),void 0!==t.priceFormat&&(this._l(),this.qt().pl()),this.qt().vl(this),this.qt().ml(),this.gs.wt("options")}tt(t,i){this.It.tt(t),this.bl(),this.gs.wt("data"),this.ds.wt("data"),null!==this.el&&(i&&i.wl?this.el.Dr():0===t.length&&this.el.Tr());const s=this.qt().Je(this);this.qt().gl(s),this.qt().vl(this),this.qt().ml(),this.qt().Dh()}Ml(t){this.hl=t,this.bl();const i=this.qt().Je(this);this.ds.wt("data"),this.qt().gl(i),this.qt().vl(this),this.qt().ml(),this.qt().Dh()}Sl(){return this.hl}Kr(){return this.ll}yl(t){const i=new vi(this,t);return this.sl.push(i),this.qt().vl(this),i}kl(t){const i=this.sl.indexOf(t);-1!==i&&this.sl.splice(i,1),this.qt().vl(this)}Ih(){return this.ol}Tt(){const t=this.Cl();return null===t?null:{Lt:t.Lt[3],xl:t._t}}Cl(){const t=this.qt().kt().Fn();if(null===t)return null;const i=t.Mn();return this.It.Hh(i,1)}Is(){return this.It}Gr(t){const i=this.It.Bh(t);return null===i?null:"Bar"===this.ol||"Candlestick"===this.ol?{_e:i.Lt[0],ue:i.Lt[1],ce:i.Lt[2],de:i.Lt[3]}:i.Lt[3]}Tl(t){const i=this.el;return null!==i&&i.xt()?(null===this.al&&i.Rr()&&(this.al=setTimeout((()=>{this.al=null,this.qt().Dl()}),0)),i.Pr(),[i]):[]}Ps(){const t=[];this.Pl()||t.push(this.nl),t.push(this.gs,this.Ch,this.ds);const i=this.sl.map((t=>t.Ph()));return t.push(...i),t}Ji(t){return[this.xh,...this.sl.map((t=>t.Rh()))]}Rs(t,i){if(i!==this.Yi&&!this.Pl())return[];const s=[...this.rs];for(const t of this.sl)s.push(t.Ah());return s}Rl(t,i){if(void 0!==this.cs.autoscaleInfoProvider){const s=this.cs.autoscaleInfoProvider((()=>{const s=this.Al(t,i);return null===s?null:s.ph()}));return di.mh(s)}return this.Al(t,i)}Ll(){return this.cs.priceFormat.minMove}Ol(){return this.Bl}Ls(){var t;this.gs.wt(),this.ds.wt();for(const t of this.rs)t.wt();for(const t of this.sl)t.wt();this.Ch.wt(),this.nl.wt(),null===(t=this.el)||void 0===t||t.wt()}At(){return l(super.At())}Ct(t){if(!(("Line"===this.ol||"Area"===this.ol||"Baseline"===this.ol)&&this.cs.crosshairMarkerVisible))return null;const i=this.It.Bh(t);if(null===i)return null;return{ut:i.Lt[3],lt:this.El(),Ot:this.Il(),Pt:this.Vl(),Dt:this.Nl(t)}}Qr(){return this.cs.title}xt(){return this.cs.visible}Pl(){return!tt(this.At().Fl())}Al(t,i){if(!M(t)||!M(i)||this.It.Wi())return null;const s="Line"===this.ol||"Area"===this.ol||"Baseline"===this.ol||"Histogram"===this.ol?[3]:[2,1],n=this.It.qh(t,i,s);let e=null!==n?new ci(n.tl,n.il):null;if("Histogram"===this.Ih()){const t=this.cs.base,i=new ci(t,t);e=null!==e?e.sn(i):i}return new di(e,this.ds.Zr())}El(){switch(this.ol){case"Line":case"Area":case"Baseline":return this.cs.crosshairMarkerRadius}return 0}Il(){switch(this.ol){case"Line":case"Area":case"Baseline":{const t=this.cs.crosshairMarkerBorderColor;if(0!==t.length)return t}}return null}Vl(){switch(this.ol){case"Line":case"Area":case"Baseline":return this.cs.crosshairMarkerBorderWidth}return 0}Nl(t){switch(this.ol){case"Line":case"Area":case"Baseline":{const t=this.cs.crosshairMarkerBackgroundColor;if(0!==t.length)return t}}return this.En().Bn(t).se}_l(){switch(this.cs.priceFormat.type){case"custom":this.Bl={format:this.cs.priceFormat.formatter};break;case"volume":this.Bl=new ht(this.cs.priceFormat.precision);break;case"percent":this.Bl=new rt(this.cs.priceFormat.precision);break;default:{const t=Math.pow(10,this.cs.priceFormat.precision);this.Bl=new et(t,this.cs.priceFormat.minMove*t)}}null!==this.Yi&&this.Yi.Wl()}bl(){const t=this.qt().kt();if(t.Wi()||0===this.It.Wn())return void(this.ll=[]);const i=l(this.It.zh());this.ll=this.hl.map(((s,n)=>{const e=l(t.zl(s.time,!0)),r=e<i?1:-1;return{time:l(this.It.Hh(e,r)).Xn,position:s.position,shape:s.shape,color:s.color,id:s.id,internalId:n,text:s.text,size:s.size}}))}ul(){switch(this.ds=new oi(this,this.qt()),this.ol){case"Bar":this.gs=new Tt(this,this.qt());break;case"Candlestick":this.gs=new It(this,this.qt());break;case"Line":this.gs=new Ft(this,this.qt());break;case"Area":this.gs=new kt(this,this.qt());break;case"Baseline":this.gs=new Bt(this,this.qt());break;case"Histogram":this.gs=new Nt(this,this.qt());break;default:throw Error("Unknown chart style assigned: "+this.ol)}}}class ki{constructor(t){this.cs=t}jl(t,i,s){let n=t;if(0===this.cs.mode)return n;const e=s.ps(),r=e.Tt();if(null===r)return n;const h=e.Rt(t,r),l=s.$l().filter((t=>t instanceof yi)).reduce(((t,n)=>{if(s.Qe(n)||!n.xt())return t;const e=n.At(),r=n.Is();if(e.Wi()||!r.Br(i))return t;const h=r.Bh(i);if(null===h)return t;const l=a(n.Tt());return t.concat([e.Rt(h.Lt[3],l.Lt)])}),[]);if(0===l.length)return n;l.sort(((t,i)=>Math.abs(t-h)-Math.abs(i-h)));const o=l[0];return n=e.vs(o,r),n}}class Ci{constructor(){this.It=null}tt(t){this.It=t}X(t,i,s,e){if(null===this.It)return;const r=Math.max(1,Math.floor(i));t.lineWidth=r;const h=Math.ceil(this.It.Wt*i),a=Math.ceil(this.It.Ft*i);!function(t,i){t.save(),t.lineWidth%2&&t.translate(.5,.5),i(),t.restore()}(t,(()=>{const s=l(this.It);if(s.Hl){t.strokeStyle=s.Ul,n(t,s.ql),t.beginPath();for(const n of s.Yl){const s=Math.round(n.Xl*i);t.moveTo(s,-r),t.lineTo(s,h+r)}t.stroke()}if(s.Zl){t.strokeStyle=s.Kl,n(t,s.Gl),t.beginPath();for(const n of s.Jl){const s=Math.round(n.Xl*i);t.moveTo(-r,s),t.lineTo(a+r,s)}t.stroke()}}))}}class xi{constructor(t){this.$t=new Ci,this.vt=!0,this.ts=t}wt(){this.vt=!0}Mt(t,i){if(this.vt){const s=this.ts.qt().F().grid,n={Wt:t,Ft:i,Zl:s.horzLines.visible,Hl:s.vertLines.visible,Kl:s.horzLines.color,Ul:s.vertLines.color,Gl:s.horzLines.style,ql:s.vertLines.style,Jl:this.ts.ps().Ql(),Yl:this.ts.qt().kt().Ql()||[]};this.$t.tt(n),this.vt=!1}return this.$t}}class Ti{constructor(t){this.gs=new xi(t)}Ph(){return this.gs}}const Di={ta:4,ia:1e-4};function Pi(t,i){const s=100*(t-i)/i;return i<0?-s:s}function Ri(t,i){const s=Pi(t.oh(),i),n=Pi(t._h(),i);return new ci(s,n)}function Ai(t,i){const s=100*(t-i)/i+100;return i<0?-s:s}function Li(t,i){const s=Ai(t.oh(),i),n=Ai(t._h(),i);return new ci(s,n)}function Oi(t,i){const s=Math.abs(t);if(s<1e-15)return 0;const n=Rt(s+i.ia)+i.ta;return t<0?-n:n}function Bi(t,i){const s=Math.abs(t);if(s<1e-15)return 0;const n=Math.pow(10,s-i.ta)-i.ia;return t<0?-n:n}function Ei(t,i){if(null===t)return null;const s=Oi(t.oh(),i),n=Oi(t._h(),i);return new ci(s,n)}function Ii(t,i){if(null===t)return null;const s=Bi(t.oh(),i),n=Bi(t._h(),i);return new ci(s,n)}function Vi(t){if(null===t)return Di;const i=Math.abs(t._h()-t.oh());if(i>=1||i<1e-15)return Di;const s=Math.ceil(Math.abs(Math.log10(i))),n=Di.ta+s;return{ta:n,ia:1/Math.pow(10,n)}}class Ni{constructor(t,i){if(this.sa=t,this.na=i,function(t){if(t<0)return!1;for(let i=t;i>1;i/=10)if(i%10!=0)return!1;return!0}(this.sa))this.ea=[2,2.5,2];else{this.ea=[];for(let t=this.sa;1!==t;){if(t%2==0)this.ea.push(2),t/=2;else{if(t%5!=0)throw new Error("unexpected base");this.ea.push(2,2.5),t/=5}if(this.ea.length>100)throw new Error("something wrong with base")}}}ra(t,i,s){const n=0===this.sa?0:1/this.sa;let e=Math.pow(10,Math.max(0,Math.ceil(Rt(t-i)))),r=0,h=this.na[0];for(;;){const t=Pt(e,n,1e-14)&&e>n+1e-14,i=Pt(e,s*h,1e-14),l=Pt(e,1,1e-14);if(!(t&&i&&l))break;e/=h,h=this.na[++r%this.na.length]}if(e<=n+1e-14&&(e=n),e=Math.max(1,e),this.ea.length>0&&(l=e,a=1,o=1e-14,Math.abs(l-a)<o))for(r=0,h=this.ea[0];Pt(e,s*h,1e-14)&&e>n+1e-14;)e/=h,h=this.ea[++r%this.ea.length];var l,a,o;return e}}class Fi{constructor(t,i,s,n){this.ha=[],this.Ni=t,this.sa=i,this.la=s,this.aa=n}ra(t,i){if(t<i)throw new Error("high < low");const s=this.Ni.Kt(),n=(t-i)*this.oa()/s,e=new Ni(this.sa,[2,2.5,2]),r=new Ni(this.sa,[2,2,2.5]),h=new Ni(this.sa,[2.5,2,2]),l=[];return l.push(e.ra(t,i,n),r.ra(t,i,n),h.ra(t,i,n)),function(t){if(t.length<1)throw Error("array is empty");let i=t[0];for(let s=1;s<t.length;++s)t[s]<i&&(i=t[s]);return i}(l)}_a(){const t=this.Ni,i=t.Tt();if(null===i)return void(this.ha=[]);const s=t.Kt(),n=this.la(s-1,i),e=this.la(0,i),r=this.Ni.F().entireTextOnly?this.ua()/2:0,h=r,l=s-1-r,a=Math.max(n,e),o=Math.min(n,e);if(a===o)return void(this.ha=[]);let _=this.ra(a,o),u=a%_;u+=u<0?_:0;const c=a>=o?1:-1;let d=null,f=0;for(let s=a-u;s>o;s-=_){const n=this.aa(s,i,!0);null!==d&&Math.abs(n-d)<this.oa()||(n<h||n>l||(f<this.ha.length?(this.ha[f].Xl=n,this.ha[f].ca=t.da(s)):this.ha.push({Xl:n,ca:t.da(s)}),f++,d=n,t.fa()&&(_=this.ra(s*c,o))))}this.ha.length=f}Ql(){return this.ha}ua(){return this.Ni.T()}oa(){return Math.ceil(2.5*this.ua())}}function Wi(t){return t.slice().sort(((t,i)=>l(t.Zi())-l(i.Zi())))}var zi;!function(t){t[t.Normal=0]="Normal",t[t.Logarithmic=1]="Logarithmic",t[t.Percentage=2]="Percentage",t[t.IndexedTo100=3]="IndexedTo100"}(zi||(zi={}));const ji=new rt,$i=new et(100,1);class Hi{constructor(t,i,s,n){this.pa=0,this.va=null,this.bh=null,this.ma=null,this.ba={wa:!1,ga:null},this.Ma=0,this.Sa=0,this.ya=new b,this.ka=new b,this.Ca=[],this.xa=null,this.Ta=null,this.Da=null,this.Pa=null,this.Bl=$i,this.Ra=Vi(null),this.Aa=t,this.cs=i,this.La=s,this.Oa=n,this.Ba=new Fi(this,100,this.Ea.bind(this),this.Ia.bind(this))}Fl(){return this.Aa}F(){return this.cs}Th(t){if(w(this.cs,t),this.Wl(),void 0!==t.mode&&this.Va({hr:t.mode}),void 0!==t.scaleMargins){const i=h(t.scaleMargins.top),s=h(t.scaleMargins.bottom);if(i<0||i>1)throw new Error(`Invalid top margin - expect value between 0 and 1, given=${i}`);if(s<0||s>1||i+s>1)throw new Error(`Invalid bottom margin - expect value between 0 and 1, given=${s}`);if(i+s>1)throw new Error(`Invalid margins - sum of margins must be less than 1, given=${i+s}`);this.Na(),this.Ta=null}}Fa(){return this.cs.autoScale}fa(){return 1===this.cs.mode}sh(){return 2===this.cs.mode}Wa(){return 3===this.cs.mode}hr(){return{js:this.cs.autoScale,za:this.cs.invertScale,hr:this.cs.mode}}Va(t){const i=this.hr();let s=null;void 0!==t.js&&(this.cs.autoScale=t.js),void 0!==t.hr&&(this.cs.mode=t.hr,2!==t.hr&&3!==t.hr||(this.cs.autoScale=!0),this.ba.wa=!1),1===i.hr&&t.hr!==i.hr&&(!function(t,i){if(null===t)return!1;const s=Bi(t.oh(),i),n=Bi(t._h(),i);return isFinite(s)&&isFinite(n)}(this.bh,this.Ra)?this.cs.autoScale=!0:(s=Ii(this.bh,this.Ra),null!==s&&this.ja(s))),1===t.hr&&t.hr!==i.hr&&(s=Ei(this.bh,this.Ra),null!==s&&this.ja(s));const n=i.hr!==this.cs.mode;n&&(2===i.hr||this.sh())&&this.Wl(),n&&(3===i.hr||this.Wa())&&this.Wl(),void 0!==t.za&&i.za!==t.za&&(this.cs.invertScale=t.za,this.$a()),this.ka.m(i,this.hr())}Ha(){return this.ka}T(){return this.La.fontSize}Kt(){return this.pa}Ua(t){this.pa!==t&&(this.pa=t,this.Na(),this.Ta=null)}qa(){if(this.va)return this.va;const t=this.Kt()-this.Ya()-this.Xa();return this.va=t,t}gh(){return this.Za(),this.bh}ja(t,i){const s=this.bh;(i||null===s&&null!==t||null!==s&&!s.lh(t))&&(this.Ta=null,this.bh=t)}Wi(){return this.Za(),0===this.pa||!this.bh||this.bh.Wi()}Ka(t){return this.za()?t:this.Kt()-1-t}Rt(t,i){return this.sh()?t=Pi(t,i):this.Wa()&&(t=Ai(t,i)),this.Ia(t,i)}Hn(t,i,s){this.Za();const n=this.Xa(),e=l(this.gh()),r=e.oh(),h=e._h(),a=this.qa()-1,o=this.za(),_=a/(h-r),u=void 0===s?0:s.from,c=void 0===s?t.length:s.to,d=this.Ga();for(let s=u;s<c;s++){const e=t[s],h=e.ut;if(isNaN(h))continue;let l=h;null!==d&&(l=d(e.ut,i));const a=n+_*(l-r),u=o?a:this.pa-1-a;e.et=u}}ae(t,i,s){this.Za();const n=this.Xa(),e=l(this.gh()),r=e.oh(),h=e._h(),a=this.qa()-1,o=this.za(),_=a/(h-r),u=void 0===s?0:s.from,c=void 0===s?t.length:s.to,d=this.Ga();for(let s=u;s<c;s++){const e=t[s];let h=e._e,l=e.ue,a=e.ce,u=e.de;null!==d&&(h=d(e._e,i),l=d(e.ue,i),a=d(e.ce,i),u=d(e.de,i));let c=n+_*(h-r),f=o?c:this.pa-1-c;e.he=f,c=n+_*(l-r),f=o?c:this.pa-1-c,e.ne=f,c=n+_*(a-r),f=o?c:this.pa-1-c,e.ee=f,c=n+_*(u-r),f=o?c:this.pa-1-c,e.le=f}}vs(t,i){const s=this.Ea(t,i);return this.Ja(s,i)}Ja(t,i){let s=t;return this.sh()?s=function(t,i){return i<0&&(t=-t),t/100*i+i}(s,i):this.Wa()&&(s=function(t,i){return t-=100,i<0&&(t=-t),t/100*i+i}(s,i)),s}$l(){return this.Ca}Qa(){if(this.xa)return this.xa;let t=[];for(let i=0;i<this.Ca.length;i++){const s=this.Ca[i];null===s.Zi()&&s.Ki(i+1),t.push(s)}return t=Wi(t),this.xa=t,this.xa}io(t){-1===this.Ca.indexOf(t)&&(this.Ca.push(t),this.Wl(),this.so())}no(t){const i=this.Ca.indexOf(t);if(-1===i)throw new Error("source is not attached to scale");this.Ca.splice(i,1),0===this.Ca.length&&(this.Va({js:!0}),this.ja(null)),this.Wl(),this.so()}Tt(){let t=null;for(const i of this.Ca){const s=i.Tt();null!==s&&((null===t||s.xl<t.xl)&&(t=s))}return null===t?null:t.Lt}za(){return this.cs.invertScale}Ql(){const t=null===this.Tt();if(null!==this.Ta&&(t||this.Ta.eo===t))return this.Ta.Ql;this.Ba._a();const i=this.Ba.Ql();return this.Ta={Ql:i,eo:t},this.ya.m(),i}ro(){return this.ya}ho(t){this.sh()||this.Wa()||null===this.Da&&null===this.ma&&(this.Wi()||(this.Da=this.pa-t,this.ma=l(this.gh()).ah()))}lo(t){if(this.sh()||this.Wa())return;if(null===this.Da)return;this.Va({js:!1}),(t=this.pa-t)<0&&(t=0);let i=(this.Da+.2*(this.pa-1))/(t+.2*(this.pa-1));const s=l(this.ma).ah();i=Math.max(i,.1),s.dh(i),this.ja(s)}ao(){this.sh()||this.Wa()||(this.Da=null,this.ma=null)}oo(t){this.Fa()||null===this.Pa&&null===this.ma&&(this.Wi()||(this.Pa=t,this.ma=l(this.gh()).ah()))}_o(t){if(this.Fa())return;if(null===this.Pa)return;const i=l(this.gh()).uh()/(this.qa()-1);let s=t-this.Pa;this.za()&&(s*=-1);const n=s*i,e=l(this.ma).ah();e.fh(n),this.ja(e,!0),this.Ta=null}uo(){this.Fa()||null!==this.Pa&&(this.Pa=null,this.ma=null)}Ol(){return this.Bl||this.Wl(),this.Bl}zi(t,i){switch(this.cs.mode){case 2:return this.Ol().format(Pi(t,i));case 3:return this.Ol().format(Ai(t,i));default:return this.kh(t)}}da(t){switch(this.cs.mode){case 2:case 3:return this.Ol().format(t);default:return this.kh(t)}}cl(t){return this.kh(t,l(this.co()).Ol())}dl(t,i){return t=Pi(t,i),ji.format(t)}do(){return this.Ca}fo(t){this.ba={ga:t,wa:!1}}Ls(){this.Ca.forEach((t=>t.Ls()))}Wl(){this.Ta=null;const t=this.co();let i=100;null!==t&&(i=Math.round(1/t.Ll())),this.Bl=$i,this.sh()?(this.Bl=ji,i=100):this.Wa()?(this.Bl=new et(100,1),i=100):null!==t&&(this.Bl=t.Ol()),this.Ba=new Fi(this,i,this.Ea.bind(this),this.Ia.bind(this)),this.Ba._a()}so(){this.xa=null}co(){return this.Ca[0]||null}Ya(){return this.za()?this.cs.scaleMargins.bottom*this.Kt()+this.Sa:this.cs.scaleMargins.top*this.Kt()+this.Ma}Xa(){return this.za()?this.cs.scaleMargins.top*this.Kt()+this.Ma:this.cs.scaleMargins.bottom*this.Kt()+this.Sa}Za(){this.ba.wa||(this.ba.wa=!0,this.po())}Na(){this.va=null}Ia(t,i){if(this.Za(),this.Wi())return 0;t=this.fa()&&t?Oi(t,this.Ra):t;const s=l(this.gh()),n=this.Xa()+(this.qa()-1)*(t-s.oh())/s.uh();return this.Ka(n)}Ea(t,i){if(this.Za(),this.Wi())return 0;const s=this.Ka(t),n=l(this.gh()),e=n.oh()+n.uh()*((s-this.Xa())/(this.qa()-1));return this.fa()?Bi(e,this.Ra):e}$a(){this.Ta=null,this.Ba._a()}po(){const t=this.ba.ga;if(null===t)return;let i=null;const s=this.do();let n=0,e=0;for(const r of s){if(!r.xt())continue;const s=r.Tt();if(null===s)continue;const h=r.Rl(t.Mn(),t.Sn());let a=h&&h.gh();if(null!==a){switch(this.cs.mode){case 1:a=Ei(a,this.Ra);break;case 2:a=Ri(a,s.Lt);break;case 3:a=Li(a,s.Lt)}if(i=null===i?a:i.sn(l(a)),null!==h){const t=h.Mh();null!==t&&(n=Math.max(n,t.above),e=Math.max(n,t.below))}}}if(n===this.Ma&&e===this.Sa||(this.Ma=n,this.Sa=e,this.Ta=null,this.Na()),null!==i){if(i.oh()===i._h()){const t=this.co(),s=5*(null===t||this.sh()||this.Wa()?1:t.Ll());this.fa()&&(i=Ii(i,this.Ra)),i=new ci(i.oh()-s,i._h()+s),this.fa()&&(i=Ei(i,this.Ra))}if(this.fa()){const t=Ii(i,this.Ra),s=Vi(t);if(r=s,h=this.Ra,r.ta!==h.ta||r.ia!==h.ia){const n=null!==this.ma?Ii(this.ma,this.Ra):null;this.Ra=s,i=Ei(t,s),null!==n&&(this.ma=Ei(n,s))}}this.ja(i)}else null===this.bh&&(this.ja(new ci(-.5,.5)),this.Ra=Vi(null));var r,h;this.ba.wa=!0}Ga(){return this.sh()?Pi:this.Wa()?Ai:this.fa()?t=>Oi(t,this.Ra):null}kh(t,i){return void 0===this.Oa.priceFormatter?(void 0===i&&(i=this.Ol()),i.format(t)):this.Oa.priceFormatter(t)}}class Ui{constructor(t,i){this.Ca=[],this.vo=new Map,this.pa=0,this.Ye=0,this.mo=1e3,this.xa=null,this.bo=new b,this.wo=t,this.Hi=i,this.Mo=new Ti(this);const s=i.F();this.So=this.yo("left",s.leftPriceScale),this.ko=this.yo("right",s.rightPriceScale),this.So.Ha().l(this.Co.bind(this,this.So),this),this.ko.Ha().l(this.Co.bind(this,this.ko),this),this.xo(s)}xo(t){if(t.leftPriceScale&&this.So.Th(t.leftPriceScale),t.rightPriceScale&&this.ko.Th(t.rightPriceScale),t.localization&&(this.So.Wl(),this.ko.Wl()),t.overlayPriceScales){const i=Array.from(this.vo.values());for(const s of i){const i=l(s[0].At());i.Th(t.overlayPriceScales),t.localization&&i.Wl()}}}To(t){switch(t){case"left":return this.So;case"right":return this.ko}return this.vo.has(t)?h(this.vo.get(t))[0].At():null}M(){this.qt().Do().v(this),this.So.Ha().v(this),this.ko.Ha().v(this),this.Ca.forEach((t=>{t.M&&t.M()})),this.bo.m()}Po(){return this.mo}Ro(t){this.mo=t}qt(){return this.Hi}Zt(){return this.Ye}Kt(){return this.pa}Ao(t){this.Ye=t,this.Lo()}Ua(t){this.pa=t,this.So.Ua(t),this.ko.Ua(t),this.Ca.forEach((i=>{if(this.Qe(i)){const s=i.At();null!==s&&s.Ua(t)}})),this.Lo()}$l(){return this.Ca}Qe(t){const i=t.At();return null===i||this.So!==i&&this.ko!==i}io(t,i,s){const n=void 0!==s?s:this.Bo().Oo+1;this.Eo(t,i,n)}no(t){const i=this.Ca.indexOf(t);r(-1!==i,"removeDataSource: invalid data source"),this.Ca.splice(i,1);const s=l(t.At()).Fl();if(this.vo.has(s)){const i=h(this.vo.get(s)),n=i.indexOf(t);-1!==n&&(i.splice(n,1),0===i.length&&this.vo.delete(s))}const n=t.At();n&&n.$l().indexOf(t)>=0&&n.no(t),null!==n&&(n.so(),this.Io(n)),this.xa=null}ir(t){return t===this.So?"left":t===this.ko?"right":"overlay"}Vo(){return this.So}No(){return this.ko}Fo(t,i){t.ho(i)}Wo(t,i){t.lo(i),this.Lo()}zo(t){t.ao()}jo(t,i){t.oo(i)}$o(t,i){t._o(i),this.Lo()}Ho(t){t.uo()}Lo(){this.Ca.forEach((t=>{t.Ls()}))}ps(){let t=null;return this.Hi.F().rightPriceScale.visible&&0!==this.ko.$l().length?t=this.ko:this.Hi.F().leftPriceScale.visible&&0!==this.So.$l().length?t=this.So:0!==this.Ca.length&&(t=this.Ca[0].At()),null===t&&(t=this.ko),t}tr(){let t=null;return this.Hi.F().rightPriceScale.visible?t=this.ko:this.Hi.F().leftPriceScale.visible&&(t=this.So),t}Io(t){null!==t&&t.Fa()&&this.Uo(t)}qo(t){const i=this.wo.Fn();t.Va({js:!0}),null!==i&&t.fo(i),this.Lo()}Yo(){this.Uo(this.So),this.Uo(this.ko)}Xo(){this.Io(this.So),this.Io(this.ko),this.Ca.forEach((t=>{this.Qe(t)&&this.Io(t.At())})),this.Lo(),this.Hi.Dh()}Qa(){return null===this.xa&&(this.xa=Wi(this.Ca)),this.xa}Zo(){return this.bo}Ko(){return this.Mo}Uo(t){const i=t.do();if(i&&i.length>0&&!this.wo.Wi()){const i=this.wo.Fn();null!==i&&t.fo(i)}t.Ls()}Bo(){const t=this.Qa();if(0===t.length)return{Go:0,Oo:0};let i=0,s=0;for(let n=0;n<t.length;n++){const e=t[n].Zi();null!==e&&(e<i&&(i=e),e>s&&(s=e))}return{Go:i,Oo:s}}Eo(t,i,s){let n=this.To(i);if(null===n&&(n=this.yo(i,this.Hi.F().overlayPriceScales)),this.Ca.push(t),!tt(i)){const s=this.vo.get(i)||[];s.push(t),this.vo.set(i,s)}n.io(t),t.Gi(n),t.Ki(s),this.Io(n),this.xa=null}Co(t,i,s){i.hr!==s.hr&&this.Uo(t)}yo(t,i){const s=Object.assign({visible:!0,autoScale:!0},k(i)),n=new Hi(t,s,this.Hi.F().layout,this.Hi.F().localization);return n.Ua(this.Kt()),n}}const qi=t=>t.getUTCFullYear();function Yi(t,i,s){return i.replace(/yyyy/g,(t=>nt(qi(t),4))(t)).replace(/yy/g,(t=>nt(qi(t)%100,2))(t)).replace(/MMMM/g,((t,i)=>new Date(t.getUTCFullYear(),t.getUTCMonth(),1).toLocaleString(i,{month:"long"}))(t,s)).replace(/MMM/g,((t,i)=>new Date(t.getUTCFullYear(),t.getUTCMonth(),1).toLocaleString(i,{month:"short"}))(t,s)).replace(/MM/g,(t=>nt((t=>t.getUTCMonth()+1)(t),2))(t)).replace(/dd/g,(t=>nt((t=>t.getUTCDate())(t),2))(t))}class Xi{constructor(t="yyyy-MM-dd",i="default"){this.Jo=t,this.Qo=i}t_(t){return Yi(t,this.Jo,this.Qo)}}class Zi{constructor(t){this.i_=t||"%h:%m:%s"}t_(t){return this.i_.replace("%h",nt(t.getUTCHours(),2)).replace("%m",nt(t.getUTCMinutes(),2)).replace("%s",nt(t.getUTCSeconds(),2))}}const Ki={s_:"yyyy-MM-dd",n_:"%h:%m:%s",e_:" ",r_:"default"};class Gi{constructor(t={}){const i=Object.assign(Object.assign({},Ki),t);this.h_=new Xi(i.s_,i.r_),this.l_=new Zi(i.n_),this.a_=i.e_}t_(t){return`${this.h_.t_(t)}${this.a_}${this.l_.t_(t)}`}}class Ji{constructor(t,i=50){this.Ee=0,this.Ie=1,this.Ve=1,this.Fe=new Map,this.Ne=new Map,this.o_=t,this.We=i}t_(t){const i=t._t,s=void 0===i.__?new Date(1e3*i.u_).getTime():new Date(Date.UTC(i.__.year,i.__.month-1,i.__.day)).getTime(),n=this.Fe.get(s);if(void 0!==n)return n.c_;if(this.Ee===this.We){const t=this.Ne.get(this.Ve);this.Ne.delete(this.Ve),this.Fe.delete(h(t)),this.Ve++,this.Ee--}const e=this.o_(t);return this.Fe.set(s,{c_:e,He:this.Ie}),this.Ne.set(this.Ie,s),this.Ee++,this.Ie++,e}}class Qi{constructor(t,i){r(t<=i,"right should be >= left"),this.d_=t,this.f_=i}Mn(){return this.d_}Sn(){return this.f_}p_(){return this.f_-this.d_+1}Br(t){return this.d_<=t&&t<=this.f_}lh(t){return this.d_===t.Mn()&&this.f_===t.Sn()}}function ts(t,i){return null===t||null===i?t===i:t.lh(i)}class is{constructor(){this.v_=new Map,this.Fe=null}m_(t,i){this.b_(i),this.Fe=null;for(let s=i;s<t.length;++s){const i=t[s];let n=this.v_.get(i.w_);void 0===n&&(n=[],this.v_.set(i.w_,n)),n.push({Xn:s,_t:i._t,g_:i.w_,M_:i.M_})}}S_(t,i){const s=Math.ceil(i/t);return null!==this.Fe&&this.Fe.y_===s||(this.Fe={Ql:this.k_(s),y_:s}),this.Fe.Ql}b_(t){if(0===t)return void this.v_.clear();const i=[];this.v_.forEach(((s,n)=>{t<=s[0].Xn?i.push(n):s.splice(mt(s,t,(i=>i.Xn<t)),1/0)}));for(const t of i)this.v_.delete(t)}k_(t){let i=[];for(const s of Array.from(this.v_.keys()).sort(((t,i)=>i-t))){if(!this.v_.get(s))continue;const n=i;i=[];const e=n.length;let r=0;const l=h(this.v_.get(s)),a=l.length;let o=1/0,_=-1/0;for(let s=0;s<a;s++){const h=l[s],a=h.Xn;for(;r<e;){const t=n[r],s=t.Xn;if(!(s<a)){o=s;break}r++,i.push(t),_=s,o=1/0}o-a>=t&&a-_>=t&&(i.push(h),_=a)}for(;r<e;r++)i.push(n[r])}return i}}class ss{constructor(t){this.C_=t}x_(){return null===this.C_?null:new Qi(Math.floor(this.C_.Mn()),Math.ceil(this.C_.Sn()))}T_(){return this.C_}static D_(){return new ss(null)}}var ns,es,rs,hs,ls;!function(t){t[t.Year=0]="Year",t[t.Month=1]="Month",t[t.DayOfMonth=2]="DayOfMonth",t[t.Time=3]="Time",t[t.TimeWithSeconds=4]="TimeWithSeconds"}(ns||(ns={}));class as{constructor(t,i,s){this.Ye=0,this.P_=null,this.R_=[],this.Pa=null,this.Da=null,this.A_=new is,this.L_=new Map,this.O_=ss.D_(),this.B_=!0,this.E_=new b,this.I_=new b,this.V_=new b,this.N_=null,this.F_=null,this.W_=[],this.cs=i,this.Oa=s,this.z_=i.rightOffset,this.j_=i.barSpacing,this.Hi=t,this.H_()}F(){return this.cs}U_(t){w(this.Oa,t),this.q_(),this.H_()}Th(t,i){var s;w(this.cs,t),this.cs.fixLeftEdge&&this.Y_(),this.cs.fixRightEdge&&this.X_(),void 0!==t.barSpacing&&this.Hi.Js(t.barSpacing),void 0!==t.rightOffset&&this.Hi.Qs(t.rightOffset),void 0!==t.minBarSpacing&&this.Hi.Js(null!==(s=t.barSpacing)&&void 0!==s?s:this.j_),this.q_(),this.H_(),this.V_.m()}bs(t){var i,s;return null!==(s=null===(i=this.R_[t])||void 0===i?void 0:i._t)&&void 0!==s?s:null}Ui(t){var i;return null!==(i=this.R_[t])&&void 0!==i?i:null}zl(t,i){if(this.R_.length<1)return null;if(t.u_>this.R_[this.R_.length-1]._t.u_)return i?this.R_.length-1:null;const s=mt(this.R_,t.u_,((t,i)=>t._t.u_<i));return t.u_<this.R_[s]._t.u_?i?s:null:s}Wi(){return 0===this.Ye||0===this.R_.length||null===this.P_}Fn(){return this.Z_(),this.O_.x_()}K_(){return this.Z_(),this.O_.T_()}G_(){const t=this.Fn();if(null===t)return null;const i={from:t.Mn(),to:t.Sn()};return this.J_(i)}J_(t){const i=Math.round(t.from),s=Math.round(t.to),n=l(this.Q_()),e=l(this.tu());return{from:l(this.bs(Math.max(n,i))),to:l(this.bs(Math.min(e,s)))}}iu(t){return{from:l(this.zl(t.from,!0)),to:l(this.zl(t.to,!0))}}Zt(){return this.Ye}Ao(t){if(!isFinite(t)||t<=0)return;if(this.Ye===t)return;const i=this.K_(),s=this.Ye;if(this.Ye=t,this.B_=!0,this.cs.lockVisibleTimeRangeOnResize&&0!==s){const i=this.j_*t/s;this.j_=i}if(this.cs.fixLeftEdge&&null!==i&&i.Mn()<=0){const i=s-t;this.z_-=Math.round(i/this.j_)+1,this.B_=!0}this.su(),this.nu()}Et(t){if(this.Wi()||!M(t))return 0;const i=this.eu()+this.z_-t;return this.Ye-(i+.5)*this.j_-1}$n(t,i){const s=this.eu(),n=void 0===i?0:i.from,e=void 0===i?t.length:i.to;for(let i=n;i<e;i++){const n=t[i]._t,e=s+this.z_-n,r=this.Ye-(e+.5)*this.j_-1;t[i].nt=r}}ru(t){return Math.ceil(this.hu(t))}Qs(t){this.B_=!0,this.z_=t,this.nu(),this.Hi.lu(),this.Hi.Dh()}Gn(){return this.j_}Js(t){this.au(t),this.nu(),this.Hi.lu(),this.Hi.Dh()}ou(){return this.z_}Ql(){if(this.Wi())return null;if(null!==this.F_)return this.F_;const t=this.j_,i=5*(this.Hi.F().layout.fontSize+4),s=Math.round(i/t),n=l(this.Fn()),e=Math.max(n.Mn(),n.Mn()-s),r=Math.max(n.Sn(),n.Sn()-s),h=this.A_.S_(t,i),a=this.Q_()+s,o=this.tu()-s,_=this._u(),u=this.cs.fixLeftEdge||_,c=this.cs.fixRightEdge||_;let d=0;for(const t of h){if(!(e<=t.Xn&&t.Xn<=r))continue;let s;d<this.W_.length?(s=this.W_[d],s.Xl=this.Et(t.Xn),s.ca=this.uu(t),s.g_=t.g_):(s={cu:!1,Xl:this.Et(t.Xn),ca:this.uu(t),g_:t.g_},this.W_.push(s)),this.j_>i/2&&!_?s.cu=!1:s.cu=u&&t.Xn<=a||c&&t.Xn>=o,d++}return this.W_.length=d,this.F_=this.W_,this.W_}du(){this.B_=!0,this.Js(this.cs.barSpacing),this.Qs(this.cs.rightOffset)}fu(t){this.B_=!0,this.P_=t,this.nu(),this.Y_()}pu(t,i){const s=this.hu(t),n=this.Gn(),e=n+i*(n/10);this.Js(e),this.cs.rightBarStaysOnScroll||this.Qs(this.ou()+(s-this.hu(t)))}ho(t){this.Pa&&this.uo(),null===this.Da&&null===this.N_&&(this.Wi()||(this.Da=t,this.vu()))}lo(t){if(null===this.N_)return;const i=Dt(this.Ye-t,0,this.Ye),s=Dt(this.Ye-l(this.Da),0,this.Ye);0!==i&&0!==s&&this.Js(this.N_.Gn*i/s)}ao(){null!==this.Da&&(this.Da=null,this.mu())}oo(t){null===this.Pa&&null===this.N_&&(this.Wi()||(this.Pa=t,this.vu()))}_o(t){if(null===this.Pa)return;const i=(this.Pa-t)/this.Gn();this.z_=l(this.N_).ou+i,this.B_=!0,this.nu()}uo(){null!==this.Pa&&(this.Pa=null,this.mu())}bu(){this.wu(this.cs.rightOffset)}wu(t,i=400){if(!isFinite(t))throw new RangeError("offset is required and must be finite number");if(!isFinite(i)||i<=0)throw new RangeError("animationDuration (optional) must be finite positive number");const s=this.z_,n=performance.now();this.Hi.Zs({gu:t=>(t-n)/i>=1,Mu:e=>{const r=(e-n)/i;return r>=1?t:s+(t-s)*r}})}wt(t,i){this.B_=!0,this.R_=t,this.A_.m_(t,i),this.nu()}Su(){return this.E_}yu(){return this.I_}ku(){return this.V_}eu(){return this.P_||0}Cu(t){const i=t.p_();this.au(this.Ye/i),this.z_=t.Sn()-this.eu(),this.nu(),this.B_=!0,this.Hi.lu(),this.Hi.Dh()}xu(){const t=this.Q_(),i=this.tu();null!==t&&null!==i&&this.Cu(new Qi(t,i+this.cs.rightOffset))}Tu(t){const i=new Qi(t.from,t.to);this.Cu(i)}qi(t){return void 0!==this.Oa.timeFormatter?this.Oa.timeFormatter(t.M_):this.Du.t_(new Date(1e3*t._t.u_))}_u(){const{handleScroll:t,handleScale:i}=this.Hi.F();return!(t.horzTouchDrag||t.mouseWheel||t.pressedMouseMove||t.vertTouchDrag||i.axisDoubleClickReset.time||i.axisPressedMouseMove.time||i.mouseWheel||i.pinch)}Q_(){return 0===this.R_.length?null:0}tu(){return 0===this.R_.length?null:this.R_.length-1}Pu(t){return(this.Ye-1-t)/this.j_}hu(t){const i=this.Pu(t),s=this.eu()+this.z_-i;return Math.round(1e6*s)/1e6}au(t){const i=this.j_;this.j_=t,this.su(),i!==this.j_&&(this.B_=!0,this.Ru())}Z_(){if(!this.B_)return;if(this.B_=!1,this.Wi())return void this.Au(ss.D_());const t=this.eu(),i=this.Ye/this.j_,s=this.z_+t,n=new Qi(s-i+1,s);this.Au(new ss(n))}su(){const t=this.Lu();if(this.j_<t&&(this.j_=t,this.B_=!0),0!==this.Ye){const t=.5*this.Ye;this.j_>t&&(this.j_=t,this.B_=!0)}}Lu(){return this.cs.fixLeftEdge&&this.cs.fixRightEdge&&0!==this.R_.length?this.Ye/this.R_.length:this.cs.minBarSpacing}nu(){const t=this.Ou();this.z_>t&&(this.z_=t,this.B_=!0);const i=this.Bu();null!==i&&this.z_<i&&(this.z_=i,this.B_=!0)}Bu(){const t=this.Q_(),i=this.P_;if(null===t||null===i)return null;return t-i-1+(this.cs.fixLeftEdge?this.Ye/this.j_:Math.min(2,this.R_.length))}Ou(){return this.cs.fixRightEdge?0:this.Ye/this.j_-Math.min(2,this.R_.length)}vu(){this.N_={Gn:this.Gn(),ou:this.ou()}}mu(){this.N_=null}uu(t){let i=this.L_.get(t.g_);return void 0===i&&(i=new Ji((t=>this.Eu(t))),this.L_.set(t.g_,i)),i.t_(t)}Eu(t){const i=function(t,i,s){switch(t){case 0:case 10:return i?s?4:3:2;case 20:case 21:case 22:case 30:case 31:case 32:case 33:return i?3:2;case 50:return 2;case 60:return 1;case 70:return 0}}(t.g_,this.cs.timeVisible,this.cs.secondsVisible);return void 0!==this.cs.tickMarkFormatter?this.cs.tickMarkFormatter(t.M_,i,this.Oa.locale):function(t,i,s){const n={};switch(i){case 0:n.year="numeric";break;case 1:n.month="short";break;case 2:n.day="numeric";break;case 3:n.hour12=!1,n.hour="2-digit",n.minute="2-digit";break;case 4:n.hour12=!1,n.hour="2-digit",n.minute="2-digit",n.second="2-digit"}const e=void 0===t.__?new Date(1e3*t.u_):new Date(Date.UTC(t.__.year,t.__.month-1,t.__.day));return new Date(e.getUTCFullYear(),e.getUTCMonth(),e.getUTCDate(),e.getUTCHours(),e.getUTCMinutes(),e.getUTCSeconds(),e.getUTCMilliseconds()).toLocaleString(s,n)}(t._t,i,this.Oa.locale)}Au(t){const i=this.O_;this.O_=t,ts(i.x_(),this.O_.x_())||this.E_.m(),ts(i.T_(),this.O_.T_())||this.I_.m(),this.Ru()}Ru(){this.F_=null}q_(){this.Ru(),this.L_.clear()}H_(){const t=this.Oa.dateFormat;this.cs.timeVisible?this.Du=new Gi({s_:t,n_:this.cs.secondsVisible?"%h:%m:%s":"%h:%m",e_:"   ",r_:this.Oa.locale}):this.Du=new Xi(t,this.Oa.locale)}Y_(){if(!this.cs.fixLeftEdge)return;const t=this.Q_();if(null===t)return;const i=this.Fn();if(null===i)return;const s=i.Mn()-t;if(s<0){const t=this.z_-s-1;this.Qs(t)}this.su()}X_(){this.nu(),this.su()}}class os extends A{constructor(t){super(),this.Iu=new Map,this.It=t}Z(t){}G(t){if(!this.It.xt)return;t.save();let i=0;for(const s of this.It.Vu){if(0===s.ii.length)continue;t.font=s.D;const n=this.Nu(t,s.ii);n>this.It.Zt?s.pu=this.It.Zt/n:s.pu=1,i+=s.Fu*s.pu}let s=0;switch(this.It.Wu){case"top":s=0;break;case"center":s=Math.max((this.It.Kt-i)/2,0);break;case"bottom":s=Math.max(this.It.Kt-i,0)}t.fillStyle=this.It.R;for(const i of this.It.Vu){t.save();let n=0;switch(this.It.zu){case"left":t.textAlign="left",n=i.Fu/2;break;case"center":t.textAlign="center",n=this.It.Zt/2;break;case"right":t.textAlign="right",n=this.It.Zt-1-i.Fu/2}t.translate(n,s),t.textBaseline="top",t.font=i.D,t.scale(i.pu,i.pu),t.fillText(i.ii,0,i.ju),t.restore(),s+=i.Fu*i.pu}t.restore()}Nu(t,i){const s=this.$u(t.font);let n=s.get(i);return void 0===n&&(n=t.measureText(i).width,s.set(i,n)),n}$u(t){let i=this.Iu.get(t);return void 0===i&&(i=new Map,this.Iu.set(t,i)),i}}class _s{constructor(t){this.vt=!0,this.jt={xt:!1,R:"",Kt:0,Zt:0,Vu:[],Wu:"center",zu:"center"},this.$t=new os(this.jt),this.Ht=t}wt(){this.vt=!0}Mt(t,i){return this.vt&&(this.St(t,i),this.vt=!1),this.$t}St(t,i){const s=this.Ht.F(),n=this.jt;n.xt=s.visible,n.xt&&(n.R=s.color,n.Zt=i,n.Kt=t,n.zu=s.horzAlign,n.Wu=s.vertAlign,n.Vu=[{ii:s.text,D:D(s.fontSize,s.fontFamily,s.fontStyle),Fu:1.2*s.fontSize,ju:0,pu:0}])}}class us extends G{constructor(t,i){super(),this.cs=i,this.gs=new _s(this)}Rs(){return[]}Ps(){return[this.gs]}F(){return this.cs}Ls(){this.gs.wt()}}!function(t){t[t.OnTouchEnd=0]="OnTouchEnd",t[t.OnNextTap=1]="OnNextTap"}(es||(es={}));class cs{constructor(t,i){this.Hu=[],this.Uu=[],this.Ye=0,this.qu=null,this.Yu=new b,this.Xu=new b,this.Zu=null,this.Ku=t,this.cs=i,this.Gu=new P(this),this.wo=new as(this,i.timeScale,this.cs.localization),this.bt=new Q(this,i.crosshair),this.Ju=new ki(i.crosshair),this.Qu=new us(this,i.watermark),this.tc(),this.Hu[0].Ro(2e3),this.ic=this.sc(0),this.nc=this.sc(1)}pl(){this.ec(it.rn())}Dh(){this.ec(it.en())}Dl(){this.ec(new it(1))}vl(t){const i=this.rc(t);this.ec(i)}hc(){return this.qu}lc(t){const i=this.qu;this.qu=t,null!==i&&this.vl(i.ac),null!==t&&this.vl(t.ac)}F(){return this.cs}Th(t){w(this.cs,t),this.Hu.forEach((i=>i.xo(t))),void 0!==t.timeScale&&this.wo.Th(t.timeScale),void 0!==t.localization&&this.wo.U_(t.localization),(t.leftPriceScale||t.rightPriceScale)&&this.Yu.m(),this.ic=this.sc(0),this.nc=this.sc(1),this.pl()}oc(t,i){if("left"===t)return void this.Th({leftPriceScale:i});if("right"===t)return void this.Th({rightPriceScale:i});const s=this._c(t);null!==s&&(s.At.Th(i),this.Yu.m())}_c(t){for(const i of this.Hu){const s=i.To(t);if(null!==s)return{Ut:i,At:s}}return null}kt(){return this.wo}uc(){return this.Hu}cc(){return this.Qu}dc(){return this.bt}fc(){return this.Xu}vc(t,i){t.Ua(i),this.lu()}Ao(t){this.Ye=t,this.wo.Ao(this.Ye),this.Hu.forEach((i=>i.Ao(t))),this.lu()}tc(t){const i=new Ui(this.wo,this);void 0!==t?this.Hu.splice(t,0,i):this.Hu.push(i);const s=void 0===t?this.Hu.length-1:t,n=it.rn();return n.Ws(s,{zs:0,js:!0}),this.ec(n),i}Fo(t,i,s){t.Fo(i,s)}Wo(t,i,s){t.Wo(i,s),this.ml(),this.ec(this.mc(t,2))}zo(t,i){t.zo(i),this.ec(this.mc(t,2))}jo(t,i,s){i.Fa()||t.jo(i,s)}$o(t,i,s){i.Fa()||(t.$o(i,s),this.ml(),this.ec(this.mc(t,2)))}Ho(t,i){i.Fa()||(t.Ho(i),this.ec(this.mc(t,2)))}qo(t,i){t.qo(i),this.ec(this.mc(t,2))}bc(t){this.wo.ho(t)}wc(t,i){const s=this.kt();if(s.Wi()||0===i)return;const n=s.Zt();t=Math.max(1,Math.min(t,n)),s.pu(t,i),this.lu()}gc(t){this.Mc(0),this.Sc(t),this.yc()}kc(t){this.wo.lo(t),this.lu()}Cc(){this.wo.ao(),this.Dh()}Mc(t){this.wo.oo(t)}Sc(t){this.wo._o(t),this.lu()}yc(){this.wo.uo(),this.Dh()}gt(){return this.Uu}xc(t,i,s){this.bt.Ms(t,i);let n=NaN,e=this.wo.ru(t);const r=this.wo.Fn();null!==r&&(e=Math.min(Math.max(r.Mn(),e),r.Sn()));const h=s.ps(),l=h.Tt();null!==l&&(n=h.vs(i,l)),n=this.Ju.jl(n,e,s),this.bt.Cs(e,n,s),this.Dl(),this.Xu.m(this.bt.yt(),{x:t,y:i})}Tc(){this.dc().Ts(),this.Dl(),this.Xu.m(null,null)}ml(){const t=this.bt.Ut();if(null!==t){const i=this.bt.ys(),s=this.bt.ks();this.xc(i,s,t)}this.bt.Ls()}Dc(t,i,s){const n=this.wo.bs(0);void 0!==i&&void 0!==s&&this.wo.wt(i,s);const e=this.wo.bs(0),r=this.wo.eu(),h=this.wo.Fn();if(null!==h&&null!==n&&null!==e){const i=h.Br(r),s=n.u_>e.u_,l=null!==t&&t>r&&!s,a=i&&this.wo.F().shiftVisibleRangeOnNewBar;if(l&&!a){const i=t-r;this.wo.Qs(this.wo.ou()-i)}}this.wo.fu(t)}gl(t){null!==t&&t.Xo()}Je(t){const i=this.Hu.find((i=>i.Qa().includes(t)));return void 0===i?null:i}lu(){this.Qu.Ls(),this.Hu.forEach((t=>t.Xo())),this.ml()}M(){this.Hu.forEach((t=>t.M())),this.Hu.length=0,this.cs.localization.priceFormatter=void 0,this.cs.localization.timeFormatter=void 0}Pc(){return this.Gu}sr(){return this.Gu.F()}Do(){return this.Yu}Rc(t,i){const s=this.Hu[0],n=this.Ac(i,t,s);return this.Uu.push(n),1===this.Uu.length?this.pl():this.Dh(),n}Lc(t){const i=this.Je(t),s=this.Uu.indexOf(t);r(-1!==s,"Series not found"),this.Uu.splice(s,1),l(i).no(t),t.M&&t.M()}fl(t,i){const s=l(this.Je(t));s.no(t);const n=this._c(i);if(null===n){const n=t.Zi();s.io(t,i,n)}else{const e=n.Ut===s?t.Zi():void 0;n.Ut.io(t,i,e)}}xu(){const t=it.en();t.Us(),this.ec(t)}Oc(t){const i=it.en();i.Xs(t),this.ec(i)}Gs(){const t=it.en();t.Gs(),this.ec(t)}Js(t){const i=it.en();i.Js(t),this.ec(i)}Qs(t){const i=it.en();i.Qs(t),this.ec(i)}Zs(t){const i=it.en();i.Zs(t),this.ec(i)}qs(){const t=it.en();t.qs(),this.ec(t)}Bc(){return this.cs.rightPriceScale.visible?"right":"left"}Ec(){return this.nc}U(){return this.ic}Bt(t){const i=this.nc,s=this.ic;if(i===s)return i;if(t=Math.max(0,Math.min(100,Math.round(100*t))),null===this.Zu||this.Zu.mn!==s||this.Zu.bn!==i)this.Zu={mn:s,bn:i,Ic:new Map};else{const i=this.Zu.Ic.get(t);if(void 0!==i)return i}const n=function(t,i,s){const[n,e,r,h]=v(t),[l,a,o,c]=v(i),d=[_(n+s*(l-n)),_(e+s*(a-e)),_(r+s*(o-r)),u(h+s*(c-h))];return`rgba(${d[0]}, ${d[1]}, ${d[2]}, ${d[3]})`}(s,i,t/100);return this.Zu.Ic.set(t,n),n}mc(t,i){const s=new it(i);if(null!==t){const n=this.Hu.indexOf(t);s.Ws(n,{zs:i})}return s}rc(t,i){return void 0===i&&(i=2),this.mc(this.Je(t),i)}ec(t){this.Ku&&this.Ku(t),this.Hu.forEach((t=>t.Ko().Ph().wt()))}Ac(t,i,s){const n=new yi(this,t,i),e=void 0!==t.priceScaleId?t.priceScaleId:this.Bc();return s.io(n,e),tt(e)||n.Th(t),n}sc(t){const i=this.cs.layout;return"gradient"===i.background.type?0===t?i.background.topColor:i.background.bottomColor:i.background.color}}function ds(t){return!g(t)&&!S(t)}function fs(t){return g(t)}!function(t){t[t.Disabled=0]="Disabled",t[t.Continuous=1]="Continuous",t[t.OnDataUpdate=2]="OnDataUpdate"}(rs||(rs={})),function(t){t[t.LastBar=0]="LastBar",t[t.LastVisible=1]="LastVisible"}(hs||(hs={})),function(t){t.Solid="solid",t.VerticalGradient="gradient"}(ls||(ls={}));const ps="undefined"!=typeof window;function vs(){return!!ps&&window.navigator.userAgent.toLowerCase().indexOf("firefox")>-1}function ms(){return!!ps&&/iPhone|iPad|iPod/.test(window.navigator.platform)}class bs{constructor(t,i){this.Ft=t,this.Wt=i}lh(t){return this.Ft===t.Ft&&this.Wt===t.Wt}}function ws(t){return t.ownerDocument&&t.ownerDocument.defaultView&&t.ownerDocument.defaultView.devicePixelRatio||1}function gs(t){const i=l(t.getContext("2d"));return i.setTransform(1,0,0,1,0,0),i}function Ms(i,s){const n=l(i.ownerDocument).createElement("canvas");i.appendChild(n);const e=t(n,{allowDownsampling:!1});return e.resizeCanvas({width:s.Ft,height:s.Wt}),e}function Ss(t,i){return t.Vc-i.Vc}function ys(t,i,s){const n=(t.Vc-i.Vc)/(t._t-i._t);return Math.sign(n)*Math.min(Math.abs(n),s)}class ks{constructor(t,i,s,n){this.Nc=null,this.Fc=null,this.Wc=null,this.zc=null,this.jc=null,this.$c=0,this.Hc=0,this.Uc=t,this.qc=i,this.Yc=s,this.hn=n}Xc(t,i){if(null!==this.Nc){if(this.Nc._t===i)return void(this.Nc.Vc=t);if(Math.abs(this.Nc.Vc-t)<this.hn)return}this.zc=this.Wc,this.Wc=this.Fc,this.Fc=this.Nc,this.Nc={_t:i,Vc:t}}dr(t,i){if(null===this.Nc||null===this.Fc)return;if(i-this.Nc._t>50)return;let s=0;const n=ys(this.Nc,this.Fc,this.qc),e=Ss(this.Nc,this.Fc),r=[n],h=[e];if(s+=e,null!==this.Wc){const t=ys(this.Fc,this.Wc,this.qc);if(Math.sign(t)===Math.sign(n)){const i=Ss(this.Fc,this.Wc);if(r.push(t),h.push(i),s+=i,null!==this.zc){const t=ys(this.Wc,this.zc,this.qc);if(Math.sign(t)===Math.sign(n)){const i=Ss(this.Wc,this.zc);r.push(t),h.push(i),s+=i}}}}let l=0;for(let t=0;t<r.length;++t)l+=h[t]/s*r[t];Math.abs(l)<this.Uc||(this.jc={Vc:t,_t:i},this.Hc=l,this.$c=function(t,i){const s=Math.log(i);return Math.log(1*s/-t)/s}(Math.abs(l),this.Yc))}Mu(t){const i=l(this.jc),s=t-i._t;return i.Vc+this.Hc*(Math.pow(this.Yc,s)-1)/Math.log(this.Yc)}gu(t){return null===this.jc||this.Zc(t)===this.$c}Zc(t){const i=t-l(this.jc)._t;return Math.min(i,this.$c)}}function Cs(t){ps&&void 0!==window.chrome&&t.addEventListener("mousedown",(t=>{if(1===t.button)return t.preventDefault(),!1}))}class xs{constructor(t,i,s){this.Kc=0,this.Gc=null,this.Jc={nt:Number.NEGATIVE_INFINITY,et:Number.POSITIVE_INFINITY},this.Qc=0,this.td=null,this.sd={nt:Number.NEGATIVE_INFINITY,et:Number.POSITIVE_INFINITY},this.nd=null,this.ed=!1,this.rd=null,this.hd=null,this.ld=!1,this.ad=!1,this.od=!1,this._d=null,this.ud=null,this.dd=null,this.fd=null,this.pd=null,this.vd=null,this.md=null,this.bd=0,this.wd=!1,this.gd=!1,this.Md=!1,this.Sd=0,this.yd=null,this.kd=!ms(),this.Cd=t=>{this.xd(t)},this.Td=t=>{if(this.Dd(t)){const i=this.Pd(t);if(++this.Qc,this.td&&this.Qc>1){const{Rd:s}=this.Ad(Ps(t),this.sd);s<30&&!this.od&&this.Ld(i,this.Bd.Od),this.Ed()}}else{const i=this.Pd(t);if(++this.Kc,this.Gc&&this.Kc>1){const{Rd:s}=this.Ad(Ps(t),this.Jc);s<5&&!this.ad&&this.Id(i,this.Bd.Vd),this.Nd()}}},this.Fd=t,this.Bd=i,this.cs=s,this.Wd()}M(){null!==this._d&&(this._d(),this._d=null),null!==this.ud&&(this.ud(),this.ud=null),null!==this.fd&&(this.fd(),this.fd=null),null!==this.pd&&(this.pd(),this.pd=null),null!==this.vd&&(this.vd(),this.vd=null),null!==this.dd&&(this.dd(),this.dd=null),this.zd(),this.Nd()}jd(t){this.fd&&this.fd();const i=this.$d.bind(this);if(this.fd=()=>{this.Fd.removeEventListener("mousemove",i)},this.Fd.addEventListener("mousemove",i),this.Dd(t))return;const s=this.Pd(t);this.Id(s,this.Bd.Hd),this.kd=!0}Nd(){null!==this.Gc&&clearTimeout(this.Gc),this.Kc=0,this.Gc=null,this.Jc={nt:Number.NEGATIVE_INFINITY,et:Number.POSITIVE_INFINITY}}Ed(){null!==this.td&&clearTimeout(this.td),this.Qc=0,this.td=null,this.sd={nt:Number.NEGATIVE_INFINITY,et:Number.POSITIVE_INFINITY}}$d(t){if(this.Md||null!==this.hd)return;if(this.Dd(t))return;const i=this.Pd(t);this.Id(i,this.Bd.Ud),this.kd=!0}qd(t){const i=As(t.changedTouches,l(this.yd));if(null===i)return;if(this.Sd=Rs(t),null!==this.md)return;if(this.gd)return;this.wd=!0;const s=this.Ad(Ps(i),l(this.hd)),{Yd:n,Xd:e,Rd:r}=s;if(this.ld||!(r<5)){if(!this.ld){const t=.5*n,i=e>=t&&!this.cs.Zd(),s=t>e&&!this.cs.Kd();i||s||(this.gd=!0),this.ld=!0,this.od=!0,this.zd(),this.Ed()}if(!this.gd){const s=this.Pd(t,i);this.Ld(s,this.Bd.Gd),Ds(t)}}}Jd(t){if(0!==t.button)return;const i=this.Ad(Ps(t),l(this.rd)),{Rd:s}=i;if(s>=5&&(this.ad=!0,this.Nd()),this.ad){const i=this.Pd(t);this.Id(i,this.Bd.Qd)}}Ad(t,i){const s=Math.abs(i.nt-t.nt),n=Math.abs(i.et-t.et);return{Yd:s,Xd:n,Rd:s+n}}tf(t){let i=As(t.changedTouches,l(this.yd));if(null===i&&0===t.touches.length&&(i=t.changedTouches[0]),null===i)return;this.yd=null,this.Sd=Rs(t),this.zd(),this.hd=null,this.vd&&(this.vd(),this.vd=null);const s=this.Pd(t,i);if(this.Ld(s,this.Bd.if),++this.Qc,this.td&&this.Qc>1){const{Rd:t}=this.Ad(Ps(i),this.sd);t<30&&!this.od&&this.Ld(s,this.Bd.Od),this.Ed()}else this.od||(this.Ld(s,this.Bd.sf),this.Bd.sf&&Ds(t));0===this.Qc&&Ds(t),0===t.touches.length&&this.ed&&(this.ed=!1,Ds(t))}xd(t){if(0!==t.button)return;const i=this.Pd(t);if(this.rd=null,this.Md=!1,this.pd&&(this.pd(),this.pd=null),vs()){this.Fd.ownerDocument.documentElement.removeEventListener("mouseleave",this.Cd)}if(!this.Dd(t))if(this.Id(i,this.Bd.nf),++this.Kc,this.Gc&&this.Kc>1){const{Rd:s}=this.Ad(Ps(t),this.Jc);s<5&&!this.ad&&this.Id(i,this.Bd.Vd),this.Nd()}else this.ad||this.Id(i,this.Bd.ef)}zd(){null!==this.nd&&(clearTimeout(this.nd),this.nd=null)}rf(t){if(null!==this.yd)return;const i=t.changedTouches[0];this.yd=i.identifier,this.Sd=Rs(t);const s=this.Fd.ownerDocument.documentElement;this.od=!1,this.ld=!1,this.gd=!1,this.hd=Ps(i),this.vd&&(this.vd(),this.vd=null);{const i=this.qd.bind(this),n=this.tf.bind(this);this.vd=()=>{s.removeEventListener("touchmove",i),s.removeEventListener("touchend",n)},s.addEventListener("touchmove",i,{passive:!1}),s.addEventListener("touchend",n,{passive:!1}),this.zd(),this.nd=setTimeout(this.hf.bind(this,t),240)}const n=this.Pd(t,i);this.Ld(n,this.Bd.lf),this.td||(this.Qc=0,this.td=setTimeout(this.Ed.bind(this),500),this.sd=Ps(i))}af(t){if(0!==t.button)return;const i=this.Fd.ownerDocument.documentElement;vs()&&i.addEventListener("mouseleave",this.Cd),this.ad=!1,this.rd=Ps(t),this.pd&&(this.pd(),this.pd=null);{const t=this.Jd.bind(this),s=this.xd.bind(this);this.pd=()=>{i.removeEventListener("mousemove",t),i.removeEventListener("mouseup",s)},i.addEventListener("mousemove",t),i.addEventListener("mouseup",s)}if(this.Md=!0,this.Dd(t))return;const s=this.Pd(t);this.Id(s,this.Bd._f),this.Gc||(this.Kc=0,this.Gc=setTimeout(this.Nd.bind(this),500),this.Jc=Ps(t))}Wd(){this.Fd.addEventListener("mouseenter",this.jd.bind(this)),this.Fd.addEventListener("touchcancel",this.zd.bind(this));{const t=this.Fd.ownerDocument,i=t=>{this.Bd.uf&&(t.composed&&this.Fd.contains(t.composedPath()[0])||t.target&&this.Fd.contains(t.target)||this.Bd.uf())};this.ud=()=>{t.removeEventListener("touchstart",i)},this._d=()=>{t.removeEventListener("mousedown",i)},t.addEventListener("mousedown",i),t.addEventListener("touchstart",i,{passive:!0})}ms()&&(this.dd=()=>{this.Fd.removeEventListener("dblclick",this.Td)},this.Fd.addEventListener("dblclick",this.Td)),this.Fd.addEventListener("mouseleave",this.cf.bind(this)),this.Fd.addEventListener("touchstart",this.rf.bind(this),{passive:!0}),Cs(this.Fd),this.Fd.addEventListener("mousedown",this.af.bind(this)),this.df(),this.Fd.addEventListener("touchmove",(()=>{}),{passive:!1})}df(){void 0===this.Bd.ff&&void 0===this.Bd.pf&&void 0===this.Bd.vf||(this.Fd.addEventListener("touchstart",(t=>this.mf(t.touches)),{passive:!0}),this.Fd.addEventListener("touchmove",(t=>{if(2===t.touches.length&&null!==this.md&&void 0!==this.Bd.pf){const i=Ts(t.touches[0],t.touches[1])/this.bd;this.Bd.pf(this.md,i),Ds(t)}}),{passive:!1}),this.Fd.addEventListener("touchend",(t=>{this.mf(t.touches)})))}mf(t){1===t.length&&(this.wd=!1),2!==t.length||this.wd||this.ed?this.bf():this.wf(t)}wf(t){const i=this.Fd.getBoundingClientRect()||{left:0,top:0};this.md={nt:(t[0].clientX-i.left+(t[1].clientX-i.left))/2,et:(t[0].clientY-i.top+(t[1].clientY-i.top))/2},this.bd=Ts(t[0],t[1]),void 0!==this.Bd.ff&&this.Bd.ff(),this.zd()}bf(){null!==this.md&&(this.md=null,void 0!==this.Bd.vf&&this.Bd.vf())}cf(t){if(this.fd&&this.fd(),this.Dd(t))return;if(!this.kd)return;const i=this.Pd(t);this.Id(i,this.Bd.gf),this.kd=!ms()}hf(t){const i=As(t.touches,l(this.yd));if(null===i)return;const s=this.Pd(t,i);this.Ld(s,this.Bd.Mf),this.od=!0,this.ed=!0}Dd(t){return t.sourceCapabilities&&void 0!==t.sourceCapabilities.firesTouchEvents?t.sourceCapabilities.firesTouchEvents:Rs(t)<this.Sd+500}Ld(t,i){i&&i.call(this.Bd,t)}Id(t,i){i&&i.call(this.Bd,t)}Pd(t,i){const s=i||t,n=this.Fd.getBoundingClientRect()||{left:0,top:0};return{Sf:s.clientX,yf:s.clientY,kf:s.pageX,Cf:s.pageY,xf:s.screenX,Tf:s.screenY,Df:s.clientX-n.left,Pf:s.clientY-n.top,Rf:t.ctrlKey,Af:t.altKey,Lf:t.shiftKey,Of:t.metaKey,Bf:!t.type.startsWith("mouse")&&"contextmenu"!==t.type&&"click"!==t.type,Ef:t.type,If:s.target,Vf:t.view,Nf:()=>{"touchstart"!==t.type&&Ds(t)}}}}function Ts(t,i){const s=t.clientX-i.clientX,n=t.clientY-i.clientY;return Math.sqrt(s*s+n*n)}function Ds(t){t.cancelable&&t.preventDefault()}function Ps(t){return{nt:t.pageX,et:t.pageY}}function Rs(t){return t.timeStamp||performance.now()}function As(t,i){for(let s=0;s<t.length;++s)if(t[s].identifier===i)return t[s];return null}class Ls{constructor(t,i,s,n){this.Ni=null,this.Ff=null,this.Wf=!1,this.zf=new zt(200),this.Ir=null,this.jf=0,this.$f=!1,this.Hf=()=>{this.$f||this.ts.Uf().qt().Dh()},this.qf=()=>{this.$f||this.ts.Uf().qt().Dh()},this.ts=t,this.cs=i,this.La=i.layout,this.Gu=s,this.Yf="left"===n,this.Xf=document.createElement("div"),this.Xf.style.height="100%",this.Xf.style.overflow="hidden",this.Xf.style.width="25px",this.Xf.style.left="0",this.Xf.style.position="relative",this.Zf=Ms(this.Xf,new bs(16,16)),this.Zf.subscribeCanvasConfigured(this.Hf);const e=this.Zf.canvas;e.style.position="absolute",e.style.zIndex="1",e.style.left="0",e.style.top="0",this.Kf=Ms(this.Xf,new bs(16,16)),this.Kf.subscribeCanvasConfigured(this.qf);const r=this.Kf.canvas;r.style.position="absolute",r.style.zIndex="2",r.style.left="0",r.style.top="0";const h={_f:this.Gf.bind(this),lf:this.Gf.bind(this),Qd:this.Jf.bind(this),Gd:this.Jf.bind(this),uf:this.Qf.bind(this),nf:this.tp.bind(this),if:this.tp.bind(this),Vd:this.ip.bind(this),Od:this.ip.bind(this),Hd:this.sp.bind(this),gf:this.np.bind(this)};this.ep=new xs(this.Kf.canvas,h,{Zd:()=>!1,Kd:()=>!0})}M(){this.ep.M(),this.Kf.unsubscribeCanvasConfigured(this.qf),this.Kf.destroy(),this.Zf.unsubscribeCanvasConfigured(this.Hf),this.Zf.destroy(),null!==this.Ni&&this.Ni.ro().v(this),this.Ni=null}rp(){return this.Xf}T(){return this.La.fontSize}hp(){const t=this.Gu.F();return this.Ir!==t.D&&(this.zf.ze(),this.Ir=t.D),t}lp(){if(null===this.Ni)return 0;let t=0;const i=this.hp(),s=gs(this.Zf.canvas),n=this.Ni.Ql();s.font=this.ap(),n.length>0&&(t=Math.max(this.zf.Si(s,n[0].ca),this.zf.Si(s,n[n.length-1].ca)));const e=this.op();for(let i=e.length;i--;){const n=this.zf.Si(s,e[i].ii());n>t&&(t=n)}const r=this.Ni.Tt();if(null!==r&&null!==this.Ff){const i=this.Ni.vs(1,r),n=this.Ni.vs(this.Ff.Wt-2,r);t=Math.max(t,this.zf.Si(s,this.Ni.zi(Math.floor(Math.min(i,n))+.11111111111111,r)),this.zf.Si(s,this.Ni.zi(Math.ceil(Math.max(i,n))-.11111111111111,r)))}const h=t||34;let l=Math.ceil(i.k+i.C+i.O+i.B+5+h);return l+=l%2,l}_p(t){if(t.Ft<0||t.Wt<0)throw new Error("Try to set invalid size to PriceAxisWidget "+JSON.stringify(t));null!==this.Ff&&this.Ff.lh(t)||(this.Ff=t,this.$f=!0,this.Zf.resizeCanvas({width:t.Ft,height:t.Wt}),this.Kf.resizeCanvas({width:t.Ft,height:t.Wt}),this.$f=!1,this.Xf.style.width=t.Ft+"px",this.Xf.style.height=t.Wt+"px",this.Xf.style.minWidth=t.Ft+"px")}up(){return l(this.Ff).Ft}Gi(t){this.Ni!==t&&(null!==this.Ni&&this.Ni.ro().v(this),this.Ni=t,t.ro().l(this.ya.bind(this),this))}At(){return this.Ni}ze(){const t=this.ts.cp();this.ts.Uf().qt().qo(t,l(this.At()))}dp(t){if(null===this.Ff)return;if(1!==t){const t=gs(this.Zf.canvas);this.fp(),this.pp(t,this.Zf.pixelRatio),this.Ce(t,this.Zf.pixelRatio),this.vp(t,this.Zf.pixelRatio),this.mp(t,this.Zf.pixelRatio)}const i=gs(this.Kf.canvas),s=this.Ff.Ft,n=this.Ff.Wt;F(i,this.Kf.pixelRatio,(()=>{i.clearRect(0,0,s,n)})),this.bp(i,this.Kf.pixelRatio)}wp(){return this.Zf.canvas}wt(){var t;null===(t=this.Ni)||void 0===t||t.Ql()}Gf(t){if(null===this.Ni||this.Ni.Wi()||!this.cs.handleScale.axisPressedMouseMove.price)return;const i=this.ts.Uf().qt(),s=this.ts.cp();this.Wf=!0,i.Fo(s,this.Ni,t.Pf)}Jf(t){if(null===this.Ni||!this.cs.handleScale.axisPressedMouseMove.price)return;const i=this.ts.Uf().qt(),s=this.ts.cp(),n=this.Ni;i.Wo(s,n,t.Pf)}Qf(){if(null===this.Ni||!this.cs.handleScale.axisPressedMouseMove.price)return;const t=this.ts.Uf().qt(),i=this.ts.cp(),s=this.Ni;this.Wf&&(this.Wf=!1,t.zo(i,s))}tp(t){if(null===this.Ni||!this.cs.handleScale.axisPressedMouseMove.price)return;const i=this.ts.Uf().qt(),s=this.ts.cp();this.Wf=!1,i.zo(s,this.Ni)}ip(t){this.cs.handleScale.axisDoubleClickReset.price&&this.ze()}sp(t){if(null===this.Ni)return;!this.ts.Uf().qt().F().handleScale.axisPressedMouseMove.price||this.Ni.sh()||this.Ni.Wa()||this.gp(1)}np(t){this.gp(0)}op(){const t=[],i=null===this.Ni?void 0:this.Ni;return(s=>{for(let n=0;n<s.length;++n){const e=s[n].Rs(this.ts.cp(),i);for(let i=0;i<e.length;i++)t.push(e[i])}})(this.ts.cp().Qa()),t}pp(t,i){if(null===this.Ff)return;const s=this.Ff.Ft,n=this.Ff.Wt;F(t,i,(()=>{const i=this.ts.cp().qt(),e=i.U(),r=i.Ec();e===r?W(t,0,0,s,n,e):H(t,0,0,s,n,e,r)}))}Ce(t,i){if(null===this.Ff||null===this.Ni||!this.Ni.F().borderVisible)return;t.save(),t.fillStyle=this.Ni.F().borderColor;const s=Math.max(1,Math.floor(this.hp().k*i));let n;n=this.Yf?Math.floor(this.Ff.Ft*i)-s:0,t.fillRect(n,0,s,Math.ceil(this.Ff.Wt*i)),t.restore()}vp(t,i){var s;if(null===this.Ff||null===this.Ni)return;const n=this.Ni.Ql();t.save();const e=this.Ni.F();t.strokeStyle=e.borderColor,t.font=this.ap(),t.fillStyle=e.borderColor;const r=this.hp(),h=this.Yf?Math.floor((this.Ff.Ft-r.C)*i):0,l=this.Yf?Math.round(h-r.O*i):Math.round(h+r.C*i+r.O*i),a=Math.max(1,Math.floor(i)),o=Math.floor(.5*i);if(e.borderVisible&&e.ticksVisible){const s=Math.round(r.C*i);t.beginPath();for(const e of n)t.rect(h,Math.round(e.Xl*i)-o,s,a);t.fill()}t.fillStyle=null!==(s=e.textColor)&&void 0!==s?s:this.La.textColor,t.textAlign=this.Yf?"right":"left",t.textBaseline="middle";const _=n.map((i=>this.zf.Mi(t,i.ca)));F(t,i,(()=>{for(let s=n.length;s--;){const e=n[s];t.fillText(e.ca,l/i,e.Xl+_[s])}})),t.restore()}fp(){if(null===this.Ff||null===this.Ni)return;let t=this.Ff.Wt/2;const i=[],s=this.Ni.Qa().slice(),n=this.ts.cp(),e=this.hp();this.Ni===n.tr()&&this.ts.cp().Qa().forEach((t=>{n.Qe(t)&&s.push(t)}));const r=this.Ni.$l()[0],h=this.Ni;s.forEach((s=>{const e=s.Rs(n,h);e.forEach((t=>{t.Oi(null),t.Bi()&&i.push(t)})),r===s&&e.length>0&&(t=e[0].ki())})),i.forEach((t=>t.Oi(t.ki())));this.Ni.F().alignLabels&&this.Mp(i,e,t)}Mp(t,i,s){if(null===this.Ff)return;const n=t.filter((t=>t.ki()<=s)),e=t.filter((t=>t.ki()>s));n.sort(((t,i)=>i.ki()-t.ki())),n.length&&e.length&&e.push(n[0]),e.sort(((t,i)=>t.ki()-i.ki()));for(const s of t){const t=Math.floor(s.Kt(i)/2),n=s.ki();n>-t&&n<t&&s.Oi(t),n>this.Ff.Wt-t&&n<this.Ff.Wt+t&&s.Oi(this.Ff.Wt-t)}for(let t=1;t<n.length;t++){const s=n[t],e=n[t-1],r=e.Kt(i,!1),h=s.ki(),l=e.Li();h>l-r&&s.Oi(l-r)}for(let t=1;t<e.length;t++){const s=e[t],n=e[t-1],r=n.Kt(i,!0),h=s.ki(),l=n.Li();h<l+r&&s.Oi(l+r)}}mp(t,i){if(null===this.Ff)return;t.save();const s=this.Ff,n=this.op(),e=this.hp(),r=this.Yf?"right":"left";n.forEach((n=>{if(n.Ei()){const h=n.Mt(l(this.Ni));t.save(),h.X(t,e,this.zf,s.Ft,r,i),t.restore()}})),t.restore()}bp(t,i){if(null===this.Ff||null===this.Ni)return;t.save();const s=this.Ff,n=this.ts.Uf().qt(),e=[],r=this.ts.cp(),h=n.dc().Rs(r,this.Ni);h.length&&e.push(h);const a=this.hp(),o=this.Yf?"right":"left";e.forEach((n=>{n.forEach((n=>{t.save(),n.Mt(l(this.Ni)).X(t,a,this.zf,s.Ft,o,i),t.restore()}))})),t.restore()}gp(t){this.Xf.style.cursor=1===t?"ns-resize":"default"}ya(){const t=this.lp();this.jf<t&&this.ts.Uf().qt().pl(),this.jf=t}ap(){return D(this.La.fontSize,this.La.fontFamily)}}function Os(t,i,s,n,e){t.K&&t.K(i,s,n,e)}function Bs(t,i,s,n,e){t.X(i,s,n,e)}function Es(t,i){return t.Ps(i)}function Is(t,i){return t.Ji(i)}function Vs(t,i){return void 0!==t.Tl?t.Tl(i):[]}class Ns{constructor(t,i){this.Ff=new bs(0,0),this.Sp=null,this.yp=null,this.kp=null,this.Cp=!1,this.xp=new b,this.Tp=0,this.Dp=!1,this.Pp=null,this.Rp=!1,this.Ap=null,this.Lp=null,this.$f=!1,this.Hf=()=>{this.$f||null===this.Op||this.Hi().Dh()},this.qf=()=>{this.$f||null===this.Op||this.Hi().Dh()},this.Bp=t,this.Op=i,this.Op.Zo().l(this.Ep.bind(this),this,!0),this.Ip=document.createElement("td"),this.Ip.style.padding="0",this.Ip.style.position="relative";const s=document.createElement("div");s.style.width="100%",s.style.height="100%",s.style.position="relative",s.style.overflow="hidden",this.Vp=document.createElement("td"),this.Vp.style.padding="0",this.Np=document.createElement("td"),this.Np.style.padding="0",this.Ip.appendChild(s),this.Zf=Ms(s,new bs(16,16)),this.Zf.subscribeCanvasConfigured(this.Hf);const n=this.Zf.canvas;n.style.position="absolute",n.style.zIndex="1",n.style.left="0",n.style.top="0",this.Kf=Ms(s,new bs(16,16)),this.Kf.subscribeCanvasConfigured(this.qf);const e=this.Kf.canvas;e.style.position="absolute",e.style.zIndex="2",e.style.left="0",e.style.top="0",this.Fp=document.createElement("tr"),this.Fp.appendChild(this.Vp),this.Fp.appendChild(this.Ip),this.Fp.appendChild(this.Np),this.Wp(),this.ep=new xs(this.Kf.canvas,this,{Zd:()=>null===this.Pp&&!this.Bp.F().handleScroll.vertTouchDrag,Kd:()=>null===this.Pp&&!this.Bp.F().handleScroll.horzTouchDrag})}M(){null!==this.Sp&&this.Sp.M(),null!==this.yp&&this.yp.M(),this.Kf.unsubscribeCanvasConfigured(this.qf),this.Kf.destroy(),this.Zf.unsubscribeCanvasConfigured(this.Hf),this.Zf.destroy(),null!==this.Op&&this.Op.Zo().v(this),this.ep.M()}cp(){return l(this.Op)}zp(t){null!==this.Op&&this.Op.Zo().v(this),this.Op=t,null!==this.Op&&this.Op.Zo().l(Ns.prototype.Ep.bind(this),this,!0),this.Wp()}Uf(){return this.Bp}rp(){return this.Fp}Wp(){if(null!==this.Op&&(this.jp(),0!==this.Hi().gt().length)){if(null!==this.Sp){const t=this.Op.Vo();this.Sp.Gi(l(t))}if(null!==this.yp){const t=this.Op.No();this.yp.Gi(l(t))}}}$p(){null!==this.Sp&&this.Sp.wt(),null!==this.yp&&this.yp.wt()}Po(){return null!==this.Op?this.Op.Po():0}Ro(t){this.Op&&this.Op.Ro(t)}Hd(t){if(!this.Op)return;this.Hp();const i=t.Df,s=t.Pf;this.Up(i,s)}_f(t){this.Hp(),this.qp(),this.Up(t.Df,t.Pf)}Ud(t){if(!this.Op)return;this.Hp();const i=t.Df,s=t.Pf;this.Up(i,s);const n=this.Vr(i,s);this.Hi().lc(n&&{ac:n.ac,Yp:n.Yp})}ef(t){null!==this.Op&&(this.Hp(),this.Xp(t))}Qd(t){this.Hp(),this.Zp(t),this.Up(t.Df,t.Pf)}nf(t){null!==this.Op&&(this.Hp(),this.Dp=!1,this.Kp(t))}sf(t){null!==this.Op&&this.Xp(t)}Mf(t){if(this.Dp=!0,null===this.Pp){const i={x:t.Df,y:t.Pf};this.Gp(i,i)}}gf(t){null!==this.Op&&(this.Hp(),this.Op.qt().lc(null),this.Jp())}Qp(){return this.xp}ff(){this.Tp=1,this.Hi().qs()}pf(t,i){if(!this.Bp.F().handleScale.pinch)return;const s=5*(i-this.Tp);this.Tp=i,this.Hi().wc(t.nt,s)}lf(t){if(this.Dp=!1,this.Rp=null!==this.Pp,this.qp(),null!==this.Pp){const i=this.Hi().dc();this.Ap={x:i.Gt(),y:i.Jt()},this.Pp={x:t.Df,y:t.Pf}}}Gd(t){if(null===this.Op)return;const i=t.Df,s=t.Pf;if(null===this.Pp)this.Zp(t);else{this.Rp=!1;const t=l(this.Ap),n=t.x+(i-this.Pp.x),e=t.y+(s-this.Pp.y);this.Up(n,e)}}if(t){0===this.Uf().F().trackingMode.exitMode&&(this.Rp=!0),this.tv(),this.Kp(t)}Vr(t,i){const s=this.Op;if(null===s)return null;const n=s.Qa();for(const e of n){const n=this.iv(e.Ps(s),t,i);if(null!==n)return{ac:e,Vf:n.Vf,Yp:n.Yp}}return null}sv(t,i){l("left"===i?this.Sp:this.yp)._p(new bs(t,this.Ff.Wt))}nv(){return this.Ff}_p(t){if(t.Ft<0||t.Wt<0)throw new Error("Try to set invalid size to PaneWidget "+JSON.stringify(t));this.Ff.lh(t)||(this.Ff=t,this.$f=!0,this.Zf.resizeCanvas({width:t.Ft,height:t.Wt}),this.Kf.resizeCanvas({width:t.Ft,height:t.Wt}),this.$f=!1,this.Ip.style.width=t.Ft+"px",this.Ip.style.height=t.Wt+"px")}ev(){const t=l(this.Op);t.Io(t.Vo()),t.Io(t.No());for(const i of t.$l())if(t.Qe(i)){const s=i.At();null!==s&&t.Io(s),i.Ls()}}wp(){return this.Zf.canvas}dp(t){if(0===t)return;if(null===this.Op)return;if(t>1&&this.ev(),null!==this.Sp&&this.Sp.dp(t),null!==this.yp&&this.yp.dp(t),1!==t){const t=gs(this.Zf.canvas);t.save(),this.pp(t,this.Zf.pixelRatio),this.Op&&(this.rv(t,this.Zf.pixelRatio),this.hv(t,this.Zf.pixelRatio),this.lv(t,this.Zf.pixelRatio,Es),this.lv(t,this.Zf.pixelRatio,Is)),t.restore()}const i=gs(this.Kf.canvas);i.clearRect(0,0,Math.ceil(this.Ff.Ft*this.Kf.pixelRatio),Math.ceil(this.Ff.Wt*this.Kf.pixelRatio)),this.lv(i,this.Zf.pixelRatio,Vs),this.av(i,this.Kf.pixelRatio)}ov(){return this.Sp}_v(){return this.yp}Ep(){null!==this.Op&&this.Op.Zo().v(this),this.Op=null}Xp(t){const i=t.Df,s=t.Pf;this.xp.g()&&this.xp.m(this.Hi().kt().ru(i),{x:i,y:s})}pp(t,i){F(t,i,(()=>{const i=this.Hi(),s=i.U(),n=i.Ec();s===n?W(t,0,0,this.Ff.Ft,this.Ff.Wt,n):H(t,0,0,this.Ff.Ft,this.Ff.Wt,s,n)}))}rv(t,i){const s=l(this.Op),n=s.Ko().Ph().Mt(s.Kt(),s.Zt());null!==n&&(t.save(),n.X(t,i,!1),t.restore())}hv(t,i){const s=this.Hi().cc();this.uv(t,i,Es,Os,s),this.uv(t,i,Es,Bs,s)}av(t,i){this.uv(t,i,Es,Bs,this.Hi().dc())}lv(t,i,s){const n=l(this.Op).Qa();for(const e of n)this.uv(t,i,s,Os,e);for(const e of n)this.uv(t,i,s,Bs,e)}uv(t,i,s,n,e){const r=l(this.Op),h=s(e,r),a=r.Kt(),o=r.Zt(),_=r.qt().hc(),u=null!==_&&_.ac===e,c=null!==_&&u&&void 0!==_.Yp?_.Yp.Nr:void 0;for(const s of h){const e=s.Mt(a,o);null!==e&&(t.save(),n(e,t,i,u,c),t.restore())}}iv(t,i,s){for(const n of t){const t=n.Mt(this.Ff.Wt,this.Ff.Ft);if(null!==t&&t.Vr){const e=t.Vr(i,s);if(null!==e)return{Vf:n,Yp:e}}}return null}jp(){if(null===this.Op)return;const t=this.Bp,i=this.Op.Vo().F().visible,s=this.Op.No().F().visible;i||null===this.Sp||(this.Vp.removeChild(this.Sp.rp()),this.Sp.M(),this.Sp=null),s||null===this.yp||(this.Np.removeChild(this.yp.rp()),this.yp.M(),this.yp=null);const n=t.qt().Pc();i&&null===this.Sp&&(this.Sp=new Ls(this,t.F(),n,"left"),this.Vp.appendChild(this.Sp.rp())),s&&null===this.yp&&(this.yp=new Ls(this,t.F(),n,"right"),this.Np.appendChild(this.yp.rp()))}cv(t){return t.Bf&&this.Dp||null!==this.Pp}dv(t){return Math.max(0,Math.min(t,this.Ff.Ft-1))}fv(t){return Math.max(0,Math.min(t,this.Ff.Wt-1))}Up(t,i){this.Hi().xc(this.dv(t),this.fv(i),l(this.Op))}Jp(){this.Hi().Tc()}tv(){this.Rp&&(this.Pp=null,this.Jp())}Gp(t,i){this.Pp=t,this.Rp=!1,this.Up(i.x,i.y);const s=this.Hi().dc();this.Ap={x:s.Gt(),y:s.Jt()}}Hi(){return this.Bp.qt()}Kp(t){if(!this.Cp)return;const i=this.Hi(),s=this.cp();if(i.Ho(s,s.ps()),this.kp=null,this.Cp=!1,i.yc(),null!==this.Lp){const t=performance.now(),s=i.kt();this.Lp.dr(s.ou(),t),this.Lp.gu(t)||i.Zs(this.Lp)}}Hp(){this.Pp=null}qp(){if(!this.Op)return;if(this.Hi().qs(),document.activeElement!==document.body&&document.activeElement!==document.documentElement)l(document.activeElement).blur();else{const t=document.getSelection();null!==t&&t.removeAllRanges()}!this.Op.ps().Wi()&&this.Hi().kt().Wi()}Zp(t){if(null===this.Op)return;const i=this.Hi(),s=i.kt();if(s.Wi())return;const n=this.Bp.F(),e=n.handleScroll,r=n.kineticScroll;if((!e.pressedMouseMove||t.Bf)&&(!e.horzTouchDrag&&!e.vertTouchDrag||!t.Bf))return;const h=this.Op.ps(),l=performance.now();if(null!==this.kp||this.cv(t)||(this.kp={x:t.Sf,y:t.yf,u_:l,Df:t.Df,Pf:t.Pf}),null!==this.kp&&!this.Cp&&(this.kp.x!==t.Sf||this.kp.y!==t.yf)){if(t.Bf&&r.touch||!t.Bf&&r.mouse){const t=s.Gn();this.Lp=new ks(.2/t,7/t,.997,15/t),this.Lp.Xc(s.ou(),this.kp.u_)}else this.Lp=null;h.Wi()||i.jo(this.Op,h,t.Pf),i.Mc(t.Df),this.Cp=!0}this.Cp&&(h.Wi()||i.$o(this.Op,h,t.Pf),i.Sc(t.Df),null!==this.Lp&&this.Lp.Xc(s.ou(),l))}}class Fs{constructor(t,i,s,n,e){this.vt=!0,this.Ff=new bs(0,0),this.Hf=()=>this.dp(3),this.Yf="left"===t,this.Gu=s.Pc,this.cs=i,this.pv=n,this.vv=e,this.Xf=document.createElement("div"),this.Xf.style.width="25px",this.Xf.style.height="100%",this.Xf.style.overflow="hidden",this.Zf=Ms(this.Xf,new bs(16,16)),this.Zf.subscribeCanvasConfigured(this.Hf)}M(){this.Zf.unsubscribeCanvasConfigured(this.Hf),this.Zf.destroy()}rp(){return this.Xf}nv(){return this.Ff}_p(t){if(t.Ft<0||t.Wt<0)throw new Error("Try to set invalid size to PriceAxisStub "+JSON.stringify(t));this.Ff.lh(t)||(this.Ff=t,this.Zf.resizeCanvas({width:t.Ft,height:t.Wt}),this.Xf.style.width=`${t.Ft}px`,this.Xf.style.minWidth=`${t.Ft}px`,this.Xf.style.height=`${t.Wt}px`,this.vt=!0)}dp(t){if(t<3&&!this.vt)return;if(0===this.Ff.Ft||0===this.Ff.Wt)return;this.vt=!1;const i=gs(this.Zf.canvas);this.pp(i,this.Zf.pixelRatio),this.Ce(i,this.Zf.pixelRatio)}wp(){return this.Zf.canvas}Ce(t,i){if(!this.pv())return;const s=this.Ff.Ft;t.save(),t.fillStyle=this.cs.timeScale.borderColor;const n=Math.floor(this.Gu.F().k*i),e=this.Yf?Math.round(s*i)-n:0;t.fillRect(e,0,n,n),t.restore()}pp(t,i){F(t,i,(()=>{W(t,0,0,this.Ff.Ft,this.Ff.Wt,this.vv())}))}}function Ws(t,i){return t.g_>i.g_?t:i}class zs{constructor(t){this.mv=null,this.bv=null,this.S=null,this.wv=!1,this.Ff=new bs(0,0),this.gv=new b,this.zf=new zt(5),this.$f=!1,this.Hf=()=>{this.$f||this.Bp.qt().Dh()},this.qf=()=>{this.$f||this.Bp.qt().Dh()},this.Bp=t,this.cs=t.F().layout,this.Mv=document.createElement("tr"),this.Sv=document.createElement("td"),this.Sv.style.padding="0",this.yv=document.createElement("td"),this.yv.style.padding="0",this.Xf=document.createElement("td"),this.Xf.style.height="25px",this.Xf.style.padding="0",this.kv=document.createElement("div"),this.kv.style.width="100%",this.kv.style.height="100%",this.kv.style.position="relative",this.kv.style.overflow="hidden",this.Xf.appendChild(this.kv),this.Zf=Ms(this.kv,new bs(16,16)),this.Zf.subscribeCanvasConfigured(this.Hf);const i=this.Zf.canvas;i.style.position="absolute",i.style.zIndex="1",i.style.left="0",i.style.top="0",this.Kf=Ms(this.kv,new bs(16,16)),this.Kf.subscribeCanvasConfigured(this.qf);const s=this.Kf.canvas;s.style.position="absolute",s.style.zIndex="2",s.style.left="0",s.style.top="0",this.Mv.appendChild(this.Sv),this.Mv.appendChild(this.Xf),this.Mv.appendChild(this.yv),this.Cv(),this.Bp.qt().Do().l(this.Cv.bind(this),this),this.ep=new xs(this.Kf.canvas,this,{Zd:()=>!0,Kd:()=>!1})}M(){this.ep.M(),null!==this.mv&&this.mv.M(),null!==this.bv&&this.bv.M(),this.Kf.unsubscribeCanvasConfigured(this.qf),this.Kf.destroy(),this.Zf.unsubscribeCanvasConfigured(this.Hf),this.Zf.destroy()}rp(){return this.Mv}xv(){return this.mv}Tv(){return this.bv}_f(t){if(this.wv)return;this.wv=!0;const i=this.Bp.qt();!i.kt().Wi()&&this.Bp.F().handleScale.axisPressedMouseMove.time&&i.bc(t.Df)}lf(t){this._f(t)}uf(){const t=this.Bp.qt();!t.kt().Wi()&&this.wv&&(this.wv=!1,this.Bp.F().handleScale.axisPressedMouseMove.time&&t.Cc())}Qd(t){const i=this.Bp.qt();!i.kt().Wi()&&this.Bp.F().handleScale.axisPressedMouseMove.time&&i.kc(t.Df)}Gd(t){this.Qd(t)}nf(){this.wv=!1;const t=this.Bp.qt();t.kt().Wi()&&!this.Bp.F().handleScale.axisPressedMouseMove.time||t.Cc()}if(){this.nf()}Vd(){this.Bp.F().handleScale.axisDoubleClickReset.time&&this.Bp.qt().Gs()}Od(){this.Vd()}Hd(){this.Bp.qt().F().handleScale.axisPressedMouseMove.time&&this.gp(1)}gf(){this.gp(0)}nv(){return this.Ff}Dv(){return this.gv}Pv(t,i,s){this.Ff&&this.Ff.lh(t)||(this.Ff=t,this.$f=!0,this.Zf.resizeCanvas({width:t.Ft,height:t.Wt}),this.Kf.resizeCanvas({width:t.Ft,height:t.Wt}),this.$f=!1,this.Xf.style.width=t.Ft+"px",this.Xf.style.height=t.Wt+"px",this.gv.m(t)),null!==this.mv&&this.mv._p(new bs(i,t.Wt)),null!==this.bv&&this.bv._p(new bs(s,t.Wt))}Rv(){const t=this.Av();return Math.ceil(t.k+t.C+t.T+t.I+t.L+t.Lv)}wt(){this.Bp.qt().kt().Ql()}wp(){return this.Zf.canvas}dp(t){if(0===t)return;if(1!==t){const i=gs(this.Zf.canvas);this.pp(i,this.Zf.pixelRatio),this.Ce(i,this.Zf.pixelRatio),this.vp(i,this.Zf.pixelRatio),null!==this.mv&&this.mv.dp(t),null!==this.bv&&this.bv.dp(t)}const i=gs(this.Kf.canvas),s=this.Kf.pixelRatio;i.clearRect(0,0,Math.ceil(this.Ff.Ft*s),Math.ceil(this.Ff.Wt*s)),this.Ov([this.Bp.qt().dc()],i,s)}pp(t,i){F(t,i,(()=>{W(t,0,0,this.Ff.Ft,this.Ff.Wt,this.Bp.qt().Ec())}))}Ce(t,i){if(this.Bp.F().timeScale.borderVisible){t.save(),t.fillStyle=this.Bv();const s=Math.max(1,Math.floor(this.Av().k*i));t.fillRect(0,0,Math.ceil(this.Ff.Ft*i),s),t.restore()}}vp(t,i){const s=this.Bp.qt().kt(),n=s.Ql();if(!n||0===n.length)return;let e=n.reduce(Ws,n[0]).g_;e>30&&e<50&&(e=30),t.save(),t.strokeStyle=this.Bv();const r=this.Av(),h=r.k+r.C+r.I+r.T/2;t.textAlign="center",t.textBaseline="middle",t.fillStyle=this.Bv();const l=Math.max(1,Math.floor(i)),a=Math.floor(.5*i),o=s.F();if(o.borderVisible&&o.ticksVisible){t.beginPath();const s=Math.round(r.C*i);for(let e=n.length;e--;){const r=Math.round(n[e].Xl*i);t.rect(r-a,0,l,s)}t.fill()}t.fillStyle=this.$(),F(t,i,(()=>{t.font=this.ap();for(const i of n)if(i.g_<e){const s=i.cu?this.Ev(t,i.Xl,i.ca):i.Xl;t.fillText(i.ca,s,h)}t.font=this.Iv();for(const i of n)if(i.g_>=e){const s=i.cu?this.Ev(t,i.Xl,i.ca):i.Xl;t.fillText(i.ca,s,h)}})),t.restore()}Ev(t,i,s){const n=this.zf.Si(t,s),e=n/2,r=Math.floor(i-e)+.5;return r<0?i+=Math.abs(0-r):r+n>this.Ff.Ft&&(i-=Math.abs(this.Ff.Ft-(r+n))),i}Ov(t,i,s){const n=this.Av();for(const e of t)for(const t of e.Qi())i.save(),t.Mt().X(i,n,s),i.restore()}Bv(){return this.Bp.F().timeScale.borderColor}$(){return this.cs.textColor}W(){return this.cs.fontSize}ap(){return D(this.W(),this.cs.fontFamily)}Iv(){return D(this.W(),this.cs.fontFamily,"bold")}Av(){null===this.S&&(this.S={k:1,V:NaN,I:NaN,L:NaN,$i:NaN,C:5,T:NaN,D:"",ji:new zt,Lv:0});const t=this.S,i=this.ap();if(t.D!==i){const s=this.W();t.T=s,t.D=i,t.I=3*s/12,t.L=3*s/12,t.$i=9*s/12,t.V=0,t.Lv=4*s/12,t.ji.ze()}return this.S}gp(t){this.Xf.style.cursor=1===t?"ew-resize":"default"}Cv(){const t=this.Bp.qt(),i=t.F();i.leftPriceScale.visible||null===this.mv||(this.Sv.removeChild(this.mv.rp()),this.mv.M(),this.mv=null),i.rightPriceScale.visible||null===this.bv||(this.yv.removeChild(this.bv.rp()),this.bv.M(),this.bv=null);const s={Pc:this.Bp.qt().Pc()},n=()=>i.leftPriceScale.borderVisible&&t.kt().F().borderVisible,e=()=>t.Ec();i.leftPriceScale.visible&&null===this.mv&&(this.mv=new Fs("left",i,s,n,e),this.Sv.appendChild(this.mv.rp())),i.rightPriceScale.visible&&null===this.bv&&(this.bv=new Fs("right",i,s,n,e),this.yv.appendChild(this.bv.rp()))}}const js=!!navigator.userAgentData&&navigator.userAgentData.brands.some((t=>t.brand.includes("Chromium")))&&((null===($s=null===navigator||void 0===navigator?void 0:navigator.userAgentData)||void 0===$s?void 0:$s.platform)?"Windows"===navigator.userAgentData.platform:navigator.userAgent.toLowerCase().indexOf("win")>=0);var $s;class Hs{constructor(t,i){var s;this.Vv=[],this.Nv=0,this.pa=0,this.Ye=0,this.Fv=0,this.Wv=0,this.zv=null,this.jv=!1,this.xp=new b,this.Xu=new b,this.cs=i,this.Mv=document.createElement("div"),this.Mv.classList.add("tv-lightweight-charts"),this.Mv.style.overflow="hidden",this.Mv.style.width="100%",this.Mv.style.height="100%",(s=this.Mv).style.userSelect="none",s.style.webkitUserSelect="none",s.style.msUserSelect="none",s.style.MozUserSelect="none",s.style.webkitTapHighlightColor="transparent",this.$v=document.createElement("table"),this.$v.setAttribute("cellspacing","0"),this.Mv.appendChild(this.$v),this.Hv=this.Uv.bind(this),Us(this.cs)&&this.qv(!0),this.Hi=new cs(this.Ku.bind(this),this.cs),this.qt().fc().l(this.Yv.bind(this),this),this.Xv=new zs(this),this.$v.appendChild(this.Xv.rp());let n=this.cs.width,e=this.cs.height;if(0===n||0===e){const i=t.getBoundingClientRect();0===n&&(n=Math.floor(i.width),n-=n%2),0===e&&(e=Math.floor(i.height),e-=e%2)}this.Zv(n,e),this.Kv(),t.appendChild(this.Mv),this.Gv(),this.Hi.kt().ku().l(this.Hi.pl.bind(this.Hi),this),this.Hi.Do().l(this.Hi.pl.bind(this.Hi),this)}qt(){return this.Hi}F(){return this.cs}Jv(){return this.Vv}Qv(){return this.Xv}M(){this.qv(!1),0!==this.Nv&&window.cancelAnimationFrame(this.Nv),this.Hi.fc().v(this),this.Hi.kt().ku().v(this),this.Hi.Do().v(this),this.Hi.M();for(const t of this.Vv)this.$v.removeChild(t.rp()),t.Qp().v(this),t.M();this.Vv=[],l(this.Xv).M(),null!==this.Mv.parentElement&&this.Mv.parentElement.removeChild(this.Mv),this.Xu.M(),this.xp.M()}Zv(t,i,s=!1){if(this.pa===i&&this.Ye===t)return;this.pa=i,this.Ye=t;const n=i+"px",e=t+"px";l(this.Mv).style.height=n,l(this.Mv).style.width=e,this.$v.style.height=n,this.$v.style.width=e,s?this.tm(it.rn(),performance.now()):this.Hi.pl()}dp(t){void 0===t&&(t=it.rn());for(let i=0;i<this.Vv.length;i++)this.Vv[i].dp(t.Hs(i).zs);this.cs.timeScale.visible&&this.Xv.dp(t.$s())}Th(t){const i=Us(this.cs);this.Hi.Th(t);const s=Us(this.cs);s!==i&&this.qv(s),this.Gv();const n=t.width||this.Ye,e=t.height||this.pa;this.Zv(n,e)}Qp(){return this.xp}fc(){return this.Xu}im(){null!==this.zv&&(this.tm(this.zv,performance.now()),this.zv=null);const t=this.Vv[0],i=function(t,i){const s=t.createElement("canvas"),n=ws(s);return s.style.width=`${i.Ft}px`,s.style.height=`${i.Wt}px`,s.width=i.Ft*n,s.height=i.Wt*n,s}(document,new bs(this.Ye,this.pa)),s=gs(i),n=ws(i);return F(s,n,(()=>{let i=0,n=0;const e=t=>{for(let e=0;e<this.Vv.length;e++){const r=this.Vv[e],h=r.nv().Wt,a=l("left"===t?r.ov():r._v()),o=a.wp();s.drawImage(o,i,n,a.up(),h),n+=h}};this.sm()&&(e("left"),i=l(t.ov()).up()),n=0;for(let t=0;t<this.Vv.length;t++){const e=this.Vv[t],r=e.nv(),h=e.wp();s.drawImage(h,i,n,r.Ft,r.Wt),n+=r.Wt}i+=t.nv().Ft,this.nm()&&(n=0,e("right"));const r=t=>{const e=l("left"===t?this.Xv.xv():this.Xv.Tv()),r=e.nv(),h=e.wp();s.drawImage(h,i,n,r.Ft,r.Wt)};if(this.cs.timeScale.visible){i=0,this.sm()&&(r("left"),i=l(t.ov()).up());const e=this.Xv.nv(),h=this.Xv.wp();s.drawImage(h,i,n,e.Ft,e.Wt),this.nm()&&(i+=t.nv().Ft,r("right"),s.restore())}})),i}rm(t){if("left"===t&&!this.sm())return 0;if("right"===t&&!this.nm())return 0;if(0===this.Vv.length)return 0;return l("left"===t?this.Vv[0].ov():this.Vv[0]._v()).up()}hm(){let t=0,i=0,s=0;for(const n of this.Vv)this.sm()&&(i=Math.max(i,l(n.ov()).lp())),this.nm()&&(s=Math.max(s,l(n._v()).lp())),t+=n.Po();const n=this.Ye,e=this.pa,r=Math.max(n-i-s,0),h=this.cs.timeScale.visible;let a=h?this.Xv.Rv():0;a%2&&(a+=1);const o=0+a,_=e<o?0:e-o,u=_/t;let c=0;for(let t=0;t<this.Vv.length;++t){const n=this.Vv[t];n.zp(this.Hi.uc()[t]);let e=0,h=0;h=t===this.Vv.length-1?_-c:Math.round(n.Po()*u),e=Math.max(h,2),c+=e,n._p(new bs(r,e)),this.sm()&&n.sv(i,"left"),this.nm()&&n.sv(s,"right"),n.cp()&&this.Hi.vc(n.cp(),e)}this.Xv.Pv(new bs(h?r:0,a),h?i:0,h?s:0),this.Hi.Ao(r),this.Fv!==i&&(this.Fv=i),this.Wv!==s&&(this.Wv=s)}qv(t){t?this.Mv.addEventListener("wheel",this.Hv,{passive:!1}):this.Mv.removeEventListener("wheel",this.Hv)}lm(t){switch(t.deltaMode){case t.DOM_DELTA_PAGE:return 120;case t.DOM_DELTA_LINE:return 32}return js?1/window.devicePixelRatio:1}Uv(t){if(!(0!==t.deltaX&&this.cs.handleScroll.mouseWheel||0!==t.deltaY&&this.cs.handleScale.mouseWheel))return;const i=this.lm(t),s=i*t.deltaX/100,n=-i*t.deltaY/100;if(t.cancelable&&t.preventDefault(),0!==n&&this.cs.handleScale.mouseWheel){const i=Math.sign(n)*Math.min(1,Math.abs(n)),s=t.clientX-this.Mv.getBoundingClientRect().left;this.qt().wc(s,i)}0!==s&&this.cs.handleScroll.mouseWheel&&this.qt().gc(-80*s)}tm(t,i){var s;const n=t.$s();3===n&&this.am(),3!==n&&2!==n||(this.om(t),this._m(t,i),this.Xv.wt(),this.Vv.forEach((t=>{t.$p()})),3===(null===(s=this.zv)||void 0===s?void 0:s.$s())&&(this.zv.sn(t),this.am(),this.om(this.zv),this._m(this.zv,i),t=this.zv,this.zv=null)),this.dp(t)}_m(t,i){for(const s of t.tn())this.nn(s,i)}om(t){const i=this.Hi.uc();for(let s=0;s<i.length;s++)t.Hs(s).js&&i[s].Yo()}nn(t,i){const s=this.Hi.kt();switch(t.Ys){case 0:s.xu();break;case 1:s.Tu(t.Lt);break;case 2:s.Js(t.Lt);break;case 3:s.Qs(t.Lt);break;case 4:s.du();break;case 5:t.Lt.gu(i)||s.Qs(t.Lt.Mu(i))}}Ku(t){null!==this.zv?this.zv.sn(t):this.zv=t,this.jv||(this.jv=!0,this.Nv=window.requestAnimationFrame((t=>{if(this.jv=!1,this.Nv=0,null!==this.zv){const i=this.zv;this.zv=null,this.tm(i,t);for(const s of i.tn())if(5===s.Ys&&!s.Lt.gu(t)){this.qt().Zs(s.Lt);break}}})))}am(){this.Kv()}Kv(){const t=this.Hi.uc(),i=t.length,s=this.Vv.length;for(let t=i;t<s;t++){const t=h(this.Vv.pop());this.$v.removeChild(t.rp()),t.Qp().v(this),t.M()}for(let n=s;n<i;n++){const i=new Ns(this,t[n]);i.Qp().l(this.um.bind(this),this),this.Vv.push(i),this.$v.insertBefore(i.rp(),this.Xv.rp())}for(let s=0;s<i;s++){const i=t[s],n=this.Vv[s];n.cp()!==i?n.zp(i):n.Wp()}this.Gv(),this.hm()}dm(t,i){var s;const n=new Map;if(null!==t){this.Hi.gt().forEach((i=>{const s=i.Is().Hh(t);null!==s&&n.set(i,s)}))}let e;if(null!==t){const i=null===(s=this.Hi.kt().Ui(t))||void 0===s?void 0:s.M_;void 0!==i&&(e=i)}const r=this.qt().hc(),h=null!==r&&r.ac instanceof yi?r.ac:void 0,l=null!==r&&void 0!==r.Yp?r.Yp.Wr:void 0;return{_t:e,Xn:null!=t?t:void 0,fm:null!=i?i:void 0,pm:h,vm:n,bm:l}}um(t,i){this.xp.m((()=>this.dm(t,i)))}Yv(t,i){this.Xu.m((()=>this.dm(t,i)))}Gv(){const t=this.cs.timeScale.visible?"":"none";this.Xv.rp().style.display=t}sm(){return this.Vv[0].cp().Vo().F().visible}nm(){return this.Vv[0].cp().No().F().visible}}function Us(t){return Boolean(t.handleScroll.mouseWheel||t.handleScale.mouseWheel)}function qs(t,i,s,n){const e=s.value,r={Xn:i,_t:t,Lt:[e,e,e,e],M_:n};return void 0!==s.color&&(r.R=s.color),r}function Ys(t){return void 0!==t.Lt}function Xs(t){return(i,s,n,e)=>{return void 0===(r=n).open&&void 0===r.value?{_t:i,Xn:s,M_:e}:t(i,s,n,e);var r}}const Zs={Candlestick:Xs((function(t,i,s,n){const e={Xn:i,_t:t,Lt:[s.open,s.high,s.low,s.close],M_:n};return void 0!==s.color&&(e.R=s.color),void 0!==s.borderColor&&(e.Ot=s.borderColor),void 0!==s.wickColor&&(e.Lh=s.wickColor),e})),Bar:Xs((function(t,i,s,n){const e={Xn:i,_t:t,Lt:[s.open,s.high,s.low,s.close],M_:n};return void 0!==s.color&&(e.R=s.color),e})),Area:Xs((function(t,i,s,n){const e=s.value,r={Xn:i,_t:t,Lt:[e,e,e,e],M_:n};return void 0!==s.lineColor&&(r.ot=s.lineColor),void 0!==s.topColor&&(r.mn=s.topColor),void 0!==s.bottomColor&&(r.bn=s.bottomColor),r})),Baseline:Xs((function(t,i,s,n){const e=s.value,r={Xn:i,_t:t,Lt:[e,e,e,e],M_:n};return void 0!==s.topLineColor&&(r.we=s.topLineColor),void 0!==s.bottomLineColor&&(r.ge=s.bottomLineColor),void 0!==s.topFillColor1&&(r.fe=s.topFillColor1),void 0!==s.topFillColor2&&(r.pe=s.topFillColor2),void 0!==s.bottomFillColor1&&(r.ve=s.bottomFillColor1),void 0!==s.bottomFillColor2&&(r.me=s.bottomFillColor2),r})),Histogram:Xs(qs),Line:Xs(qs)};function Ks(t){return Zs[t]}function Gs(t){return 60*t*60*1e3}function Js(t){return 60*t*1e3}const Qs=[{wm:(tn=1,1e3*tn),g_:10},{wm:Js(1),g_:20},{wm:Js(5),g_:21},{wm:Js(30),g_:22},{wm:Gs(1),g_:30},{wm:Gs(3),g_:31},{wm:Gs(6),g_:32},{wm:Gs(12),g_:33}];var tn;function sn(t,i){if(t.getUTCFullYear()!==i.getUTCFullYear())return 70;if(t.getUTCMonth()!==i.getUTCMonth())return 60;if(t.getUTCDate()!==i.getUTCDate())return 50;for(let s=Qs.length-1;s>=0;--s)if(Math.floor(i.getTime()/Qs[s].wm)!==Math.floor(t.getTime()/Qs[s].wm))return Qs[s].g_;return 0}function nn(t,i=0){if(0===t.length)return;let s=0===i?null:t[i-1]._t.u_,n=null!==s?new Date(1e3*s):null,e=0;for(let r=i;r<t.length;++r){const i=t[r],h=new Date(1e3*i._t.u_);null!==n&&(i.w_=sn(h,n)),e+=i._t.u_-(s||i._t.u_),s=i._t.u_,n=h}if(0===i&&t.length>1){const i=Math.ceil(e/(t.length-1)),s=new Date(1e3*(t[0]._t.u_-i));t[0].w_=sn(new Date(1e3*t[0]._t.u_),s)}}function en(t){if(!ds(t))throw new Error("time must be of type BusinessDay");const i=new Date(Date.UTC(t.year,t.month-1,t.day,0,0,0,0));return{u_:Math.round(i.getTime()/1e3),__:t}}function rn(t){if(!fs(t))throw new Error("time must be of type isUTCTimestamp");return{u_:t}}function hn(t){return 0===t.length?null:ds(t[0].time)?en:rn}function ln(t){return fs(t)?rn(t):ds(t)?en(t):en(an(t))}function an(t){const i=new Date(t);if(isNaN(i.getTime()))throw new Error(`Invalid date string=${t}, expected format=yyyy-mm-dd`);return{day:i.getUTCDate(),month:i.getUTCMonth()+1,year:i.getUTCFullYear()}}function on(t){S(t.time)&&(t.time=an(t.time))}function _n(t){return{Xn:0,gm:new Map,xl:t}}function un(t){if(void 0!==t&&0!==t.length)return{Mm:t[0]._t.u_,Sm:t[t.length-1]._t.u_}}function cn(t){let i;return t.forEach((t=>{void 0===i&&(i=t.M_)})),h(i)}function dn(t){void 0===t.M_&&(t.M_=t.time)}class fn{constructor(){this.ym=new Map,this.km=new Map,this.Cm=new Map,this.xm=[]}M(){this.ym.clear(),this.km.clear(),this.Cm.clear(),this.xm=[]}Tm(t,i){let s=0!==this.ym.size,n=!1;const e=this.km.get(t);if(void 0!==e)if(1===this.km.size)s=!1,n=!0,this.ym.clear();else for(const i of this.xm)i.pointData.gm.delete(t)&&(n=!0);let r=[];if(0!==i.length){const s=i;s.forEach((t=>dn(t))),function(t){t.forEach(on)}(i);const e=l(hn(i)),h=Ks(t.Ih());r=s.map((i=>{const s=e(i.time);let r=this.ym.get(s.u_);void 0===r&&(r=_n(s),this.ym.set(s.u_,r),n=!0);const l=h(s,r.Xn,i,i.M_);return r.gm.set(t,l),l}))}s&&this.Dm(),this.Pm(t,r);let h=-1;if(n){const t=[];this.ym.forEach((i=>{t.push({w_:0,_t:i.xl,pointData:i,M_:cn(i.gm)})})),t.sort(((t,i)=>t._t.u_-i._t.u_)),h=this.Rm(t)}return this.Am(t,h,function(t,i){const s=un(t),n=un(i);if(void 0!==s&&void 0!==n)return{wl:s.Sm>=n.Sm&&s.Mm>=n.Mm}}(this.km.get(t),e))}Lc(t){return this.Tm(t,[])}Lm(t,i){const s=i;dn(s),on(i);const n=l(hn([i]))(i.time),e=this.Cm.get(t);if(void 0!==e&&n.u_<e.u_)throw new Error(`Cannot update oldest data, last time=${e.u_}, new time=${n.u_}`);let r=this.ym.get(n.u_);const h=void 0===r;void 0===r&&(r=_n(n),this.ym.set(n.u_,r));const a=Ks(t.Ih())(n,r.Xn,i,s.M_);r.gm.set(t,a),this.Om(t,a);const o={wl:Ys(a)};if(!h)return this.Am(t,-1,o);const _={w_:0,_t:r.xl,pointData:r,M_:cn(r.gm)},u=mt(this.xm,_._t.u_,((t,i)=>t._t.u_<i));this.xm.splice(u,0,_);for(let t=u;t<this.xm.length;++t)pn(this.xm[t].pointData,t);return nn(this.xm,u),this.Am(t,u,o)}Om(t,i){let s=this.km.get(t);void 0===s&&(s=[],this.km.set(t,s));const n=0!==s.length?s[s.length-1]:null;null===n||i._t.u_>n._t.u_?Ys(i)&&s.push(i):Ys(i)?s[s.length-1]=i:s.splice(-1,1),this.Cm.set(t,i._t)}Pm(t,i){0!==i.length?(this.km.set(t,i.filter(Ys)),this.Cm.set(t,i[i.length-1]._t)):(this.km.delete(t),this.Cm.delete(t))}Dm(){for(const t of this.xm)0===t.pointData.gm.size&&this.ym.delete(t._t.u_)}Rm(t){let i=-1;for(let s=0;s<this.xm.length&&s<t.length;++s){const n=this.xm[s],e=t[s];if(n._t.u_!==e._t.u_){i=s;break}e.w_=n.w_,pn(e.pointData,s)}if(-1===i&&this.xm.length!==t.length&&(i=Math.min(this.xm.length,t.length)),-1===i)return-1;for(let s=i;s<t.length;++s)pn(t[s].pointData,s);return nn(t,i),this.xm=t,i}Bm(){if(0===this.km.size)return null;let t=0;return this.km.forEach((i=>{0!==i.length&&(t=Math.max(t,i[i.length-1].Xn))})),t}Am(t,i,s){const n={Em:new Map,kt:{eu:this.Bm()}};if(-1!==i)this.km.forEach(((i,e)=>{n.Em.set(e,{lr:i,Im:e===t?s:void 0})})),this.km.has(t)||n.Em.set(t,{lr:[],Im:s}),n.kt.Vm=this.xm,n.kt.Nm=i;else{const i=this.km.get(t);n.Em.set(t,{lr:i||[],Im:s})}return n}}function pn(t,i){t.Xn=i,t.gm.forEach((t=>{t.Xn=i}))}function vn(t){return{value:t.Lt[3],time:t.M_}}function mn(t){const i=vn(t);return void 0!==t.R&&(i.color=t.R),i}function bn(t){return{open:t.Lt[0],high:t.Lt[1],low:t.Lt[2],close:t.Lt[3],time:t.M_}}const wn={Area:function(t){const i=vn(t);return void 0!==t.ot&&(i.lineColor=t.ot),void 0!==t.mn&&(i.topColor=t.mn),void 0!==t.bn&&(i.bottomColor=t.bn),i},Line:mn,Baseline:function(t){const i=vn(t);return void 0!==t.we&&(i.topLineColor=t.we),void 0!==t.ge&&(i.bottomLineColor=t.ge),void 0!==t.fe&&(i.topFillColor1=t.fe),void 0!==t.pe&&(i.topFillColor2=t.pe),void 0!==t.ve&&(i.bottomFillColor1=t.ve),void 0!==t.me&&(i.bottomFillColor2=t.me),i},Histogram:mn,Bar:function(t){const i=bn(t);return void 0!==t.R&&(i.color=t.R),i},Candlestick:function(t){const i=bn(t),{R:s,Ot:n,Lh:e}=t;return void 0!==s&&(i.color=s),void 0!==n&&(i.borderColor=n),void 0!==e&&(i.wickColor=e),i}};function gn(t){return wn[t]}const Mn={autoScale:!0,mode:0,invertScale:!1,alignLabels:!0,borderVisible:!0,borderColor:"#2B2B43",entireTextOnly:!1,visible:!1,ticksVisible:!1,scaleMargins:{bottom:.1,top:.2}},Sn={color:"rgba(0, 0, 0, 0)",visible:!1,fontSize:48,fontFamily:T,fontStyle:"",text:"",horzAlign:"center",vertAlign:"center"},yn={width:0,height:0,layout:{background:{type:"solid",color:"#FFFFFF"},textColor:"#191919",fontSize:12,fontFamily:T},crosshair:{vertLine:{color:"#9598A1",width:1,style:3,visible:!0,labelVisible:!0,labelBackgroundColor:"#131722"},horzLine:{color:"#9598A1",width:1,style:3,visible:!0,labelVisible:!0,labelBackgroundColor:"#131722"},mode:1},grid:{vertLines:{color:"#D6DCDE",style:0,visible:!0},horzLines:{color:"#D6DCDE",style:0,visible:!0}},overlayPriceScales:Object.assign({},Mn),leftPriceScale:Object.assign(Object.assign({},Mn),{visible:!1}),rightPriceScale:Object.assign(Object.assign({},Mn),{visible:!0}),timeScale:{rightOffset:0,barSpacing:6,minBarSpacing:.5,fixLeftEdge:!1,fixRightEdge:!1,lockVisibleTimeRangeOnResize:!1,rightBarStaysOnScroll:!1,borderVisible:!0,borderColor:"#2B2B43",visible:!0,timeVisible:!1,secondsVisible:!0,shiftVisibleRangeOnNewBar:!0,ticksVisible:!1},watermark:Sn,localization:{locale:ps?navigator.language:"",dateFormat:"dd MMM 'yy"},handleScroll:{mouseWheel:!0,pressedMouseMove:!0,horzTouchDrag:!0,vertTouchDrag:!0},handleScale:{axisPressedMouseMove:{time:!0,price:!0},axisDoubleClickReset:{time:!0,price:!0},mouseWheel:!0,pinch:!0},kineticScroll:{mouse:!1,touch:!0},trackingMode:{exitMode:1}},kn={upColor:"#26a69a",downColor:"#ef5350",wickVisible:!0,borderVisible:!0,borderColor:"#378658",borderUpColor:"#26a69a",borderDownColor:"#ef5350",wickColor:"#737375",wickUpColor:"#26a69a",wickDownColor:"#ef5350"},Cn={upColor:"#26a69a",downColor:"#ef5350",openVisible:!0,thinBars:!0},xn={color:"#2196f3",lineStyle:0,lineWidth:3,lineType:0,crosshairMarkerVisible:!0,crosshairMarkerRadius:4,crosshairMarkerBorderColor:"",crosshairMarkerBorderWidth:2,crosshairMarkerBackgroundColor:"",lastPriceAnimation:0},Tn={topColor:"rgba( 46, 220, 135, 0.4)",bottomColor:"rgba( 40, 221, 100, 0)",invertFilledArea:!1,lineColor:"#33D778",lineStyle:0,lineWidth:3,lineType:0,crosshairMarkerVisible:!0,crosshairMarkerRadius:4,crosshairMarkerBorderColor:"",crosshairMarkerBorderWidth:2,crosshairMarkerBackgroundColor:"",lastPriceAnimation:0},Dn={baseValue:{type:"price",price:0},topFillColor1:"rgba(38, 166, 154, 0.28)",topFillColor2:"rgba(38, 166, 154, 0.05)",topLineColor:"rgba(38, 166, 154, 1)",bottomFillColor1:"rgba(239, 83, 80, 0.05)",bottomFillColor2:"rgba(239, 83, 80, 0.28)",bottomLineColor:"rgba(239, 83, 80, 1)",lineWidth:3,lineStyle:0,lineType:0,crosshairMarkerVisible:!0,crosshairMarkerRadius:4,crosshairMarkerBorderColor:"",crosshairMarkerBorderWidth:2,crosshairMarkerBackgroundColor:"",lastPriceAnimation:0},Pn={color:"#26a69a",base:0},Rn={title:"",visible:!0,lastValueVisible:!0,priceLineVisible:!0,priceLineSource:0,priceLineWidth:1,priceLineColor:"",priceLineStyle:2,baseLineVisible:!0,baseLineWidth:1,baseLineColor:"#B2B5BE",baseLineStyle:0,priceFormat:{type:"price",precision:2,minMove:.01}};class An{constructor(t,i){this.Fm=t,this.Wm=i}applyOptions(t){this.Fm.qt().oc(this.Wm,t)}options(){return this.Ni().F()}width(){return tt(this.Wm)?this.Fm.rm(this.Wm):0}Ni(){return l(this.Fm.qt()._c(this.Wm)).At}}const Ln={color:"#FF0000",price:0,lineStyle:2,lineWidth:1,lineVisible:!0,axisLabelVisible:!0,title:""};class On{constructor(t){this.Sh=t}applyOptions(t){this.Sh.Th(t)}options(){return this.Sh.F()}zm(){return this.Sh}}class Bn{constructor(t,i,s){this.Dn=t,this.jm=i,this.$m=s}priceFormatter(){return this.Dn.Ol()}priceToCoordinate(t){const i=this.Dn.Tt();return null===i?null:this.Dn.At().Rt(t,i.Lt)}coordinateToPrice(t){const i=this.Dn.Tt();return null===i?null:this.Dn.At().vs(t,i.Lt)}barsInLogicalRange(t){if(null===t)return null;const i=new ss(new Qi(t.from,t.to)).x_(),s=this.Dn.Is();if(s.Wi())return null;const n=s.Hh(i.Mn(),1),e=s.Hh(i.Sn(),-1),r=l(s.zh()),h=l(s.Es());if(null!==n&&null!==e&&n.Xn>e.Xn)return{barsBefore:t.from-r,barsAfter:h-t.to};const a={barsBefore:null===n||n.Xn===r?t.from-r:n.Xn-r,barsAfter:null===e||e.Xn===h?h-t.to:h-e.Xn};return null!==n&&null!==e&&(a.from=n._t.__||n._t.u_,a.to=e._t.__||e._t.u_),a}setData(t){this.Dn.Ih(),this.jm.Hm(this.Dn,t)}update(t){this.Dn.Ih(),this.jm.Um(this.Dn,t)}dataByIndex(t,i){const s=this.Dn.Is().Hh(t,i);return null===s?null:gn(this.seriesType())(s)}setMarkers(t){const i=t.map((t=>Object.assign(Object.assign({},t),{originalTime:t.time,time:ln(t.time)})));this.Dn.Ml(i)}markers(){return this.Dn.Sl().map((t=>{const{originalTime:i,time:s}=t,n=function(t,i){var s={};for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&i.indexOf(n)<0&&(s[n]=t[n]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var e=0;for(n=Object.getOwnPropertySymbols(t);e<n.length;e++)i.indexOf(n[e])<0&&Object.prototype.propertyIsEnumerable.call(t,n[e])&&(s[n[e]]=t[n[e]])}return s}(t,["originalTime","time"]);return Object.assign({time:i},n)}))}applyOptions(t){this.Dn.Th(t)}options(){return k(this.Dn.F())}priceScale(){return this.$m.priceScale(this.Dn.At().Fl())}createPriceLine(t){const i=w(k(Ln),t),s=this.Dn.yl(i);return new On(s)}removePriceLine(t){this.Dn.kl(t.zm())}seriesType(){return this.Dn.Ih()}}class En{constructor(t,i){this.qm=new b,this.I_=new b,this.gv=new b,this.Hi=t,this.wo=t.kt(),this.Xv=i,this.wo.Su().l(this.Ym.bind(this)),this.wo.yu().l(this.Xm.bind(this)),this.Xv.Dv().l(this.Zm.bind(this))}M(){this.wo.Su().v(this),this.wo.yu().v(this),this.Xv.Dv().v(this),this.qm.M(),this.I_.M(),this.gv.M()}scrollPosition(){return this.wo.ou()}scrollToPosition(t,i){i?this.wo.wu(t,1e3):this.Hi.Qs(t)}scrollToRealTime(){this.wo.bu()}getVisibleRange(){var t,i;const s=this.wo.G_();return null===s?null:{from:null!==(t=s.from.__)&&void 0!==t?t:s.from.u_,to:null!==(i=s.to.__)&&void 0!==i?i:s.to.u_}}setVisibleRange(t){const i={from:ln(t.from),to:ln(t.to)},s=this.wo.iu(i);this.Hi.Oc(s)}getVisibleLogicalRange(){const t=this.wo.K_();return null===t?null:{from:t.Mn(),to:t.Sn()}}setVisibleLogicalRange(t){r(t.from<=t.to,"The from index cannot be after the to index."),this.Hi.Oc(t)}resetTimeScale(){this.Hi.Gs()}fitContent(){this.Hi.xu()}logicalToCoordinate(t){const i=this.Hi.kt();return i.Wi()?null:i.Et(t)}coordinateToLogical(t){return this.wo.Wi()?null:this.wo.ru(t)}timeToCoordinate(t){const i=ln(t),s=this.wo.zl(i,!1);return null===s?null:this.wo.Et(s)}coordinateToTime(t){var i;const s=this.Hi.kt(),n=s.ru(t),e=s.bs(n);return null===e?null:null!==(i=e.__)&&void 0!==i?i:e.u_}width(){return this.Xv.nv().Ft}height(){return this.Xv.nv().Wt}subscribeVisibleTimeRangeChange(t){this.qm.l(t)}unsubscribeVisibleTimeRangeChange(t){this.qm.p(t)}subscribeVisibleLogicalRangeChange(t){this.I_.l(t)}unsubscribeVisibleLogicalRangeChange(t){this.I_.p(t)}subscribeSizeChange(t){this.gv.l(t)}unsubscribeSizeChange(t){this.gv.p(t)}applyOptions(t){this.wo.Th(t)}options(){return k(this.wo.F())}Ym(){this.qm.g()&&this.qm.m(this.getVisibleRange())}Xm(){this.I_.g()&&this.I_.m(this.getVisibleLogicalRange())}Zm(t){this.gv.m(t.Ft,t.Wt)}}function In(t){if(void 0===t||"custom"===t.type)return;const i=t;void 0!==i.minMove&&void 0===i.precision&&(i.precision=function(t){if(t>=1)return 0;let i=0;for(;i<8;i++){const s=Math.round(t);if(Math.abs(s-t)<1e-8)return i;t*=10}return i}(i.minMove))}function Vn(t){return function(t){if(y(t.handleScale)){const i=t.handleScale;t.handleScale={axisDoubleClickReset:{time:i,price:i},axisPressedMouseMove:{time:i,price:i},mouseWheel:i,pinch:i}}else if(void 0!==t.handleScale){const{axisPressedMouseMove:i,axisDoubleClickReset:s}=t.handleScale;y(i)&&(t.handleScale.axisPressedMouseMove={time:i,price:i}),y(s)&&(t.handleScale.axisDoubleClickReset={time:s,price:s})}const i=t.handleScroll;y(i)&&(t.handleScroll={horzTouchDrag:i,vertTouchDrag:i,mouseWheel:i,pressedMouseMove:i})}(t),t}class Nn{constructor(t,i){this.Km=new fn,this.Gm=new Map,this.Jm=new Map,this.Qm=new b,this.tb=new b;const s=void 0===i?k(yn):w(k(yn),Vn(i));this.Fm=new Hs(t,s),this.Fm.Qp().l((t=>{this.Qm.g()&&this.Qm.m(this.ib(t()))}),this),this.Fm.fc().l((t=>{this.tb.g()&&this.tb.m(this.ib(t()))}),this);const n=this.Fm.qt();this.sb=new En(n,this.Fm.Qv())}remove(){this.Fm.Qp().v(this),this.Fm.fc().v(this),this.sb.M(),this.Fm.M(),this.Gm.clear(),this.Jm.clear(),this.Qm.M(),this.tb.M(),this.Km.M()}resize(t,i,s){this.Fm.Zv(t,i,s)}addAreaSeries(t){return this.nb("Area",Tn,t)}addBaselineSeries(t){return this.nb("Baseline",Dn,t)}addBarSeries(t){return this.nb("Bar",Cn,t)}addCandlestickSeries(t={}){return function(t){void 0!==t.borderColor&&(t.borderUpColor=t.borderColor,t.borderDownColor=t.borderColor),void 0!==t.wickColor&&(t.wickUpColor=t.wickColor,t.wickDownColor=t.wickColor)}(t),this.nb("Candlestick",kn,t)}addHistogramSeries(t){return this.nb("Histogram",Pn,t)}addLineSeries(t){return this.nb("Line",xn,t)}removeSeries(t){const i=h(this.Gm.get(t)),s=this.Km.Lc(i);this.Fm.qt().Lc(i),this.eb(s),this.Gm.delete(t),this.Jm.delete(i)}Hm(t,i){this.eb(this.Km.Tm(t,i))}Um(t,i){this.eb(this.Km.Lm(t,i))}subscribeClick(t){this.Qm.l(t)}unsubscribeClick(t){this.Qm.p(t)}subscribeCrosshairMove(t){this.tb.l(t)}unsubscribeCrosshairMove(t){this.tb.p(t)}priceScale(t){return new An(this.Fm,t)}timeScale(){return this.sb}applyOptions(t){this.Fm.Th(Vn(t))}options(){return this.Fm.F()}takeScreenshot(){return this.Fm.im()}nb(t,i,s={}){In(s.priceFormat);const n=w(k(Rn),k(i),s),e=this.Fm.qt().Rc(t,n),r=new Bn(e,this,this);return this.Gm.set(r,e),this.Jm.set(e,r),r}eb(t){const i=this.Fm.qt();i.Dc(t.kt.eu,t.kt.Vm,t.kt.Nm),t.Em.forEach(((t,i)=>i.tt(t.lr,t.Im))),i.lu()}rb(t){return h(this.Jm.get(t))}ib(t){const i=new Map;t.vm.forEach(((t,s)=>{const n=gn(s.Ih())(t);r(function(t){return void 0!==t.open||void 0!==t.value}(n)),i.set(this.rb(s),n)}));const s=void 0===t.pm?void 0:this.rb(t.pm);return{time:t._t,logical:t.Xn,point:t.fm,hoveredSeries:s,hoveredMarkerId:t.bm,seriesData:i}}}function Fn(t,i){let s;if(S(t)){const i=document.getElementById(t);r(null!==i,`Cannot find element in DOM with id=${t}`),s=i}else s=t;return new Nn(s,i)}function Wn(){return"4.0.0"}export{ls as ColorType,J as CrosshairMode,rs as LastPriceAnimationMode,s as LineStyle,i as LineType,gi as MismatchDirection,hs as PriceLineSource,zi as PriceScaleMode,ns as TickMarkType,es as TrackingModeExitMode,Fn as createChart,ds as isBusinessDay,fs as isUTCTimestamp,Wn as version};
diff --git a/node_modules/lightweight-charts/dist/lightweight-charts.standalone.development.js b/node_modules/lightweight-charts/dist/lightweight-charts.standalone.development.js
index fb7a176..9ad6374 100644
--- a/node_modules/lightweight-charts/dist/lightweight-charts.standalone.development.js
+++ b/node_modules/lightweight-charts/dist/lightweight-charts.standalone.development.js
@@ -1,7 +1,7 @@
 /*!
  * @license
- * TradingView Lightweight Charts v3.8.0
- * Copyright (c) 2020 TradingView, Inc.
+ * TradingView Lightweight Charts v4.0.0
+ * Copyright (c) 2022 TradingView, Inc.
  * Licensed under Apache License 2.0 https://www.apache.org/licenses/LICENSE-2.0
  */
 (function () {
@@ -20,6 +20,10 @@
          * A stepped line.
          */
         LineType[LineType["WithSteps"] = 1] = "WithSteps";
+        /**
+         * A curved line.
+         */
+        LineType[LineType["Curved"] = 2] = "Curved";
     })(LineType || (LineType = {}));
     /**
      * Represents the possible line styles.
@@ -48,27 +52,26 @@
         LineStyle[LineStyle["SparseDotted"] = 4] = "SparseDotted";
     })(LineStyle || (LineStyle = {}));
     function setLineStyle(ctx, style) {
-        var _a;
-        var dashPatterns = (_a = {},
-            _a[0 /* Solid */] = [],
-            _a[1 /* Dotted */] = [ctx.lineWidth, ctx.lineWidth],
-            _a[2 /* Dashed */] = [2 * ctx.lineWidth, 2 * ctx.lineWidth],
-            _a[3 /* LargeDashed */] = [6 * ctx.lineWidth, 6 * ctx.lineWidth],
-            _a[4 /* SparseDotted */] = [ctx.lineWidth, 4 * ctx.lineWidth],
-            _a);
-        var dashPattern = dashPatterns[style];
+        const dashPatterns = {
+            [0 /* LineStyle.Solid */]: [],
+            [1 /* LineStyle.Dotted */]: [ctx.lineWidth, ctx.lineWidth],
+            [2 /* LineStyle.Dashed */]: [2 * ctx.lineWidth, 2 * ctx.lineWidth],
+            [3 /* LineStyle.LargeDashed */]: [6 * ctx.lineWidth, 6 * ctx.lineWidth],
+            [4 /* LineStyle.SparseDotted */]: [ctx.lineWidth, 4 * ctx.lineWidth],
+        };
+        const dashPattern = dashPatterns[style];
         ctx.setLineDash(dashPattern);
     }
     function drawHorizontalLine(ctx, y, left, right) {
         ctx.beginPath();
-        var correction = (ctx.lineWidth % 2) ? 0.5 : 0;
+        const correction = (ctx.lineWidth % 2) ? 0.5 : 0;
         ctx.moveTo(left, y + correction);
         ctx.lineTo(right, y + correction);
         ctx.stroke();
     }
     function drawVerticalLine(ctx, x, top, bottom) {
         ctx.beginPath();
-        var correction = (ctx.lineWidth % 2) ? 0.5 : 0;
+        const correction = (ctx.lineWidth % 2) ? 0.5 : 0;
         ctx.moveTo(x + correction, top);
         ctx.lineTo(x + correction, bottom);
         ctx.stroke();
@@ -119,7 +122,7 @@
      * @public
      * @see https://developer.mozilla.org/en-US/docs/Web/CSS/color_value
      */
-    var namedColorRgbHexStrings = {
+    const namedColorRgbHexStrings = {
         // The order of properties in this Record is not important for the internal logic.
         // It's just GZIPped better when props follows this order.
         // Please add new colors to the end of the record.
@@ -293,7 +296,7 @@
      * @example
      * #f0fa
      */
-    var shortHexRe = /^#([0-9a-f])([0-9a-f])([0-9a-f])([0-9a-f])?$/i;
+    const shortHexRe = /^#([0-9a-f])([0-9a-f])([0-9a-f])([0-9a-f])?$/i;
     /**
      * @example
      * #00ff00
@@ -302,21 +305,21 @@
      * @example
      * #336699FA
      */
-    var hexRe = /^#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})?$/i;
+    const hexRe = /^#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})?$/i;
     /**
      * @example
      * rgb(123, 234, 45)
      * @example
      * rgb(255,234,245)
      */
-    var rgbRe = /^rgb\(\s*(-?\d{1,10})\s*,\s*(-?\d{1,10})\s*,\s*(-?\d{1,10})\s*\)$/;
+    const rgbRe = /^rgb\(\s*(-?\d{1,10})\s*,\s*(-?\d{1,10})\s*,\s*(-?\d{1,10})\s*\)$/;
     /**
      * @example
      * rgba(123, 234, 45, 1)
      * @example
      * rgba(255,234,245,0.1)
      */
-    var rgbaRe = /^rgba\(\s*(-?\d{1,10})\s*,\s*(-?\d{1,10})\s*,\s*(-?\d{1,10})\s*,\s*(-?[\d]{0,10}(?:\.\d+)?)\s*\)$/;
+    const rgbaRe = /^rgba\(\s*(-?\d{1,10})\s*,\s*(-?\d{1,10})\s*,\s*(-?\d{1,10})\s*,\s*(-?[\d]{0,10}(?:\.\d+)?)\s*\)$/;
     function colorStringToRgba(colorString) {
         colorString = colorString.toLowerCase();
         // eslint-disable-next-line no-restricted-syntax
@@ -324,7 +327,7 @@
             colorString = namedColorRgbHexStrings[colorString];
         }
         {
-            var matches = rgbaRe.exec(colorString) || rgbRe.exec(colorString);
+            const matches = rgbaRe.exec(colorString) || rgbRe.exec(colorString);
             if (matches) {
                 return [
                     normalizeRgbComponent(parseInt(matches[1], 10)),
@@ -335,7 +338,7 @@
             }
         }
         {
-            var matches = hexRe.exec(colorString);
+            const matches = hexRe.exec(colorString);
             if (matches) {
                 return [
                     normalizeRgbComponent(parseInt(matches[1], 16)),
@@ -346,7 +349,7 @@
             }
         }
         {
-            var matches = shortHexRe.exec(colorString);
+            const matches = shortHexRe.exec(colorString);
             if (matches) {
                 return [
                     normalizeRgbComponent(parseInt(matches[1], 16) * 0x11),
@@ -356,14 +359,14 @@
                 ];
             }
         }
-        throw new Error("Cannot parse color: ".concat(colorString));
+        throw new Error(`Cannot parse color: ${colorString}`);
     }
     function rgbaToGrayscale(rgbValue) {
         // Originally, the NTSC RGB to YUV formula
         // perfected by @eugene-korobko's black magic
-        var redComponentGrayscaleWeight = 0.199;
-        var greenComponentGrayscaleWeight = 0.687;
-        var blueComponentGrayscaleWeight = 0.114;
+        const redComponentGrayscaleWeight = 0.199;
+        const greenComponentGrayscaleWeight = 0.687;
+        const blueComponentGrayscaleWeight = 0.114;
         return (redComponentGrayscaleWeight * rgbValue[0] +
             greenComponentGrayscaleWeight * rgbValue[1] +
             blueComponentGrayscaleWeight * rgbValue[2]);
@@ -373,139 +376,69 @@
         if (color === 'transparent') {
             return color;
         }
-        var originRgba = colorStringToRgba(color);
-        var originAlpha = originRgba[3];
-        return "rgba(".concat(originRgba[0], ", ").concat(originRgba[1], ", ").concat(originRgba[2], ", ").concat(alpha * originAlpha, ")");
+        const originRgba = colorStringToRgba(color);
+        const originAlpha = originRgba[3];
+        return `rgba(${originRgba[0]}, ${originRgba[1]}, ${originRgba[2]}, ${alpha * originAlpha})`;
     }
     function generateContrastColors(backgroundColor) {
-        var rgb = colorStringToRgba(backgroundColor);
+        const rgb = colorStringToRgba(backgroundColor);
         return {
-            _internal_background: "rgb(".concat(rgb[0], ", ").concat(rgb[1], ", ").concat(rgb[2], ")"),
+            _internal_background: `rgb(${rgb[0]}, ${rgb[1]}, ${rgb[2]})`,
             _internal_foreground: rgbaToGrayscale(rgb) > 160 ? 'black' : 'white',
         };
     }
     function gradientColorAtPercent(topColor, bottomColor, percent) {
-        var _a = colorStringToRgba(topColor), topR = _a[0], topG = _a[1], topB = _a[2], topA = _a[3];
-        var _b = colorStringToRgba(bottomColor), bottomR = _b[0], bottomG = _b[1], bottomB = _b[2], bottomA = _b[3];
-        var resultRgba = [
+        const [topR, topG, topB, topA] = colorStringToRgba(topColor);
+        const [bottomR, bottomG, bottomB, bottomA] = colorStringToRgba(bottomColor);
+        const resultRgba = [
             normalizeRgbComponent(topR + percent * (bottomR - topR)),
             normalizeRgbComponent(topG + percent * (bottomG - topG)),
             normalizeRgbComponent(topB + percent * (bottomB - topB)),
             normalizeAlphaComponent(topA + percent * (bottomA - topA)),
         ];
-        return "rgba(".concat(resultRgba[0], ", ").concat(resultRgba[1], ", ").concat(resultRgba[2], ", ").concat(resultRgba[3], ")");
-    }
-
-    /*! *****************************************************************************
-    Copyright (c) Microsoft Corporation.
-
-    Permission to use, copy, modify, and/or distribute this software for any
-    purpose with or without fee is hereby granted.
-
-    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
-    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
-    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
-    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
-    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
-    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
-    PERFORMANCE OF THIS SOFTWARE.
-    ***************************************************************************** */
-    /* global Reflect, Promise */
-
-    var extendStatics = function(d, b) {
-        extendStatics = Object.setPrototypeOf ||
-            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
-            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
-        return extendStatics(d, b);
-    };
-
-    function __extends(d, b) {
-        if (typeof b !== "function" && b !== null)
-            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
-        extendStatics(d, b);
-        function __() { this.constructor = d; }
-        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
-    }
-
-    var __assign = function() {
-        __assign = Object.assign || function __assign(t) {
-            for (var s, i = 1, n = arguments.length; i < n; i++) {
-                s = arguments[i];
-                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
-            }
-            return t;
-        };
-        return __assign.apply(this, arguments);
-    };
-
-    function __rest(s, e) {
-        var t = {};
-        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
-            t[p] = s[p];
-        if (s != null && typeof Object.getOwnPropertySymbols === "function")
-            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
-                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
-                    t[p[i]] = s[p[i]];
-            }
-        return t;
-    }
-
-    function __spreadArray(to, from, pack) {
-        if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
-            if (ar || !(i in from)) {
-                if (!ar) ar = Array.prototype.slice.call(from, 0, i);
-                ar[i] = from[i];
-            }
-        }
-        return to.concat(ar || Array.prototype.slice.call(from));
+        return `rgba(${resultRgba[0]}, ${resultRgba[1]}, ${resultRgba[2]}, ${resultRgba[3]})`;
     }
 
     // eslint-disable-next-line @typescript-eslint/no-invalid-void-type
-    var Delegate = /** @class */ (function () {
-        function Delegate() {
+    class Delegate {
+        constructor() {
             this._private__listeners = [];
         }
-        Delegate.prototype._internal_subscribe = function (callback, linkedObject, singleshot) {
-            var listener = {
+        _internal_subscribe(callback, linkedObject, singleshot) {
+            const listener = {
                 _internal_callback: callback,
                 _internal_linkedObject: linkedObject,
                 _internal_singleshot: singleshot === true,
             };
             this._private__listeners.push(listener);
-        };
-        Delegate.prototype._internal_unsubscribe = function (callback) {
-            var index = this._private__listeners.findIndex(function (listener) { return callback === listener._internal_callback; });
+        }
+        _internal_unsubscribe(callback) {
+            const index = this._private__listeners.findIndex((listener) => callback === listener._internal_callback);
             if (index > -1) {
                 this._private__listeners.splice(index, 1);
             }
-        };
-        Delegate.prototype._internal_unsubscribeAll = function (linkedObject) {
-            this._private__listeners = this._private__listeners.filter(function (listener) { return listener._internal_linkedObject !== linkedObject; });
-        };
-        Delegate.prototype._internal_fire = function (param1, param2) {
-            var listenersSnapshot = __spreadArray([], this._private__listeners, true);
-            this._private__listeners = this._private__listeners.filter(function (listener) { return !listener._internal_singleshot; });
-            listenersSnapshot.forEach(function (listener) { return listener._internal_callback(param1, param2); });
-        };
-        Delegate.prototype._internal_hasListeners = function () {
+        }
+        _internal_unsubscribeAll(linkedObject) {
+            this._private__listeners = this._private__listeners.filter((listener) => listener._internal_linkedObject !== linkedObject);
+        }
+        _internal_fire(param1, param2) {
+            const listenersSnapshot = [...this._private__listeners];
+            this._private__listeners = this._private__listeners.filter((listener) => !listener._internal_singleshot);
+            listenersSnapshot.forEach((listener) => listener._internal_callback(param1, param2));
+        }
+        _internal_hasListeners() {
             return this._private__listeners.length > 0;
-        };
-        Delegate.prototype._internal_destroy = function () {
+        }
+        _internal_destroy() {
             this._private__listeners = [];
-        };
-        return Delegate;
-    }());
+        }
+    }
 
     // eslint-disable-next-line @typescript-eslint/no-explicit-any
-    function merge(dst) {
-        var sources = [];
-        for (var _i = 1; _i < arguments.length; _i++) {
-            sources[_i - 1] = arguments[_i];
-        }
-        for (var _a = 0, sources_1 = sources; _a < sources_1.length; _a++) {
-            var src = sources_1[_a];
+    function merge(dst, ...sources) {
+        for (const src of sources) {
             // eslint-disable-next-line no-restricted-syntax
-            for (var i in src) {
+            for (const i in src) {
                 if (src[i] === undefined) {
                     continue;
                 }
@@ -513,6 +446,7 @@
                     dst[i] = src[i];
                 }
                 else {
+                    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
                     merge(dst[i], src[i]);
                 }
             }
@@ -533,21 +467,21 @@
     }
     function clone(object) {
         // eslint-disable-next-line @typescript-eslint/no-explicit-any
-        var o = object;
+        const o = object;
         if (!o || 'object' !== typeof o) {
             // eslint-disable-next-line @typescript-eslint/no-unsafe-return
             return o;
         }
         // eslint-disable-next-line @typescript-eslint/no-explicit-any
-        var c;
+        let c;
         if (Array.isArray(o)) {
             c = [];
         }
         else {
             c = {};
         }
-        var p;
-        var v;
+        let p;
+        let v;
         // eslint-disable-next-line no-restricted-syntax
         for (p in o) {
             // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-call,no-prototype-builtins
@@ -578,7 +512,7 @@
      * Default font family.
      * Must be used to generate font string when font is not specified.
      */
-    var defaultFontFamily = "'Trebuchet MS', Roboto, Ubuntu, sans-serif";
+    const defaultFontFamily = `'Trebuchet MS', Roboto, Ubuntu, sans-serif`;
     /**
      * Generates a font string, which can be used to set in canvas' font property.
      * If no family provided, {@link defaultFontFamily} will be used.
@@ -590,7 +524,7 @@
      */
     function makeFont(size, family, style) {
         if (style !== undefined) {
-            style = "".concat(style, " ");
+            style = `${style} `;
         }
         else {
             style = '';
@@ -598,18 +532,19 @@
         if (family === undefined) {
             family = defaultFontFamily;
         }
-        return "".concat(style).concat(size, "px ").concat(family);
+        return `${style}${size}px ${family}`;
     }
 
-    var PriceAxisRendererOptionsProvider = /** @class */ (function () {
-        function PriceAxisRendererOptionsProvider(chartModel) {
+    class PriceAxisRendererOptionsProvider {
+        constructor(chartModel) {
             this._private__rendererOptions = {
-                _internal_borderSize: 1 /* BorderSize */,
-                _internal_tickLength: 4 /* TickLength */,
+                _internal_borderSize: 1 /* RendererConstants.BorderSize */,
+                _internal_tickLength: 5 /* RendererConstants.TickLength */,
                 _internal_fontSize: NaN,
                 _internal_font: '',
                 _internal_fontFamily: '',
                 _internal_color: '',
+                _internal_paneBackgroundColor: '',
                 _internal_paddingBottom: 0,
                 _internal_paddingInner: 0,
                 _internal_paddingOuter: 0,
@@ -618,56 +553,56 @@
             };
             this._private__chartModel = chartModel;
         }
-        PriceAxisRendererOptionsProvider.prototype._internal_options = function () {
-            var rendererOptions = this._private__rendererOptions;
-            var currentFontSize = this._private__fontSize();
-            var currentFontFamily = this._private__fontFamily();
+        _internal_options() {
+            const rendererOptions = this._private__rendererOptions;
+            const currentFontSize = this._private__fontSize();
+            const currentFontFamily = this._private__fontFamily();
             if (rendererOptions._internal_fontSize !== currentFontSize || rendererOptions._internal_fontFamily !== currentFontFamily) {
                 rendererOptions._internal_fontSize = currentFontSize;
                 rendererOptions._internal_fontFamily = currentFontFamily;
                 rendererOptions._internal_font = makeFont(currentFontSize, currentFontFamily);
-                rendererOptions._internal_paddingTop = Math.floor(currentFontSize / 3.5);
+                rendererOptions._internal_paddingTop = 2.5 / 12 * currentFontSize; // 2.5 px for 12px font
                 rendererOptions._internal_paddingBottom = rendererOptions._internal_paddingTop;
-                rendererOptions._internal_paddingInner = Math.max(Math.ceil(currentFontSize / 2 - rendererOptions._internal_tickLength / 2), 0);
-                rendererOptions._internal_paddingOuter = Math.ceil(currentFontSize / 2 + rendererOptions._internal_tickLength / 2);
-                rendererOptions._internal_baselineOffset = Math.round(currentFontSize / 10);
+                rendererOptions._internal_paddingInner = currentFontSize / 12 * rendererOptions._internal_tickLength;
+                rendererOptions._internal_paddingOuter = currentFontSize / 12 * rendererOptions._internal_tickLength;
+                rendererOptions._internal_baselineOffset = 0;
             }
             rendererOptions._internal_color = this._private__textColor();
+            rendererOptions._internal_paneBackgroundColor = this._private__paneBackgroundColor();
             return this._private__rendererOptions;
-        };
-        PriceAxisRendererOptionsProvider.prototype._private__textColor = function () {
+        }
+        _private__textColor() {
             return this._private__chartModel._internal_options().layout.textColor;
-        };
-        PriceAxisRendererOptionsProvider.prototype._private__fontSize = function () {
+        }
+        _private__paneBackgroundColor() {
+            return this._private__chartModel._internal_backgroundTopColor();
+        }
+        _private__fontSize() {
             return this._private__chartModel._internal_options().layout.fontSize;
-        };
-        PriceAxisRendererOptionsProvider.prototype._private__fontFamily = function () {
+        }
+        _private__fontFamily() {
             return this._private__chartModel._internal_options().layout.fontFamily;
-        };
-        return PriceAxisRendererOptionsProvider;
-    }());
+        }
+    }
 
-    var CompositeRenderer = /** @class */ (function () {
-        function CompositeRenderer() {
+    class CompositeRenderer {
+        constructor() {
             this._private__renderers = [];
         }
-        CompositeRenderer.prototype._internal_setRenderers = function (renderers) {
+        _internal_setRenderers(renderers) {
             this._private__renderers = renderers;
-        };
-        CompositeRenderer.prototype._internal_draw = function (ctx, pixelRatio, isHovered, hitTestData) {
-            this._private__renderers.forEach(function (r) {
+        }
+        _internal_draw(ctx, pixelRatio, isHovered, hitTestData) {
+            this._private__renderers.forEach((r) => {
                 ctx.save();
                 r._internal_draw(ctx, pixelRatio, isHovered, hitTestData);
                 ctx.restore();
             });
-        };
-        return CompositeRenderer;
-    }());
-
-    var ScaledRenderer = /** @class */ (function () {
-        function ScaledRenderer() {
         }
-        ScaledRenderer.prototype._internal_draw = function (ctx, pixelRatio, isHovered, hitTestData) {
+    }
+
+    class ScaledRenderer {
+        _internal_draw(ctx, pixelRatio, isHovered, hitTestData) {
             ctx.save();
             // actually we must be sure that this scaling applied only once at the same time
             // currently ScaledRenderer could be only nodes renderer (not top-level renderers like CompositeRenderer or something)
@@ -675,8 +610,8 @@
             ctx.scale(pixelRatio, pixelRatio);
             this._internal__drawImpl(ctx, isHovered, hitTestData);
             ctx.restore();
-        };
-        ScaledRenderer.prototype._internal_drawBackground = function (ctx, pixelRatio, isHovered, hitTestData) {
+        }
+        _internal_drawBackground(ctx, pixelRatio, isHovered, hitTestData) {
             ctx.save();
             // actually we must be sure that this scaling applied only once at the same time
             // currently ScaledRenderer could be only nodes renderer (not top-level renderers like CompositeRenderer or something)
@@ -684,43 +619,41 @@
             ctx.scale(pixelRatio, pixelRatio);
             this._internal__drawBackgroundImpl(ctx, isHovered, hitTestData);
             ctx.restore();
-        };
-        ScaledRenderer.prototype._internal__drawBackgroundImpl = function (ctx, isHovered, hitTestData) { };
-        return ScaledRenderer;
-    }());
+        }
+        _internal__drawBackgroundImpl(ctx, isHovered, hitTestData) { }
+    }
 
-    var PaneRendererMarks = /** @class */ (function (_super) {
-        __extends(PaneRendererMarks, _super);
-        function PaneRendererMarks() {
-            var _this = _super !== null && _super.apply(this, arguments) || this;
-            _this._internal__data = null;
-            return _this;
+    class PaneRendererMarks extends ScaledRenderer {
+        constructor() {
+            super(...arguments);
+            this._internal__data = null;
         }
-        PaneRendererMarks.prototype._internal_setData = function (data) {
+        _internal_setData(data) {
             this._internal__data = data;
-        };
-        PaneRendererMarks.prototype._internal__drawImpl = function (ctx) {
+        }
+        _internal__drawImpl(ctx) {
             if (this._internal__data === null || this._internal__data._internal_visibleRange === null) {
                 return;
             }
-            var visibleRange = this._internal__data._internal_visibleRange;
-            var data = this._internal__data;
-            var draw = function (radius) {
+            const visibleRange = this._internal__data._internal_visibleRange;
+            const data = this._internal__data;
+            const draw = (radius) => {
                 ctx.beginPath();
-                for (var i = visibleRange.to - 1; i >= visibleRange.from; --i) {
-                    var point = data._internal_items[i];
+                for (let i = visibleRange.to - 1; i >= visibleRange.from; --i) {
+                    const point = data._internal_items[i];
                     ctx.moveTo(point._internal_x, point._internal_y);
                     ctx.arc(point._internal_x, point._internal_y, radius, 0, Math.PI * 2);
                 }
                 ctx.fill();
             };
-            ctx.fillStyle = data._internal_backColor;
-            draw(data._internal_radius + 2);
+            if (data._internal_lineWidth > 0) {
+                ctx.fillStyle = data._internal_backColor;
+                draw(data._internal_radius + data._internal_lineWidth);
+            }
             ctx.fillStyle = data._internal_lineColor;
             draw(data._internal_radius);
-        };
-        return PaneRendererMarks;
-    }(ScaledRenderer));
+        }
+    }
 
     function createEmptyMarkerData() {
         return {
@@ -733,12 +666,13 @@
             _internal_lineColor: '',
             _internal_backColor: '',
             _internal_radius: 0,
+            _internal_lineWidth: 0,
             _internal_visibleRange: null,
         };
     }
-    var rangeForSinglePoint = { from: 0, to: 1 };
-    var CrosshairMarksPaneView = /** @class */ (function () {
-        function CrosshairMarksPaneView(chartModel, crosshair) {
+    const rangeForSinglePoint = { from: 0, to: 1 };
+    class CrosshairMarksPaneView {
+        constructor(chartModel, crosshair) {
             this._private__compositeRenderer = new CompositeRenderer();
             this._private__markersRenderers = [];
             this._private__markersData = [];
@@ -747,71 +681,70 @@
             this._private__crosshair = crosshair;
             this._private__compositeRenderer._internal_setRenderers(this._private__markersRenderers);
         }
-        CrosshairMarksPaneView.prototype._internal_update = function (updateType) {
-            var serieses = this._private__chartModel._internal_serieses();
+        _internal_update(updateType) {
+            const serieses = this._private__chartModel._internal_serieses();
             if (serieses.length !== this._private__markersRenderers.length) {
                 this._private__markersData = serieses.map(createEmptyMarkerData);
-                this._private__markersRenderers = this._private__markersData.map(function (data) {
-                    var res = new PaneRendererMarks();
+                this._private__markersRenderers = this._private__markersData.map((data) => {
+                    const res = new PaneRendererMarks();
                     res._internal_setData(data);
                     return res;
                 });
                 this._private__compositeRenderer._internal_setRenderers(this._private__markersRenderers);
             }
             this._private__invalidated = true;
-        };
-        CrosshairMarksPaneView.prototype._internal_renderer = function (height, width, addAnchors) {
+        }
+        _internal_renderer(height, width, addAnchors) {
             if (this._private__invalidated) {
                 this._private__updateImpl(height);
                 this._private__invalidated = false;
             }
             return this._private__compositeRenderer;
-        };
-        CrosshairMarksPaneView.prototype._private__updateImpl = function (height) {
-            var _this = this;
-            var serieses = this._private__chartModel._internal_serieses();
-            var timePointIndex = this._private__crosshair._internal_appliedIndex();
-            var timeScale = this._private__chartModel._internal_timeScale();
-            serieses.forEach(function (s, index) {
+        }
+        _private__updateImpl(height) {
+            const serieses = this._private__chartModel._internal_serieses();
+            const timePointIndex = this._private__crosshair._internal_appliedIndex();
+            const timeScale = this._private__chartModel._internal_timeScale();
+            serieses.forEach((s, index) => {
                 var _a;
-                var data = _this._private__markersData[index];
-                var seriesData = s._internal_markerDataAtIndex(timePointIndex);
+                const data = this._private__markersData[index];
+                const seriesData = s._internal_markerDataAtIndex(timePointIndex);
                 if (seriesData === null || !s._internal_visible()) {
                     data._internal_visibleRange = null;
                     return;
                 }
-                var firstValue = ensureNotNull(s._internal_firstValue());
+                const firstValue = ensureNotNull(s._internal_firstValue());
                 data._internal_lineColor = seriesData._internal_backgroundColor;
                 data._internal_radius = seriesData._internal_radius;
+                data._internal_lineWidth = seriesData._internal_borderWidth;
                 data._internal_items[0]._internal_price = seriesData._internal_price;
                 data._internal_items[0]._internal_y = s._internal_priceScale()._internal_priceToCoordinate(seriesData._internal_price, firstValue._internal_value);
-                data._internal_backColor = (_a = seriesData._internal_borderColor) !== null && _a !== void 0 ? _a : _this._private__chartModel._internal_backgroundColorAtYPercentFromTop(data._internal_items[0]._internal_y / height);
+                data._internal_backColor = (_a = seriesData._internal_borderColor) !== null && _a !== void 0 ? _a : this._private__chartModel._internal_backgroundColorAtYPercentFromTop(data._internal_items[0]._internal_y / height);
                 data._internal_items[0]._internal_time = timePointIndex;
                 data._internal_items[0]._internal_x = timeScale._internal_indexToCoordinate(timePointIndex);
                 data._internal_visibleRange = rangeForSinglePoint;
             });
-        };
-        return CrosshairMarksPaneView;
-    }());
+        }
+    }
 
-    var CrosshairRenderer = /** @class */ (function () {
-        function CrosshairRenderer(data) {
+    class CrosshairRenderer {
+        constructor(data) {
             this._private__data = data;
         }
-        CrosshairRenderer.prototype._internal_draw = function (ctx, pixelRatio, isHovered, hitTestData) {
+        _internal_draw(ctx, pixelRatio, isHovered, hitTestData) {
             if (this._private__data === null) {
                 return;
             }
-            var vertLinesVisible = this._private__data._internal_vertLine._internal_visible;
-            var horzLinesVisible = this._private__data._internal_horzLine._internal_visible;
+            const vertLinesVisible = this._private__data._internal_vertLine._internal_visible;
+            const horzLinesVisible = this._private__data._internal_horzLine._internal_visible;
             if (!vertLinesVisible && !horzLinesVisible) {
                 return;
             }
             ctx.save();
-            var x = Math.round(this._private__data._internal_x * pixelRatio);
-            var y = Math.round(this._private__data._internal_y * pixelRatio);
-            var w = Math.ceil(this._private__data._internal_w * pixelRatio);
-            var h = Math.ceil(this._private__data._internal_h * pixelRatio);
+            const x = Math.round(this._private__data._internal_x * pixelRatio);
+            const y = Math.round(this._private__data._internal_y * pixelRatio);
+            const w = Math.ceil(this._private__data._internal_w * pixelRatio);
+            const h = Math.ceil(this._private__data._internal_h * pixelRatio);
             ctx.lineCap = 'butt';
             if (vertLinesVisible && x >= 0) {
                 ctx.lineWidth = Math.floor(this._private__data._internal_vertLine._internal_lineWidth * pixelRatio);
@@ -828,12 +761,11 @@
                 drawHorizontalLine(ctx, y, 0, w);
             }
             ctx.restore();
-        };
-        return CrosshairRenderer;
-    }());
+        }
+    }
 
-    var CrosshairPaneView = /** @class */ (function () {
-        function CrosshairPaneView(source) {
+    class CrosshairPaneView {
+        constructor(source) {
             this._private__invalidated = true;
             this._private__rendererData = {
                 _internal_vertLine: {
@@ -856,21 +788,21 @@
             this._private__renderer = new CrosshairRenderer(this._private__rendererData);
             this._private__source = source;
         }
-        CrosshairPaneView.prototype._internal_update = function () {
+        _internal_update() {
             this._private__invalidated = true;
-        };
-        CrosshairPaneView.prototype._internal_renderer = function (height, width) {
+        }
+        _internal_renderer(height, width) {
             if (this._private__invalidated) {
                 this._private__updateImpl();
                 this._private__invalidated = false;
             }
             return this._private__renderer;
-        };
-        CrosshairPaneView.prototype._private__updateImpl = function () {
-            var visible = this._private__source._internal_visible();
-            var pane = ensureNotNull(this._private__source._internal_pane());
-            var crosshairOptions = pane._internal_model()._internal_options().crosshair;
-            var data = this._private__rendererData;
+        }
+        _private__updateImpl() {
+            const visible = this._private__source._internal_visible();
+            const pane = ensureNotNull(this._private__source._internal_pane());
+            const crosshairOptions = pane._internal_model()._internal_options().crosshair;
+            const data = this._private__rendererData;
             data._internal_horzLine._internal_visible = visible && this._private__source._internal_horzLineVisible(pane);
             data._internal_vertLine._internal_visible = visible && this._private__source._internal_vertLineVisible();
             data._internal_horzLine._internal_lineWidth = crosshairOptions.horzLine.width;
@@ -883,9 +815,8 @@
             data._internal_h = pane._internal_height();
             data._internal_x = this._private__source._internal_appliedX();
             data._internal_y = this._private__source._internal_appliedY();
-        };
-        return CrosshairPaneView;
-    }());
+        }
+    }
 
     /**
      * Fills rectangle's inner border (so, all the filled area is limited by the [x, x + width]*[y, y + height] region)
@@ -937,11 +868,95 @@
         ctx.fillRect(x, y, w, h);
         ctx.restore();
     }
+    function changeBorderRadius(borderRadius, offset) {
+        if (Array.isArray(borderRadius)) {
+            return borderRadius.map((x) => x === 0 ? x : x + offset);
+        }
+        return borderRadius + offset;
+    }
+    function drawRoundRect(
+    // eslint:disable-next-line:max-params
+    ctx, x, y, w, h, radii) {
+        let radiusLeftTop;
+        let radiusRightTop;
+        let radiusRightBottom;
+        let radiusLeftBottom;
+        if (!Array.isArray(radii)) {
+            const oneRadius = Math.max(0, radii);
+            radiusLeftTop = oneRadius;
+            radiusRightTop = oneRadius;
+            radiusRightBottom = oneRadius;
+            radiusLeftBottom = oneRadius;
+        }
+        else if (radii.length === 2) {
+            const cornerRadius1 = Math.max(0, radii[0]);
+            const cornerRadius2 = Math.max(0, radii[1]);
+            radiusLeftTop = cornerRadius1;
+            radiusRightTop = cornerRadius1;
+            radiusRightBottom = cornerRadius2;
+            radiusLeftBottom = cornerRadius2;
+        }
+        else if (radii.length === 4) {
+            radiusLeftTop = Math.max(0, radii[0]);
+            radiusRightTop = Math.max(0, radii[1]);
+            radiusRightBottom = Math.max(0, radii[2]);
+            radiusLeftBottom = Math.max(0, radii[3]);
+        }
+        else {
+            throw new Error(`Wrong border radius - it should be like css border radius`);
+        }
+        ctx.beginPath();
+        ctx.moveTo(x + radiusLeftTop, y);
+        ctx.lineTo(x + w - radiusRightTop, y);
+        if (radiusRightTop !== 0) {
+            ctx.arcTo(x + w, y, x + w, y + radiusRightTop, radiusRightTop);
+        }
+        ctx.lineTo(x + w, y + h - radiusRightBottom);
+        if (radiusRightBottom !== 0) {
+            ctx.arcTo(x + w, y + h, x + w - radiusRightBottom, y + h, radiusRightBottom);
+        }
+        ctx.lineTo(x + radiusLeftBottom, y + h);
+        if (radiusLeftBottom !== 0) {
+            ctx.arcTo(x, y + h, x, y + h - radiusLeftBottom, radiusLeftBottom);
+        }
+        ctx.lineTo(x, y + radiusLeftTop);
+        if (radiusLeftTop !== 0) {
+            ctx.arcTo(x, y, x + radiusLeftTop, y, radiusLeftTop);
+        }
+    }
+    // eslint-disable-next-line max-params
+    function drawRoundRectWithInnerBorder(ctx, left, top, width, height, backgroundColor, borderWidth = 0, borderRadius = 0, borderColor = '') {
+        ctx.save();
+        if (!borderWidth || !borderColor || borderColor === backgroundColor) {
+            drawRoundRect(ctx, left, top, width, height, borderRadius);
+            ctx.fillStyle = backgroundColor;
+            ctx.fill();
+            ctx.restore();
+            return;
+        }
+        const halfBorderWidth = borderWidth / 2;
+        // Draw body
+        if (backgroundColor !== 'transparent') {
+            const innerRadii = changeBorderRadius(borderRadius, -borderWidth);
+            drawRoundRect(ctx, left + borderWidth, top + borderWidth, width - borderWidth * 2, height - borderWidth * 2, innerRadii);
+            ctx.fillStyle = backgroundColor;
+            ctx.fill();
+        }
+        // Draw border
+        if (borderColor !== 'transparent') {
+            const outerRadii = changeBorderRadius(borderRadius, -halfBorderWidth);
+            drawRoundRect(ctx, left + halfBorderWidth, top + halfBorderWidth, width - borderWidth, height - borderWidth, outerRadii);
+            ctx.lineWidth = borderWidth;
+            ctx.strokeStyle = borderColor;
+            ctx.closePath();
+            ctx.stroke();
+        }
+    }
     // eslint-disable-next-line max-params
     function clearRectWithGradient(ctx, x, y, w, h, topColor, bottomColor) {
         ctx.save();
         ctx.globalCompositeOperation = 'copy';
-        var gradient = ctx.createLinearGradient(0, 0, 0, h);
+        const gradient = ctx.createLinearGradient(0, 0, 0, h);
         gradient.addColorStop(0, topColor);
         gradient.addColorStop(1, bottomColor);
         ctx.fillStyle = gradient;
@@ -949,113 +964,150 @@
         ctx.restore();
     }
 
-    var PriceAxisViewRenderer = /** @class */ (function () {
-        function PriceAxisViewRenderer(data, commonData) {
+    class PriceAxisViewRenderer {
+        constructor(data, commonData) {
             this._internal_setData(data, commonData);
         }
-        PriceAxisViewRenderer.prototype._internal_setData = function (data, commonData) {
+        _internal_setData(data, commonData) {
             this._private__data = data;
             this._private__commonData = commonData;
-        };
-        PriceAxisViewRenderer.prototype._internal_draw = function (ctx, rendererOptions, textWidthCache, width, align, pixelRatio) {
+        }
+        _internal_draw(ctx, rendererOptions, textWidthCache, width, align, pixelRatio) {
             if (!this._private__data._internal_visible) {
                 return;
             }
             ctx.font = rendererOptions._internal_font;
-            var tickSize = (this._private__data._internal_tickVisible || !this._private__data._internal_moveTextToInvisibleTick) ? rendererOptions._internal_tickLength : 0;
-            var horzBorder = rendererOptions._internal_borderSize;
-            var paddingTop = rendererOptions._internal_paddingTop;
-            var paddingBottom = rendererOptions._internal_paddingBottom;
-            var paddingInner = rendererOptions._internal_paddingInner;
-            var paddingOuter = rendererOptions._internal_paddingOuter;
-            var text = this._private__data._internal_text;
-            var textWidth = Math.ceil(textWidthCache._internal_measureText(ctx, text));
-            var baselineOffset = rendererOptions._internal_baselineOffset;
-            var totalHeight = rendererOptions._internal_fontSize + paddingTop + paddingBottom;
-            var halfHeigth = Math.ceil(totalHeight * 0.5);
-            var totalWidth = horzBorder + textWidth + paddingInner + paddingOuter + tickSize;
-            var yMid = this._private__commonData._internal_coordinate;
-            if (this._private__commonData._internal_fixedCoordinate) {
-                yMid = this._private__commonData._internal_fixedCoordinate;
-            }
-            yMid = Math.round(yMid);
-            var yTop = yMid - halfHeigth;
-            var yBottom = yTop + totalHeight;
-            var alignRight = align === 'right';
-            var xInside = alignRight ? width : 0;
-            var rightScaled = Math.ceil(width * pixelRatio);
-            var xOutside = xInside;
-            var xTick;
-            var xText;
+            const geometry = this._private__calculateGeometry(ctx, rendererOptions, textWidthCache, width, align, pixelRatio);
+            const textColor = this._private__data._internal_color || this._private__commonData._internal_color;
+            const backgroundColor = (this._private__commonData._internal_background);
             ctx.fillStyle = this._private__commonData._internal_background;
-            ctx.lineWidth = 1;
-            ctx.lineCap = 'butt';
-            if (text) {
-                if (alignRight) {
-                    // 2               1
-                    //
-                    //              6  5
-                    //
-                    // 3               4
-                    xOutside = xInside - totalWidth;
-                    xTick = xInside - tickSize;
-                    xText = xOutside + paddingOuter;
-                }
-                else {
-                    // 1               2
-                    //
-                    // 6  5
-                    //
-                    // 4               3
-                    xOutside = xInside + totalWidth;
-                    xTick = xInside + tickSize;
-                    xText = xInside + horzBorder + tickSize + paddingInner;
-                }
-                var tickHeight = Math.max(1, Math.floor(pixelRatio));
-                var horzBorderScaled = Math.max(1, Math.floor(horzBorder * pixelRatio));
-                var xInsideScaled = alignRight ? rightScaled : 0;
-                var yTopScaled = Math.round(yTop * pixelRatio);
-                var xOutsideScaled = Math.round(xOutside * pixelRatio);
-                var yMidScaled = Math.round(yMid * pixelRatio) - Math.floor(pixelRatio * 0.5);
-                var yBottomScaled = yMidScaled + tickHeight + (yMidScaled - yTopScaled);
-                var xTickScaled = Math.round(xTick * pixelRatio);
-                ctx.save();
-                ctx.beginPath();
-                ctx.moveTo(xInsideScaled, yTopScaled);
-                ctx.lineTo(xOutsideScaled, yTopScaled);
-                ctx.lineTo(xOutsideScaled, yBottomScaled);
-                ctx.lineTo(xInsideScaled, yBottomScaled);
-                ctx.fill();
+            if (this._private__data._internal_text) {
+                const drawLabelBody = (labelBackgroundColor, labelBorderColor) => {
+                    if (geometry._internal_alignRight) {
+                        drawRoundRectWithInnerBorder(ctx, geometry._internal_xOutside, geometry._internal_yTop, geometry._internal_totalWidthScaled, geometry._internal_totalHeightScaled, labelBackgroundColor, geometry._internal_horzBorderScaled, [geometry._internal_radius, 0, 0, geometry._internal_radius], labelBorderColor);
+                    }
+                    else {
+                        drawRoundRectWithInnerBorder(ctx, geometry._internal_xInside, geometry._internal_yTop, geometry._internal_totalWidthScaled, geometry._internal_totalHeightScaled, labelBackgroundColor, geometry._internal_horzBorderScaled, [0, geometry._internal_radius, geometry._internal_radius, 0], labelBorderColor);
+                    }
+                };
                 // draw border
-                ctx.fillStyle = this._private__data._internal_borderColor;
-                ctx.fillRect(alignRight ? rightScaled - horzBorderScaled : 0, yTopScaled, horzBorderScaled, yBottomScaled - yTopScaled);
+                // draw label background
+                drawLabelBody(backgroundColor, 'transparent');
+                // draw tick
                 if (this._private__data._internal_tickVisible) {
-                    ctx.fillStyle = this._private__commonData._internal_color;
-                    ctx.fillRect(xInsideScaled, yMidScaled, xTickScaled - xInsideScaled, tickHeight);
+                    ctx.fillStyle = textColor;
+                    ctx.fillRect(geometry._internal_xInside, geometry._internal_yMid, geometry._internal_xTick - geometry._internal_xInside, geometry._internal_tickHeight);
                 }
-                ctx.textAlign = 'left';
-                ctx.fillStyle = this._private__commonData._internal_color;
-                drawScaled(ctx, pixelRatio, function () {
-                    ctx.fillText(text, xText, yBottom - paddingBottom - baselineOffset);
+                // draw label border above the tick
+                drawLabelBody('transparent', backgroundColor);
+                // draw separator
+                if (this._private__data._internal_borderVisible) {
+                    ctx.fillStyle = rendererOptions._internal_paneBackgroundColor;
+                    ctx.fillRect(geometry._internal_alignRight ? geometry._internal_rightScaled - geometry._internal_horzBorderScaled : 0, geometry._internal_yTop, geometry._internal_horzBorderScaled, geometry._internal_yBottom - geometry._internal_yTop);
+                }
+                ctx.save();
+                ctx.translate(geometry._internal_xText, (geometry._internal_yTop + geometry._internal_yBottom) / 2 + geometry._internal_textMidCorrection);
+                drawScaled(ctx, pixelRatio, () => {
+                    ctx.fillStyle = textColor;
+                    ctx.fillText(this._private__data._internal_text, 0, 0);
                 });
                 ctx.restore();
             }
-        };
-        PriceAxisViewRenderer.prototype._internal_height = function (rendererOptions, useSecondLine) {
+        }
+        _internal_height(rendererOptions, useSecondLine) {
             if (!this._private__data._internal_visible) {
                 return 0;
             }
             return rendererOptions._internal_fontSize + rendererOptions._internal_paddingTop + rendererOptions._internal_paddingBottom;
-        };
-        return PriceAxisViewRenderer;
-    }());
+        }
+        _private__calculateGeometry(ctx, rendererOptions, textWidthCache, width, align, pixelRatio) {
+            const tickSize = (this._private__data._internal_tickVisible || !this._private__data._internal_moveTextToInvisibleTick) ? rendererOptions._internal_tickLength : 0;
+            const horzBorder = rendererOptions._internal_borderSize;
+            const paddingTop = rendererOptions._internal_paddingTop + this._private__commonData._internal_additionalPaddingTop;
+            const paddingBottom = rendererOptions._internal_paddingBottom + this._private__commonData._internal_additionalPaddingBottom;
+            const paddingInner = rendererOptions._internal_paddingInner;
+            const paddingOuter = rendererOptions._internal_paddingOuter;
+            const text = this._private__data._internal_text;
+            const actualTextHeight = rendererOptions._internal_fontSize;
+            const textMidCorrection = textWidthCache._internal_yMidCorrection(ctx, text) * pixelRatio;
+            const textWidth = Math.ceil(textWidthCache._internal_measureText(ctx, text));
+            const totalHeight = actualTextHeight + paddingTop + paddingBottom;
+            const totalWidth = horzBorder + paddingInner + paddingOuter + textWidth + tickSize;
+            const tickHeight = Math.max(1, Math.floor(pixelRatio));
+            let totalHeightScaled = Math.round(totalHeight * pixelRatio);
+            if (totalHeightScaled % 2 !== tickHeight % 2) {
+                totalHeightScaled += 1;
+            }
+            const horzBorderScaled = this._private__data._internal_separatorVisible ? Math.max(1, Math.floor(horzBorder * pixelRatio)) : 0;
+            const totalWidthScaled = Math.round(totalWidth * pixelRatio);
+            // tick overlaps scale border
+            const tickSizeScaled = Math.round(tickSize * pixelRatio);
+            const widthScaled = Math.ceil(width * pixelRatio);
+            const paddingInnerScaled = Math.ceil(paddingInner * pixelRatio);
+            let yMid = this._private__commonData._internal_coordinate;
+            if (this._private__commonData._internal_fixedCoordinate) {
+                yMid = this._private__commonData._internal_fixedCoordinate;
+            }
+            yMid = Math.round(yMid * pixelRatio) - Math.floor(pixelRatio * 0.5);
+            const yTop = Math.floor(yMid + tickHeight / 2 - totalHeightScaled / 2);
+            const yBottom = yTop + totalHeightScaled;
+            const alignRight = align === 'right';
+            const xInside = alignRight ? widthScaled - horzBorderScaled : horzBorderScaled;
+            const rightScaled = widthScaled;
+            let xOutside = xInside;
+            let xTick;
+            let xText;
+            const radius = 2 * pixelRatio;
+            ctx.textAlign = alignRight ? 'right' : 'left';
+            ctx.textBaseline = 'middle';
+            if (alignRight) {
+                // 2               1
+                //
+                //              6  5
+                //
+                // 3               4
+                xOutside = xInside - totalWidthScaled;
+                xTick = xInside - tickSizeScaled;
+                xText = xInside - tickSizeScaled - paddingInnerScaled - 1;
+            }
+            else {
+                // 1               2
+                //
+                // 6  5
+                //
+                // 4               3
+                xOutside = xInside + totalWidthScaled;
+                xTick = xInside + tickSizeScaled;
+                xText = xInside + tickSizeScaled + paddingInnerScaled;
+            }
+            return {
+                _internal_alignRight: alignRight,
+                _internal_yTop: yTop,
+                _internal_yMid: yMid,
+                _internal_yBottom: yBottom,
+                _internal_totalWidthScaled: totalWidthScaled,
+                _internal_totalHeightScaled: totalHeightScaled,
+                _internal_radius: radius,
+                _internal_horzBorderScaled: horzBorderScaled,
+                _internal_xOutside: xOutside,
+                _internal_xInside: xInside,
+                _internal_xTick: xTick,
+                _internal_xText: xText,
+                _internal_tickHeight: tickHeight,
+                _internal_rightScaled: rightScaled,
+                _internal_textMidCorrection: textMidCorrection,
+            };
+        }
+    }
 
-    var PriceAxisView = /** @class */ (function () {
-        function PriceAxisView(ctor) {
+    class PriceAxisView {
+        constructor(ctor) {
             this._private__commonRendererData = {
                 _internal_coordinate: 0,
                 _internal_color: '#FFF',
                 _internal_background: '#000',
+                _internal_additionalPaddingBottom: 0,
+                _internal_additionalPaddingTop: 0,
             };
             this._private__axisRendererData = {
                 _internal_text: '',
@@ -1063,6 +1115,9 @@
                 _internal_tickVisible: true,
                 _internal_moveTextToInvisibleTick: false,
                 _internal_borderColor: '',
+                _internal_color: '#FFF',
+                _internal_borderVisible: false,
+                _internal_separatorVisible: false,
             };
             this._private__paneRendererData = {
                 _internal_text: '',
@@ -1070,122 +1125,123 @@
                 _internal_tickVisible: false,
                 _internal_moveTextToInvisibleTick: true,
                 _internal_borderColor: '',
+                _internal_color: '#FFF',
+                _internal_borderVisible: true,
+                _internal_separatorVisible: true,
             };
             this._private__invalidated = true;
             this._private__axisRenderer = new (ctor || PriceAxisViewRenderer)(this._private__axisRendererData, this._private__commonRendererData);
             this._private__paneRenderer = new (ctor || PriceAxisViewRenderer)(this._private__paneRendererData, this._private__commonRendererData);
         }
-        PriceAxisView.prototype._internal_text = function () {
+        _internal_text() {
             this._private__updateRendererDataIfNeeded();
             return this._private__axisRendererData._internal_text;
-        };
-        PriceAxisView.prototype._internal_coordinate = function () {
+        }
+        _internal_coordinate() {
             this._private__updateRendererDataIfNeeded();
             return this._private__commonRendererData._internal_coordinate;
-        };
-        PriceAxisView.prototype._internal_update = function () {
+        }
+        _internal_update() {
             this._private__invalidated = true;
-        };
-        PriceAxisView.prototype._internal_height = function (rendererOptions, useSecondLine) {
-            if (useSecondLine === void 0) { useSecondLine = false; }
+        }
+        _internal_height(rendererOptions, useSecondLine = false) {
             return Math.max(this._private__axisRenderer._internal_height(rendererOptions, useSecondLine), this._private__paneRenderer._internal_height(rendererOptions, useSecondLine));
-        };
-        PriceAxisView.prototype._internal_getFixedCoordinate = function () {
+        }
+        _internal_getFixedCoordinate() {
             return this._private__commonRendererData._internal_fixedCoordinate || 0;
-        };
-        PriceAxisView.prototype._internal_setFixedCoordinate = function (value) {
+        }
+        _internal_setFixedCoordinate(value) {
             this._private__commonRendererData._internal_fixedCoordinate = value;
-        };
-        PriceAxisView.prototype._internal_isVisible = function () {
+        }
+        _internal_isVisible() {
             this._private__updateRendererDataIfNeeded();
             return this._private__axisRendererData._internal_visible || this._private__paneRendererData._internal_visible;
-        };
-        PriceAxisView.prototype._internal_isAxisLabelVisible = function () {
+        }
+        _internal_isAxisLabelVisible() {
             this._private__updateRendererDataIfNeeded();
             return this._private__axisRendererData._internal_visible;
-        };
-        PriceAxisView.prototype._internal_renderer = function (priceScale) {
+        }
+        _internal_renderer(priceScale) {
             this._private__updateRendererDataIfNeeded();
             // force update tickVisible state from price scale options
             // because we don't have and we can't have price axis in other methods
             // (like paneRenderer or any other who call _updateRendererDataIfNeeded)
-            this._private__axisRendererData._internal_tickVisible = this._private__axisRendererData._internal_tickVisible && priceScale._internal_options().drawTicks;
-            this._private__paneRendererData._internal_tickVisible = this._private__paneRendererData._internal_tickVisible && priceScale._internal_options().drawTicks;
+            this._private__axisRendererData._internal_tickVisible = this._private__axisRendererData._internal_tickVisible && priceScale._internal_options().ticksVisible;
+            this._private__paneRendererData._internal_tickVisible = this._private__paneRendererData._internal_tickVisible && priceScale._internal_options().ticksVisible;
             this._private__axisRenderer._internal_setData(this._private__axisRendererData, this._private__commonRendererData);
             this._private__paneRenderer._internal_setData(this._private__paneRendererData, this._private__commonRendererData);
             return this._private__axisRenderer;
-        };
-        PriceAxisView.prototype._internal_paneRenderer = function () {
+        }
+        _internal_paneRenderer() {
             this._private__updateRendererDataIfNeeded();
             this._private__axisRenderer._internal_setData(this._private__axisRendererData, this._private__commonRendererData);
             this._private__paneRenderer._internal_setData(this._private__paneRendererData, this._private__commonRendererData);
             return this._private__paneRenderer;
-        };
-        PriceAxisView.prototype._private__updateRendererDataIfNeeded = function () {
+        }
+        _private__updateRendererDataIfNeeded() {
             if (this._private__invalidated) {
                 this._private__axisRendererData._internal_tickVisible = true;
                 this._private__paneRendererData._internal_tickVisible = false;
                 this._internal__updateRendererData(this._private__axisRendererData, this._private__paneRendererData, this._private__commonRendererData);
             }
-        };
-        return PriceAxisView;
-    }());
+        }
+    }
 
-    var CrosshairPriceAxisView = /** @class */ (function (_super) {
-        __extends(CrosshairPriceAxisView, _super);
-        function CrosshairPriceAxisView(source, priceScale, valueProvider) {
-            var _this = _super.call(this) || this;
-            _this._private__source = source;
-            _this._private__priceScale = priceScale;
-            _this._private__valueProvider = valueProvider;
-            return _this;
+    class CrosshairPriceAxisView extends PriceAxisView {
+        constructor(source, priceScale, valueProvider) {
+            super();
+            this._private__source = source;
+            this._private__priceScale = priceScale;
+            this._private__valueProvider = valueProvider;
         }
-        CrosshairPriceAxisView.prototype._internal__updateRendererData = function (axisRendererData, paneRendererData, commonRendererData) {
+        _internal__updateRendererData(axisRendererData, paneRendererData, commonRendererData) {
             axisRendererData._internal_visible = false;
-            var options = this._private__source._internal_options().horzLine;
+            const options = this._private__source._internal_options().horzLine;
             if (!options.labelVisible) {
                 return;
             }
-            var firstValue = this._private__priceScale._internal_firstValue();
+            const firstValue = this._private__priceScale._internal_firstValue();
             if (!this._private__source._internal_visible() || this._private__priceScale._internal_isEmpty() || (firstValue === null)) {
                 return;
             }
-            var colors = generateContrastColors(options.labelBackgroundColor);
+            const colors = generateContrastColors(options.labelBackgroundColor);
             commonRendererData._internal_background = colors._internal_background;
             commonRendererData._internal_color = colors._internal_foreground;
-            var value = this._private__valueProvider(this._private__priceScale);
+            const additionalPadding = 2 / 12 * this._private__priceScale._internal_fontSize();
+            commonRendererData._internal_additionalPaddingTop = additionalPadding;
+            commonRendererData._internal_additionalPaddingBottom = additionalPadding;
+            const value = this._private__valueProvider(this._private__priceScale);
             commonRendererData._internal_coordinate = value._internal_coordinate;
             axisRendererData._internal_text = this._private__priceScale._internal_formatPrice(value._internal_price, firstValue);
             axisRendererData._internal_visible = true;
-        };
-        return CrosshairPriceAxisView;
-    }(PriceAxisView));
+        }
+    }
 
-    var optimizationReplacementRe = /[1-9]/g;
-    var TimeAxisViewRenderer = /** @class */ (function () {
-        function TimeAxisViewRenderer() {
+    const optimizationReplacementRe = /[1-9]/g;
+    const radius$1 = 2;
+    class TimeAxisViewRenderer {
+        constructor() {
             this._private__data = null;
         }
-        TimeAxisViewRenderer.prototype._internal_setData = function (data) {
+        _internal_setData(data) {
             this._private__data = data;
-        };
-        TimeAxisViewRenderer.prototype._internal_draw = function (ctx, rendererOptions, pixelRatio) {
-            var _this = this;
+        }
+        _internal_draw(ctx, rendererOptions, pixelRatio) {
             if (this._private__data === null || this._private__data._internal_visible === false || this._private__data._internal_text.length === 0) {
                 return;
             }
             ctx.font = rendererOptions._internal_font;
-            var textWidth = Math.round(rendererOptions._internal_widthCache._internal_measureText(ctx, this._private__data._internal_text, optimizationReplacementRe));
+            const textWidth = Math.round(rendererOptions._internal_widthCache._internal_measureText(ctx, this._private__data._internal_text, optimizationReplacementRe));
             if (textWidth <= 0) {
                 return;
             }
             ctx.save();
-            var horzMargin = rendererOptions._internal_paddingHorizontal;
-            var labelWidth = textWidth + 2 * horzMargin;
-            var labelWidthHalf = labelWidth / 2;
-            var timeScaleWidth = this._private__data._internal_width;
-            var coordinate = this._private__data._internal_coordinate;
-            var x1 = Math.floor(coordinate - labelWidthHalf) + 0.5;
+            const horzMargin = rendererOptions._internal_paddingHorizontal;
+            const labelWidth = textWidth + 2 * horzMargin;
+            const labelWidthHalf = labelWidth / 2;
+            const timeScaleWidth = this._private__data._internal_width;
+            let coordinate = this._private__data._internal_coordinate;
+            let x1 = Math.floor(coordinate - labelWidthHalf) + 0.5;
             if (x1 < 0) {
                 coordinate = coordinate + Math.abs(0 - x1);
                 x1 = Math.floor(coordinate - labelWidthHalf) + 0.5;
@@ -1194,39 +1250,54 @@
                 coordinate = coordinate - Math.abs(timeScaleWidth - (x1 + labelWidth));
                 x1 = Math.floor(coordinate - labelWidthHalf) + 0.5;
             }
-            var x2 = x1 + labelWidth;
-            var y1 = 0;
-            var y2 = (y1 +
+            const x2 = x1 + labelWidth;
+            const y1 = 0;
+            const y2 = Math.ceil(y1 +
                 rendererOptions._internal_borderSize +
+                rendererOptions._internal_tickLength +
                 rendererOptions._internal_paddingTop +
                 rendererOptions._internal_fontSize +
                 rendererOptions._internal_paddingBottom);
             ctx.fillStyle = this._private__data._internal_background;
-            var x1scaled = Math.round(x1 * pixelRatio);
-            var y1scaled = Math.round(y1 * pixelRatio);
-            var x2scaled = Math.round(x2 * pixelRatio);
-            var y2scaled = Math.round(y2 * pixelRatio);
-            ctx.fillRect(x1scaled, y1scaled, x2scaled - x1scaled, y2scaled - y1scaled);
-            var tickX = Math.round(this._private__data._internal_coordinate * pixelRatio);
-            var tickTop = y1scaled;
-            var tickBottom = Math.round((tickTop + rendererOptions._internal_borderSize + rendererOptions._internal_tickLength) * pixelRatio);
-            ctx.fillStyle = this._private__data._internal_color;
-            var tickWidth = Math.max(1, Math.floor(pixelRatio));
-            var tickOffset = Math.floor(pixelRatio * 0.5);
-            ctx.fillRect(tickX - tickOffset, tickTop, tickWidth, tickBottom - tickTop);
-            var yText = y2 - rendererOptions._internal_baselineOffset - rendererOptions._internal_paddingBottom;
+            const x1scaled = Math.round(x1 * pixelRatio);
+            const y1scaled = Math.round(y1 * pixelRatio);
+            const x2scaled = Math.round(x2 * pixelRatio);
+            const y2scaled = Math.round(y2 * pixelRatio);
+            const radiusScaled = Math.round(radius$1 * pixelRatio);
+            ctx.beginPath();
+            ctx.moveTo(x1scaled, y1scaled);
+            ctx.lineTo(x1scaled, y2scaled - radiusScaled);
+            ctx.arcTo(x1scaled, y2scaled, x1scaled + radiusScaled, y2scaled, radiusScaled);
+            ctx.lineTo(x2scaled - radiusScaled, y2scaled);
+            ctx.arcTo(x2scaled, y2scaled, x2scaled, y2scaled - radiusScaled, radiusScaled);
+            ctx.lineTo(x2scaled, y1scaled);
+            ctx.fill();
+            if (this._private__data._internal_tickVisible) {
+                const tickX = Math.round(this._private__data._internal_coordinate * pixelRatio);
+                const tickTop = y1scaled;
+                const tickBottom = Math.round((tickTop + rendererOptions._internal_tickLength) * pixelRatio);
+                ctx.fillStyle = this._private__data._internal_color;
+                const tickWidth = Math.max(1, Math.floor(pixelRatio));
+                const tickOffset = Math.floor(pixelRatio * 0.5);
+                ctx.fillRect(tickX - tickOffset, tickTop, tickWidth, tickBottom - tickTop);
+            }
+            const yText = y1 +
+                rendererOptions._internal_borderSize +
+                rendererOptions._internal_tickLength +
+                rendererOptions._internal_paddingTop +
+                rendererOptions._internal_fontSize / 2;
             ctx.textAlign = 'left';
+            ctx.textBaseline = 'middle';
             ctx.fillStyle = this._private__data._internal_color;
-            drawScaled(ctx, pixelRatio, function () {
-                ctx.fillText(ensureNotNull(_this._private__data)._internal_text, x1 + horzMargin, yText);
-            });
+            const textYCorrection = rendererOptions._internal_widthCache._internal_yMidCorrection(ctx, 'Apr0');
+            ctx.translate((x1 + horzMargin) * pixelRatio, (yText + textYCorrection) * pixelRatio);
+            drawScaled(ctx, pixelRatio, () => ctx.fillText(ensureNotNull(this._private__data)._internal_text, 0, 0));
             ctx.restore();
-        };
-        return TimeAxisViewRenderer;
-    }());
+        }
+    }
 
-    var CrosshairTimeAxisView = /** @class */ (function () {
-        function CrosshairTimeAxisView(crosshair, model, valueProvider) {
+    class CrosshairTimeAxisView {
+        constructor(crosshair, model, valueProvider) {
             this._private__invalidated = true;
             this._private__renderer = new TimeAxisViewRenderer();
             this._private__rendererData = {
@@ -1236,74 +1307,77 @@
                 _internal_text: '',
                 _internal_width: 0,
                 _internal_coordinate: NaN,
+                _internal_tickVisible: true,
             };
             this._private__crosshair = crosshair;
             this._private__model = model;
             this._private__valueProvider = valueProvider;
         }
-        CrosshairTimeAxisView.prototype._internal_update = function () {
+        _internal_update() {
             this._private__invalidated = true;
-        };
-        CrosshairTimeAxisView.prototype._internal_renderer = function () {
+        }
+        _internal_renderer() {
             if (this._private__invalidated) {
                 this._private__updateImpl();
                 this._private__invalidated = false;
             }
             this._private__renderer._internal_setData(this._private__rendererData);
             return this._private__renderer;
-        };
-        CrosshairTimeAxisView.prototype._private__updateImpl = function () {
-            var data = this._private__rendererData;
+        }
+        _private__updateImpl() {
+            const data = this._private__rendererData;
             data._internal_visible = false;
-            var options = this._private__crosshair._internal_options().vertLine;
+            const options = this._private__crosshair._internal_options().vertLine;
             if (!options.labelVisible) {
                 return;
             }
-            var timeScale = this._private__model._internal_timeScale();
+            const timeScale = this._private__model._internal_timeScale();
             if (timeScale._internal_isEmpty()) {
                 return;
             }
-            var currentTime = timeScale._internal_indexToTime(this._private__crosshair._internal_appliedIndex());
             data._internal_width = timeScale._internal_width();
-            var value = this._private__valueProvider();
+            const value = this._private__valueProvider();
             if (!value._internal_time) {
                 return;
             }
             data._internal_coordinate = value._internal_coordinate;
+            const currentTime = timeScale._internal_indexToTimeScalePoint(this._private__crosshair._internal_appliedIndex());
             data._internal_text = timeScale._internal_formatDateTime(ensureNotNull(currentTime));
             data._internal_visible = true;
-            var colors = generateContrastColors(options.labelBackgroundColor);
+            const colors = generateContrastColors(options.labelBackgroundColor);
             data._internal_background = colors._internal_background;
             data._internal_color = colors._internal_foreground;
-        };
-        return CrosshairTimeAxisView;
-    }());
+            data._internal_tickVisible = timeScale._internal_options().ticksVisible;
+        }
+    }
 
-    var DataSource = /** @class */ (function () {
-        function DataSource() {
+    class DataSource {
+        constructor() {
             this._internal__priceScale = null;
             this._private__zorder = 0;
         }
-        DataSource.prototype._internal_zorder = function () {
+        _internal_zorder() {
             return this._private__zorder;
-        };
-        DataSource.prototype._internal_setZorder = function (zorder) {
+        }
+        _internal_setZorder(zorder) {
             this._private__zorder = zorder;
-        };
-        DataSource.prototype._internal_priceScale = function () {
+        }
+        _internal_priceScale() {
             return this._internal__priceScale;
-        };
-        DataSource.prototype._internal_setPriceScale = function (priceScale) {
+        }
+        _internal_setPriceScale(priceScale) {
             this._internal__priceScale = priceScale;
-        };
-        DataSource.prototype._internal_timeAxisViews = function () {
+        }
+        _internal_labelPaneViews(pane) {
             return [];
-        };
-        DataSource.prototype._internal_visible = function () {
+        }
+        _internal_timeAxisViews() {
+            return [];
+        }
+        _internal_visible() {
             return true;
-        };
-        return DataSource;
-    }());
+        }
+    }
 
     /**
      * Represents the crosshair mode.
@@ -1319,91 +1393,89 @@
          */
         CrosshairMode[CrosshairMode["Magnet"] = 1] = "Magnet";
     })(CrosshairMode || (CrosshairMode = {}));
-    var Crosshair = /** @class */ (function (_super) {
-        __extends(Crosshair, _super);
-        function Crosshair(model, options) {
-            var _this = _super.call(this) || this;
-            _this._private__pane = null;
-            _this._private__price = NaN;
-            _this._private__index = 0;
-            _this._private__visible = true;
-            _this._private__priceAxisViews = new Map();
-            _this._private__subscribed = false;
-            _this._private__x = NaN;
-            _this._private__y = NaN;
-            _this._private__originX = NaN;
-            _this._private__originY = NaN;
-            _this._private__model = model;
-            _this._private__options = options;
-            _this._private__markersPaneView = new CrosshairMarksPaneView(model, _this);
-            var valuePriceProvider = function (rawPriceProvider, rawCoordinateProvider) {
-                return function (priceScale) {
-                    var coordinate = rawCoordinateProvider();
-                    var rawPrice = rawPriceProvider();
-                    if (priceScale === ensureNotNull(_this._private__pane)._internal_defaultPriceScale()) {
+    class Crosshair extends DataSource {
+        constructor(model, options) {
+            super();
+            this._private__pane = null;
+            this._private__price = NaN;
+            this._private__index = 0;
+            this._private__visible = true;
+            this._private__priceAxisViews = new Map();
+            this._private__subscribed = false;
+            this._private__x = NaN;
+            this._private__y = NaN;
+            this._private__originX = NaN;
+            this._private__originY = NaN;
+            this._private__model = model;
+            this._private__options = options;
+            this._private__markersPaneView = new CrosshairMarksPaneView(model, this);
+            const valuePriceProvider = (rawPriceProvider, rawCoordinateProvider) => {
+                return (priceScale) => {
+                    const coordinate = rawCoordinateProvider();
+                    const rawPrice = rawPriceProvider();
+                    if (priceScale === ensureNotNull(this._private__pane)._internal_defaultPriceScale()) {
                         // price must be defined
                         return { _internal_price: rawPrice, _internal_coordinate: coordinate };
                     }
                     else {
                         // always convert from coordinate
-                        var firstValue = ensureNotNull(priceScale._internal_firstValue());
-                        var price = priceScale._internal_coordinateToPrice(coordinate, firstValue);
+                        const firstValue = ensureNotNull(priceScale._internal_firstValue());
+                        const price = priceScale._internal_coordinateToPrice(coordinate, firstValue);
                         return { _internal_price: price, _internal_coordinate: coordinate };
                     }
                 };
             };
-            var valueTimeProvider = function (rawIndexProvider, rawCoordinateProvider) {
-                return function () {
+            const valueTimeProvider = (rawIndexProvider, rawCoordinateProvider) => {
+                return () => {
                     return {
-                        _internal_time: _this._private__model._internal_timeScale()._internal_indexToTime(rawIndexProvider()),
+                        _internal_time: this._private__model._internal_timeScale()._internal_indexToTime(rawIndexProvider()),
                         _internal_coordinate: rawCoordinateProvider(),
                     };
                 };
             };
             // for current position always return both price and coordinate
-            _this._private__currentPosPriceProvider = valuePriceProvider(function () { return _this._private__price; }, function () { return _this._private__y; });
-            var currentPosTimeProvider = valueTimeProvider(function () { return _this._private__index; }, function () { return _this._internal_appliedX(); });
-            _this._private__timeAxisView = new CrosshairTimeAxisView(_this, model, currentPosTimeProvider);
-            _this._private__paneView = new CrosshairPaneView(_this);
-            return _this;
+            this._private__currentPosPriceProvider = valuePriceProvider(() => this._private__price, () => this._private__y);
+            const currentPosTimeProvider = valueTimeProvider(() => this._private__index, () => this._internal_appliedX());
+            this._private__timeAxisView = new CrosshairTimeAxisView(this, model, currentPosTimeProvider);
+            this._private__paneView = new CrosshairPaneView(this);
         }
-        Crosshair.prototype._internal_options = function () {
+        _internal_options() {
             return this._private__options;
-        };
-        Crosshair.prototype._internal_saveOriginCoord = function (x, y) {
+        }
+        _internal_saveOriginCoord(x, y) {
             this._private__originX = x;
             this._private__originY = y;
-        };
-        Crosshair.prototype._internal_clearOriginCoord = function () {
+        }
+        _internal_clearOriginCoord() {
             this._private__originX = NaN;
             this._private__originY = NaN;
-        };
-        Crosshair.prototype._internal_originCoordX = function () {
+        }
+        _internal_originCoordX() {
             return this._private__originX;
-        };
-        Crosshair.prototype._internal_originCoordY = function () {
+        }
+        _internal_originCoordY() {
             return this._private__originY;
-        };
-        Crosshair.prototype._internal_setPosition = function (index, price, pane) {
+        }
+        _internal_setPosition(index, price, pane) {
             if (!this._private__subscribed) {
                 this._private__subscribed = true;
             }
             this._private__visible = true;
             this._private__tryToUpdateViews(index, price, pane);
-        };
-        Crosshair.prototype._internal_appliedIndex = function () {
+        }
+        _internal_appliedIndex() {
             return this._private__index;
-        };
-        Crosshair.prototype._internal_appliedX = function () {
+        }
+        _internal_appliedX() {
             return this._private__x;
-        };
-        Crosshair.prototype._internal_appliedY = function () {
+        }
+        _internal_appliedY() {
             return this._private__y;
-        };
-        Crosshair.prototype._internal_visible = function () {
+        }
+        _internal_visible() {
             return this._private__visible;
-        };
-        Crosshair.prototype._internal_clearPosition = function () {
+        }
+        _internal_clearPosition() {
             this._private__visible = false;
             this._private__setIndexToLastSeriesBarIndex();
             this._private__price = NaN;
@@ -1411,60 +1483,60 @@
             this._private__y = NaN;
             this._private__pane = null;
             this._internal_clearOriginCoord();
-        };
-        Crosshair.prototype._internal_paneViews = function (pane) {
+        }
+        _internal_paneViews(pane) {
             return this._private__pane !== null ? [this._private__paneView, this._private__markersPaneView] : [];
-        };
-        Crosshair.prototype._internal_horzLineVisible = function (pane) {
+        }
+        _internal_horzLineVisible(pane) {
             return pane === this._private__pane && this._private__options.horzLine.visible;
-        };
-        Crosshair.prototype._internal_vertLineVisible = function () {
+        }
+        _internal_vertLineVisible() {
             return this._private__options.vertLine.visible;
-        };
-        Crosshair.prototype._internal_priceAxisViews = function (pane, priceScale) {
+        }
+        _internal_priceAxisViews(pane, priceScale) {
             if (!this._private__visible || this._private__pane !== pane) {
                 this._private__priceAxisViews.clear();
             }
-            var views = [];
+            const views = [];
             if (this._private__pane === pane) {
                 views.push(this._private__createPriceAxisViewOnDemand(this._private__priceAxisViews, priceScale, this._private__currentPosPriceProvider));
             }
             return views;
-        };
-        Crosshair.prototype._internal_timeAxisViews = function () {
+        }
+        _internal_timeAxisViews() {
             return this._private__visible ? [this._private__timeAxisView] : [];
-        };
-        Crosshair.prototype._internal_pane = function () {
+        }
+        _internal_pane() {
             return this._private__pane;
-        };
-        Crosshair.prototype._internal_updateAllViews = function () {
+        }
+        _internal_updateAllViews() {
             this._private__paneView._internal_update();
-            this._private__priceAxisViews.forEach(function (value) { return value._internal_update(); });
+            this._private__priceAxisViews.forEach((value) => value._internal_update());
             this._private__timeAxisView._internal_update();
             this._private__markersPaneView._internal_update();
-        };
-        Crosshair.prototype._private__priceScaleByPane = function (pane) {
+        }
+        _private__priceScaleByPane(pane) {
             if (pane && !pane._internal_defaultPriceScale()._internal_isEmpty()) {
                 return pane._internal_defaultPriceScale();
             }
             return null;
-        };
-        Crosshair.prototype._private__tryToUpdateViews = function (index, price, pane) {
+        }
+        _private__tryToUpdateViews(index, price, pane) {
             if (this._private__tryToUpdateData(index, price, pane)) {
                 this._internal_updateAllViews();
             }
-        };
-        Crosshair.prototype._private__tryToUpdateData = function (newIndex, newPrice, newPane) {
-            var oldX = this._private__x;
-            var oldY = this._private__y;
-            var oldPrice = this._private__price;
-            var oldIndex = this._private__index;
-            var oldPane = this._private__pane;
-            var priceScale = this._private__priceScaleByPane(newPane);
+        }
+        _private__tryToUpdateData(newIndex, newPrice, newPane) {
+            const oldX = this._private__x;
+            const oldY = this._private__y;
+            const oldPrice = this._private__price;
+            const oldIndex = this._private__index;
+            const oldPane = this._private__pane;
+            const priceScale = this._private__priceScaleByPane(newPane);
             this._private__index = newIndex;
             this._private__x = isNaN(newIndex) ? NaN : this._private__model._internal_timeScale()._internal_indexToCoordinate(newIndex);
             this._private__pane = newPane;
-            var firstValue = priceScale !== null ? priceScale._internal_firstValue() : null;
+            const firstValue = priceScale !== null ? priceScale._internal_firstValue() : null;
             if (priceScale !== null && firstValue !== null) {
                 this._private__price = newPrice;
                 this._private__y = priceScale._internal_priceToCoordinate(newPrice, firstValue);
@@ -1475,53 +1547,52 @@
             }
             return (oldX !== this._private__x || oldY !== this._private__y || oldIndex !== this._private__index ||
                 oldPrice !== this._private__price || oldPane !== this._private__pane);
-        };
-        Crosshair.prototype._private__setIndexToLastSeriesBarIndex = function () {
-            var lastIndexes = this._private__model._internal_serieses()
-                .map(function (s) { return s._internal_bars()._internal_lastIndex(); })
+        }
+        _private__setIndexToLastSeriesBarIndex() {
+            const lastIndexes = this._private__model._internal_serieses()
+                .map((s) => s._internal_bars()._internal_lastIndex())
                 .filter(notNull);
-            var lastBarIndex = (lastIndexes.length === 0) ? null : Math.max.apply(Math, lastIndexes);
+            const lastBarIndex = (lastIndexes.length === 0) ? null : Math.max(...lastIndexes);
             this._private__index = lastBarIndex !== null ? lastBarIndex : NaN;
-        };
-        Crosshair.prototype._private__createPriceAxisViewOnDemand = function (map, priceScale, valueProvider) {
-            var view = map.get(priceScale);
+        }
+        _private__createPriceAxisViewOnDemand(map, priceScale, valueProvider) {
+            let view = map.get(priceScale);
             if (view === undefined) {
                 view = new CrosshairPriceAxisView(this, priceScale, valueProvider);
                 map.set(priceScale, view);
             }
             return view;
-        };
-        return Crosshair;
-    }(DataSource));
+        }
+    }
 
     function isDefaultPriceScale(priceScaleId) {
-        return priceScaleId === "left" /* Left */ || priceScaleId === "right" /* Right */;
+        return priceScaleId === "left" /* DefaultPriceScaleId.Left */ || priceScaleId === "right" /* DefaultPriceScaleId.Right */;
     }
 
     function mergePaneInvalidation(beforeValue, newValue) {
         if (beforeValue === undefined) {
             return newValue;
         }
-        var level = Math.max(beforeValue._internal_level, newValue._internal_level);
-        var autoScale = beforeValue._internal_autoScale || newValue._internal_autoScale;
+        const level = Math.max(beforeValue._internal_level, newValue._internal_level);
+        const autoScale = beforeValue._internal_autoScale || newValue._internal_autoScale;
         return { _internal_level: level, _internal_autoScale: autoScale };
     }
-    var InvalidateMask = /** @class */ (function () {
-        function InvalidateMask(globalLevel) {
+    class InvalidateMask {
+        constructor(globalLevel) {
             this._private__invalidatedPanes = new Map();
             this._private__timeScaleInvalidations = [];
             this._private__globalLevel = globalLevel;
         }
-        InvalidateMask.prototype._internal_invalidatePane = function (paneIndex, invalidation) {
-            var prevValue = this._private__invalidatedPanes.get(paneIndex);
-            var newValue = mergePaneInvalidation(prevValue, invalidation);
+        _internal_invalidatePane(paneIndex, invalidation) {
+            const prevValue = this._private__invalidatedPanes.get(paneIndex);
+            const newValue = mergePaneInvalidation(prevValue, invalidation);
             this._private__invalidatedPanes.set(paneIndex, newValue);
-        };
-        InvalidateMask.prototype._internal_fullInvalidation = function () {
+        }
+        _internal_fullInvalidation() {
             return this._private__globalLevel;
-        };
-        InvalidateMask.prototype._internal_invalidateForPane = function (paneIndex) {
-            var paneInvalidation = this._private__invalidatedPanes.get(paneIndex);
+        }
+        _internal_invalidateForPane(paneIndex) {
+            const paneInvalidation = this._private__invalidatedPanes.get(paneIndex);
             if (paneInvalidation === undefined) {
                 return {
                     _internal_level: this._private__globalLevel,
@@ -1531,62 +1602,89 @@
                 _internal_level: Math.max(this._private__globalLevel, paneInvalidation._internal_level),
                 _internal_autoScale: paneInvalidation._internal_autoScale,
             };
-        };
-        InvalidateMask.prototype._internal_setFitContent = function () {
+        }
+        _internal_setFitContent() {
+            this._internal_stopTimeScaleAnimation();
             // modifies both bar spacing and right offset
-            this._private__timeScaleInvalidations = [{ _internal_type: 0 /* FitContent */ }];
-        };
-        InvalidateMask.prototype._internal_applyRange = function (range) {
+            this._private__timeScaleInvalidations = [{ _internal_type: 0 /* TimeScaleInvalidationType.FitContent */ }];
+        }
+        _internal_applyRange(range) {
+            this._internal_stopTimeScaleAnimation();
             // modifies both bar spacing and right offset
-            this._private__timeScaleInvalidations = [{ _internal_type: 1 /* ApplyRange */, _internal_value: range }];
-        };
-        InvalidateMask.prototype._internal_resetTimeScale = function () {
+            this._private__timeScaleInvalidations = [{ _internal_type: 1 /* TimeScaleInvalidationType.ApplyRange */, _internal_value: range }];
+        }
+        _internal_setTimeScaleAnimation(animation) {
+            this._private__removeTimeScaleAnimation();
+            this._private__timeScaleInvalidations.push({ _internal_type: 5 /* TimeScaleInvalidationType.Animation */, _internal_value: animation });
+        }
+        _internal_stopTimeScaleAnimation() {
+            this._private__removeTimeScaleAnimation();
+            this._private__timeScaleInvalidations.push({ _internal_type: 6 /* TimeScaleInvalidationType.StopAnimation */ });
+        }
+        _internal_resetTimeScale() {
+            this._internal_stopTimeScaleAnimation();
             // modifies both bar spacing and right offset
-            this._private__timeScaleInvalidations = [{ _internal_type: 4 /* Reset */ }];
-        };
-        InvalidateMask.prototype._internal_setBarSpacing = function (barSpacing) {
-            this._private__timeScaleInvalidations.push({ _internal_type: 2 /* ApplyBarSpacing */, _internal_value: barSpacing });
-        };
-        InvalidateMask.prototype._internal_setRightOffset = function (offset) {
-            this._private__timeScaleInvalidations.push({ _internal_type: 3 /* ApplyRightOffset */, _internal_value: offset });
-        };
-        InvalidateMask.prototype._internal_timeScaleInvalidations = function () {
+            this._private__timeScaleInvalidations = [{ _internal_type: 4 /* TimeScaleInvalidationType.Reset */ }];
+        }
+        _internal_setBarSpacing(barSpacing) {
+            this._internal_stopTimeScaleAnimation();
+            this._private__timeScaleInvalidations.push({ _internal_type: 2 /* TimeScaleInvalidationType.ApplyBarSpacing */, _internal_value: barSpacing });
+        }
+        _internal_setRightOffset(offset) {
+            this._internal_stopTimeScaleAnimation();
+            this._private__timeScaleInvalidations.push({ _internal_type: 3 /* TimeScaleInvalidationType.ApplyRightOffset */, _internal_value: offset });
+        }
+        _internal_timeScaleInvalidations() {
             return this._private__timeScaleInvalidations;
-        };
-        InvalidateMask.prototype._internal_merge = function (other) {
-            var _this = this;
-            for (var _i = 0, _a = other._private__timeScaleInvalidations; _i < _a.length; _i++) {
-                var tsInvalidation = _a[_i];
+        }
+        _internal_merge(other) {
+            for (const tsInvalidation of other._private__timeScaleInvalidations) {
                 this._private__applyTimeScaleInvalidation(tsInvalidation);
             }
             this._private__globalLevel = Math.max(this._private__globalLevel, other._private__globalLevel);
-            other._private__invalidatedPanes.forEach(function (invalidation, index) {
-                _this._internal_invalidatePane(index, invalidation);
+            other._private__invalidatedPanes.forEach((invalidation, index) => {
+                this._internal_invalidatePane(index, invalidation);
             });
-        };
-        InvalidateMask.prototype._private__applyTimeScaleInvalidation = function (invalidation) {
+        }
+        static _internal_light() {
+            return new InvalidateMask(2 /* InvalidationLevel.Light */);
+        }
+        static _internal_full() {
+            return new InvalidateMask(3 /* InvalidationLevel.Full */);
+        }
+        _private__applyTimeScaleInvalidation(invalidation) {
             switch (invalidation._internal_type) {
-                case 0 /* FitContent */:
+                case 0 /* TimeScaleInvalidationType.FitContent */:
                     this._internal_setFitContent();
                     break;
-                case 1 /* ApplyRange */:
+                case 1 /* TimeScaleInvalidationType.ApplyRange */:
                     this._internal_applyRange(invalidation._internal_value);
                     break;
-                case 2 /* ApplyBarSpacing */:
+                case 2 /* TimeScaleInvalidationType.ApplyBarSpacing */:
                     this._internal_setBarSpacing(invalidation._internal_value);
                     break;
-                case 3 /* ApplyRightOffset */:
+                case 3 /* TimeScaleInvalidationType.ApplyRightOffset */:
                     this._internal_setRightOffset(invalidation._internal_value);
                     break;
-                case 4 /* Reset */:
+                case 4 /* TimeScaleInvalidationType.Reset */:
                     this._internal_resetTimeScale();
                     break;
+                case 5 /* TimeScaleInvalidationType.Animation */:
+                    this._internal_setTimeScaleAnimation(invalidation._internal_value);
+                    break;
+                case 6 /* TimeScaleInvalidationType.StopAnimation */:
+                    this._private__removeTimeScaleAnimation();
             }
-        };
-        return InvalidateMask;
-    }());
+        }
+        _private__removeTimeScaleAnimation() {
+            const index = this._private__timeScaleInvalidations.findIndex((inv) => inv._internal_type === 5 /* TimeScaleInvalidationType.Animation */);
+            if (index !== -1) {
+                this._private__timeScaleInvalidations.splice(index, 1);
+            }
+        }
+    }
 
-    var formatterOptions = {
+    const formatterOptions = {
         _internal_decimalSign: '.',
         _internal_decimalSignFractional: '\'',
     };
@@ -1607,11 +1705,11 @@
         if (length === 0) {
             return value.toString();
         }
-        var dummyString = '0000000000000000';
+        const dummyString = '0000000000000000';
         return (dummyString + value.toString()).slice(-length);
     }
-    var PriceFormatter = /** @class */ (function () {
-        function PriceFormatter(priceScale, minMove) {
+    class PriceFormatter {
+        constructor(priceScale, minMove) {
             if (!minMove) {
                 minMove = 1;
             }
@@ -1625,32 +1723,32 @@
             this._private__minMove = minMove;
             this._private__calculateDecimal();
         }
-        PriceFormatter.prototype.format = function (price) {
+        format(price) {
             // \u2212 is unicode's minus sign https://www.fileformat.info/info/unicode/char/2212/index.htm
             // we should use it because it has the same width as plus sign +
-            var sign = price < 0 ? '\u2212' : '';
+            const sign = price < 0 ? '\u2212' : '';
             price = Math.abs(price);
             return sign + this._private__formatAsDecimal(price);
-        };
-        PriceFormatter.prototype._private__calculateDecimal = function () {
+        }
+        _private__calculateDecimal() {
             // check if this._base is power of 10
             // for double fractional _fractionalLength if for the main fractional only
             this._internal__fractionalLength = 0;
             if (this._private__priceScale > 0 && this._private__minMove > 0) {
-                var base = this._private__priceScale;
+                let base = this._private__priceScale;
                 while (base > 1) {
                     base /= 10;
                     this._internal__fractionalLength++;
                 }
             }
-        };
-        PriceFormatter.prototype._private__formatAsDecimal = function (price) {
-            var base = this._private__priceScale / this._private__minMove;
-            var intPart = Math.floor(price);
-            var fracString = '';
-            var fracLength = this._internal__fractionalLength !== undefined ? this._internal__fractionalLength : NaN;
+        }
+        _private__formatAsDecimal(price) {
+            const base = this._private__priceScale / this._private__minMove;
+            let intPart = Math.floor(price);
+            let fracString = '';
+            const fracLength = this._internal__fractionalLength !== undefined ? this._internal__fractionalLength : NaN;
             if (base > 1) {
-                var fracPart = +(Math.round(price * base) - intPart * base).toFixed(this._internal__fractionalLength);
+                let fracPart = +(Math.round(price * base) - intPart * base).toFixed(this._internal__fractionalLength);
                 if (fracPart >= base) {
                     fracPart -= base;
                     intPart += 1;
@@ -1666,28 +1764,24 @@
                 }
             }
             return intPart.toFixed(0) + fracString;
-        };
-        return PriceFormatter;
-    }());
+        }
+    }
 
-    var PercentageFormatter = /** @class */ (function (_super) {
-        __extends(PercentageFormatter, _super);
-        function PercentageFormatter(priceScale) {
-            if (priceScale === void 0) { priceScale = 100; }
-            return _super.call(this, priceScale) || this;
+    class PercentageFormatter extends PriceFormatter {
+        constructor(priceScale = 100) {
+            super(priceScale);
         }
-        PercentageFormatter.prototype.format = function (price) {
-            return "".concat(_super.prototype.format.call(this, price), "%");
-        };
-        return PercentageFormatter;
-    }(PriceFormatter));
+        format(price) {
+            return `${super.format(price)}%`;
+        }
+    }
 
-    var VolumeFormatter = /** @class */ (function () {
-        function VolumeFormatter(precision) {
+    class VolumeFormatter {
+        constructor(precision) {
             this._private__precision = precision;
         }
-        VolumeFormatter.prototype.format = function (vol) {
-            var sign = '';
+        format(vol) {
+            let sign = '';
             if (vol < 0) {
                 sign = '-';
                 vol = -vol;
@@ -1706,10 +1800,10 @@
                 vol = 1000000 * Math.round(vol / 1000000);
                 return sign + this._private__formatNumber(vol / 1000000000) + 'B';
             }
-        };
-        VolumeFormatter.prototype._private__formatNumber = function (value) {
-            var res;
-            var priceScale = Math.pow(10, this._private__precision);
+        }
+        _private__formatNumber(value) {
+            let res;
+            const priceScale = Math.pow(10, this._private__precision);
             value = Math.round(value * priceScale) / priceScale;
             if (value >= 1e-15 && value < 1) {
                 res = value.toFixed(this._private__precision).replace(/\.?0+$/, ''); // regex removes trailing zeroes
@@ -1717,196 +1811,192 @@
             else {
                 res = String(value);
             }
-            return res.replace(/(\.[1-9]*)0+$/, function (e, p1) { return p1; });
-        };
-        return VolumeFormatter;
-    }());
+            return res.replace(/(\.[1-9]*)0+$/, (e, p1) => p1);
+        }
+    }
 
-    /**
-     * BEWARE: The method must be called after beginPath and before stroke/fill/closePath/etc
-     */
-    function walkLine(ctx, points, lineType, visibleRange) {
-        if (points.length === 0) {
+    // eslint-disable-next-line max-params, complexity
+    function walkLine(ctx, items, lineType, visibleRange, barWidth, 
+    // the values returned by styleGetter are compared using the operator !==,
+    // so if styleGetter returns objects, then styleGetter should return the same object for equal styles
+    styleGetter, finishStyledArea) {
+        if (items.length === 0 || visibleRange.from >= items.length) {
             return;
         }
-        var x = points[visibleRange.from]._internal_x;
-        var y = points[visibleRange.from]._internal_y;
-        ctx.moveTo(x, y);
-        for (var i = visibleRange.from + 1; i < visibleRange.to; ++i) {
-            var currItem = points[i];
-            //  x---x---x   or   x---x   o   or   start
-            if (lineType === 1 /* WithSteps */) {
-                var prevY = points[i - 1]._internal_y;
-                var currX = currItem._internal_x;
-                ctx.lineTo(currX, prevY);
+        const firstItem = items[visibleRange.from];
+        let currentStyle = styleGetter(ctx, firstItem);
+        let currentStyleFirstItem = firstItem;
+        if (visibleRange.to - visibleRange.from < 2) {
+            const halfBarWidth = barWidth / 2;
+            ctx.beginPath();
+            const item1 = { _internal_x: firstItem._internal_x - halfBarWidth, _internal_y: firstItem._internal_y };
+            const item2 = { _internal_x: firstItem._internal_x + halfBarWidth, _internal_y: firstItem._internal_y };
+            ctx.moveTo(item1._internal_x, item1._internal_y);
+            ctx.lineTo(item2._internal_x, item2._internal_y);
+            finishStyledArea(ctx, currentStyle, item1, item2);
+            return;
+        }
+        const changeStyle = (newStyle, currentItem) => {
+            finishStyledArea(ctx, currentStyle, currentStyleFirstItem, currentItem);
+            ctx.beginPath();
+            currentStyle = newStyle;
+            currentStyleFirstItem = currentItem;
+        };
+        let currentItem = currentStyleFirstItem;
+        ctx.beginPath();
+        ctx.moveTo(firstItem._internal_x, firstItem._internal_y);
+        for (let i = visibleRange.from + 1; i < visibleRange.to; ++i) {
+            currentItem = items[i];
+            const itemStyle = styleGetter(ctx, currentItem);
+            switch (lineType) {
+                case 0 /* LineType.Simple */:
+                    ctx.lineTo(currentItem._internal_x, currentItem._internal_y);
+                    break;
+                case 1 /* LineType.WithSteps */:
+                    ctx.lineTo(currentItem._internal_x, items[i - 1]._internal_y);
+                    if (itemStyle !== currentStyle) {
+                        changeStyle(itemStyle, currentItem);
+                        ctx.lineTo(currentItem._internal_x, items[i - 1]._internal_y);
+                    }
+                    ctx.lineTo(currentItem._internal_x, currentItem._internal_y);
+                    break;
+                case 2 /* LineType.Curved */: {
+                    const [cp1, cp2] = getControlPoints(items, i - 1, i);
+                    ctx.bezierCurveTo(cp1._internal_x, cp1._internal_y, cp2._internal_x, cp2._internal_y, currentItem._internal_x, currentItem._internal_y);
+                    break;
+                }
+            }
+            if (lineType !== 1 /* LineType.WithSteps */ && itemStyle !== currentStyle) {
+                changeStyle(itemStyle, currentItem);
+                ctx.moveTo(currentItem._internal_x, currentItem._internal_y);
             }
-            ctx.lineTo(currItem._internal_x, currItem._internal_y);
+        }
+        if (currentStyleFirstItem !== currentItem || currentStyleFirstItem === currentItem && lineType === 1 /* LineType.WithSteps */) {
+            finishStyledArea(ctx, currentStyle, currentStyleFirstItem, currentItem);
         }
     }
-
-    var PaneRendererAreaBase = /** @class */ (function (_super) {
-        __extends(PaneRendererAreaBase, _super);
-        function PaneRendererAreaBase() {
-            var _this = _super !== null && _super.apply(this, arguments) || this;
-            _this._internal__data = null;
-            return _this;
+    const curveTension = 6;
+    function subtract(p1, p2) {
+        return { _internal_x: p1._internal_x - p2._internal_x, _internal_y: p1._internal_y - p2._internal_y };
+    }
+    function add(p1, p2) {
+        return { _internal_x: p1._internal_x + p2._internal_x, _internal_y: p1._internal_y + p2._internal_y };
+    }
+    function divide(p1, n) {
+        return { _internal_x: p1._internal_x / n, _internal_y: p1._internal_y / n };
+    }
+    /**
+     * @returns Two control points that can be used as arguments to {@link CanvasRenderingContext2D.bezierCurveTo} to draw a curved line between `points[fromPointIndex]` and `points[toPointIndex]`.
+     */
+    function getControlPoints(points, fromPointIndex, toPointIndex) {
+        const beforeFromPointIndex = Math.max(0, fromPointIndex - 1);
+        const afterToPointIndex = Math.min(points.length - 1, toPointIndex + 1);
+        const cp1 = add(points[fromPointIndex], divide(subtract(points[toPointIndex], points[beforeFromPointIndex]), curveTension));
+        const cp2 = subtract(points[toPointIndex], divide(subtract(points[afterToPointIndex], points[fromPointIndex]), curveTension));
+        return [cp1, cp2];
+    }
+
+    function finishStyledArea$1(baseLevelCoordinate, ctx, style, areaFirstItem, newAreaFirstItem) {
+        ctx.lineTo(newAreaFirstItem._internal_x, baseLevelCoordinate);
+        ctx.lineTo(areaFirstItem._internal_x, baseLevelCoordinate);
+        ctx.closePath();
+        ctx.fillStyle = style;
+        ctx.fill();
+    }
+    class PaneRendererAreaBase extends ScaledRenderer {
+        constructor() {
+            super(...arguments);
+            this._internal__data = null;
         }
-        PaneRendererAreaBase.prototype._internal_setData = function (data) {
+        _internal_setData(data) {
             this._internal__data = data;
-        };
-        PaneRendererAreaBase.prototype._internal__drawImpl = function (ctx) {
-            if (this._internal__data === null || this._internal__data._internal_items.length === 0 || this._internal__data._internal_visibleRange === null) {
+        }
+        _internal__drawImpl(ctx) {
+            if (this._internal__data === null) {
+                return;
+            }
+            const { _internal_items: items, _internal_visibleRange: visibleRange, _internal_barWidth: barWidth, _internal_lineWidth: lineWidth, _internal_lineStyle: lineStyle, _internal_lineType: lineType, _internal_baseLevelCoordinate: baseLevelCoordinate } = this._internal__data;
+            if (visibleRange === null) {
                 return;
             }
             ctx.lineCap = 'butt';
             ctx.lineJoin = 'round';
-            ctx.lineWidth = this._internal__data._internal_lineWidth;
-            setLineStyle(ctx, this._internal__data._internal_lineStyle);
+            ctx.lineWidth = lineWidth;
+            setLineStyle(ctx, lineStyle);
             // walk lines with width=1 to have more accurate gradient's filling
             ctx.lineWidth = 1;
-            ctx.beginPath();
-            if (this._internal__data._internal_items.length === 1) {
-                var point = this._internal__data._internal_items[0];
-                var halfBarWidth = this._internal__data._internal_barWidth / 2;
-                ctx.moveTo(point._internal_x - halfBarWidth, this._internal__data._internal_baseLevelCoordinate);
-                ctx.lineTo(point._internal_x - halfBarWidth, point._internal_y);
-                ctx.lineTo(point._internal_x + halfBarWidth, point._internal_y);
-                ctx.lineTo(point._internal_x + halfBarWidth, this._internal__data._internal_baseLevelCoordinate);
-            }
-            else {
-                ctx.moveTo(this._internal__data._internal_items[this._internal__data._internal_visibleRange.from]._internal_x, this._internal__data._internal_baseLevelCoordinate);
-                ctx.lineTo(this._internal__data._internal_items[this._internal__data._internal_visibleRange.from]._internal_x, this._internal__data._internal_items[this._internal__data._internal_visibleRange.from]._internal_y);
-                walkLine(ctx, this._internal__data._internal_items, this._internal__data._internal_lineType, this._internal__data._internal_visibleRange);
-                if (this._internal__data._internal_visibleRange.to > this._internal__data._internal_visibleRange.from) {
-                    ctx.lineTo(this._internal__data._internal_items[this._internal__data._internal_visibleRange.to - 1]._internal_x, this._internal__data._internal_baseLevelCoordinate);
-                    ctx.lineTo(this._internal__data._internal_items[this._internal__data._internal_visibleRange.from]._internal_x, this._internal__data._internal_baseLevelCoordinate);
-                }
-            }
-            ctx.closePath();
-            ctx.fillStyle = this._internal__fillStyle(ctx);
-            ctx.fill();
-        };
-        return PaneRendererAreaBase;
-    }(ScaledRenderer));
-    var PaneRendererArea = /** @class */ (function (_super) {
-        __extends(PaneRendererArea, _super);
-        function PaneRendererArea() {
-            return _super !== null && _super.apply(this, arguments) || this;
-        }
-        PaneRendererArea.prototype._internal__fillStyle = function (ctx) {
+            walkLine(ctx, items, lineType, visibleRange, barWidth, this._internal__fillStyle.bind(this), finishStyledArea$1.bind(null, baseLevelCoordinate));
+        }
+    }
+
+    class PaneRendererArea extends PaneRendererAreaBase {
+        constructor() {
+            super(...arguments);
+            this._private__fillCache = null;
+        }
+        _internal__fillStyle(ctx, item) {
             // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
-            var data = this._internal__data;
-            var gradient = ctx.createLinearGradient(0, 0, 0, data._internal_bottom);
-            gradient.addColorStop(0, data._internal_topColor);
-            gradient.addColorStop(1, data._internal_bottomColor);
-            return gradient;
-        };
-        return PaneRendererArea;
-    }(PaneRendererAreaBase));
+            const data = this._internal__data;
+            const { _internal_topColor: topColor, _internal_bottomColor: bottomColor } = item;
+            const bottom = data._internal_bottom;
+            if (this._private__fillCache !== null &&
+                this._private__fillCache.topColor === topColor &&
+                this._private__fillCache.bottomColor === bottomColor &&
+                this._private__fillCache.bottom === bottom) {
+                return this._private__fillCache.fillStyle;
+            }
+            const fillStyle = ctx.createLinearGradient(0, 0, 0, bottom);
+            fillStyle.addColorStop(0, topColor);
+            fillStyle.addColorStop(1, bottomColor);
+            this._private__fillCache = { topColor, bottomColor, fillStyle, bottom };
+            return fillStyle;
+        }
+    }
 
-    var PaneRendererLineBase = /** @class */ (function (_super) {
-        __extends(PaneRendererLineBase, _super);
-        function PaneRendererLineBase() {
-            var _this = _super !== null && _super.apply(this, arguments) || this;
-            _this._internal__data = null;
-            return _this;
+    function finishStyledArea(ctx, style) {
+        ctx.strokeStyle = style;
+        ctx.stroke();
+    }
+    class PaneRendererLineBase extends ScaledRenderer {
+        constructor() {
+            super(...arguments);
+            this._internal__data = null;
         }
-        PaneRendererLineBase.prototype._internal_setData = function (data) {
+        _internal_setData(data) {
             this._internal__data = data;
-        };
-        PaneRendererLineBase.prototype._internal__drawImpl = function (ctx) {
-            if (this._internal__data === null || this._internal__data._internal_items.length === 0 || this._internal__data._internal_visibleRange === null) {
+        }
+        _internal__drawImpl(ctx) {
+            if (this._internal__data === null) {
+                return;
+            }
+            const { _internal_items: items, _internal_visibleRange: visibleRange, _internal_barWidth: barWidth, _internal_lineType: lineType, _internal_lineWidth: lineWidth, _internal_lineStyle: lineStyle } = this._internal__data;
+            if (visibleRange === null) {
                 return;
             }
             ctx.lineCap = 'butt';
-            ctx.lineWidth = this._internal__data._internal_lineWidth;
-            setLineStyle(ctx, this._internal__data._internal_lineStyle);
-            ctx.strokeStyle = this._internal__strokeStyle(ctx);
+            ctx.lineWidth = lineWidth;
+            setLineStyle(ctx, lineStyle);
             ctx.lineJoin = 'round';
-            if (this._internal__data._internal_items.length === 1) {
-                ctx.beginPath();
-                var point = this._internal__data._internal_items[0];
-                ctx.moveTo(point._internal_x - this._internal__data._internal_barWidth / 2, point._internal_y);
-                ctx.lineTo(point._internal_x + this._internal__data._internal_barWidth / 2, point._internal_y);
-                if (point._internal_color !== undefined) {
-                    ctx.strokeStyle = point._internal_color;
-                }
-                ctx.stroke();
-            }
-            else {
-                this._internal__drawLine(ctx, this._internal__data);
-            }
-        };
-        PaneRendererLineBase.prototype._internal__drawLine = function (ctx, data) {
-            ctx.beginPath();
-            walkLine(ctx, data._internal_items, data._internal_lineType, data._internal_visibleRange);
-            ctx.stroke();
-        };
-        return PaneRendererLineBase;
-    }(ScaledRenderer));
-    var PaneRendererLine = /** @class */ (function (_super) {
-        __extends(PaneRendererLine, _super);
-        function PaneRendererLine() {
-            return _super !== null && _super.apply(this, arguments) || this;
+            walkLine(ctx, items, lineType, visibleRange, barWidth, this._internal__strokeStyle.bind(this), finishStyledArea);
         }
-        /**
-         * Similar to {@link walkLine}, but supports color changes
-         */
-        PaneRendererLine.prototype._internal__drawLine = function (ctx, data) {
-            var _a, _b;
-            var items = data._internal_items, visibleRange = data._internal_visibleRange, lineType = data._internal_lineType, lineColor = data._internal_lineColor;
-            if (items.length === 0 || visibleRange === null) {
-                return;
-            }
-            ctx.beginPath();
-            var firstItem = items[visibleRange.from];
-            ctx.moveTo(firstItem._internal_x, firstItem._internal_y);
-            var prevStrokeStyle = (_a = firstItem._internal_color) !== null && _a !== void 0 ? _a : lineColor;
-            ctx.strokeStyle = prevStrokeStyle;
-            var changeColor = function (color) {
-                ctx.stroke();
-                ctx.beginPath();
-                ctx.strokeStyle = color;
-                prevStrokeStyle = color;
-            };
-            for (var i = visibleRange.from + 1; i < visibleRange.to; ++i) {
-                var currItem = items[i];
-                var prevItem = items[i - 1];
-                var currentStrokeStyle = (_b = currItem._internal_color) !== null && _b !== void 0 ? _b : lineColor;
-                if (lineType === 1 /* WithSteps */) {
-                    ctx.lineTo(currItem._internal_x, prevItem._internal_y);
-                    if (currentStrokeStyle !== prevStrokeStyle) {
-                        changeColor(currentStrokeStyle);
-                        ctx.moveTo(currItem._internal_x, prevItem._internal_y);
-                    }
-                }
-                ctx.lineTo(currItem._internal_x, currItem._internal_y);
-                if (lineType !== 1 /* WithSteps */ && currentStrokeStyle !== prevStrokeStyle) {
-                    changeColor(currentStrokeStyle);
-                    ctx.moveTo(currItem._internal_x, currItem._internal_y);
-                }
-            }
-            ctx.stroke();
-        };
-        PaneRendererLine.prototype._internal__strokeStyle = function () {
-            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
-            return this._internal__data._internal_lineColor;
-        };
-        return PaneRendererLine;
-    }(PaneRendererLineBase));
+    }
+
+    class PaneRendererLine extends PaneRendererLineBase {
+        _internal__strokeStyle(ctx, item) {
+            return item._internal_lineColor;
+        }
+    }
 
     /**
      * Binary function that accepts two arguments (the first of the type of array elements, and the second is always val), and returns a value convertible to bool.
      * The value returned indicates whether the first argument is considered to go before the second.
      * The function shall not modify any of its arguments.
      */
-    function lowerbound(arr, value, compare, start, to) {
-        if (start === void 0) { start = 0; }
-        if (to === void 0) { to = arr.length; }
-        var count = to - start;
+    function lowerbound(arr, value, compare, start = 0, to = arr.length) {
+        let count = to - start;
         while (0 < count) {
-            var count2 = (count >> 1);
-            var mid = start + count2;
+            const count2 = (count >> 1);
+            const mid = start + count2;
             if (compare(arr[mid], value)) {
                 start = mid + 1;
                 count -= count2 + 1;
@@ -1917,13 +2007,11 @@
         }
         return start;
     }
-    function upperbound(arr, value, compare, start, to) {
-        if (start === void 0) { start = 0; }
-        if (to === void 0) { to = arr.length; }
-        var count = to - start;
+    function upperbound(arr, value, compare, start = 0, to = arr.length) {
+        let count = to - start;
         while (0 < count) {
-            var count2 = (count >> 1);
-            var mid = start + count2;
+            const count2 = (count >> 1);
+            const mid = start + count2;
             if (!(compare(value, arr[mid]))) {
                 start = mid + 1;
                 count -= count2 + 1;
@@ -1942,15 +2030,15 @@
         return time < item._internal_time;
     }
     function visibleTimedValues(items, range, extendedRange) {
-        var firstBar = range._internal_left();
-        var lastBar = range._internal_right();
-        var from = lowerbound(items, firstBar, lowerBoundItemsCompare);
-        var to = upperbound(items, lastBar, upperBoundItemsCompare);
+        const firstBar = range._internal_left();
+        const lastBar = range._internal_right();
+        const from = lowerbound(items, firstBar, lowerBoundItemsCompare);
+        const to = upperbound(items, lastBar, upperBoundItemsCompare);
         if (!extendedRange) {
-            return { from: from, to: to };
+            return { from, to };
         }
-        var extendedFrom = from;
-        var extendedTo = to;
+        let extendedFrom = from;
+        let extendedTo = to;
         if (from > 0 && from < items.length && items[from]._internal_time >= firstBar) {
             extendedFrom = from - 1;
         }
@@ -1960,8 +2048,8 @@
         return { from: extendedFrom, to: extendedTo };
     }
 
-    var SeriesPaneViewBase = /** @class */ (function () {
-        function SeriesPaneViewBase(series, model, extendedVisibleRange) {
+    class SeriesPaneViewBase {
+        constructor(series, model, extendedVisibleRange) {
             this._internal__invalidated = true;
             this._internal__dataInvalidated = true;
             this._internal__optionsInvalidated = true;
@@ -1971,7 +2059,7 @@
             this._internal__model = model;
             this._private__extendedVisibleRange = extendedVisibleRange;
         }
-        SeriesPaneViewBase.prototype._internal_update = function (updateType) {
+        _internal_update(updateType) {
             this._internal__invalidated = true;
             if (updateType === 'data') {
                 this._internal__dataInvalidated = true;
@@ -1979,101 +2067,103 @@
             if (updateType === 'options') {
                 this._internal__optionsInvalidated = true;
             }
-        };
-        SeriesPaneViewBase.prototype._internal__makeValid = function () {
+        }
+        _internal_renderer(height, width) {
+            if (!this._internal__series._internal_visible()) {
+                return null;
+            }
+            this._private__makeValid(width, height);
+            return this._internal__itemsVisibleRange === null ? null : this._internal__renderer;
+        }
+        _internal__updateOptions() {
+            this._internal__items = this._internal__items.map((item) => (Object.assign(Object.assign({}, item), this._internal__series._internal_barColorer()._internal_barStyle(item._internal_time))));
+        }
+        _internal__clearVisibleRange() {
+            this._internal__itemsVisibleRange = null;
+        }
+        _private__makeValid(width, height) {
             if (this._internal__dataInvalidated) {
                 this._internal__fillRawPoints();
                 this._internal__dataInvalidated = false;
             }
-            if (this._internal__invalidated) {
-                this._internal__updatePoints();
-                this._internal__invalidated = false;
-            }
             if (this._internal__optionsInvalidated) {
                 this._internal__updateOptions();
                 this._internal__optionsInvalidated = false;
             }
-        };
-        SeriesPaneViewBase.prototype._internal__clearVisibleRange = function () {
-            this._internal__itemsVisibleRange = null;
-        };
-        SeriesPaneViewBase.prototype._internal__updatePoints = function () {
-            var priceScale = this._internal__series._internal_priceScale();
-            var timeScale = this._internal__model._internal_timeScale();
+            if (this._internal__invalidated) {
+                this._private__makeValidImpl(width, height);
+                this._internal__invalidated = false;
+            }
+        }
+        _private__makeValidImpl(width, height) {
+            const priceScale = this._internal__series._internal_priceScale();
+            const timeScale = this._internal__model._internal_timeScale();
             this._internal__clearVisibleRange();
             if (timeScale._internal_isEmpty() || priceScale._internal_isEmpty()) {
                 return;
             }
-            var visibleBars = timeScale._internal_visibleStrictRange();
+            const visibleBars = timeScale._internal_visibleStrictRange();
             if (visibleBars === null) {
                 return;
             }
             if (this._internal__series._internal_bars()._internal_size() === 0) {
                 return;
             }
-            var firstValue = this._internal__series._internal_firstValue();
+            const firstValue = this._internal__series._internal_firstValue();
             if (firstValue === null) {
                 return;
             }
             this._internal__itemsVisibleRange = visibleTimedValues(this._internal__items, visibleBars, this._private__extendedVisibleRange);
             this._internal__convertToCoordinates(priceScale, timeScale, firstValue._internal_value);
-        };
-        return SeriesPaneViewBase;
-    }());
+            this._internal__prepareRendererData(width, height);
+        }
+    }
 
-    var LinePaneViewBase = /** @class */ (function (_super) {
-        __extends(LinePaneViewBase, _super);
-        function LinePaneViewBase(series, model) {
-            return _super.call(this, series, model, true) || this;
+    class LinePaneViewBase extends SeriesPaneViewBase {
+        constructor(series, model) {
+            super(series, model, true);
         }
-        LinePaneViewBase.prototype._internal__convertToCoordinates = function (priceScale, timeScale, firstValue) {
+        _internal__convertToCoordinates(priceScale, timeScale, firstValue) {
             timeScale._internal_indexesToCoordinates(this._internal__items, undefinedIfNull(this._internal__itemsVisibleRange));
             priceScale._internal_pointsArrayToCoordinates(this._internal__items, firstValue, undefinedIfNull(this._internal__itemsVisibleRange));
-        };
-        LinePaneViewBase.prototype._internal__createRawItemBase = function (time, price) {
+        }
+        _internal__createRawItemBase(time, price) {
             return {
                 _internal_time: time,
                 _internal_price: price,
                 _internal_x: NaN,
                 _internal_y: NaN,
             };
-        };
-        LinePaneViewBase.prototype._internal__updateOptions = function () { };
-        LinePaneViewBase.prototype._internal__fillRawPoints = function () {
-            var _this = this;
-            var colorer = this._internal__series._internal_barColorer();
-            this._internal__items = this._internal__series._internal_bars()._internal_rows().map(function (row) {
-                var value = row._internal_value[3 /* Close */];
-                return _this._internal__createRawItem(row._internal_index, value, colorer);
+        }
+        _internal__fillRawPoints() {
+            const colorer = this._internal__series._internal_barColorer();
+            this._internal__items = this._internal__series._internal_bars()._internal_rows().map((row) => {
+                const value = row._internal_value[3 /* PlotRowValueIndex.Close */];
+                return this._internal__createRawItem(row._internal_index, value, colorer);
             });
-        };
-        return LinePaneViewBase;
-    }(SeriesPaneViewBase));
-
-    var SeriesAreaPaneView = /** @class */ (function (_super) {
-        __extends(SeriesAreaPaneView, _super);
-        function SeriesAreaPaneView(series, model) {
-            var _this = _super.call(this, series, model) || this;
-            _this._private__renderer = new CompositeRenderer();
-            _this._private__areaRenderer = new PaneRendererArea();
-            _this._private__lineRenderer = new PaneRendererLine();
-            _this._private__renderer._internal_setRenderers([_this._private__areaRenderer, _this._private__lineRenderer]);
-            return _this;
-        }
-        SeriesAreaPaneView.prototype._internal_renderer = function (height, width) {
-            if (!this._internal__series._internal_visible()) {
-                return null;
-            }
-            var areaStyleProperties = this._internal__series._internal_options();
-            this._internal__makeValid();
+        }
+    }
+
+    class SeriesAreaPaneView extends LinePaneViewBase {
+        constructor(series, model) {
+            super(series, model);
+            this._internal__renderer = new CompositeRenderer();
+            this._private__areaRenderer = new PaneRendererArea();
+            this._private__lineRenderer = new PaneRendererLine();
+            this._internal__renderer._internal_setRenderers([this._private__areaRenderer, this._private__lineRenderer]);
+        }
+        _internal__createRawItem(time, price, colorer) {
+            return Object.assign(Object.assign({}, this._internal__createRawItemBase(time, price)), colorer._internal_barStyle(time));
+        }
+        _internal__prepareRendererData(width, height) {
+            const areaStyleProperties = this._internal__series._internal_options();
+            const baseLevelCoordinate = (areaStyleProperties.invertFilledArea ? 0 : height);
             this._private__areaRenderer._internal_setData({
                 _internal_lineType: areaStyleProperties.lineType,
                 _internal_items: this._internal__items,
                 _internal_lineStyle: areaStyleProperties.lineStyle,
                 _internal_lineWidth: areaStyleProperties.lineWidth,
-                _internal_topColor: areaStyleProperties.topColor,
-                _internal_bottomColor: areaStyleProperties.bottomColor,
-                _internal_baseLevelCoordinate: height,
+                _internal_baseLevelCoordinate: baseLevelCoordinate,
                 _internal_bottom: height,
                 _internal_visibleRange: this._internal__itemsVisibleRange,
                 _internal_barWidth: this._internal__model._internal_timeScale()._internal_barSpacing(),
@@ -2081,50 +2171,44 @@
             this._private__lineRenderer._internal_setData({
                 _internal_lineType: areaStyleProperties.lineType,
                 _internal_items: this._internal__items,
-                _internal_lineColor: areaStyleProperties.lineColor,
                 _internal_lineStyle: areaStyleProperties.lineStyle,
                 _internal_lineWidth: areaStyleProperties.lineWidth,
                 _internal_visibleRange: this._internal__itemsVisibleRange,
                 _internal_barWidth: this._internal__model._internal_timeScale()._internal_barSpacing(),
             });
-            return this._private__renderer;
-        };
-        SeriesAreaPaneView.prototype._internal__createRawItem = function (time, price) {
-            return this._internal__createRawItemBase(time, price);
-        };
-        return SeriesAreaPaneView;
-    }(LinePaneViewBase));
+        }
+    }
 
     function optimalBarWidth(barSpacing, pixelRatio) {
         return Math.floor(barSpacing * 0.3 * pixelRatio);
     }
     function optimalCandlestickWidth(barSpacing, pixelRatio) {
-        var barSpacingSpecialCaseFrom = 2.5;
-        var barSpacingSpecialCaseTo = 4;
-        var barSpacingSpecialCaseCoeff = 3;
+        const barSpacingSpecialCaseFrom = 2.5;
+        const barSpacingSpecialCaseTo = 4;
+        const barSpacingSpecialCaseCoeff = 3;
         if (barSpacing >= barSpacingSpecialCaseFrom && barSpacing <= barSpacingSpecialCaseTo) {
             return Math.floor(barSpacingSpecialCaseCoeff * pixelRatio);
         }
         // coeff should be 1 on small barspacing and go to 0.8 while groing bar spacing
-        var barSpacingReducingCoeff = 0.2;
-        var coeff = 1 - barSpacingReducingCoeff * Math.atan(Math.max(barSpacingSpecialCaseTo, barSpacing) - barSpacingSpecialCaseTo) / (Math.PI * 0.5);
-        var res = Math.floor(barSpacing * coeff * pixelRatio);
-        var scaledBarSpacing = Math.floor(barSpacing * pixelRatio);
-        var optimal = Math.min(res, scaledBarSpacing);
+        const barSpacingReducingCoeff = 0.2;
+        const coeff = 1 - barSpacingReducingCoeff * Math.atan(Math.max(barSpacingSpecialCaseTo, barSpacing) - barSpacingSpecialCaseTo) / (Math.PI * 0.5);
+        const res = Math.floor(barSpacing * coeff * pixelRatio);
+        const scaledBarSpacing = Math.floor(barSpacing * pixelRatio);
+        const optimal = Math.min(res, scaledBarSpacing);
         return Math.max(Math.floor(pixelRatio), optimal);
     }
 
-    var PaneRendererBars = /** @class */ (function () {
-        function PaneRendererBars() {
+    class PaneRendererBars {
+        constructor() {
             this._private__data = null;
             this._private__barWidth = 0;
             this._private__barLineWidth = 0;
         }
-        PaneRendererBars.prototype._internal_setData = function (data) {
+        _internal_setData(data) {
             this._private__data = data;
-        };
+        }
         // eslint-disable-next-line complexity
-        PaneRendererBars.prototype._internal_draw = function (ctx, pixelRatio, isHovered, hitTestData) {
+        _internal_draw(ctx, pixelRatio, isHovered, hitTestData) {
             if (this._private__data === null || this._private__data._internal_bars.length === 0 || this._private__data._internal_visibleRange === null) {
                 return;
             }
@@ -2134,47 +2218,47 @@
             // if this value is even, we have to make bars' width even
             // in order of keeping crosshair-over-bar drawing symmetric
             if (this._private__barWidth >= 2) {
-                var lineWidth = Math.max(1, Math.floor(pixelRatio));
+                const lineWidth = Math.max(1, Math.floor(pixelRatio));
                 if ((lineWidth % 2) !== (this._private__barWidth % 2)) {
                     this._private__barWidth--;
                 }
             }
             // if scale is compressed, bar could become less than 1 CSS pixel
             this._private__barLineWidth = this._private__data._internal_thinBars ? Math.min(this._private__barWidth, Math.floor(pixelRatio)) : this._private__barWidth;
-            var prevColor = null;
-            var drawOpenClose = this._private__barLineWidth <= this._private__barWidth && this._private__data._internal_barSpacing >= Math.floor(1.5 * pixelRatio);
-            for (var i = this._private__data._internal_visibleRange.from; i < this._private__data._internal_visibleRange.to; ++i) {
-                var bar = this._private__data._internal_bars[i];
-                if (prevColor !== bar._internal_color) {
-                    ctx.fillStyle = bar._internal_color;
-                    prevColor = bar._internal_color;
-                }
-                var bodyWidthHalf = Math.floor(this._private__barLineWidth * 0.5);
-                var bodyCenter = Math.round(bar._internal_x * pixelRatio);
-                var bodyLeft = bodyCenter - bodyWidthHalf;
-                var bodyWidth = this._private__barLineWidth;
-                var bodyRight = bodyLeft + bodyWidth - 1;
-                var high = Math.min(bar._internal_highY, bar._internal_lowY);
-                var low = Math.max(bar._internal_highY, bar._internal_lowY);
-                var bodyTop = Math.round(high * pixelRatio) - bodyWidthHalf;
-                var bodyBottom = Math.round(low * pixelRatio) + bodyWidthHalf;
-                var bodyHeight = Math.max((bodyBottom - bodyTop), this._private__barLineWidth);
+            let prevColor = null;
+            const drawOpenClose = this._private__barLineWidth <= this._private__barWidth && this._private__data._internal_barSpacing >= Math.floor(1.5 * pixelRatio);
+            for (let i = this._private__data._internal_visibleRange.from; i < this._private__data._internal_visibleRange.to; ++i) {
+                const bar = this._private__data._internal_bars[i];
+                if (prevColor !== bar._internal_barColor) {
+                    ctx.fillStyle = bar._internal_barColor;
+                    prevColor = bar._internal_barColor;
+                }
+                const bodyWidthHalf = Math.floor(this._private__barLineWidth * 0.5);
+                const bodyCenter = Math.round(bar._internal_x * pixelRatio);
+                const bodyLeft = bodyCenter - bodyWidthHalf;
+                const bodyWidth = this._private__barLineWidth;
+                const bodyRight = bodyLeft + bodyWidth - 1;
+                const high = Math.min(bar._internal_highY, bar._internal_lowY);
+                const low = Math.max(bar._internal_highY, bar._internal_lowY);
+                const bodyTop = Math.round(high * pixelRatio) - bodyWidthHalf;
+                const bodyBottom = Math.round(low * pixelRatio) + bodyWidthHalf;
+                const bodyHeight = Math.max((bodyBottom - bodyTop), this._private__barLineWidth);
                 ctx.fillRect(bodyLeft, bodyTop, bodyWidth, bodyHeight);
-                var sideWidth = Math.ceil(this._private__barWidth * 1.5);
+                const sideWidth = Math.ceil(this._private__barWidth * 1.5);
                 if (drawOpenClose) {
                     if (this._private__data._internal_openVisible) {
-                        var openLeft = bodyCenter - sideWidth;
-                        var openTop = Math.max(bodyTop, Math.round(bar._internal_openY * pixelRatio) - bodyWidthHalf);
-                        var openBottom = openTop + bodyWidth - 1;
+                        const openLeft = bodyCenter - sideWidth;
+                        let openTop = Math.max(bodyTop, Math.round(bar._internal_openY * pixelRatio) - bodyWidthHalf);
+                        let openBottom = openTop + bodyWidth - 1;
                         if (openBottom > bodyTop + bodyHeight - 1) {
                             openBottom = bodyTop + bodyHeight - 1;
                             openTop = openBottom - bodyWidth + 1;
                         }
                         ctx.fillRect(openLeft, openTop, bodyLeft - openLeft, openBottom - openTop + 1);
                     }
-                    var closeRight = bodyCenter + sideWidth;
-                    var closeTop = Math.max(bodyTop, Math.round(bar._internal_closeY * pixelRatio) - bodyWidthHalf);
-                    var closeBottom = closeTop + bodyWidth - 1;
+                    const closeRight = bodyCenter + sideWidth;
+                    let closeTop = Math.max(bodyTop, Math.round(bar._internal_closeY * pixelRatio) - bodyWidthHalf);
+                    let closeBottom = closeTop + bodyWidth - 1;
                     if (closeBottom > bodyTop + bodyHeight - 1) {
                         closeBottom = bodyTop + bodyHeight - 1;
                         closeTop = closeBottom - bodyWidth + 1;
@@ -2182,79 +2266,60 @@
                     ctx.fillRect(bodyRight + 1, closeTop, closeRight - bodyRight, closeBottom - closeTop + 1);
                 }
             }
-        };
-        PaneRendererBars.prototype._private__calcBarWidth = function (pixelRatio) {
-            var limit = Math.floor(pixelRatio);
+        }
+        _private__calcBarWidth(pixelRatio) {
+            const limit = Math.floor(pixelRatio);
             return Math.max(limit, Math.floor(optimalBarWidth(ensureNotNull(this._private__data)._internal_barSpacing, pixelRatio)));
-        };
-        return PaneRendererBars;
-    }());
+        }
+    }
 
-    var BarsPaneViewBase = /** @class */ (function (_super) {
-        __extends(BarsPaneViewBase, _super);
-        function BarsPaneViewBase(series, model) {
-            return _super.call(this, series, model, false) || this;
+    class BarsPaneViewBase extends SeriesPaneViewBase {
+        constructor(series, model) {
+            super(series, model, false);
         }
-        BarsPaneViewBase.prototype._internal__convertToCoordinates = function (priceScale, timeScale, firstValue) {
+        _internal__convertToCoordinates(priceScale, timeScale, firstValue) {
             timeScale._internal_indexesToCoordinates(this._internal__items, undefinedIfNull(this._internal__itemsVisibleRange));
             priceScale._internal_barPricesToCoordinates(this._internal__items, firstValue, undefinedIfNull(this._internal__itemsVisibleRange));
-        };
-        BarsPaneViewBase.prototype._internal__createDefaultItem = function (time, bar, colorer) {
+        }
+        _internal__createDefaultItem(time, bar, colorer) {
             return {
                 _internal_time: time,
-                open: bar._internal_value[0 /* Open */],
-                high: bar._internal_value[1 /* High */],
-                low: bar._internal_value[2 /* Low */],
-                close: bar._internal_value[3 /* Close */],
+                _internal_open: bar._internal_value[0 /* PlotRowValueIndex.Open */],
+                _internal_high: bar._internal_value[1 /* PlotRowValueIndex.High */],
+                _internal_low: bar._internal_value[2 /* PlotRowValueIndex.Low */],
+                _internal_close: bar._internal_value[3 /* PlotRowValueIndex.Close */],
                 _internal_x: NaN,
                 _internal_openY: NaN,
                 _internal_highY: NaN,
                 _internal_lowY: NaN,
                 _internal_closeY: NaN,
             };
-        };
-        BarsPaneViewBase.prototype._internal__fillRawPoints = function () {
-            var _this = this;
-            var colorer = this._internal__series._internal_barColorer();
-            this._internal__items = this._internal__series._internal_bars()._internal_rows().map(function (row) { return _this._internal__createRawItem(row._internal_index, row, colorer); });
-        };
-        return BarsPaneViewBase;
-    }(SeriesPaneViewBase));
+        }
+        _internal__fillRawPoints() {
+            const colorer = this._internal__series._internal_barColorer();
+            this._internal__items = this._internal__series._internal_bars()._internal_rows().map((row) => this._internal__createRawItem(row._internal_index, row, colorer));
+        }
+    }
 
-    var SeriesBarsPaneView = /** @class */ (function (_super) {
-        __extends(SeriesBarsPaneView, _super);
-        function SeriesBarsPaneView() {
-            var _this = _super !== null && _super.apply(this, arguments) || this;
-            _this._private__renderer = new PaneRendererBars();
-            return _this;
+    class SeriesBarsPaneView extends BarsPaneViewBase {
+        constructor() {
+            super(...arguments);
+            this._internal__renderer = new PaneRendererBars();
         }
-        SeriesBarsPaneView.prototype._internal_renderer = function (height, width) {
-            if (!this._internal__series._internal_visible()) {
-                return null;
-            }
-            var barStyleProps = this._internal__series._internal_options();
-            this._internal__makeValid();
-            var data = {
+        _internal__createRawItem(time, bar, colorer) {
+            return Object.assign(Object.assign({}, this._internal__createDefaultItem(time, bar, colorer)), colorer._internal_barStyle(time));
+        }
+        _internal__prepareRendererData() {
+            const barStyleProps = this._internal__series._internal_options();
+            this._internal__renderer._internal_setData({
                 _internal_bars: this._internal__items,
                 _internal_barSpacing: this._internal__model._internal_timeScale()._internal_barSpacing(),
                 _internal_openVisible: barStyleProps.openVisible,
                 _internal_thinBars: barStyleProps.thinBars,
                 _internal_visibleRange: this._internal__itemsVisibleRange,
-            };
-            this._private__renderer._internal_setData(data);
-            return this._private__renderer;
-        };
-        SeriesBarsPaneView.prototype._internal__updateOptions = function () {
-            var _this = this;
-            this._internal__items.forEach(function (item) {
-                item._internal_color = _this._internal__series._internal_barColorer()._internal_barStyle(item._internal_time)._internal_barColor;
             });
-        };
-        SeriesBarsPaneView.prototype._internal__createRawItem = function (time, bar, colorer) {
-            return __assign(__assign({}, this._internal__createDefaultItem(time, bar, colorer)), { _internal_color: colorer._internal_barStyle(time)._internal_barColor });
-        };
-        return SeriesBarsPaneView;
-    }(BarsPaneViewBase));
+        }
+    }
 
     function clamp(value, minVal, maxVal) {
         return Math.min(Math.max(value, minVal), maxVal);
@@ -2263,7 +2328,7 @@
         if (value < 0) {
             return false;
         }
-        for (var current = value; current > 1; current /= 10) {
+        for (let current = value; current > 1; current /= 10) {
             if ((current % 10) !== 0) {
                 return false;
             }
@@ -2286,8 +2351,8 @@
         if (arr.length < 1) {
             throw Error('array is empty');
         }
-        var minVal = arr[0];
-        for (var i = 1; i < arr.length; ++i) {
+        let minVal = arr[0];
+        for (let i = 1; i < arr.length; ++i) {
             if (arr[i] < minVal) {
                 minVal = arr[i];
             }
@@ -2295,82 +2360,110 @@
         return minVal;
     }
     function ceiledEven(x) {
-        var ceiled = Math.ceil(x);
+        const ceiled = Math.ceil(x);
         return (ceiled % 2 !== 0) ? ceiled - 1 : ceiled;
     }
     function ceiledOdd(x) {
-        var ceiled = Math.ceil(x);
+        const ceiled = Math.ceil(x);
         return (ceiled % 2 === 0) ? ceiled - 1 : ceiled;
     }
 
-    var PaneRendererBaselineArea = /** @class */ (function (_super) {
-        __extends(PaneRendererBaselineArea, _super);
-        function PaneRendererBaselineArea() {
-            return _super !== null && _super.apply(this, arguments) || this;
+    class PaneRendererBaselineArea extends PaneRendererAreaBase {
+        constructor() {
+            super(...arguments);
+            this._private__fillCache = null;
         }
-        PaneRendererBaselineArea.prototype._internal__fillStyle = function (ctx) {
+        _internal__fillStyle(ctx, item) {
             // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
-            var data = this._internal__data;
-            var gradient = ctx.createLinearGradient(0, 0, 0, data._internal_bottom);
-            var baselinePercent = clamp(data._internal_baseLevelCoordinate / data._internal_bottom, 0, 1);
-            gradient.addColorStop(0, data._internal_topFillColor1);
-            gradient.addColorStop(baselinePercent, data._internal_topFillColor2);
-            gradient.addColorStop(baselinePercent, data._internal_bottomFillColor1);
-            gradient.addColorStop(1, data._internal_bottomFillColor2);
-            return gradient;
-        };
-        return PaneRendererBaselineArea;
-    }(PaneRendererAreaBase));
-    var PaneRendererBaselineLine = /** @class */ (function (_super) {
-        __extends(PaneRendererBaselineLine, _super);
-        function PaneRendererBaselineLine() {
-            return _super !== null && _super.apply(this, arguments) || this;
-        }
-        PaneRendererBaselineLine.prototype._internal__strokeStyle = function (ctx) {
+            const data = this._internal__data;
+            const { _internal_topFillColor1: topFillColor1, _internal_topFillColor2: topFillColor2, _internal_bottomFillColor1: bottomFillColor1, _internal_bottomFillColor2: bottomFillColor2 } = item;
+            const { _internal_baseLevelCoordinate: baseLevelCoordinate, _internal_bottom: bottom } = data;
+            if (this._private__fillCache !== null &&
+                this._private__fillCache.topFillColor1 === topFillColor1 &&
+                this._private__fillCache.topFillColor2 === topFillColor2 &&
+                this._private__fillCache.bottomFillColor1 === bottomFillColor1 &&
+                this._private__fillCache.bottomFillColor2 === bottomFillColor2 &&
+                this._private__fillCache.baseLevelCoordinate === baseLevelCoordinate &&
+                this._private__fillCache.bottom === bottom) {
+                return this._private__fillCache.fillStyle;
+            }
+            const fillStyle = ctx.createLinearGradient(0, 0, 0, bottom);
+            const baselinePercent = clamp(baseLevelCoordinate / bottom, 0, 1);
+            fillStyle.addColorStop(0, topFillColor1);
+            fillStyle.addColorStop(baselinePercent, topFillColor2);
+            fillStyle.addColorStop(baselinePercent, bottomFillColor1);
+            fillStyle.addColorStop(1, bottomFillColor2);
+            this._private__fillCache = {
+                topFillColor1,
+                topFillColor2,
+                bottomFillColor1,
+                bottomFillColor2,
+                fillStyle,
+                baseLevelCoordinate,
+                bottom,
+            };
+            return fillStyle;
+        }
+    }
+
+    class PaneRendererBaselineLine extends PaneRendererLineBase {
+        constructor() {
+            super(...arguments);
+            this._private__strokeCache = null;
+        }
+        _internal__strokeStyle(ctx, item) {
             // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
-            var data = this._internal__data;
-            var gradient = ctx.createLinearGradient(0, 0, 0, data._internal_bottom);
-            var baselinePercent = clamp(data._internal_baseLevelCoordinate / data._internal_bottom, 0, 1);
-            gradient.addColorStop(0, data._internal_topColor);
-            gradient.addColorStop(baselinePercent, data._internal_topColor);
-            gradient.addColorStop(baselinePercent, data._internal_bottomColor);
-            gradient.addColorStop(1, data._internal_bottomColor);
-            return gradient;
-        };
-        return PaneRendererBaselineLine;
-    }(PaneRendererLineBase));
-
-    var SeriesBaselinePaneView = /** @class */ (function (_super) {
-        __extends(SeriesBaselinePaneView, _super);
-        function SeriesBaselinePaneView(series, model) {
-            var _this = _super.call(this, series, model) || this;
-            _this._private__baselineAreaRenderer = new PaneRendererBaselineArea();
-            _this._private__baselineLineRenderer = new PaneRendererBaselineLine();
-            _this._private__compositeRenderer = new CompositeRenderer();
-            _this._private__compositeRenderer._internal_setRenderers([_this._private__baselineAreaRenderer, _this._private__baselineLineRenderer]);
-            return _this;
-        }
-        SeriesBaselinePaneView.prototype._internal_renderer = function (height, width) {
-            if (!this._internal__series._internal_visible()) {
-                return null;
-            }
-            var firstValue = this._internal__series._internal_firstValue();
+            const data = this._internal__data;
+            const { _internal_topLineColor: topLineColor, _internal_bottomLineColor: bottomLineColor } = item;
+            const { _internal_baseLevelCoordinate: baseLevelCoordinate, _internal_bottom: bottom } = data;
+            if (this._private__strokeCache !== null &&
+                this._private__strokeCache.topLineColor === topLineColor &&
+                this._private__strokeCache.bottomLineColor === bottomLineColor &&
+                this._private__strokeCache.baseLevelCoordinate === baseLevelCoordinate &&
+                this._private__strokeCache.bottom === bottom) {
+                return this._private__strokeCache.strokeStyle;
+            }
+            const strokeStyle = ctx.createLinearGradient(0, 0, 0, bottom);
+            const baselinePercent = clamp(baseLevelCoordinate / bottom, 0, 1);
+            strokeStyle.addColorStop(0, topLineColor);
+            strokeStyle.addColorStop(baselinePercent, topLineColor);
+            strokeStyle.addColorStop(baselinePercent, bottomLineColor);
+            strokeStyle.addColorStop(1, bottomLineColor);
+            this._private__strokeCache = {
+                topLineColor,
+                bottomLineColor,
+                strokeStyle,
+                baseLevelCoordinate,
+                bottom,
+            };
+            return strokeStyle;
+        }
+    }
+
+    class SeriesBaselinePaneView extends LinePaneViewBase {
+        constructor(series, model) {
+            super(series, model);
+            this._internal__renderer = new CompositeRenderer();
+            this._private__baselineAreaRenderer = new PaneRendererBaselineArea();
+            this._private__baselineLineRenderer = new PaneRendererBaselineLine();
+            this._internal__renderer._internal_setRenderers([this._private__baselineAreaRenderer, this._private__baselineLineRenderer]);
+        }
+        _internal__createRawItem(time, price, colorer) {
+            return Object.assign(Object.assign({}, this._internal__createRawItemBase(time, price)), colorer._internal_barStyle(time));
+        }
+        _internal__prepareRendererData(width, height) {
+            const firstValue = this._internal__series._internal_firstValue();
             if (firstValue === null) {
-                return null;
+                return;
             }
-            var baselineProps = this._internal__series._internal_options();
-            this._internal__makeValid();
-            var baseLevelCoordinate = this._internal__series._internal_priceScale()._internal_priceToCoordinate(baselineProps.baseValue.price, firstValue._internal_value);
-            var barWidth = this._internal__model._internal_timeScale()._internal_barSpacing();
+            const baselineProps = this._internal__series._internal_options();
+            const baseLevelCoordinate = this._internal__series._internal_priceScale()._internal_priceToCoordinate(baselineProps.baseValue.price, firstValue._internal_value);
+            const barWidth = this._internal__model._internal_timeScale()._internal_barSpacing();
             this._private__baselineAreaRenderer._internal_setData({
                 _internal_items: this._internal__items,
-                _internal_topFillColor1: baselineProps.topFillColor1,
-                _internal_topFillColor2: baselineProps.topFillColor2,
-                _internal_bottomFillColor1: baselineProps.bottomFillColor1,
-                _internal_bottomFillColor2: baselineProps.bottomFillColor2,
                 _internal_lineWidth: baselineProps.lineWidth,
                 _internal_lineStyle: baselineProps.lineStyle,
-                _internal_lineType: 0 /* Simple */,
+                _internal_lineType: baselineProps.lineType,
                 _internal_baseLevelCoordinate: baseLevelCoordinate,
                 _internal_bottom: height,
                 _internal_visibleRange: this._internal__itemsVisibleRange,
@@ -2378,34 +2471,27 @@
             });
             this._private__baselineLineRenderer._internal_setData({
                 _internal_items: this._internal__items,
-                _internal_topColor: baselineProps.topLineColor,
-                _internal_bottomColor: baselineProps.bottomLineColor,
                 _internal_lineWidth: baselineProps.lineWidth,
                 _internal_lineStyle: baselineProps.lineStyle,
-                _internal_lineType: 0 /* Simple */,
+                _internal_lineType: baselineProps.lineType,
                 _internal_baseLevelCoordinate: baseLevelCoordinate,
                 _internal_bottom: height,
                 _internal_visibleRange: this._internal__itemsVisibleRange,
                 _internal_barWidth: barWidth,
             });
-            return this._private__compositeRenderer;
-        };
-        SeriesBaselinePaneView.prototype._internal__createRawItem = function (time, price) {
-            return this._internal__createRawItemBase(time, price);
-        };
-        return SeriesBaselinePaneView;
-    }(LinePaneViewBase));
+        }
+    }
 
-    var PaneRendererCandlesticks = /** @class */ (function () {
-        function PaneRendererCandlesticks() {
+    class PaneRendererCandlesticks {
+        constructor() {
             this._private__data = null;
             // scaled with pixelRatio
             this._private__barWidth = 0;
         }
-        PaneRendererCandlesticks.prototype._internal_setData = function (data) {
+        _internal_setData(data) {
             this._private__data = data;
-        };
-        PaneRendererCandlesticks.prototype._internal_draw = function (ctx, pixelRatio, isHovered, hitTestData) {
+        }
+        _internal_draw(ctx, pixelRatio, isHovered, hitTestData) {
             if (this._private__data === null || this._private__data._internal_bars.length === 0 || this._private__data._internal_visibleRange === null) {
                 return;
             }
@@ -2416,233 +2502,213 @@
             // if this value is even, we have to make candlesticks' width even
             // in order of keeping crosshair-over-candlesticks drawing symmetric
             if (this._private__barWidth >= 2) {
-                var wickWidth = Math.floor(pixelRatio);
+                const wickWidth = Math.floor(pixelRatio);
                 if ((wickWidth % 2) !== (this._private__barWidth % 2)) {
                     this._private__barWidth--;
                 }
             }
-            var bars = this._private__data._internal_bars;
+            const bars = this._private__data._internal_bars;
             if (this._private__data._internal_wickVisible) {
                 this._private__drawWicks(ctx, bars, this._private__data._internal_visibleRange, pixelRatio);
             }
             if (this._private__data._internal_borderVisible) {
                 this._private__drawBorder(ctx, bars, this._private__data._internal_visibleRange, this._private__data._internal_barSpacing, pixelRatio);
             }
-            var borderWidth = this._private__calculateBorderWidth(pixelRatio);
+            const borderWidth = this._private__calculateBorderWidth(pixelRatio);
             if (!this._private__data._internal_borderVisible || this._private__barWidth > borderWidth * 2) {
                 this._private__drawCandles(ctx, bars, this._private__data._internal_visibleRange, pixelRatio);
             }
-        };
-        PaneRendererCandlesticks.prototype._private__drawWicks = function (ctx, bars, visibleRange, pixelRatio) {
+        }
+        _private__drawWicks(ctx, bars, visibleRange, pixelRatio) {
             if (this._private__data === null) {
                 return;
             }
-            var prevWickColor = '';
-            var wickWidth = Math.min(Math.floor(pixelRatio), Math.floor(this._private__data._internal_barSpacing * pixelRatio));
+            let prevWickColor = '';
+            let wickWidth = Math.min(Math.floor(pixelRatio), Math.floor(this._private__data._internal_barSpacing * pixelRatio));
             wickWidth = Math.max(Math.floor(pixelRatio), Math.min(wickWidth, this._private__barWidth));
-            var wickOffset = Math.floor(wickWidth * 0.5);
-            var prevEdge = null;
-            for (var i = visibleRange.from; i < visibleRange.to; i++) {
-                var bar = bars[i];
-                if (bar._internal_wickColor !== prevWickColor) {
-                    ctx.fillStyle = bar._internal_wickColor;
-                    prevWickColor = bar._internal_wickColor;
-                }
-                var top_1 = Math.round(Math.min(bar._internal_openY, bar._internal_closeY) * pixelRatio);
-                var bottom = Math.round(Math.max(bar._internal_openY, bar._internal_closeY) * pixelRatio);
-                var high = Math.round(bar._internal_highY * pixelRatio);
-                var low = Math.round(bar._internal_lowY * pixelRatio);
-                var scaledX = Math.round(pixelRatio * bar._internal_x);
-                var left = scaledX - wickOffset;
-                var right = left + wickWidth - 1;
+            const wickOffset = Math.floor(wickWidth * 0.5);
+            let prevEdge = null;
+            for (let i = visibleRange.from; i < visibleRange.to; i++) {
+                const bar = bars[i];
+                if (bar._internal_barWickColor !== prevWickColor) {
+                    ctx.fillStyle = bar._internal_barWickColor;
+                    prevWickColor = bar._internal_barWickColor;
+                }
+                const top = Math.round(Math.min(bar._internal_openY, bar._internal_closeY) * pixelRatio);
+                const bottom = Math.round(Math.max(bar._internal_openY, bar._internal_closeY) * pixelRatio);
+                const high = Math.round(bar._internal_highY * pixelRatio);
+                const low = Math.round(bar._internal_lowY * pixelRatio);
+                const scaledX = Math.round(pixelRatio * bar._internal_x);
+                let left = scaledX - wickOffset;
+                const right = left + wickWidth - 1;
                 if (prevEdge !== null) {
                     left = Math.max(prevEdge + 1, left);
                     left = Math.min(left, right);
                 }
-                var width = right - left + 1;
-                ctx.fillRect(left, high, width, top_1 - high);
+                const width = right - left + 1;
+                ctx.fillRect(left, high, width, top - high);
                 ctx.fillRect(left, bottom + 1, width, low - bottom);
                 prevEdge = right;
             }
-        };
-        PaneRendererCandlesticks.prototype._private__calculateBorderWidth = function (pixelRatio) {
-            var borderWidth = Math.floor(1 /* BarBorderWidth */ * pixelRatio);
+        }
+        _private__calculateBorderWidth(pixelRatio) {
+            let borderWidth = Math.floor(1 /* Constants.BarBorderWidth */ * pixelRatio);
             if (this._private__barWidth <= 2 * borderWidth) {
                 borderWidth = Math.floor((this._private__barWidth - 1) * 0.5);
             }
-            var res = Math.max(Math.floor(pixelRatio), borderWidth);
+            const res = Math.max(Math.floor(pixelRatio), borderWidth);
             if (this._private__barWidth <= res * 2) {
                 // do not draw bodies, restore original value
-                return Math.max(Math.floor(pixelRatio), Math.floor(1 /* BarBorderWidth */ * pixelRatio));
+                return Math.max(Math.floor(pixelRatio), Math.floor(1 /* Constants.BarBorderWidth */ * pixelRatio));
             }
             return res;
-        };
-        PaneRendererCandlesticks.prototype._private__drawBorder = function (ctx, bars, visibleRange, barSpacing, pixelRatio) {
+        }
+        _private__drawBorder(ctx, bars, visibleRange, barSpacing, pixelRatio) {
             if (this._private__data === null) {
                 return;
             }
-            var prevBorderColor = '';
-            var borderWidth = this._private__calculateBorderWidth(pixelRatio);
-            var prevEdge = null;
-            for (var i = visibleRange.from; i < visibleRange.to; i++) {
-                var bar = bars[i];
-                if (bar._internal_borderColor !== prevBorderColor) {
-                    ctx.fillStyle = bar._internal_borderColor;
-                    prevBorderColor = bar._internal_borderColor;
+            let prevBorderColor = '';
+            const borderWidth = this._private__calculateBorderWidth(pixelRatio);
+            let prevEdge = null;
+            for (let i = visibleRange.from; i < visibleRange.to; i++) {
+                const bar = bars[i];
+                if (bar._internal_barBorderColor !== prevBorderColor) {
+                    ctx.fillStyle = bar._internal_barBorderColor;
+                    prevBorderColor = bar._internal_barBorderColor;
                 }
-                var left = Math.round(bar._internal_x * pixelRatio) - Math.floor(this._private__barWidth * 0.5);
+                let left = Math.round(bar._internal_x * pixelRatio) - Math.floor(this._private__barWidth * 0.5);
                 // this is important to calculate right before patching left
-                var right = left + this._private__barWidth - 1;
-                var top_2 = Math.round(Math.min(bar._internal_openY, bar._internal_closeY) * pixelRatio);
-                var bottom = Math.round(Math.max(bar._internal_openY, bar._internal_closeY) * pixelRatio);
+                const right = left + this._private__barWidth - 1;
+                const top = Math.round(Math.min(bar._internal_openY, bar._internal_closeY) * pixelRatio);
+                const bottom = Math.round(Math.max(bar._internal_openY, bar._internal_closeY) * pixelRatio);
                 if (prevEdge !== null) {
                     left = Math.max(prevEdge + 1, left);
                     left = Math.min(left, right);
                 }
                 if (this._private__data._internal_barSpacing * pixelRatio > 2 * borderWidth) {
-                    fillRectInnerBorder(ctx, left, top_2, right - left + 1, bottom - top_2 + 1, borderWidth);
+                    fillRectInnerBorder(ctx, left, top, right - left + 1, bottom - top + 1, borderWidth);
                 }
                 else {
-                    var width = right - left + 1;
-                    ctx.fillRect(left, top_2, width, bottom - top_2 + 1);
+                    const width = right - left + 1;
+                    ctx.fillRect(left, top, width, bottom - top + 1);
                 }
                 prevEdge = right;
             }
-        };
-        PaneRendererCandlesticks.prototype._private__drawCandles = function (ctx, bars, visibleRange, pixelRatio) {
+        }
+        _private__drawCandles(ctx, bars, visibleRange, pixelRatio) {
             if (this._private__data === null) {
                 return;
             }
-            var prevBarColor = '';
-            var borderWidth = this._private__calculateBorderWidth(pixelRatio);
-            for (var i = visibleRange.from; i < visibleRange.to; i++) {
-                var bar = bars[i];
-                var top_3 = Math.round(Math.min(bar._internal_openY, bar._internal_closeY) * pixelRatio);
-                var bottom = Math.round(Math.max(bar._internal_openY, bar._internal_closeY) * pixelRatio);
-                var left = Math.round(bar._internal_x * pixelRatio) - Math.floor(this._private__barWidth * 0.5);
-                var right = left + this._private__barWidth - 1;
-                if (bar._internal_color !== prevBarColor) {
-                    var barColor = bar._internal_color;
+            let prevBarColor = '';
+            const borderWidth = this._private__calculateBorderWidth(pixelRatio);
+            for (let i = visibleRange.from; i < visibleRange.to; i++) {
+                const bar = bars[i];
+                let top = Math.round(Math.min(bar._internal_openY, bar._internal_closeY) * pixelRatio);
+                let bottom = Math.round(Math.max(bar._internal_openY, bar._internal_closeY) * pixelRatio);
+                let left = Math.round(bar._internal_x * pixelRatio) - Math.floor(this._private__barWidth * 0.5);
+                let right = left + this._private__barWidth - 1;
+                if (bar._internal_barColor !== prevBarColor) {
+                    const barColor = bar._internal_barColor;
                     ctx.fillStyle = barColor;
                     prevBarColor = barColor;
                 }
                 if (this._private__data._internal_borderVisible) {
                     left += borderWidth;
-                    top_3 += borderWidth;
+                    top += borderWidth;
                     right -= borderWidth;
                     bottom -= borderWidth;
                 }
-                if (top_3 > bottom) {
+                if (top > bottom) {
                     continue;
                 }
-                ctx.fillRect(left, top_3, right - left + 1, bottom - top_3 + 1);
+                ctx.fillRect(left, top, right - left + 1, bottom - top + 1);
             }
-        };
-        return PaneRendererCandlesticks;
-    }());
+        }
+    }
 
-    var SeriesCandlesticksPaneView = /** @class */ (function (_super) {
-        __extends(SeriesCandlesticksPaneView, _super);
-        function SeriesCandlesticksPaneView() {
-            var _this = _super !== null && _super.apply(this, arguments) || this;
-            _this._private__renderer = new PaneRendererCandlesticks();
-            return _this;
+    class SeriesCandlesticksPaneView extends BarsPaneViewBase {
+        constructor() {
+            super(...arguments);
+            this._internal__renderer = new PaneRendererCandlesticks();
         }
-        SeriesCandlesticksPaneView.prototype._internal_renderer = function (height, width) {
-            if (!this._internal__series._internal_visible()) {
-                return null;
-            }
-            var candlestickStyleProps = this._internal__series._internal_options();
-            this._internal__makeValid();
-            var data = {
+        _internal__createRawItem(time, bar, colorer) {
+            return Object.assign(Object.assign({}, this._internal__createDefaultItem(time, bar, colorer)), colorer._internal_barStyle(time));
+        }
+        _internal__prepareRendererData() {
+            const candlestickStyleProps = this._internal__series._internal_options();
+            this._internal__renderer._internal_setData({
                 _internal_bars: this._internal__items,
                 _internal_barSpacing: this._internal__model._internal_timeScale()._internal_barSpacing(),
                 _internal_wickVisible: candlestickStyleProps.wickVisible,
                 _internal_borderVisible: candlestickStyleProps.borderVisible,
                 _internal_visibleRange: this._internal__itemsVisibleRange,
-            };
-            this._private__renderer._internal_setData(data);
-            return this._private__renderer;
-        };
-        SeriesCandlesticksPaneView.prototype._internal__updateOptions = function () {
-            var _this = this;
-            this._internal__items.forEach(function (item) {
-                var style = _this._internal__series._internal_barColorer()._internal_barStyle(item._internal_time);
-                item._internal_color = style._internal_barColor;
-                item._internal_wickColor = style._internal_barWickColor;
-                item._internal_borderColor = style._internal_barBorderColor;
             });
-        };
-        SeriesCandlesticksPaneView.prototype._internal__createRawItem = function (time, bar, colorer) {
-            var style = colorer._internal_barStyle(time);
-            return __assign(__assign({}, this._internal__createDefaultItem(time, bar, colorer)), { _internal_color: style._internal_barColor, _internal_wickColor: style._internal_barWickColor, _internal_borderColor: style._internal_barBorderColor });
-        };
-        return SeriesCandlesticksPaneView;
-    }(BarsPaneViewBase));
+        }
+    }
 
-    var showSpacingMinimalBarWidth = 1;
-    var alignToMinimalWidthLimit = 4;
-    var PaneRendererHistogram = /** @class */ (function () {
-        function PaneRendererHistogram() {
+    const showSpacingMinimalBarWidth = 1;
+    const alignToMinimalWidthLimit = 4;
+    class PaneRendererHistogram {
+        constructor() {
             this._private__data = null;
             this._private__precalculatedCache = [];
         }
-        PaneRendererHistogram.prototype._internal_setData = function (data) {
+        _internal_setData(data) {
             this._private__data = data;
             this._private__precalculatedCache = [];
-        };
-        PaneRendererHistogram.prototype._internal_draw = function (ctx, pixelRatio, isHovered, hitTestData) {
+        }
+        _internal_draw(ctx, pixelRatio, isHovered, hitTestData) {
             if (this._private__data === null || this._private__data._internal_items.length === 0 || this._private__data._internal_visibleRange === null) {
                 return;
             }
             if (!this._private__precalculatedCache.length) {
                 this._private__fillPrecalculatedCache(pixelRatio);
             }
-            var tickWidth = Math.max(1, Math.floor(pixelRatio));
-            var histogramBase = Math.round((this._private__data._internal_histogramBase) * pixelRatio);
-            var topHistogramBase = histogramBase - Math.floor(tickWidth / 2);
-            var bottomHistogramBase = topHistogramBase + tickWidth;
-            for (var i = this._private__data._internal_visibleRange.from; i < this._private__data._internal_visibleRange.to; i++) {
-                var item = this._private__data._internal_items[i];
-                var current = this._private__precalculatedCache[i - this._private__data._internal_visibleRange.from];
-                var y = Math.round(item._internal_y * pixelRatio);
-                ctx.fillStyle = item._internal_color;
-                var top_1 = void 0;
-                var bottom = void 0;
+            const tickWidth = Math.max(1, Math.floor(pixelRatio));
+            const histogramBase = Math.round((this._private__data._internal_histogramBase) * pixelRatio);
+            const topHistogramBase = histogramBase - Math.floor(tickWidth / 2);
+            const bottomHistogramBase = topHistogramBase + tickWidth;
+            for (let i = this._private__data._internal_visibleRange.from; i < this._private__data._internal_visibleRange.to; i++) {
+                const item = this._private__data._internal_items[i];
+                const current = this._private__precalculatedCache[i - this._private__data._internal_visibleRange.from];
+                const y = Math.round(item._internal_y * pixelRatio);
+                ctx.fillStyle = item._internal_barColor;
+                let top;
+                let bottom;
                 if (y <= topHistogramBase) {
-                    top_1 = y;
+                    top = y;
                     bottom = bottomHistogramBase;
                 }
                 else {
-                    top_1 = topHistogramBase;
+                    top = topHistogramBase;
                     bottom = y - Math.floor(tickWidth / 2) + tickWidth;
                 }
-                ctx.fillRect(current._internal_left, top_1, current._internal_right - current._internal_left + 1, bottom - top_1);
+                ctx.fillRect(current._internal_left, top, current._internal_right - current._internal_left + 1, bottom - top);
             }
-        };
+        }
         // eslint-disable-next-line complexity
-        PaneRendererHistogram.prototype._private__fillPrecalculatedCache = function (pixelRatio) {
+        _private__fillPrecalculatedCache(pixelRatio) {
             if (this._private__data === null || this._private__data._internal_items.length === 0 || this._private__data._internal_visibleRange === null) {
                 this._private__precalculatedCache = [];
                 return;
             }
-            var spacing = Math.ceil(this._private__data._internal_barSpacing * pixelRatio) <= showSpacingMinimalBarWidth ? 0 : Math.max(1, Math.floor(pixelRatio));
-            var columnWidth = Math.round(this._private__data._internal_barSpacing * pixelRatio) - spacing;
+            const spacing = Math.ceil(this._private__data._internal_barSpacing * pixelRatio) <= showSpacingMinimalBarWidth ? 0 : Math.max(1, Math.floor(pixelRatio));
+            const columnWidth = Math.round(this._private__data._internal_barSpacing * pixelRatio) - spacing;
             this._private__precalculatedCache = new Array(this._private__data._internal_visibleRange.to - this._private__data._internal_visibleRange.from);
-            for (var i = this._private__data._internal_visibleRange.from; i < this._private__data._internal_visibleRange.to; i++) {
-                var item = this._private__data._internal_items[i];
+            for (let i = this._private__data._internal_visibleRange.from; i < this._private__data._internal_visibleRange.to; i++) {
+                const item = this._private__data._internal_items[i];
                 // force cast to avoid ensureDefined call
-                var x = Math.round(item._internal_x * pixelRatio);
-                var left = void 0;
-                var right = void 0;
+                const x = Math.round(item._internal_x * pixelRatio);
+                let left;
+                let right;
                 if (columnWidth % 2) {
-                    var halfWidth = (columnWidth - 1) / 2;
+                    const halfWidth = (columnWidth - 1) / 2;
                     left = x - halfWidth;
                     right = x + halfWidth;
                 }
                 else {
                     // shift pixel to left
-                    var halfWidth = columnWidth / 2;
+                    const halfWidth = columnWidth / 2;
                     left = x - halfWidth;
                     right = x + halfWidth - 1;
                 }
@@ -2655,9 +2721,9 @@
                 };
             }
             // correct positions
-            for (var i = this._private__data._internal_visibleRange.from + 1; i < this._private__data._internal_visibleRange.to; i++) {
-                var current = this._private__precalculatedCache[i - this._private__data._internal_visibleRange.from];
-                var prev = this._private__precalculatedCache[i - this._private__data._internal_visibleRange.from - 1];
+            for (let i = this._private__data._internal_visibleRange.from + 1; i < this._private__data._internal_visibleRange.to; i++) {
+                const current = this._private__precalculatedCache[i - this._private__data._internal_visibleRange.from];
+                const prev = this._private__precalculatedCache[i - this._private__data._internal_visibleRange.from - 1];
                 if (current._internal_time !== prev._internal_time + 1) {
                     continue;
                 }
@@ -2673,20 +2739,20 @@
                     }
                 }
             }
-            var minWidth = Math.ceil(this._private__data._internal_barSpacing * pixelRatio);
-            for (var i = this._private__data._internal_visibleRange.from; i < this._private__data._internal_visibleRange.to; i++) {
-                var current = this._private__precalculatedCache[i - this._private__data._internal_visibleRange.from];
+            let minWidth = Math.ceil(this._private__data._internal_barSpacing * pixelRatio);
+            for (let i = this._private__data._internal_visibleRange.from; i < this._private__data._internal_visibleRange.to; i++) {
+                const current = this._private__precalculatedCache[i - this._private__data._internal_visibleRange.from];
                 // this could happen if barspacing < 1
                 if (current._internal_right < current._internal_left) {
                     current._internal_right = current._internal_left;
                 }
-                var width = current._internal_right - current._internal_left + 1;
+                const width = current._internal_right - current._internal_left + 1;
                 minWidth = Math.min(width, minWidth);
             }
             if (spacing > 0 && minWidth < alignToMinimalWidthLimit) {
-                for (var i = this._private__data._internal_visibleRange.from; i < this._private__data._internal_visibleRange.to; i++) {
-                    var current = this._private__precalculatedCache[i - this._private__data._internal_visibleRange.from];
-                    var width = current._internal_right - current._internal_left + 1;
+                for (let i = this._private__data._internal_visibleRange.from; i < this._private__data._internal_visibleRange.to; i++) {
+                    const current = this._private__precalculatedCache[i - this._private__data._internal_visibleRange.from];
+                    const width = current._internal_right - current._internal_left + 1;
                     if (width > minWidth) {
                         if (current._internal_roundedCenter > current._internal_center) {
                             current._internal_right -= 1;
@@ -2697,210 +2763,127 @@
                     }
                 }
             }
-        };
-        return PaneRendererHistogram;
-    }());
-
-    function createEmptyHistogramData(barSpacing) {
-        return {
-            _internal_items: [],
-            _internal_barSpacing: barSpacing,
-            _internal_histogramBase: NaN,
-            _internal_visibleRange: null,
-        };
-    }
-    function createRawItem(time, price, color) {
-        return {
-            _internal_time: time,
-            _internal_price: price,
-            _internal_x: NaN,
-            _internal_y: NaN,
-            _internal_color: color,
-        };
+        }
     }
-    var SeriesHistogramPaneView = /** @class */ (function (_super) {
-        __extends(SeriesHistogramPaneView, _super);
-        function SeriesHistogramPaneView(series, model) {
-            var _this = _super.call(this, series, model, false) || this;
-            _this._private__compositeRenderer = new CompositeRenderer();
-            _this._private__histogramData = createEmptyHistogramData(0);
-            _this._private__renderer = new PaneRendererHistogram();
-            return _this;
+
+    class SeriesHistogramPaneView extends LinePaneViewBase {
+        constructor() {
+            super(...arguments);
+            this._internal__renderer = new PaneRendererHistogram();
         }
-        SeriesHistogramPaneView.prototype._internal_renderer = function (height, width) {
-            if (!this._internal__series._internal_visible()) {
-                return null;
-            }
-            this._internal__makeValid();
-            return this._private__compositeRenderer;
-        };
-        SeriesHistogramPaneView.prototype._internal__fillRawPoints = function () {
-            var barSpacing = this._internal__model._internal_timeScale()._internal_barSpacing();
-            this._private__histogramData = createEmptyHistogramData(barSpacing);
-            var targetIndex = 0;
-            var itemIndex = 0;
-            var defaultColor = this._internal__series._internal_options().color;
-            for (var _i = 0, _a = this._internal__series._internal_bars()._internal_rows(); _i < _a.length; _i++) {
-                var row = _a[_i];
-                var value = row._internal_value[3 /* Close */];
-                var color = row._internal_color !== undefined ? row._internal_color : defaultColor;
-                var item = createRawItem(row._internal_index, value, color);
-                targetIndex++;
-                if (targetIndex < this._private__histogramData._internal_items.length) {
-                    this._private__histogramData._internal_items[targetIndex] = item;
-                }
-                else {
-                    this._private__histogramData._internal_items.push(item);
-                }
-                this._internal__items[itemIndex++] = { _internal_time: row._internal_index, _internal_x: 0 };
-            }
-            this._private__renderer._internal_setData(this._private__histogramData);
-            this._private__compositeRenderer._internal_setRenderers([this._private__renderer]);
-        };
-        SeriesHistogramPaneView.prototype._internal__updateOptions = function () { };
-        SeriesHistogramPaneView.prototype._internal__clearVisibleRange = function () {
-            _super.prototype._internal__clearVisibleRange.call(this);
-            this._private__histogramData._internal_visibleRange = null;
-        };
-        SeriesHistogramPaneView.prototype._internal__convertToCoordinates = function (priceScale, timeScale, firstValue) {
-            if (this._internal__itemsVisibleRange === null) {
-                return;
-            }
-            var barSpacing = timeScale._internal_barSpacing();
-            var visibleBars = ensureNotNull(timeScale._internal_visibleStrictRange());
-            var histogramBase = priceScale._internal_priceToCoordinate(this._internal__series._internal_options().base, firstValue);
-            timeScale._internal_indexesToCoordinates(this._private__histogramData._internal_items);
-            priceScale._internal_pointsArrayToCoordinates(this._private__histogramData._internal_items, firstValue);
-            this._private__histogramData._internal_histogramBase = histogramBase;
-            this._private__histogramData._internal_visibleRange = visibleTimedValues(this._private__histogramData._internal_items, visibleBars, false);
-            this._private__histogramData._internal_barSpacing = barSpacing;
-            // need this to update cache
-            this._private__renderer._internal_setData(this._private__histogramData);
-        };
-        return SeriesHistogramPaneView;
-    }(SeriesPaneViewBase));
+        _internal__createRawItem(time, price, colorer) {
+            return Object.assign(Object.assign({}, this._internal__createRawItemBase(time, price)), colorer._internal_barStyle(time));
+        }
+        _internal__prepareRendererData() {
+            const data = {
+                _internal_items: this._internal__items,
+                _internal_barSpacing: this._internal__model._internal_timeScale()._internal_barSpacing(),
+                _internal_visibleRange: this._internal__itemsVisibleRange,
+                _internal_histogramBase: this._internal__series._internal_priceScale()._internal_priceToCoordinate(this._internal__series._internal_options().base, ensureNotNull(this._internal__series._internal_firstValue())._internal_value),
+            };
+            this._internal__renderer._internal_setData(data);
+        }
+    }
 
-    var SeriesLinePaneView = /** @class */ (function (_super) {
-        __extends(SeriesLinePaneView, _super);
-        // eslint-disable-next-line no-useless-constructor
-        function SeriesLinePaneView(series, model) {
-            var _this = _super.call(this, series, model) || this;
-            _this._private__lineRenderer = new PaneRendererLine();
-            return _this;
+    class SeriesLinePaneView extends LinePaneViewBase {
+        constructor() {
+            super(...arguments);
+            this._internal__renderer = new PaneRendererLine();
         }
-        SeriesLinePaneView.prototype._internal_renderer = function (height, width) {
-            if (!this._internal__series._internal_visible()) {
-                return null;
-            }
-            var lineStyleProps = this._internal__series._internal_options();
-            this._internal__makeValid();
-            var data = {
+        _internal__createRawItem(time, price, colorer) {
+            return Object.assign(Object.assign({}, this._internal__createRawItemBase(time, price)), colorer._internal_barStyle(time));
+        }
+        _internal__prepareRendererData() {
+            const lineStyleProps = this._internal__series._internal_options();
+            const data = {
                 _internal_items: this._internal__items,
-                _internal_lineColor: lineStyleProps.color,
                 _internal_lineStyle: lineStyleProps.lineStyle,
                 _internal_lineType: lineStyleProps.lineType,
                 _internal_lineWidth: lineStyleProps.lineWidth,
                 _internal_visibleRange: this._internal__itemsVisibleRange,
                 _internal_barWidth: this._internal__model._internal_timeScale()._internal_barSpacing(),
             };
-            this._private__lineRenderer._internal_setData(data);
-            return this._private__lineRenderer;
-        };
-        SeriesLinePaneView.prototype._internal__updateOptions = function () {
-            var _this = this;
-            this._internal__items.forEach(function (item) {
-                item._internal_color = _this._internal__series._internal_barColorer()._internal_barStyle(item._internal_time)._internal_barColor;
-            });
-        };
-        SeriesLinePaneView.prototype._internal__createRawItem = function (time, price, colorer) {
-            var item = this._internal__createRawItemBase(time, price);
-            item._internal_color = colorer._internal_barStyle(time)._internal_barColor;
-            return item;
-        };
-        return SeriesLinePaneView;
-    }(LinePaneViewBase));
+            this._internal__renderer._internal_setData(data);
+        }
+    }
 
-    var defaultReplacementRe = /[2-9]/g;
-    var TextWidthCache = /** @class */ (function () {
-        function TextWidthCache(size) {
-            if (size === void 0) { size = 50; }
+    const defaultReplacementRe = /[2-9]/g;
+    class TextWidthCache {
+        constructor(size = 50) {
+            this._private__actualSize = 0;
+            this._private__usageTick = 1;
+            this._private__oldestTick = 1;
+            this._private__tick2Labels = {};
             this._private__cache = new Map();
-            /** Current index in the "cyclic buffer" */
-            this._private__keysIndex = 0;
-            // A trick to keep array PACKED_ELEMENTS
-            this._private__keys = Array.from(new Array(size));
+            this._private__maxSize = size;
         }
-        TextWidthCache.prototype._internal_reset = function () {
+        _internal_reset() {
+            this._private__actualSize = 0;
             this._private__cache.clear();
-            this._private__keys.fill(undefined);
-            // We don't care where exactly the _keysIndex points,
-            // so there's no point in resetting it
-        };
-        TextWidthCache.prototype._internal_measureText = function (ctx, text, optimizationReplacementRe) {
-            var re = optimizationReplacementRe || defaultReplacementRe;
-            var cacheString = String(text).replace(re, '0');
-            var width = this._private__cache.get(cacheString);
-            if (width === undefined) {
-                width = ctx.measureText(cacheString).width;
-                if (width === 0 && text.length !== 0) {
-                    // measureText can return 0 in FF depending on a canvas size, don't cache it
-                    return 0;
-                }
-                // A cyclic buffer is used to keep track of the cache keys and to delete
-                // the oldest one before a new one is inserted.
-                // ├──────┬──────┬──────┬──────┤
-                // │ foo  │ bar  │      │      │
-                // ├──────┴──────┴──────┴──────┤
-                //                 ↑ index
-                // Eventually, the index reach the end of an array and roll-over to 0.
-                // ├──────┬──────┬──────┬──────┤
-                // │ foo  │ bar  │ baz  │ quux │
-                // ├──────┴──────┴──────┴──────┤
-                //   ↑ index = 0
-                // After that the oldest value will be overwritten.
-                // ├──────┬──────┬──────┬──────┤
-                // │ WOOT │ bar  │ baz  │ quux │
-                // ├──────┴──────┴──────┴──────┤
-                //          ↑ index = 1
-                var oldestKey = this._private__keys[this._private__keysIndex];
-                if (oldestKey !== undefined) {
-                    this._private__cache.delete(oldestKey);
-                }
-                // Set a newest key in place of the just deleted one
-                this._private__keys[this._private__keysIndex] = cacheString;
-                // Advance the index so it always points the oldest value
-                this._private__keysIndex = (this._private__keysIndex + 1) % this._private__keys.length;
-                this._private__cache.set(cacheString, width);
-            }
-            return width;
-        };
-        return TextWidthCache;
-    }());
+            this._private__usageTick = 1;
+            this._private__oldestTick = 1;
+            this._private__tick2Labels = {};
+        }
+        _internal_measureText(ctx, text, optimizationReplacementRe) {
+            return this._private__getMetrics(ctx, text, optimizationReplacementRe).width;
+        }
+        _internal_yMidCorrection(ctx, text, optimizationReplacementRe) {
+            const metrics = this._private__getMetrics(ctx, text, optimizationReplacementRe);
+            // if actualBoundingBoxAscent/actualBoundingBoxDescent are not supported we use 0 as a fallback
+            return ((metrics.actualBoundingBoxAscent || 0) - (metrics.actualBoundingBoxDescent || 0)) / 2;
+        }
+        _private__getMetrics(ctx, text, optimizationReplacementRe) {
+            const re = optimizationReplacementRe || defaultReplacementRe;
+            const cacheString = String(text).replace(re, '0');
+            if (this._private__cache.has(cacheString)) {
+                return ensureDefined(this._private__cache.get(cacheString))._internal_metrics;
+            }
+            if (this._private__actualSize === this._private__maxSize) {
+                const oldestValue = this._private__tick2Labels[this._private__oldestTick];
+                delete this._private__tick2Labels[this._private__oldestTick];
+                this._private__cache.delete(oldestValue);
+                this._private__oldestTick++;
+                this._private__actualSize--;
+            }
+            ctx.save();
+            ctx.textBaseline = 'middle';
+            const metrics = ctx.measureText(cacheString);
+            ctx.restore();
+            if (metrics.width === 0 && !!text.length) {
+                // measureText can return 0 in FF depending on a canvas size, don't cache it
+                return metrics;
+            }
+            this._private__cache.set(cacheString, { _internal_metrics: metrics, _internal_tick: this._private__usageTick });
+            this._private__tick2Labels[this._private__usageTick] = cacheString;
+            this._private__actualSize++;
+            this._private__usageTick++;
+            return metrics;
+        }
+    }
 
-    var PanePriceAxisViewRenderer = /** @class */ (function () {
-        function PanePriceAxisViewRenderer(textWidthCache) {
+    class PanePriceAxisViewRenderer {
+        constructor(textWidthCache) {
             this._private__priceAxisViewRenderer = null;
             this._private__rendererOptions = null;
             this._private__align = 'right';
             this._private__width = 0;
             this._private__textWidthCache = textWidthCache;
         }
-        PanePriceAxisViewRenderer.prototype._internal_setParams = function (priceAxisViewRenderer, rendererOptions, width, align) {
+        _internal_setParams(priceAxisViewRenderer, rendererOptions, width, align) {
             this._private__priceAxisViewRenderer = priceAxisViewRenderer;
             this._private__rendererOptions = rendererOptions;
             this._private__width = width;
             this._private__align = align;
-        };
-        PanePriceAxisViewRenderer.prototype._internal_draw = function (ctx, pixelRatio) {
+        }
+        _internal_draw(ctx, pixelRatio) {
             if (this._private__rendererOptions === null || this._private__priceAxisViewRenderer === null) {
                 return;
             }
             this._private__priceAxisViewRenderer._internal_draw(ctx, this._private__rendererOptions, this._private__textWidthCache, this._private__width, this._private__align, pixelRatio);
-        };
-        return PanePriceAxisViewRenderer;
-    }());
-    var PanePriceAxisView = /** @class */ (function () {
-        function PanePriceAxisView(priceAxisView, dataSource, chartModel) {
+        }
+    }
+    class PanePriceAxisView {
+        constructor(priceAxisView, dataSource, chartModel) {
             this._private__priceAxisView = priceAxisView;
             this._private__textWidthCache = new TextWidthCache(50); // when should we clear cache?
             this._private__dataSource = dataSource;
@@ -2908,68 +2891,66 @@
             this._private__fontSize = -1;
             this._private__renderer = new PanePriceAxisViewRenderer(this._private__textWidthCache);
         }
-        PanePriceAxisView.prototype._internal_renderer = function (height, width) {
-            var pane = this._private__chartModel._internal_paneForSource(this._private__dataSource);
+        _internal_renderer(height, width) {
+            const pane = this._private__chartModel._internal_paneForSource(this._private__dataSource);
             if (pane === null) {
                 return null;
             }
             // this price scale will be used to find label placement only (left, right, none)
-            var priceScale = pane._internal_isOverlay(this._private__dataSource) ? pane._internal_defaultVisiblePriceScale() : this._private__dataSource._internal_priceScale();
+            const priceScale = pane._internal_isOverlay(this._private__dataSource) ? pane._internal_defaultVisiblePriceScale() : this._private__dataSource._internal_priceScale();
             if (priceScale === null) {
                 return null;
             }
-            var position = pane._internal_priceScalePosition(priceScale);
+            const position = pane._internal_priceScalePosition(priceScale);
             if (position === 'overlay') {
                 return null;
             }
-            var options = this._private__chartModel._internal_priceAxisRendererOptions();
+            const options = this._private__chartModel._internal_priceAxisRendererOptions();
             if (options._internal_fontSize !== this._private__fontSize) {
                 this._private__fontSize = options._internal_fontSize;
                 this._private__textWidthCache._internal_reset();
             }
             this._private__renderer._internal_setParams(this._private__priceAxisView._internal_paneRenderer(), options, width, position);
             return this._private__renderer;
-        };
-        return PanePriceAxisView;
-    }());
+        }
+    }
 
-    var HorizontalLineRenderer = /** @class */ (function () {
-        function HorizontalLineRenderer() {
+    class HorizontalLineRenderer {
+        constructor() {
             this._private__data = null;
         }
-        HorizontalLineRenderer.prototype._internal_setData = function (data) {
+        _internal_setData(data) {
             this._private__data = data;
-        };
-        HorizontalLineRenderer.prototype._internal_draw = function (ctx, pixelRatio, isHovered, hitTestData) {
+        }
+        _internal_draw(ctx, pixelRatio, isHovered, hitTestData) {
             if (this._private__data === null) {
                 return;
             }
             if (this._private__data._internal_visible === false) {
                 return;
             }
-            var y = Math.round(this._private__data._internal_y * pixelRatio);
+            const y = Math.round(this._private__data._internal_y * pixelRatio);
             if (y < 0 || y > Math.ceil(this._private__data._internal_height * pixelRatio)) {
                 return;
             }
-            var width = Math.ceil(this._private__data._internal_width * pixelRatio);
+            const width = Math.ceil(this._private__data._internal_width * pixelRatio);
             ctx.lineCap = 'butt';
             ctx.strokeStyle = this._private__data._internal_color;
             ctx.lineWidth = Math.floor(this._private__data._internal_lineWidth * pixelRatio);
             setLineStyle(ctx, this._private__data._internal_lineStyle);
             drawHorizontalLine(ctx, y, 0, width);
-        };
-        return HorizontalLineRenderer;
-    }());
+        }
+    }
 
-    var SeriesHorizontalLinePaneView = /** @class */ (function () {
-        function SeriesHorizontalLinePaneView(series) {
+    class SeriesHorizontalLinePaneView {
+        constructor(series) {
             this._internal__lineRendererData = {
                 _internal_width: 0,
                 _internal_height: 0,
                 _internal_y: 0,
                 _internal_color: 'rgba(0, 0, 0, 0)',
                 _internal_lineWidth: 1,
-                _internal_lineStyle: 0 /* Solid */,
+                _internal_lineStyle: 0 /* LineStyle.Solid */,
                 _internal_visible: false,
             };
             this._internal__lineRenderer = new HorizontalLineRenderer();
@@ -2978,10 +2959,10 @@
             this._internal__model = series._internal_model();
             this._internal__lineRenderer._internal_setData(this._internal__lineRendererData);
         }
-        SeriesHorizontalLinePaneView.prototype._internal_update = function () {
+        _internal_update() {
             this._private__invalidated = true;
-        };
-        SeriesHorizontalLinePaneView.prototype._internal_renderer = function (height, width) {
+        }
+        _internal_renderer(height, width) {
             if (!this._internal__series._internal_visible()) {
                 return null;
             }
@@ -2990,28 +2971,26 @@
                 this._private__invalidated = false;
             }
             return this._internal__lineRenderer;
-        };
-        return SeriesHorizontalLinePaneView;
-    }());
+        }
+    }
 
-    var SeriesHorizontalBaseLinePaneView = /** @class */ (function (_super) {
-        __extends(SeriesHorizontalBaseLinePaneView, _super);
+    class SeriesHorizontalBaseLinePaneView extends SeriesHorizontalLinePaneView {
         // eslint-disable-next-line no-useless-constructor
-        function SeriesHorizontalBaseLinePaneView(series) {
-            return _super.call(this, series) || this;
+        constructor(series) {
+            super(series);
         }
-        SeriesHorizontalBaseLinePaneView.prototype._internal__updateImpl = function (height, width) {
+        _internal__updateImpl(height, width) {
             this._internal__lineRendererData._internal_visible = false;
-            var priceScale = this._internal__series._internal_priceScale();
-            var mode = priceScale._internal_mode()._internal_mode;
-            if (mode !== 2 /* Percentage */ && mode !== 3 /* IndexedTo100 */) {
+            const priceScale = this._internal__series._internal_priceScale();
+            const mode = priceScale._internal_mode()._internal_mode;
+            if (mode !== 2 /* PriceScaleMode.Percentage */ && mode !== 3 /* PriceScaleMode.IndexedTo100 */) {
                 return;
             }
-            var seriesOptions = this._internal__series._internal_options();
+            const seriesOptions = this._internal__series._internal_options();
             if (!seriesOptions.baseLineVisible || !this._internal__series._internal_visible()) {
                 return;
             }
-            var firstValue = this._internal__series._internal_firstValue();
+            const firstValue = this._internal__series._internal_firstValue();
             if (firstValue === null) {
                 return;
             }
@@ -3022,33 +3001,32 @@
             this._internal__lineRendererData._internal_color = seriesOptions.baseLineColor;
             this._internal__lineRendererData._internal_lineWidth = seriesOptions.baseLineWidth;
             this._internal__lineRendererData._internal_lineStyle = seriesOptions.baseLineStyle;
-        };
-        return SeriesHorizontalBaseLinePaneView;
-    }(SeriesHorizontalLinePaneView));
+        }
+    }
 
-    var SeriesLastPriceAnimationRenderer = /** @class */ (function () {
-        function SeriesLastPriceAnimationRenderer() {
+    class SeriesLastPriceAnimationRenderer {
+        constructor() {
             this._private__data = null;
         }
-        SeriesLastPriceAnimationRenderer.prototype._internal_setData = function (data) {
+        _internal_setData(data) {
             this._private__data = data;
-        };
-        SeriesLastPriceAnimationRenderer.prototype._internal_data = function () {
+        }
+        _internal_data() {
             return this._private__data;
-        };
-        SeriesLastPriceAnimationRenderer.prototype._internal_draw = function (ctx, pixelRatio, isHovered, hitTestData) {
-            var data = this._private__data;
+        }
+        _internal_draw(ctx, pixelRatio, isHovered, hitTestData) {
+            const data = this._private__data;
             if (data === null) {
                 return;
             }
             ctx.save();
-            var tickWidth = Math.max(1, Math.floor(pixelRatio));
-            var correction = (tickWidth % 2) / 2;
-            var centerX = Math.round(data._internal_center.x * pixelRatio) + correction; // correct x coordinate only
-            var centerY = data._internal_center.y * pixelRatio;
+            const tickWidth = Math.max(1, Math.floor(pixelRatio));
+            const correction = (tickWidth % 2) / 2;
+            const centerX = Math.round(data._internal_center.x * pixelRatio) + correction; // correct x coordinate only
+            const centerY = data._internal_center.y * pixelRatio;
             ctx.fillStyle = data._internal_seriesLineColor;
             ctx.beginPath();
-            var centerPointRadius = Math.max(2, data._internal_seriesLineWidth * 1.5) * pixelRatio;
+            const centerPointRadius = Math.max(2, data._internal_seriesLineWidth * 1.5) * pixelRatio;
             ctx.arc(centerX, centerY, centerPointRadius, 0, 2 * Math.PI, false);
             ctx.fill();
             ctx.fillStyle = data._internal_fillColor;
@@ -3061,69 +3039,67 @@
             ctx.arc(centerX, centerY, data._internal_radius * pixelRatio + tickWidth / 2, 0, 2 * Math.PI, false);
             ctx.stroke();
             ctx.restore();
-        };
-        return SeriesLastPriceAnimationRenderer;
-    }());
+        }
+    }
 
-    var animationStagesData = [
+    const animationStagesData = [
         {
             _internal_start: 0,
-            _internal_end: 0.25 /* Stage1Period */,
-            _internal_startRadius: 4 /* Stage1StartCircleRadius */,
-            _internal_endRadius: 10 /* Stage1EndCircleRadius */,
-            _internal_startFillAlpha: 0.25 /* Stage1StartFillAlpha */,
-            _internal_endFillAlpha: 0 /* Stage1EndFillAlpha */,
-            _internal_startStrokeAlpha: 0.4 /* Stage1StartStrokeAlpha */,
-            _internal_endStrokeAlpha: 0.8 /* Stage1EndStrokeAlpha */,
+            _internal_end: 0.25 /* Constants.Stage1Period */,
+            _internal_startRadius: 4 /* Constants.Stage1StartCircleRadius */,
+            _internal_endRadius: 10 /* Constants.Stage1EndCircleRadius */,
+            _internal_startFillAlpha: 0.25 /* Constants.Stage1StartFillAlpha */,
+            _internal_endFillAlpha: 0 /* Constants.Stage1EndFillAlpha */,
+            _internal_startStrokeAlpha: 0.4 /* Constants.Stage1StartStrokeAlpha */,
+            _internal_endStrokeAlpha: 0.8 /* Constants.Stage1EndStrokeAlpha */,
         },
         {
-            _internal_start: 0.25 /* Stage1Period */,
-            _internal_end: 0.25 /* Stage1Period */ + 0.275 /* Stage2Period */,
-            _internal_startRadius: 10 /* Stage2StartCircleRadius */,
-            _internal_endRadius: 14 /* Stage2EndCircleRadius */,
-            _internal_startFillAlpha: 0 /* Stage2StartFillAlpha */,
-            _internal_endFillAlpha: 0 /* Stage2EndFillAlpha */,
-            _internal_startStrokeAlpha: 0.8 /* Stage2StartStrokeAlpha */,
-            _internal_endStrokeAlpha: 0 /* Stage2EndStrokeAlpha */,
+            _internal_start: 0.25 /* Constants.Stage1Period */,
+            _internal_end: 0.25 /* Constants.Stage1Period */ + 0.275 /* Constants.Stage2Period */,
+            _internal_startRadius: 10 /* Constants.Stage2StartCircleRadius */,
+            _internal_endRadius: 14 /* Constants.Stage2EndCircleRadius */,
+            _internal_startFillAlpha: 0 /* Constants.Stage2StartFillAlpha */,
+            _internal_endFillAlpha: 0 /* Constants.Stage2EndFillAlpha */,
+            _internal_startStrokeAlpha: 0.8 /* Constants.Stage2StartStrokeAlpha */,
+            _internal_endStrokeAlpha: 0 /* Constants.Stage2EndStrokeAlpha */,
         },
         {
-            _internal_start: 0.25 /* Stage1Period */ + 0.275 /* Stage2Period */,
-            _internal_end: 0.25 /* Stage1Period */ + 0.275 /* Stage2Period */ + 0.475 /* Stage3Period */,
-            _internal_startRadius: 14 /* Stage3StartCircleRadius */,
-            _internal_endRadius: 14 /* Stage3EndCircleRadius */,
-            _internal_startFillAlpha: 0 /* Stage3StartFillAlpha */,
-            _internal_endFillAlpha: 0 /* Stage3EndFillAlpha */,
-            _internal_startStrokeAlpha: 0 /* Stage3StartStrokeAlpha */,
-            _internal_endStrokeAlpha: 0 /* Stage3EndStrokeAlpha */,
+            _internal_start: 0.25 /* Constants.Stage1Period */ + 0.275 /* Constants.Stage2Period */,
+            _internal_end: 0.25 /* Constants.Stage1Period */ + 0.275 /* Constants.Stage2Period */ + 0.475 /* Constants.Stage3Period */,
+            _internal_startRadius: 14 /* Constants.Stage3StartCircleRadius */,
+            _internal_endRadius: 14 /* Constants.Stage3EndCircleRadius */,
+            _internal_startFillAlpha: 0 /* Constants.Stage3StartFillAlpha */,
+            _internal_endFillAlpha: 0 /* Constants.Stage3EndFillAlpha */,
+            _internal_startStrokeAlpha: 0 /* Constants.Stage3StartStrokeAlpha */,
+            _internal_endStrokeAlpha: 0 /* Constants.Stage3EndStrokeAlpha */,
         },
     ];
     function color(seriesLineColor, stage, startAlpha, endAlpha) {
-        var alpha = startAlpha + (endAlpha - startAlpha) * stage;
+        const alpha = startAlpha + (endAlpha - startAlpha) * stage;
         return applyAlpha(seriesLineColor, alpha);
     }
     function radius(stage, startRadius, endRadius) {
         return startRadius + (endRadius - startRadius) * stage;
     }
     function animationData(durationSinceStart, lineColor) {
-        var globalStage = (durationSinceStart % 2600 /* AnimationPeriod */) / 2600 /* AnimationPeriod */;
-        var currentStageData;
-        for (var _i = 0, animationStagesData_1 = animationStagesData; _i < animationStagesData_1.length; _i++) {
-            var stageData = animationStagesData_1[_i];
+        const globalStage = (durationSinceStart % 2600 /* Constants.AnimationPeriod */) / 2600 /* Constants.AnimationPeriod */;
+        let currentStageData;
+        for (const stageData of animationStagesData) {
             if (globalStage >= stageData._internal_start && globalStage <= stageData._internal_end) {
                 currentStageData = stageData;
                 break;
             }
         }
         assert(currentStageData !== undefined, 'Last price animation internal logic error');
-        var subStage = (globalStage - currentStageData._internal_start) / (currentStageData._internal_end - currentStageData._internal_start);
+        const subStage = (globalStage - currentStageData._internal_start) / (currentStageData._internal_end - currentStageData._internal_start);
         return {
             _internal_fillColor: color(lineColor, subStage, currentStageData._internal_startFillAlpha, currentStageData._internal_endFillAlpha),
             _internal_strokeColor: color(lineColor, subStage, currentStageData._internal_startStrokeAlpha, currentStageData._internal_endStrokeAlpha),
             _internal_radius: radius(subStage, currentStageData._internal_startRadius, currentStageData._internal_endRadius),
         };
     }
-    var SeriesLastPriceAnimationPaneView = /** @class */ (function () {
-        function SeriesLastPriceAnimationPaneView(series) {
+    class SeriesLastPriceAnimationPaneView {
+        constructor(series) {
             this._private__renderer = new SeriesLastPriceAnimationRenderer();
             this._private__invalidated = true;
             this._private__stageInvalidated = true;
@@ -3131,46 +3107,46 @@
             this._private__endTime = this._private__startTime - 1;
             this._private__series = series;
         }
-        SeriesLastPriceAnimationPaneView.prototype._internal_onDataCleared = function () {
+        _internal_onDataCleared() {
             this._private__endTime = this._private__startTime - 1;
             this._internal_update();
-        };
-        SeriesLastPriceAnimationPaneView.prototype._internal_onNewRealtimeDataReceived = function () {
+        }
+        _internal_onNewRealtimeDataReceived() {
             this._internal_update();
-            if (this._private__series._internal_options().lastPriceAnimation === 2 /* OnDataUpdate */) {
-                var now = performance.now();
-                var timeToAnimationEnd = this._private__endTime - now;
+            if (this._private__series._internal_options().lastPriceAnimation === 2 /* LastPriceAnimationMode.OnDataUpdate */) {
+                const now = performance.now();
+                const timeToAnimationEnd = this._private__endTime - now;
                 if (timeToAnimationEnd > 0) {
-                    if (timeToAnimationEnd < 2600 /* AnimationPeriod */ / 4) {
-                        this._private__endTime += 2600 /* AnimationPeriod */;
+                    if (timeToAnimationEnd < 2600 /* Constants.AnimationPeriod */ / 4) {
+                        this._private__endTime += 2600 /* Constants.AnimationPeriod */;
                     }
                     return;
                 }
                 this._private__startTime = now;
-                this._private__endTime = now + 2600 /* AnimationPeriod */;
+                this._private__endTime = now + 2600 /* Constants.AnimationPeriod */;
             }
-        };
-        SeriesLastPriceAnimationPaneView.prototype._internal_update = function () {
+        }
+        _internal_update() {
             this._private__invalidated = true;
-        };
-        SeriesLastPriceAnimationPaneView.prototype._internal_invalidateStage = function () {
+        }
+        _internal_invalidateStage() {
             this._private__stageInvalidated = true;
-        };
-        SeriesLastPriceAnimationPaneView.prototype._internal_visible = function () {
+        }
+        _internal_visible() {
             // center point is always visible if lastPriceAnimation is not LastPriceAnimationMode.Disabled
-            return this._private__series._internal_options().lastPriceAnimation !== 0 /* Disabled */;
-        };
-        SeriesLastPriceAnimationPaneView.prototype._internal_animationActive = function () {
+            return this._private__series._internal_options().lastPriceAnimation !== 0 /* LastPriceAnimationMode.Disabled */;
+        }
+        _internal_animationActive() {
             switch (this._private__series._internal_options().lastPriceAnimation) {
-                case 0 /* Disabled */:
+                case 0 /* LastPriceAnimationMode.Disabled */:
                     return false;
-                case 1 /* Continuous */:
+                case 1 /* LastPriceAnimationMode.Continuous */:
                     return true;
-                case 2 /* OnDataUpdate */:
+                case 2 /* LastPriceAnimationMode.OnDataUpdate */:
                     return performance.now() <= this._private__endTime;
             }
-        };
-        SeriesLastPriceAnimationPaneView.prototype._internal_renderer = function (height, width) {
+        }
+        _internal_renderer(height, width) {
             if (this._private__invalidated) {
                 this._private__updateImpl(height, width);
                 this._private__invalidated = false;
@@ -3181,26 +3157,26 @@
                 this._private__stageInvalidated = false;
             }
             return this._private__renderer;
-        };
-        SeriesLastPriceAnimationPaneView.prototype._private__updateImpl = function (height, width) {
+        }
+        _private__updateImpl(height, width) {
             this._private__renderer._internal_setData(null);
-            var timeScale = this._private__series._internal_model()._internal_timeScale();
-            var visibleRange = timeScale._internal_visibleStrictRange();
-            var firstValue = this._private__series._internal_firstValue();
+            const timeScale = this._private__series._internal_model()._internal_timeScale();
+            const visibleRange = timeScale._internal_visibleStrictRange();
+            const firstValue = this._private__series._internal_firstValue();
             if (visibleRange === null || firstValue === null) {
                 return;
             }
-            var lastValue = this._private__series._internal_lastValueData(true);
+            const lastValue = this._private__series._internal_lastValueData(true);
             if (lastValue._internal_noData || !visibleRange._internal_contains(lastValue._internal_index)) {
                 return;
             }
-            var lastValuePoint = {
+            const lastValuePoint = {
                 x: timeScale._internal_indexToCoordinate(lastValue._internal_index),
                 y: this._private__series._internal_priceScale()._internal_priceToCoordinate(lastValue._internal_price, firstValue._internal_value),
             };
-            var seriesLineColor = lastValue._internal_color;
-            var seriesLineWidth = this._private__series._internal_options().lineWidth;
-            var data = animationData(this._private__duration(), seriesLineColor);
+            const seriesLineColor = lastValue._internal_color;
+            const seriesLineWidth = this._private__series._internal_options().lineWidth;
+            const data = animationData(this._private__duration(), seriesLineColor);
             this._private__renderer._internal_setData({
                 _internal_seriesLineColor: seriesLineColor,
                 _internal_seriesLineWidth: seriesLineWidth,
@@ -3209,24 +3185,23 @@
                 _internal_radius: data._internal_radius,
                 _internal_center: lastValuePoint,
             });
-        };
-        SeriesLastPriceAnimationPaneView.prototype._private__updateRendererDataStage = function () {
-            var rendererData = this._private__renderer._internal_data();
+        }
+        _private__updateRendererDataStage() {
+            const rendererData = this._private__renderer._internal_data();
             if (rendererData !== null) {
-                var data = animationData(this._private__duration(), rendererData._internal_seriesLineColor);
+                const data = animationData(this._private__duration(), rendererData._internal_seriesLineColor);
                 rendererData._internal_fillColor = data._internal_fillColor;
                 rendererData._internal_strokeColor = data._internal_strokeColor;
                 rendererData._internal_radius = data._internal_radius;
             }
-        };
-        SeriesLastPriceAnimationPaneView.prototype._private__duration = function () {
-            return this._internal_animationActive() ? performance.now() - this._private__startTime : 2600 /* AnimationPeriod */ - 1;
-        };
-        return SeriesLastPriceAnimationPaneView;
-    }());
+        }
+        _private__duration() {
+            return this._internal_animationActive() ? performance.now() - this._private__startTime : 2600 /* Constants.AnimationPeriod */ - 1;
+        }
+    }
 
     function size(barSpacing, coeff) {
-        var result = Math.min(Math.max(barSpacing, 12 /* MinShapeSize */), 30 /* MaxShapeSize */) * coeff;
+        const result = Math.min(Math.max(barSpacing, 12 /* Constants.MinShapeSize */), 30 /* Constants.MaxShapeSize */) * coeff;
         return ceiledOdd(result);
     }
     function shapeSize(shape, originalSize) {
@@ -3244,30 +3219,30 @@
         return ceiledEven(size(barSpacing, 1));
     }
     function shapeMargin(barSpacing) {
-        return Math.max(size(barSpacing, 0.1), 3 /* MinShapeMargin */);
+        return Math.max(size(barSpacing, 0.1), 3 /* Constants.MinShapeMargin */);
     }
 
     function drawSquare(ctx, centerX, centerY, size) {
-        var squareSize = shapeSize('square', size);
-        var halfSize = (squareSize - 1) / 2;
-        var left = centerX - halfSize;
-        var top = centerY - halfSize;
+        const squareSize = shapeSize('square', size);
+        const halfSize = (squareSize - 1) / 2;
+        const left = centerX - halfSize;
+        const top = centerY - halfSize;
         ctx.fillRect(left, top, squareSize, squareSize);
     }
     function hitTestSquare(centerX, centerY, size, x, y) {
-        var squareSize = shapeSize('square', size);
-        var halfSize = (squareSize - 1) / 2;
-        var left = centerX - halfSize;
-        var top = centerY - halfSize;
+        const squareSize = shapeSize('square', size);
+        const halfSize = (squareSize - 1) / 2;
+        const left = centerX - halfSize;
+        const top = centerY - halfSize;
         return x >= left && x <= left + squareSize &&
             y >= top && y <= top + squareSize;
     }
 
     function drawArrow(up, ctx, centerX, centerY, size) {
-        var arrowSize = shapeSize('arrowUp', size);
-        var halfArrowSize = (arrowSize - 1) / 2;
-        var baseSize = ceiledOdd(size / 2);
-        var halfBaseSize = (baseSize - 1) / 2;
+        const arrowSize = shapeSize('arrowUp', size);
+        const halfArrowSize = (arrowSize - 1) / 2;
+        const baseSize = ceiledOdd(size / 2);
+        const halfBaseSize = (baseSize - 1) / 2;
         ctx.beginPath();
         if (up) {
             ctx.moveTo(centerX - halfArrowSize, centerY);
@@ -3295,18 +3270,18 @@
     }
 
     function drawCircle(ctx, centerX, centerY, size) {
-        var circleSize = shapeSize('circle', size);
-        var halfSize = (circleSize - 1) / 2;
+        const circleSize = shapeSize('circle', size);
+        const halfSize = (circleSize - 1) / 2;
         ctx.beginPath();
         ctx.arc(centerX, centerY, halfSize, 0, 2 * Math.PI, false);
         ctx.fill();
     }
     function hitTestCircle(centerX, centerY, size, x, y) {
-        var circleSize = shapeSize('circle', size);
-        var tolerance = 2 + circleSize / 2;
-        var xOffset = centerX - x;
-        var yOffset = centerY - y;
-        var dist = Math.sqrt(xOffset * xOffset + yOffset * yOffset);
+        const circleSize = shapeSize('circle', size);
+        const tolerance = 2 + circleSize / 2;
+        const xOffset = centerX - x;
+        const yOffset = centerY - y;
+        const dist = Math.sqrt(xOffset * xOffset + yOffset * yOffset);
         return dist <= tolerance;
     }
 
@@ -3314,39 +3289,37 @@
         ctx.fillText(text, x, y);
     }
     function hitTestText(textX, textY, textWidth, textHeight, x, y) {
-        var halfHeight = textHeight / 2;
+        const halfHeight = textHeight / 2;
         return x >= textX && x <= textX + textWidth &&
             y >= textY - halfHeight && y <= textY + halfHeight;
     }
 
-    var SeriesMarkersRenderer = /** @class */ (function (_super) {
-        __extends(SeriesMarkersRenderer, _super);
-        function SeriesMarkersRenderer() {
-            var _this = _super !== null && _super.apply(this, arguments) || this;
-            _this._private__data = null;
-            _this._private__textWidthCache = new TextWidthCache();
-            _this._private__fontSize = -1;
-            _this._private__fontFamily = '';
-            _this._private__font = '';
-            return _this;
+    class SeriesMarkersRenderer extends ScaledRenderer {
+        constructor() {
+            super(...arguments);
+            this._private__data = null;
+            this._private__textWidthCache = new TextWidthCache();
+            this._private__fontSize = -1;
+            this._private__fontFamily = '';
+            this._private__font = '';
         }
-        SeriesMarkersRenderer.prototype._internal_setData = function (data) {
+        _internal_setData(data) {
             this._private__data = data;
-        };
-        SeriesMarkersRenderer.prototype._internal_setParams = function (fontSize, fontFamily) {
+        }
+        _internal_setParams(fontSize, fontFamily) {
             if (this._private__fontSize !== fontSize || this._private__fontFamily !== fontFamily) {
                 this._private__fontSize = fontSize;
                 this._private__fontFamily = fontFamily;
                 this._private__font = makeFont(fontSize, fontFamily);
                 this._private__textWidthCache._internal_reset();
             }
-        };
-        SeriesMarkersRenderer.prototype._internal_hitTest = function (x, y) {
+        }
+        _internal_hitTest(x, y) {
             if (this._private__data === null || this._private__data._internal_visibleRange === null) {
                 return null;
             }
-            for (var i = this._private__data._internal_visibleRange.from; i < this._private__data._internal_visibleRange.to; i++) {
-                var item = this._private__data._internal_items[i];
+            for (let i = this._private__data._internal_visibleRange.from; i < this._private__data._internal_visibleRange.to; i++) {
+                const item = this._private__data._internal_items[i];
                 if (hitTestItem(item, x, y)) {
                     return {
                         _internal_hitTestData: item._internal_internalId,
@@ -3355,24 +3328,23 @@
                 }
             }
             return null;
-        };
-        SeriesMarkersRenderer.prototype._internal__drawImpl = function (ctx, isHovered, hitTestData) {
+        }
+        _internal__drawImpl(ctx, isHovered, hitTestData) {
             if (this._private__data === null || this._private__data._internal_visibleRange === null) {
                 return;
             }
             ctx.textBaseline = 'middle';
             ctx.font = this._private__font;
-            for (var i = this._private__data._internal_visibleRange.from; i < this._private__data._internal_visibleRange.to; i++) {
-                var item = this._private__data._internal_items[i];
+            for (let i = this._private__data._internal_visibleRange.from; i < this._private__data._internal_visibleRange.to; i++) {
+                const item = this._private__data._internal_items[i];
                 if (item._internal_text !== undefined) {
                     item._internal_text._internal_width = this._private__textWidthCache._internal_measureText(ctx, item._internal_text._internal_content);
                     item._internal_text._internal_height = this._private__fontSize;
                 }
                 drawItem(item, ctx);
             }
-        };
-        return SeriesMarkersRenderer;
-    }(ScaledRenderer));
+        }
+    }
     function drawItem(item, ctx) {
         ctx.fillStyle = item._internal_color;
         if (item._internal_text !== undefined) {
@@ -3424,26 +3396,26 @@
 
     // eslint-disable-next-line max-params
     function fillSizeAndY(rendererItem, marker, seriesData, offsets, textHeight, shapeMargin, priceScale, timeScale, firstValue) {
-        var inBarPrice = isNumber(seriesData) ? seriesData : seriesData.close;
-        var highPrice = isNumber(seriesData) ? seriesData : seriesData.high;
-        var lowPrice = isNumber(seriesData) ? seriesData : seriesData.low;
-        var sizeMultiplier = isNumber(marker.size) ? Math.max(marker.size, 0) : 1;
-        var shapeSize = calculateShapeHeight(timeScale._internal_barSpacing()) * sizeMultiplier;
-        var halfSize = shapeSize / 2;
+        const inBarPrice = isNumber(seriesData) ? seriesData : seriesData._internal_close;
+        const highPrice = isNumber(seriesData) ? seriesData : seriesData._internal_high;
+        const lowPrice = isNumber(seriesData) ? seriesData : seriesData._internal_low;
+        const sizeMultiplier = isNumber(marker.size) ? Math.max(marker.size, 0) : 1;
+        const shapeSize = calculateShapeHeight(timeScale._internal_barSpacing()) * sizeMultiplier;
+        const halfSize = shapeSize / 2;
         rendererItem._internal_size = shapeSize;
         switch (marker.position) {
             case 'inBar': {
                 rendererItem._internal_y = priceScale._internal_priceToCoordinate(inBarPrice, firstValue);
                 if (rendererItem._internal_text !== undefined) {
-                    rendererItem._internal_text._internal_y = rendererItem._internal_y + halfSize + shapeMargin + textHeight * (0.5 + 0.1 /* TextMargin */);
+                    rendererItem._internal_text._internal_y = rendererItem._internal_y + halfSize + shapeMargin + textHeight * (0.5 + 0.1 /* Constants.TextMargin */);
                 }
                 return;
             }
             case 'aboveBar': {
                 rendererItem._internal_y = (priceScale._internal_priceToCoordinate(highPrice, firstValue) - halfSize - offsets._internal_aboveBar);
                 if (rendererItem._internal_text !== undefined) {
-                    rendererItem._internal_text._internal_y = rendererItem._internal_y - halfSize - textHeight * (0.5 + 0.1 /* TextMargin */);
-                    offsets._internal_aboveBar += textHeight * (1 + 2 * 0.1 /* TextMargin */);
+                    rendererItem._internal_text._internal_y = rendererItem._internal_y - halfSize - textHeight * (0.5 + 0.1 /* Constants.TextMargin */);
+                    offsets._internal_aboveBar += textHeight * (1 + 2 * 0.1 /* Constants.TextMargin */);
                 }
                 offsets._internal_aboveBar += shapeSize + shapeMargin;
                 return;
@@ -3451,8 +3423,8 @@
             case 'belowBar': {
                 rendererItem._internal_y = (priceScale._internal_priceToCoordinate(lowPrice, firstValue) + halfSize + offsets._internal_belowBar);
                 if (rendererItem._internal_text !== undefined) {
-                    rendererItem._internal_text._internal_y = rendererItem._internal_y + halfSize + shapeMargin + textHeight * (0.5 + 0.1 /* TextMargin */);
-                    offsets._internal_belowBar += textHeight * (1 + 2 * 0.1 /* TextMargin */);
+                    rendererItem._internal_text._internal_y = rendererItem._internal_y + halfSize + shapeMargin + textHeight * (0.5 + 0.1 /* Constants.TextMargin */);
+                    offsets._internal_belowBar += textHeight * (1 + 2 * 0.1 /* Constants.TextMargin */);
                 }
                 offsets._internal_belowBar += shapeSize + shapeMargin;
                 return;
@@ -3460,8 +3432,8 @@
         }
         ensureNever(marker.position);
     }
-    var SeriesMarkersPaneView = /** @class */ (function () {
-        function SeriesMarkersPaneView(series, model) {
+    class SeriesMarkersPaneView {
+        constructor(series, model) {
             this._private__invalidated = true;
             this._private__dataInvalidated = true;
             this._private__autoScaleMarginsInvalidated = true;
@@ -3474,31 +3446,31 @@
                 _internal_visibleRange: null,
             };
         }
-        SeriesMarkersPaneView.prototype._internal_update = function (updateType) {
+        _internal_update(updateType) {
             this._private__invalidated = true;
             this._private__autoScaleMarginsInvalidated = true;
             if (updateType === 'data') {
                 this._private__dataInvalidated = true;
             }
-        };
-        SeriesMarkersPaneView.prototype._internal_renderer = function (height, width, addAnchors) {
+        }
+        _internal_renderer(height, width, addAnchors) {
             if (!this._private__series._internal_visible()) {
                 return null;
             }
             if (this._private__invalidated) {
                 this._internal__makeValid();
             }
-            var layout = this._private__model._internal_options().layout;
+            const layout = this._private__model._internal_options().layout;
             this._private__renderer._internal_setParams(layout.fontSize, layout.fontFamily);
             this._private__renderer._internal_setData(this._private__data);
             return this._private__renderer;
-        };
-        SeriesMarkersPaneView.prototype._internal_autoScaleMargins = function () {
+        }
+        _internal_autoScaleMargins() {
             if (this._private__autoScaleMarginsInvalidated) {
                 if (this._private__series._internal_indexedMarkers().length > 0) {
-                    var barSpacing = this._private__model._internal_timeScale()._internal_barSpacing();
-                    var shapeMargin$1 = shapeMargin(barSpacing);
-                    var marginsAboveAndBelow = calculateShapeHeight(barSpacing) * 1.5 + shapeMargin$1 * 2;
+                    const barSpacing = this._private__model._internal_timeScale()._internal_barSpacing();
+                    const shapeMargin$1 = shapeMargin(barSpacing);
+                    const marginsAboveAndBelow = calculateShapeHeight(barSpacing) * 1.5 + shapeMargin$1 * 2;
                     this._private__autoScaleMargins = {
                         above: marginsAboveAndBelow,
                         below: marginsAboveAndBelow,
@@ -3510,54 +3482,54 @@
                 this._private__autoScaleMarginsInvalidated = false;
             }
             return this._private__autoScaleMargins;
-        };
-        SeriesMarkersPaneView.prototype._internal__makeValid = function () {
-            var priceScale = this._private__series._internal_priceScale();
-            var timeScale = this._private__model._internal_timeScale();
-            var seriesMarkers = this._private__series._internal_indexedMarkers();
+        }
+        _internal__makeValid() {
+            const priceScale = this._private__series._internal_priceScale();
+            const timeScale = this._private__model._internal_timeScale();
+            const seriesMarkers = this._private__series._internal_indexedMarkers();
             if (this._private__dataInvalidated) {
-                this._private__data._internal_items = seriesMarkers.map(function (marker) { return ({
+                this._private__data._internal_items = seriesMarkers.map((marker) => ({
                     _internal_time: marker.time,
                     _internal_x: 0,
                     _internal_y: 0,
                     _internal_size: 0,
                     _internal_shape: marker.shape,
                     _internal_color: marker.color,
-                    _internal_internalId: marker._internal_internalId,
+                    _internal_internalId: marker.internalId,
                     _internal_externalId: marker.id,
                     _internal_text: undefined,
-                }); });
+                }));
                 this._private__dataInvalidated = false;
             }
-            var layoutOptions = this._private__model._internal_options().layout;
+            const layoutOptions = this._private__model._internal_options().layout;
             this._private__data._internal_visibleRange = null;
-            var visibleBars = timeScale._internal_visibleStrictRange();
+            const visibleBars = timeScale._internal_visibleStrictRange();
             if (visibleBars === null) {
                 return;
             }
-            var firstValue = this._private__series._internal_firstValue();
+            const firstValue = this._private__series._internal_firstValue();
             if (firstValue === null) {
                 return;
             }
             if (this._private__data._internal_items.length === 0) {
                 return;
             }
-            var prevTimeIndex = NaN;
-            var shapeMargin$1 = shapeMargin(timeScale._internal_barSpacing());
-            var offsets = {
+            let prevTimeIndex = NaN;
+            const shapeMargin$1 = shapeMargin(timeScale._internal_barSpacing());
+            const offsets = {
                 _internal_aboveBar: shapeMargin$1,
                 _internal_belowBar: shapeMargin$1,
             };
             this._private__data._internal_visibleRange = visibleTimedValues(this._private__data._internal_items, visibleBars, true);
-            for (var index = this._private__data._internal_visibleRange.from; index < this._private__data._internal_visibleRange.to; index++) {
-                var marker = seriesMarkers[index];
+            for (let index = this._private__data._internal_visibleRange.from; index < this._private__data._internal_visibleRange.to; index++) {
+                const marker = seriesMarkers[index];
                 if (marker.time !== prevTimeIndex) {
                     // new bar, reset stack counter
                     offsets._internal_aboveBar = shapeMargin$1;
                     offsets._internal_belowBar = shapeMargin$1;
                     prevTimeIndex = marker.time;
                 }
-                var rendererItem = this._private__data._internal_items[index];
+                const rendererItem = this._private__data._internal_items[index];
                 rendererItem._internal_x = timeScale._internal_indexToCoordinate(marker.time);
                 if (marker.text !== undefined && marker.text.length > 0) {
                     rendererItem._internal_text = {
@@ -3567,31 +3539,29 @@
                         _internal_height: 0,
                     };
                 }
-                var dataAt = this._private__series._internal_dataAt(marker.time);
+                const dataAt = this._private__series._internal_dataAt(marker.time);
                 if (dataAt === null) {
                     continue;
                 }
                 fillSizeAndY(rendererItem, marker, dataAt, offsets, layoutOptions.fontSize, shapeMargin$1, priceScale, timeScale, firstValue._internal_value);
             }
             this._private__invalidated = false;
-        };
-        return SeriesMarkersPaneView;
-    }());
+        }
+    }
 
-    var SeriesPriceLinePaneView = /** @class */ (function (_super) {
-        __extends(SeriesPriceLinePaneView, _super);
+    class SeriesPriceLinePaneView extends SeriesHorizontalLinePaneView {
         // eslint-disable-next-line no-useless-constructor
-        function SeriesPriceLinePaneView(series) {
-            return _super.call(this, series) || this;
+        constructor(series) {
+            super(series);
         }
-        SeriesPriceLinePaneView.prototype._internal__updateImpl = function (height, width) {
-            var data = this._internal__lineRendererData;
+        _internal__updateImpl(height, width) {
+            const data = this._internal__lineRendererData;
             data._internal_visible = false;
-            var seriesOptions = this._internal__series._internal_options();
+            const seriesOptions = this._internal__series._internal_options();
             if (!seriesOptions.priceLineVisible || !this._internal__series._internal_visible()) {
                 return;
             }
-            var lastValueData = this._internal__series._internal_lastValueData(seriesOptions.priceLineSource === 0 /* LastBar */);
+            const lastValueData = this._internal__series._internal_lastValueData(seriesOptions.priceLineSource === 0 /* PriceLineSource.LastBar */);
             if (lastValueData._internal_noData) {
                 return;
             }
@@ -3602,29 +3572,26 @@
             data._internal_height = height;
             data._internal_lineWidth = seriesOptions.priceLineWidth;
             data._internal_lineStyle = seriesOptions.priceLineStyle;
-        };
-        return SeriesPriceLinePaneView;
-    }(SeriesHorizontalLinePaneView));
+        }
+    }
 
-    var SeriesPriceAxisView = /** @class */ (function (_super) {
-        __extends(SeriesPriceAxisView, _super);
-        function SeriesPriceAxisView(source) {
-            var _this = _super.call(this) || this;
-            _this._private__source = source;
-            return _this;
+    class SeriesPriceAxisView extends PriceAxisView {
+        constructor(source) {
+            super();
+            this._private__source = source;
         }
-        SeriesPriceAxisView.prototype._internal__updateRendererData = function (axisRendererData, paneRendererData, commonRendererData) {
+        _internal__updateRendererData(axisRendererData, paneRendererData, commonRendererData) {
             axisRendererData._internal_visible = false;
             paneRendererData._internal_visible = false;
-            var source = this._private__source;
+            const source = this._private__source;
             if (!source._internal_visible()) {
                 return;
             }
-            var seriesOptions = source._internal_options();
-            var showSeriesLastValue = seriesOptions.lastValueVisible;
-            var showSymbolLabel = source._internal_title() !== '';
-            var showPriceAndPercentage = seriesOptions.seriesLastValueMode === 0 /* LastPriceAndPercentageValue */;
-            var lastValueData = source._internal_lastValueData(false);
+            const seriesOptions = source._internal_options();
+            const showSeriesLastValue = seriesOptions.lastValueVisible;
+            const showSymbolLabel = source._internal_title() !== '';
+            const showPriceAndPercentage = seriesOptions.seriesLastValueMode === 0 /* PriceAxisLastValueMode.LastPriceAndPercentageValue */;
+            const lastValueData = source._internal_lastValueData(false);
             if (lastValueData._internal_noData) {
                 return;
             }
@@ -3636,27 +3603,29 @@
                 paneRendererData._internal_text = this._internal__paneText(lastValueData, showSeriesLastValue, showSymbolLabel, showPriceAndPercentage);
                 paneRendererData._internal_visible = paneRendererData._internal_text.length > 0;
             }
-            var lastValueColor = source._internal_priceLineColor(lastValueData._internal_color);
-            var colors = generateContrastColors(lastValueColor);
+            const lastValueColor = source._internal_priceLineColor(lastValueData._internal_color);
+            const colors = generateContrastColors(lastValueColor);
             commonRendererData._internal_background = colors._internal_background;
             commonRendererData._internal_color = colors._internal_foreground;
             commonRendererData._internal_coordinate = lastValueData._internal_coordinate;
             paneRendererData._internal_borderColor = source._internal_model()._internal_backgroundColorAtYPercentFromTop(lastValueData._internal_coordinate / source._internal_priceScale()._internal_height());
             axisRendererData._internal_borderColor = lastValueColor;
-        };
-        SeriesPriceAxisView.prototype._internal__paneText = function (lastValue, showSeriesLastValue, showSymbolLabel, showPriceAndPercentage) {
-            var result = '';
-            var title = this._private__source._internal_title();
+            axisRendererData._internal_color = commonRendererData._internal_color;
+            paneRendererData._internal_color = commonRendererData._internal_color;
+        }
+        _internal__paneText(lastValue, showSeriesLastValue, showSymbolLabel, showPriceAndPercentage) {
+            let result = '';
+            const title = this._private__source._internal_title();
             if (showSymbolLabel && title.length !== 0) {
-                result += "".concat(title, " ");
+                result += `${title} `;
             }
             if (showSeriesLastValue && showPriceAndPercentage) {
                 result += this._private__source._internal_priceScale()._internal_isPercentage() ?
                     lastValue._internal_formattedPriceAbsolute : lastValue._internal_formattedPricePercentage;
             }
             return result.trim();
-        };
-        SeriesPriceAxisView.prototype._internal__axisText = function (lastValueData, showSeriesLastValue, showPriceAndPercentage) {
+        }
+        _internal__axisText(lastValueData, showSeriesLastValue, showPriceAndPercentage) {
             if (!showSeriesLastValue) {
                 return '';
             }
@@ -3665,89 +3634,87 @@
             }
             return this._private__source._internal_priceScale()._internal_isPercentage() ?
                 lastValueData._internal_formattedPricePercentage : lastValueData._internal_formattedPriceAbsolute;
-        };
-        return SeriesPriceAxisView;
-    }(PriceAxisView));
+        }
+    }
 
-    var PriceRangeImpl = /** @class */ (function () {
-        function PriceRangeImpl(minValue, maxValue) {
+    class PriceRangeImpl {
+        constructor(minValue, maxValue) {
             this._private__minValue = minValue;
             this._private__maxValue = maxValue;
         }
-        PriceRangeImpl.prototype._internal_equals = function (pr) {
+        _internal_equals(pr) {
             if (pr === null) {
                 return false;
             }
             return this._private__minValue === pr._private__minValue && this._private__maxValue === pr._private__maxValue;
-        };
-        PriceRangeImpl.prototype._internal_clone = function () {
+        }
+        _internal_clone() {
             return new PriceRangeImpl(this._private__minValue, this._private__maxValue);
-        };
-        PriceRangeImpl.prototype._internal_minValue = function () {
+        }
+        _internal_minValue() {
             return this._private__minValue;
-        };
-        PriceRangeImpl.prototype._internal_maxValue = function () {
+        }
+        _internal_maxValue() {
             return this._private__maxValue;
-        };
-        PriceRangeImpl.prototype._internal_length = function () {
+        }
+        _internal_length() {
             return this._private__maxValue - this._private__minValue;
-        };
-        PriceRangeImpl.prototype._internal_isEmpty = function () {
+        }
+        _internal_isEmpty() {
             return this._private__maxValue === this._private__minValue || Number.isNaN(this._private__maxValue) || Number.isNaN(this._private__minValue);
-        };
-        PriceRangeImpl.prototype._internal_merge = function (anotherRange) {
+        }
+        _internal_merge(anotherRange) {
             if (anotherRange === null) {
                 return this;
             }
             return new PriceRangeImpl(Math.min(this._internal_minValue(), anotherRange._internal_minValue()), Math.max(this._internal_maxValue(), anotherRange._internal_maxValue()));
-        };
-        PriceRangeImpl.prototype._internal_scaleAroundCenter = function (coeff) {
+        }
+        _internal_scaleAroundCenter(coeff) {
             if (!isNumber(coeff)) {
                 return;
             }
-            var delta = this._private__maxValue - this._private__minValue;
+            const delta = this._private__maxValue - this._private__minValue;
             if (delta === 0) {
                 return;
             }
-            var center = (this._private__maxValue + this._private__minValue) * 0.5;
-            var maxDelta = this._private__maxValue - center;
-            var minDelta = this._private__minValue - center;
+            const center = (this._private__maxValue + this._private__minValue) * 0.5;
+            let maxDelta = this._private__maxValue - center;
+            let minDelta = this._private__minValue - center;
             maxDelta *= coeff;
             minDelta *= coeff;
             this._private__maxValue = center + maxDelta;
             this._private__minValue = center + minDelta;
-        };
-        PriceRangeImpl.prototype._internal_shift = function (delta) {
+        }
+        _internal_shift(delta) {
             if (!isNumber(delta)) {
                 return;
             }
             this._private__maxValue += delta;
             this._private__minValue += delta;
-        };
-        PriceRangeImpl.prototype._internal_toRaw = function () {
+        }
+        _internal_toRaw() {
             return {
                 minValue: this._private__minValue,
                 maxValue: this._private__maxValue,
             };
-        };
-        PriceRangeImpl._internal_fromRaw = function (raw) {
+        }
+        static _internal_fromRaw(raw) {
             return (raw === null) ? null : new PriceRangeImpl(raw.minValue, raw.maxValue);
-        };
-        return PriceRangeImpl;
-    }());
+        }
+    }
 
-    var AutoscaleInfoImpl = /** @class */ (function () {
-        function AutoscaleInfoImpl(priceRange, margins) {
+    class AutoscaleInfoImpl {
+        constructor(priceRange, margins) {
             this._private__priceRange = priceRange;
             this._private__margins = margins || null;
         }
-        AutoscaleInfoImpl.prototype._internal_priceRange = function () {
+        _internal_priceRange() {
             return this._private__priceRange;
-        };
-        AutoscaleInfoImpl.prototype._internal_margins = function () {
+        }
+        _internal_margins() {
             return this._private__margins;
-        };
-        AutoscaleInfoImpl.prototype._internal_toRaw = function () {
+        }
+        _internal_toRaw() {
             if (this._private__priceRange === null) {
                 return null;
             }
@@ -3755,28 +3722,25 @@
                 priceRange: this._private__priceRange._internal_toRaw(),
                 margins: this._private__margins || undefined,
             };
-        };
-        AutoscaleInfoImpl._internal_fromRaw = function (raw) {
+        }
+        static _internal_fromRaw(raw) {
             return (raw === null) ? null : new AutoscaleInfoImpl(PriceRangeImpl._internal_fromRaw(raw.priceRange), raw.margins);
-        };
-        return AutoscaleInfoImpl;
-    }());
+        }
+    }
 
-    var CustomPriceLinePaneView = /** @class */ (function (_super) {
-        __extends(CustomPriceLinePaneView, _super);
-        function CustomPriceLinePaneView(series, priceLine) {
-            var _this = _super.call(this, series) || this;
-            _this._private__priceLine = priceLine;
-            return _this;
+    class CustomPriceLinePaneView extends SeriesHorizontalLinePaneView {
+        constructor(series, priceLine) {
+            super(series);
+            this._private__priceLine = priceLine;
         }
-        CustomPriceLinePaneView.prototype._internal__updateImpl = function (height, width) {
-            var data = this._internal__lineRendererData;
+        _internal__updateImpl(height, width) {
+            const data = this._internal__lineRendererData;
             data._internal_visible = false;
-            var lineOptions = this._private__priceLine._internal_options();
+            const lineOptions = this._private__priceLine._internal_options();
             if (!this._internal__series._internal_visible() || !lineOptions.lineVisible) {
                 return;
             }
-            var y = this._private__priceLine._internal_yCoord();
+            const y = this._private__priceLine._internal_yCoord();
             if (y === null) {
                 return;
             }
@@ -3787,29 +3751,26 @@
             data._internal_height = height;
             data._internal_lineWidth = lineOptions.lineWidth;
             data._internal_lineStyle = lineOptions.lineStyle;
-        };
-        return CustomPriceLinePaneView;
-    }(SeriesHorizontalLinePaneView));
-
-    var CustomPriceLinePriceAxisView = /** @class */ (function (_super) {
-        __extends(CustomPriceLinePriceAxisView, _super);
-        function CustomPriceLinePriceAxisView(series, priceLine) {
-            var _this = _super.call(this) || this;
-            _this._private__series = series;
-            _this._private__priceLine = priceLine;
-            return _this;
-        }
-        CustomPriceLinePriceAxisView.prototype._internal__updateRendererData = function (axisRendererData, paneRendererData, commonData) {
+        }
+    }
+
+    class CustomPriceLinePriceAxisView extends PriceAxisView {
+        constructor(series, priceLine) {
+            super();
+            this._private__series = series;
+            this._private__priceLine = priceLine;
+        }
+        _internal__updateRendererData(axisRendererData, paneRendererData, commonData) {
             axisRendererData._internal_visible = false;
             paneRendererData._internal_visible = false;
-            var options = this._private__priceLine._internal_options();
-            var labelVisible = options.axisLabelVisible;
-            var showPaneLabel = options.title !== '';
-            var series = this._private__series;
+            const options = this._private__priceLine._internal_options();
+            const labelVisible = options.axisLabelVisible;
+            const showPaneLabel = options.title !== '';
+            const series = this._private__series;
             if (!labelVisible || !series._internal_visible()) {
                 return;
             }
-            var y = this._private__priceLine._internal_yCoord();
+            const y = this._private__priceLine._internal_yCoord();
             if (y === null) {
                 return;
             }
@@ -3818,279 +3779,296 @@
                 paneRendererData._internal_visible = true;
             }
             paneRendererData._internal_borderColor = series._internal_model()._internal_backgroundColorAtYPercentFromTop(y / series._internal_priceScale()._internal_height());
-            axisRendererData._internal_text = series._internal_priceScale()._internal_formatPriceAbsolute(options.price);
+            axisRendererData._internal_text = this._private__formatPrice(options.price);
             axisRendererData._internal_visible = true;
-            var colors = generateContrastColors(options.color);
+            const colors = generateContrastColors(options.color);
             commonData._internal_background = colors._internal_background;
             commonData._internal_color = colors._internal_foreground;
             commonData._internal_coordinate = y;
-        };
-        return CustomPriceLinePriceAxisView;
-    }(PriceAxisView));
+        }
+        _private__formatPrice(price) {
+            const firstValue = this._private__series._internal_firstValue();
+            if (firstValue === null) {
+                return '';
+            }
+            return this._private__series._internal_priceScale()._internal_formatPrice(price, firstValue._internal_value);
+        }
+    }
 
-    var CustomPriceLine = /** @class */ (function () {
-        function CustomPriceLine(series, options) {
+    class CustomPriceLine {
+        constructor(series, options) {
             this._private__series = series;
             this._private__options = options;
             this._private__priceLineView = new CustomPriceLinePaneView(series, this);
             this._private__priceAxisView = new CustomPriceLinePriceAxisView(series, this);
             this._private__panePriceAxisView = new PanePriceAxisView(this._private__priceAxisView, series, series._internal_model());
         }
-        CustomPriceLine.prototype._internal_applyOptions = function (options) {
+        _internal_applyOptions(options) {
             merge(this._private__options, options);
             this._internal_update();
             this._private__series._internal_model()._internal_lightUpdate();
-        };
-        CustomPriceLine.prototype._internal_options = function () {
+        }
+        _internal_options() {
             return this._private__options;
-        };
-        CustomPriceLine.prototype._internal_paneViews = function () {
-            return [
-                this._private__priceLineView,
-                this._private__panePriceAxisView,
-            ];
-        };
-        CustomPriceLine.prototype._internal_priceAxisView = function () {
+        }
+        _internal_paneView() {
+            return this._private__priceLineView;
+        }
+        _internal_labelPaneView() {
+            return this._private__panePriceAxisView;
+        }
+        _internal_priceAxisView() {
             return this._private__priceAxisView;
-        };
-        CustomPriceLine.prototype._internal_update = function () {
+        }
+        _internal_update() {
             this._private__priceLineView._internal_update();
             this._private__priceAxisView._internal_update();
-        };
-        CustomPriceLine.prototype._internal_yCoord = function () {
-            var series = this._private__series;
-            var priceScale = series._internal_priceScale();
-            var timeScale = series._internal_model()._internal_timeScale();
+        }
+        _internal_yCoord() {
+            const series = this._private__series;
+            const priceScale = series._internal_priceScale();
+            const timeScale = series._internal_model()._internal_timeScale();
             if (timeScale._internal_isEmpty() || priceScale._internal_isEmpty()) {
                 return null;
             }
-            var firstValue = series._internal_firstValue();
+            const firstValue = series._internal_firstValue();
             if (firstValue === null) {
                 return null;
             }
             return priceScale._internal_priceToCoordinate(this._private__options.price, firstValue._internal_value);
-        };
-        return CustomPriceLine;
-    }());
+        }
+    }
 
-    var PriceDataSource = /** @class */ (function (_super) {
-        __extends(PriceDataSource, _super);
-        function PriceDataSource(model) {
-            var _this = _super.call(this) || this;
-            _this._private__model = model;
-            return _this;
+    class PriceDataSource extends DataSource {
+        constructor(model) {
+            super();
+            this._private__model = model;
         }
-        PriceDataSource.prototype._internal_model = function () {
+        _internal_model() {
             return this._private__model;
-        };
-        return PriceDataSource;
-    }(DataSource));
+        }
+    }
 
-    var emptyResult = {
-        _internal_barColor: '',
-        _internal_barBorderColor: '',
-        _internal_barWickColor: '',
+    const barStyleFnMap = {
+        // eslint-disable-next-line @typescript-eslint/naming-convention
+        Bar: (findBar, barStyle, barIndex, precomputedBars) => {
+            var _a;
+            const upColor = barStyle.upColor;
+            const downColor = barStyle.downColor;
+            const currentBar = ensureNotNull(findBar(barIndex, precomputedBars));
+            const isUp = ensure(currentBar._internal_value[0 /* PlotRowValueIndex.Open */]) <= ensure(currentBar._internal_value[3 /* PlotRowValueIndex.Close */]);
+            return {
+                _internal_barColor: (_a = currentBar._internal_color) !== null && _a !== void 0 ? _a : (isUp ? upColor : downColor),
+            };
+        },
+        // eslint-disable-next-line @typescript-eslint/naming-convention
+        Candlestick: (findBar, candlestickStyle, barIndex, precomputedBars) => {
+            var _a, _b, _c;
+            const upColor = candlestickStyle.upColor;
+            const downColor = candlestickStyle.downColor;
+            const borderUpColor = candlestickStyle.borderUpColor;
+            const borderDownColor = candlestickStyle.borderDownColor;
+            const wickUpColor = candlestickStyle.wickUpColor;
+            const wickDownColor = candlestickStyle.wickDownColor;
+            const currentBar = ensureNotNull(findBar(barIndex, precomputedBars));
+            const isUp = ensure(currentBar._internal_value[0 /* PlotRowValueIndex.Open */]) <= ensure(currentBar._internal_value[3 /* PlotRowValueIndex.Close */]);
+            return {
+                _internal_barColor: (_a = currentBar._internal_color) !== null && _a !== void 0 ? _a : (isUp ? upColor : downColor),
+                _internal_barBorderColor: (_b = currentBar._internal_borderColor) !== null && _b !== void 0 ? _b : (isUp ? borderUpColor : borderDownColor),
+                _internal_barWickColor: (_c = currentBar._internal_wickColor) !== null && _c !== void 0 ? _c : (isUp ? wickUpColor : wickDownColor),
+            };
+        },
+        // eslint-disable-next-line @typescript-eslint/naming-convention
+        Area: (findBar, areaStyle, barIndex, precomputedBars) => {
+            var _a, _b, _c, _d;
+            const currentBar = ensureNotNull(findBar(barIndex, precomputedBars));
+            return {
+                _internal_barColor: (_a = currentBar._internal_lineColor) !== null && _a !== void 0 ? _a : areaStyle.lineColor,
+                _internal_lineColor: (_b = currentBar._internal_lineColor) !== null && _b !== void 0 ? _b : areaStyle.lineColor,
+                _internal_topColor: (_c = currentBar._internal_topColor) !== null && _c !== void 0 ? _c : areaStyle.topColor,
+                _internal_bottomColor: (_d = currentBar._internal_bottomColor) !== null && _d !== void 0 ? _d : areaStyle.bottomColor,
+            };
+        },
+        // eslint-disable-next-line @typescript-eslint/naming-convention
+        Baseline: (findBar, baselineStyle, barIndex, precomputedBars) => {
+            var _a, _b, _c, _d, _e, _f;
+            const currentBar = ensureNotNull(findBar(barIndex, precomputedBars));
+            const isAboveBaseline = currentBar._internal_value[3 /* PlotRowValueIndex.Close */] >= baselineStyle.baseValue.price;
+            return {
+                _internal_barColor: isAboveBaseline ? baselineStyle.topLineColor : baselineStyle.bottomLineColor,
+                _internal_topLineColor: (_a = currentBar._internal_topLineColor) !== null && _a !== void 0 ? _a : baselineStyle.topLineColor,
+                _internal_bottomLineColor: (_b = currentBar._internal_bottomLineColor) !== null && _b !== void 0 ? _b : baselineStyle.bottomLineColor,
+                _internal_topFillColor1: (_c = currentBar._internal_topFillColor1) !== null && _c !== void 0 ? _c : baselineStyle.topFillColor1,
+                _internal_topFillColor2: (_d = currentBar._internal_topFillColor2) !== null && _d !== void 0 ? _d : baselineStyle.topFillColor2,
+                _internal_bottomFillColor1: (_e = currentBar._internal_bottomFillColor1) !== null && _e !== void 0 ? _e : baselineStyle.bottomFillColor1,
+                _internal_bottomFillColor2: (_f = currentBar._internal_bottomFillColor2) !== null && _f !== void 0 ? _f : baselineStyle.bottomFillColor2,
+            };
+        },
+        // eslint-disable-next-line @typescript-eslint/naming-convention
+        Line: (findBar, lineStyle, barIndex, precomputedBars) => {
+            var _a, _b;
+            const currentBar = ensureNotNull(findBar(barIndex, precomputedBars));
+            return {
+                _internal_barColor: (_a = currentBar._internal_color) !== null && _a !== void 0 ? _a : lineStyle.color,
+                _internal_lineColor: (_b = currentBar._internal_color) !== null && _b !== void 0 ? _b : lineStyle.color,
+            };
+        },
+        // eslint-disable-next-line @typescript-eslint/naming-convention
+        Histogram: (findBar, histogramStyle, barIndex, precomputedBars) => {
+            var _a;
+            const currentBar = ensureNotNull(findBar(barIndex, precomputedBars));
+            return {
+                _internal_barColor: (_a = currentBar._internal_color) !== null && _a !== void 0 ? _a : histogramStyle.color,
+            };
+        },
     };
-    var SeriesBarColorer = /** @class */ (function () {
-        function SeriesBarColorer(series) {
+    class SeriesBarColorer {
+        constructor(series) {
+            this._private__findBar = (barIndex, precomputedBars) => {
+                if (precomputedBars !== undefined) {
+                    return precomputedBars._internal_value;
+                }
+                return this._private__series._internal_bars()._internal_valueAt(barIndex);
+            };
             this._private__series = series;
+            this._private__styleGetter = barStyleFnMap[series._internal_seriesType()];
         }
-        SeriesBarColorer.prototype._internal_barStyle = function (barIndex, precomputedBars) {
+        _internal_barStyle(barIndex, precomputedBars) {
             // precomputedBars: {value: [Array BarValues], previousValue: [Array BarValues] | undefined}
             // Used to avoid binary search if bars are already known
-            var targetType = this._private__series._internal_seriesType();
-            var seriesOptions = this._private__series._internal_options();
-            switch (targetType) {
-                case 'Line':
-                    return this._private__lineStyle(seriesOptions, barIndex, precomputedBars);
-                case 'Area':
-                    return this._private__areaStyle(seriesOptions);
-                case 'Baseline':
-                    return this._private__baselineStyle(seriesOptions, barIndex, precomputedBars);
-                case 'Bar':
-                    return this._private__barStyle(seriesOptions, barIndex, precomputedBars);
-                case 'Candlestick':
-                    return this._private__candleStyle(seriesOptions, barIndex, precomputedBars);
-                case 'Histogram':
-                    return this._private__histogramStyle(seriesOptions, barIndex, precomputedBars);
-            }
-            throw new Error('Unknown chart style');
-        };
-        SeriesBarColorer.prototype._private__barStyle = function (barStyle, barIndex, precomputedBars) {
-            var result = __assign({}, emptyResult);
-            var upColor = barStyle.upColor;
-            var downColor = barStyle.downColor;
-            var borderUpColor = upColor;
-            var borderDownColor = downColor;
-            var currentBar = ensureNotNull(this._private__findBar(barIndex, precomputedBars));
-            var isUp = ensure(currentBar._internal_value[0 /* Open */]) <= ensure(currentBar._internal_value[3 /* Close */]);
-            if (currentBar._internal_color !== undefined) {
-                result._internal_barColor = currentBar._internal_color;
-                result._internal_barBorderColor = currentBar._internal_color;
-            }
-            else {
-                result._internal_barColor = isUp ? upColor : downColor;
-                result._internal_barBorderColor = isUp ? borderUpColor : borderDownColor;
-            }
-            return result;
-        };
-        SeriesBarColorer.prototype._private__candleStyle = function (candlestickStyle, barIndex, precomputedBars) {
-            var _a, _b, _c;
-            var result = __assign({}, emptyResult);
-            var upColor = candlestickStyle.upColor;
-            var downColor = candlestickStyle.downColor;
-            var borderUpColor = candlestickStyle.borderUpColor;
-            var borderDownColor = candlestickStyle.borderDownColor;
-            var wickUpColor = candlestickStyle.wickUpColor;
-            var wickDownColor = candlestickStyle.wickDownColor;
-            var currentBar = ensureNotNull(this._private__findBar(barIndex, precomputedBars));
-            var isUp = ensure(currentBar._internal_value[0 /* Open */]) <= ensure(currentBar._internal_value[3 /* Close */]);
-            result._internal_barColor = (_a = currentBar._internal_color) !== null && _a !== void 0 ? _a : (isUp ? upColor : downColor);
-            result._internal_barBorderColor = (_b = currentBar._internal_borderColor) !== null && _b !== void 0 ? _b : (isUp ? borderUpColor : borderDownColor);
-            result._internal_barWickColor = (_c = currentBar._internal_wickColor) !== null && _c !== void 0 ? _c : (isUp ? wickUpColor : wickDownColor);
-            return result;
-        };
-        SeriesBarColorer.prototype._private__areaStyle = function (areaStyle) {
-            return __assign(__assign({}, emptyResult), { _internal_barColor: areaStyle.lineColor });
-        };
-        SeriesBarColorer.prototype._private__baselineStyle = function (baselineStyle, barIndex, precomputedBars) {
-            var currentBar = ensureNotNull(this._private__findBar(barIndex, precomputedBars));
-            var isAboveBaseline = currentBar._internal_value[3 /* Close */] >= baselineStyle.baseValue.price;
-            return __assign(__assign({}, emptyResult), { _internal_barColor: isAboveBaseline ? baselineStyle.topLineColor : baselineStyle.bottomLineColor });
-        };
-        SeriesBarColorer.prototype._private__lineStyle = function (lineStyle, barIndex, precomputedBars) {
-            var _a;
-            var currentBar = ensureNotNull(this._private__findBar(barIndex, precomputedBars));
-            return __assign(__assign({}, emptyResult), { _internal_barColor: (_a = currentBar._internal_color) !== null && _a !== void 0 ? _a : lineStyle.color });
-        };
-        SeriesBarColorer.prototype._private__histogramStyle = function (histogramStyle, barIndex, precomputedBars) {
-            var result = __assign({}, emptyResult);
-            var currentBar = ensureNotNull(this._private__findBar(barIndex, precomputedBars));
-            result._internal_barColor = currentBar._internal_color !== undefined ? currentBar._internal_color : histogramStyle.color;
-            return result;
-        };
-        SeriesBarColorer.prototype._private__findBar = function (barIndex, precomputedBars) {
-            if (precomputedBars !== undefined) {
-                return precomputedBars._internal_value;
-            }
-            return this._private__series._internal_bars()._internal_valueAt(barIndex);
-        };
-        return SeriesBarColorer;
-    }());
+            return this._private__styleGetter(this._private__findBar, this._private__series._internal_options(), barIndex, precomputedBars);
+        }
+    }
 
+    /**
+     * Search direction if no data found at provided index
+     */
+    var MismatchDirection;
+    (function (MismatchDirection) {
+        /**
+         * Search the nearest left item
+         */
+        MismatchDirection[MismatchDirection["NearestLeft"] = -1] = "NearestLeft";
+        /**
+         * Do not search
+         */
+        MismatchDirection[MismatchDirection["None"] = 0] = "None";
+        /**
+         * Search the nearest right item
+         */
+        MismatchDirection[MismatchDirection["NearestRight"] = 1] = "NearestRight";
+    })(MismatchDirection || (MismatchDirection = {}));
     // TODO: think about changing it dynamically
-    var CHUNK_SIZE = 30;
+    const CHUNK_SIZE = 30;
     /**
      * PlotList is an array of plot rows
      * each plot row consists of key (index in timescale) and plot value map
      */
-    var PlotList = /** @class */ (function () {
-        function PlotList() {
+    class PlotList {
+        constructor() {
             this._private__items = [];
             this._private__minMaxCache = new Map();
             this._private__rowSearchCache = new Map();
         }
         // @returns Last row
-        PlotList.prototype._internal_last = function () {
+        _internal_last() {
             return this._internal_size() > 0 ? this._private__items[this._private__items.length - 1] : null;
-        };
-        PlotList.prototype._internal_firstIndex = function () {
+        }
+        _internal_firstIndex() {
             return this._internal_size() > 0 ? this._private__indexAt(0) : null;
-        };
-        PlotList.prototype._internal_lastIndex = function () {
+        }
+        _internal_lastIndex() {
             return this._internal_size() > 0 ? this._private__indexAt((this._private__items.length - 1)) : null;
-        };
-        PlotList.prototype._internal_size = function () {
+        }
+        _internal_size() {
             return this._private__items.length;
-        };
-        PlotList.prototype._internal_isEmpty = function () {
+        }
+        _internal_isEmpty() {
             return this._internal_size() === 0;
-        };
-        PlotList.prototype._internal_contains = function (index) {
-            return this._private__search(index, 0 /* Exact */) !== null;
-        };
-        PlotList.prototype._internal_valueAt = function (index) {
+        }
+        _internal_contains(index) {
+            return this._private__search(index, 0 /* MismatchDirection.None */) !== null;
+        }
+        _internal_valueAt(index) {
             return this._internal_search(index);
-        };
-        PlotList.prototype._internal_search = function (index, searchMode) {
-            if (searchMode === void 0) { searchMode = 0 /* Exact */; }
-            var pos = this._private__search(index, searchMode);
+        }
+        _internal_search(index, searchMode = 0 /* MismatchDirection.None */) {
+            const pos = this._private__search(index, searchMode);
             if (pos === null) {
                 return null;
             }
-            return __assign(__assign({}, this._private__valueAt(pos)), { _internal_index: this._private__indexAt(pos) });
-        };
-        PlotList.prototype._internal_rows = function () {
+            return Object.assign(Object.assign({}, this._private__valueAt(pos)), { _internal_index: this._private__indexAt(pos) });
+        }
+        _internal_rows() {
             return this._private__items;
-        };
-        PlotList.prototype._internal_minMaxOnRangeCached = function (start, end, plots) {
+        }
+        _internal_minMaxOnRangeCached(start, end, plots) {
             // this code works for single series only
             // could fail after whitespaces implementation
             if (this._internal_isEmpty()) {
                 return null;
             }
-            var result = null;
-            for (var _i = 0, plots_1 = plots; _i < plots_1.length; _i++) {
-                var plot = plots_1[_i];
-                var plotMinMax = this._private__minMaxOnRangeCachedImpl(start, end, plot);
+            let result = null;
+            for (const plot of plots) {
+                const plotMinMax = this._private__minMaxOnRangeCachedImpl(start, end, plot);
                 result = mergeMinMax(result, plotMinMax);
             }
             return result;
-        };
-        PlotList.prototype._internal_setData = function (plotRows) {
+        }
+        _internal_setData(plotRows) {
             this._private__rowSearchCache.clear();
             this._private__minMaxCache.clear();
             this._private__items = plotRows;
-        };
-        PlotList.prototype._private__indexAt = function (offset) {
+        }
+        _private__indexAt(offset) {
             return this._private__items[offset]._internal_index;
-        };
-        PlotList.prototype._private__valueAt = function (offset) {
+        }
+        _private__valueAt(offset) {
             return this._private__items[offset];
-        };
-        PlotList.prototype._private__search = function (index, searchMode) {
-            var exactPos = this._private__bsearch(index);
-            if (exactPos === null && searchMode !== 0 /* Exact */) {
+        }
+        _private__search(index, searchMode) {
+            const exactPos = this._private__bsearch(index);
+            if (exactPos === null && searchMode !== 0 /* MismatchDirection.None */) {
                 switch (searchMode) {
-                    case -1 /* NearestLeft */:
+                    case -1 /* MismatchDirection.NearestLeft */:
                         return this._private__searchNearestLeft(index);
-                    case 1 /* NearestRight */:
+                    case 1 /* MismatchDirection.NearestRight */:
                         return this._private__searchNearestRight(index);
                     default:
                         throw new TypeError('Unknown search mode');
                 }
             }
             return exactPos;
-        };
-        PlotList.prototype._private__searchNearestLeft = function (index) {
-            var nearestLeftPos = this._private__lowerbound(index);
+        }
+        _private__searchNearestLeft(index) {
+            let nearestLeftPos = this._private__lowerbound(index);
             if (nearestLeftPos > 0) {
                 nearestLeftPos = nearestLeftPos - 1;
             }
             return (nearestLeftPos !== this._private__items.length && this._private__indexAt(nearestLeftPos) < index) ? nearestLeftPos : null;
-        };
-        PlotList.prototype._private__searchNearestRight = function (index) {
-            var nearestRightPos = this._private__upperbound(index);
+        }
+        _private__searchNearestRight(index) {
+            const nearestRightPos = this._private__upperbound(index);
             return (nearestRightPos !== this._private__items.length && index < this._private__indexAt(nearestRightPos)) ? nearestRightPos : null;
-        };
-        PlotList.prototype._private__bsearch = function (index) {
-            var start = this._private__lowerbound(index);
+        }
+        _private__bsearch(index) {
+            const start = this._private__lowerbound(index);
             if (start !== this._private__items.length && !(index < this._private__items[start]._internal_index)) {
                 return start;
             }
             return null;
-        };
-        PlotList.prototype._private__lowerbound = function (index) {
-            return lowerbound(this._private__items, index, function (a, b) { return a._internal_index < b; });
-        };
-        PlotList.prototype._private__upperbound = function (index) {
-            return upperbound(this._private__items, index, function (a, b) { return b._internal_index > a; });
-        };
-        PlotList.prototype._private__plotMinMax = function (startIndex, endIndexExclusive, plotIndex) {
-            var result = null;
-            for (var i = startIndex; i < endIndexExclusive; i++) {
-                var values = this._private__items[i]._internal_value;
-                var v = values[plotIndex];
+        }
+        _private__lowerbound(index) {
+            return lowerbound(this._private__items, index, (a, b) => a._internal_index < b);
+        }
+        _private__upperbound(index) {
+            return upperbound(this._private__items, index, (a, b) => b._internal_index > a);
+        }
+        _private__plotMinMax(startIndex, endIndexExclusive, plotIndex) {
+            let result = null;
+            for (let i = startIndex; i < endIndexExclusive; i++) {
+                const values = this._private__items[i]._internal_value;
+                const v = values[plotIndex];
                 if (Number.isNaN(v)) {
                     continue;
                 }
@@ -4107,39 +4085,39 @@
                 }
             }
             return result;
-        };
-        PlotList.prototype._private__minMaxOnRangeCachedImpl = function (start, end, plotIndex) {
+        }
+        _private__minMaxOnRangeCachedImpl(start, end, plotIndex) {
             // this code works for single series only
             // could fail after whitespaces implementation
             if (this._internal_isEmpty()) {
                 return null;
             }
-            var result = null;
+            let result = null;
             // assume that bar indexes only increase
-            var firstIndex = ensureNotNull(this._internal_firstIndex());
-            var lastIndex = ensureNotNull(this._internal_lastIndex());
-            var s = Math.max(start, firstIndex);
-            var e = Math.min(end, lastIndex);
-            var cachedLow = Math.ceil(s / CHUNK_SIZE) * CHUNK_SIZE;
-            var cachedHigh = Math.max(cachedLow, Math.floor(e / CHUNK_SIZE) * CHUNK_SIZE);
+            const firstIndex = ensureNotNull(this._internal_firstIndex());
+            const lastIndex = ensureNotNull(this._internal_lastIndex());
+            const s = Math.max(start, firstIndex);
+            const e = Math.min(end, lastIndex);
+            const cachedLow = Math.ceil(s / CHUNK_SIZE) * CHUNK_SIZE;
+            const cachedHigh = Math.max(cachedLow, Math.floor(e / CHUNK_SIZE) * CHUNK_SIZE);
             {
-                var startIndex = this._private__lowerbound(s);
-                var endIndex = this._private__upperbound(Math.min(e, cachedLow, end)); // non-inclusive end
-                var plotMinMax = this._private__plotMinMax(startIndex, endIndex, plotIndex);
+                const startIndex = this._private__lowerbound(s);
+                const endIndex = this._private__upperbound(Math.min(e, cachedLow, end)); // non-inclusive end
+                const plotMinMax = this._private__plotMinMax(startIndex, endIndex, plotIndex);
                 result = mergeMinMax(result, plotMinMax);
             }
-            var minMaxCache = this._private__minMaxCache.get(plotIndex);
+            let minMaxCache = this._private__minMaxCache.get(plotIndex);
             if (minMaxCache === undefined) {
                 minMaxCache = new Map();
                 this._private__minMaxCache.set(plotIndex, minMaxCache);
             }
             // now go cached
-            for (var c = Math.max(cachedLow + 1, s); c < cachedHigh; c += CHUNK_SIZE) {
-                var chunkIndex = Math.floor(c / CHUNK_SIZE);
-                var chunkMinMax = minMaxCache.get(chunkIndex);
+            for (let c = Math.max(cachedLow + 1, s); c < cachedHigh; c += CHUNK_SIZE) {
+                const chunkIndex = Math.floor(c / CHUNK_SIZE);
+                let chunkMinMax = minMaxCache.get(chunkIndex);
                 if (chunkMinMax === undefined) {
-                    var chunkStart = this._private__lowerbound(chunkIndex * CHUNK_SIZE);
-                    var chunkEnd = this._private__upperbound((chunkIndex + 1) * CHUNK_SIZE - 1);
+                    const chunkStart = this._private__lowerbound(chunkIndex * CHUNK_SIZE);
+                    const chunkEnd = this._private__upperbound((chunkIndex + 1) * CHUNK_SIZE - 1);
                     chunkMinMax = this._private__plotMinMax(chunkStart, chunkEnd, plotIndex);
                     minMaxCache.set(chunkIndex, chunkMinMax);
                 }
@@ -4147,15 +4125,14 @@
             }
             // tail
             {
-                var startIndex = this._private__lowerbound(cachedHigh);
-                var endIndex = this._private__upperbound(e); // non-inclusive end
-                var plotMinMax = this._private__plotMinMax(startIndex, endIndex, plotIndex);
+                const startIndex = this._private__lowerbound(cachedHigh);
+                const endIndex = this._private__upperbound(e); // non-inclusive end
+                const plotMinMax = this._private__plotMinMax(startIndex, endIndex, plotIndex);
                 result = mergeMinMax(result, plotMinMax);
             }
             return result;
-        };
-        return PlotList;
-    }());
+        }
+    }
     function mergeMinMax(first, second) {
         if (first === null) {
             return second;
@@ -4166,8 +4143,8 @@
             }
             else {
                 // merge MinMax values
-                var min = Math.min(first._internal_min, second._internal_min);
-                var max = Math.max(first._internal_max, second._internal_max);
+                const min = Math.min(first._internal_min, second._internal_min);
+                const max = Math.max(first._internal_max, second._internal_max);
                 return { _internal_min: min, _internal_max: max };
             }
         }
@@ -4177,56 +4154,54 @@
         return new PlotList();
     }
 
-    var Series = /** @class */ (function (_super) {
-        __extends(Series, _super);
-        function Series(model, options, seriesType) {
-            var _this = _super.call(this, model) || this;
-            _this._private__data = createSeriesPlotList();
-            _this._private__priceLineView = new SeriesPriceLinePaneView(_this);
-            _this._private__customPriceLines = [];
-            _this._private__baseHorizontalLineView = new SeriesHorizontalBaseLinePaneView(_this);
-            _this._private__lastPriceAnimationPaneView = null;
-            _this._private__barColorerCache = null;
-            _this._private__markers = [];
-            _this._private__indexedMarkers = [];
-            _this._private__animationTimeoutId = null;
-            _this._private__options = options;
-            _this._private__seriesType = seriesType;
-            var priceAxisView = new SeriesPriceAxisView(_this);
-            _this._private__priceAxisViews = [priceAxisView];
-            _this._private__panePriceAxisView = new PanePriceAxisView(priceAxisView, _this, model);
+    class Series extends PriceDataSource {
+        constructor(model, options, seriesType) {
+            super(model);
+            this._private__data = createSeriesPlotList();
+            this._private__priceLineView = new SeriesPriceLinePaneView(this);
+            this._private__customPriceLines = [];
+            this._private__baseHorizontalLineView = new SeriesHorizontalBaseLinePaneView(this);
+            this._private__lastPriceAnimationPaneView = null;
+            this._private__barColorerCache = null;
+            this._private__markers = [];
+            this._private__indexedMarkers = [];
+            this._private__animationTimeoutId = null;
+            this._private__options = options;
+            this._private__seriesType = seriesType;
+            const priceAxisView = new SeriesPriceAxisView(this);
+            this._private__priceAxisViews = [priceAxisView];
+            this._private__panePriceAxisView = new PanePriceAxisView(priceAxisView, this, model);
             if (seriesType === 'Area' || seriesType === 'Line' || seriesType === 'Baseline') {
-                _this._private__lastPriceAnimationPaneView = new SeriesLastPriceAnimationPaneView(_this);
+                this._private__lastPriceAnimationPaneView = new SeriesLastPriceAnimationPaneView(this);
             }
-            _this._private__recreateFormatter();
-            _this._private__recreatePaneViews();
-            return _this;
+            this._private__recreateFormatter();
+            this._private__recreatePaneViews();
         }
-        Series.prototype._internal_destroy = function () {
+        _internal_destroy() {
             if (this._private__animationTimeoutId !== null) {
                 clearTimeout(this._private__animationTimeoutId);
             }
-        };
-        Series.prototype._internal_priceLineColor = function (lastBarColor) {
+        }
+        _internal_priceLineColor(lastBarColor) {
             return this._private__options.priceLineColor || lastBarColor;
-        };
-        Series.prototype._internal_lastValueData = function (globalLast) {
-            var noDataRes = { _internal_noData: true };
-            var priceScale = this._internal_priceScale();
+        }
+        _internal_lastValueData(globalLast) {
+            const noDataRes = { _internal_noData: true };
+            const priceScale = this._internal_priceScale();
             if (this._internal_model()._internal_timeScale()._internal_isEmpty() || priceScale._internal_isEmpty() || this._private__data._internal_isEmpty()) {
                 return noDataRes;
             }
-            var visibleBars = this._internal_model()._internal_timeScale()._internal_visibleStrictRange();
-            var firstValue = this._internal_firstValue();
+            const visibleBars = this._internal_model()._internal_timeScale()._internal_visibleStrictRange();
+            const firstValue = this._internal_firstValue();
             if (visibleBars === null || firstValue === null) {
                 return noDataRes;
             }
             // find range of bars inside range
             // TODO: make it more optimal
-            var bar;
-            var lastIndex;
+            let bar;
+            let lastIndex;
             if (globalLast) {
-                var lastBar = this._private__data._internal_last();
+                const lastBar = this._private__data._internal_last();
                 if (lastBar === null) {
                     return noDataRes;
                 }
@@ -4234,7 +4209,7 @@
                 lastIndex = lastBar._internal_index;
             }
             else {
-                var endBar = this._private__data._internal_search(visibleBars._internal_right(), -1 /* NearestLeft */);
+                const endBar = this._private__data._internal_search(visibleBars._internal_right(), -1 /* MismatchDirection.NearestLeft */);
                 if (endBar === null) {
                     return noDataRes;
                 }
@@ -4244,10 +4219,10 @@
                 }
                 lastIndex = endBar._internal_index;
             }
-            var price = bar._internal_value[3 /* Close */];
-            var barColorer = this._internal_barColorer();
-            var style = barColorer._internal_barStyle(lastIndex, { _internal_value: bar });
-            var coordinate = priceScale._internal_priceToCoordinate(price, firstValue._internal_value);
+            const price = bar._internal_value[3 /* PlotRowValueIndex.Close */];
+            const barColorer = this._internal_barColorer();
+            const style = barColorer._internal_barStyle(lastIndex, { _internal_value: bar });
+            const coordinate = priceScale._internal_priceToCoordinate(price, firstValue._internal_value);
             return {
                 _internal_noData: false,
                 _internal_price: price,
@@ -4258,31 +4233,24 @@
                 _internal_coordinate: coordinate,
                 _internal_index: lastIndex,
             };
-        };
-        Series.prototype._internal_barColorer = function () {
+        }
+        _internal_barColorer() {
             if (this._private__barColorerCache !== null) {
                 return this._private__barColorerCache;
             }
             this._private__barColorerCache = new SeriesBarColorer(this);
             return this._private__barColorerCache;
-        };
-        Series.prototype._internal_options = function () {
+        }
+        _internal_options() {
             return this._private__options;
-        };
-        Series.prototype._internal_applyOptions = function (options) {
-            var targetPriceScaleId = options.priceScaleId;
+        }
+        _internal_applyOptions(options) {
+            const targetPriceScaleId = options.priceScaleId;
             if (targetPriceScaleId !== undefined && targetPriceScaleId !== this._private__options.priceScaleId) {
                 // series cannot do it itself, ask model
                 this._internal_model()._internal_moveSeriesToScale(this, targetPriceScaleId);
             }
             merge(this._private__options, options);
-            // eslint-disable-next-line deprecation/deprecation
-            if (this._internal__priceScale !== null && options.scaleMargins !== undefined) {
-                this._internal__priceScale._internal_applyOptions({
-                    // eslint-disable-next-line deprecation/deprecation
-                    scaleMargins: options.scaleMargins,
-                });
-            }
             if (options.priceFormat !== undefined) {
                 this._private__recreateFormatter();
                 // updated formatter might affect rendering  and as a consequence of this the width of price axis might be changed
@@ -4296,8 +4264,8 @@
             // that's why we need to update crosshair as well
             this._internal_model()._internal_updateCrosshair();
             this._private__paneView._internal_update('options');
-        };
-        Series.prototype._internal_setData = function (data, updateInfo) {
+        }
+        _internal_setData(data, updateInfo) {
             this._private__data._internal_setData(data);
             this._private__recalculateMarkers();
             this._private__paneView._internal_update('data');
@@ -4310,198 +4278,201 @@
                     this._private__lastPriceAnimationPaneView._internal_onDataCleared();
                 }
             }
-            var sourcePane = this._internal_model()._internal_paneForSource(this);
+            const sourcePane = this._internal_model()._internal_paneForSource(this);
             this._internal_model()._internal_recalculatePane(sourcePane);
             this._internal_model()._internal_updateSource(this);
             this._internal_model()._internal_updateCrosshair();
             this._internal_model()._internal_lightUpdate();
-        };
-        Series.prototype._internal_setMarkers = function (data) {
-            this._private__markers = data.map(function (item) { return (__assign({}, item)); });
+        }
+        _internal_setMarkers(data) {
+            this._private__markers = data;
             this._private__recalculateMarkers();
-            var sourcePane = this._internal_model()._internal_paneForSource(this);
+            const sourcePane = this._internal_model()._internal_paneForSource(this);
             this._private__markersPaneView._internal_update('data');
             this._internal_model()._internal_recalculatePane(sourcePane);
             this._internal_model()._internal_updateSource(this);
             this._internal_model()._internal_updateCrosshair();
             this._internal_model()._internal_lightUpdate();
-        };
-        Series.prototype._internal_indexedMarkers = function () {
+        }
+        _internal_markers() {
+            return this._private__markers;
+        }
+        _internal_indexedMarkers() {
             return this._private__indexedMarkers;
-        };
-        Series.prototype._internal_createPriceLine = function (options) {
-            var result = new CustomPriceLine(this, options);
+        }
+        _internal_createPriceLine(options) {
+            const result = new CustomPriceLine(this, options);
             this._private__customPriceLines.push(result);
             this._internal_model()._internal_updateSource(this);
             return result;
-        };
-        Series.prototype._internal_removePriceLine = function (line) {
-            var index = this._private__customPriceLines.indexOf(line);
+        }
+        _internal_removePriceLine(line) {
+            const index = this._private__customPriceLines.indexOf(line);
             if (index !== -1) {
                 this._private__customPriceLines.splice(index, 1);
             }
             this._internal_model()._internal_updateSource(this);
-        };
-        Series.prototype._internal_seriesType = function () {
+        }
+        _internal_seriesType() {
             return this._private__seriesType;
-        };
-        Series.prototype._internal_firstValue = function () {
-            var bar = this._internal_firstBar();
+        }
+        _internal_firstValue() {
+            const bar = this._internal_firstBar();
             if (bar === null) {
                 return null;
             }
             return {
-                _internal_value: bar._internal_value[3 /* Close */],
+                _internal_value: bar._internal_value[3 /* PlotRowValueIndex.Close */],
                 _internal_timePoint: bar._internal_time,
             };
-        };
-        Series.prototype._internal_firstBar = function () {
-            var visibleBars = this._internal_model()._internal_timeScale()._internal_visibleStrictRange();
+        }
+        _internal_firstBar() {
+            const visibleBars = this._internal_model()._internal_timeScale()._internal_visibleStrictRange();
             if (visibleBars === null) {
                 return null;
             }
-            var startTimePoint = visibleBars._internal_left();
-            return this._private__data._internal_search(startTimePoint, 1 /* NearestRight */);
-        };
-        Series.prototype._internal_bars = function () {
+            const startTimePoint = visibleBars._internal_left();
+            return this._private__data._internal_search(startTimePoint, 1 /* MismatchDirection.NearestRight */);
+        }
+        _internal_bars() {
             return this._private__data;
-        };
-        Series.prototype._internal_dataAt = function (time) {
-            var prices = this._private__data._internal_valueAt(time);
+        }
+        _internal_dataAt(time) {
+            const prices = this._private__data._internal_valueAt(time);
             if (prices === null) {
                 return null;
             }
             if (this._private__seriesType === 'Bar' || this._private__seriesType === 'Candlestick') {
                 return {
-                    open: prices._internal_value[0 /* Open */],
-                    high: prices._internal_value[1 /* High */],
-                    low: prices._internal_value[2 /* Low */],
-                    close: prices._internal_value[3 /* Close */],
+                    _internal_open: prices._internal_value[0 /* PlotRowValueIndex.Open */],
+                    _internal_high: prices._internal_value[1 /* PlotRowValueIndex.High */],
+                    _internal_low: prices._internal_value[2 /* PlotRowValueIndex.Low */],
+                    _internal_close: prices._internal_value[3 /* PlotRowValueIndex.Close */],
                 };
             }
             else {
-                return prices._internal_value[3 /* Close */];
+                return prices._internal_value[3 /* PlotRowValueIndex.Close */];
             }
-        };
-        Series.prototype._internal_topPaneViews = function (pane) {
-            var _this = this;
-            var animationPaneView = this._private__lastPriceAnimationPaneView;
+        }
+        _internal_topPaneViews(pane) {
+            const animationPaneView = this._private__lastPriceAnimationPaneView;
             if (animationPaneView === null || !animationPaneView._internal_visible()) {
                 return [];
             }
             if (this._private__animationTimeoutId === null && animationPaneView._internal_animationActive()) {
-                this._private__animationTimeoutId = setTimeout(function () {
-                    _this._private__animationTimeoutId = null;
-                    _this._internal_model()._internal_cursorUpdate();
+                this._private__animationTimeoutId = setTimeout(() => {
+                    this._private__animationTimeoutId = null;
+                    this._internal_model()._internal_cursorUpdate();
                 }, 0);
             }
             animationPaneView._internal_invalidateStage();
             return [animationPaneView];
-        };
-        Series.prototype._internal_paneViews = function () {
-            var res = [];
+        }
+        _internal_paneViews() {
+            const res = [];
             if (!this._private__isOverlay()) {
                 res.push(this._private__baseHorizontalLineView);
             }
-            for (var _i = 0, _a = this._private__customPriceLines; _i < _a.length; _i++) {
-                var customPriceLine = _a[_i];
-                res.push.apply(res, customPriceLine._internal_paneViews());
-            }
-            res.push(this._private__paneView, this._private__priceLineView, this._private__panePriceAxisView, this._private__markersPaneView);
+            res.push(this._private__paneView, this._private__priceLineView, this._private__markersPaneView);
+            const priceLineViews = this._private__customPriceLines.map((line) => line._internal_paneView());
+            res.push(...priceLineViews);
             return res;
-        };
-        Series.prototype._internal_priceAxisViews = function (pane, priceScale) {
+        }
+        _internal_labelPaneViews(pane) {
+            return [
+                this._private__panePriceAxisView,
+                ...this._private__customPriceLines.map((line) => line._internal_labelPaneView()),
+            ];
+        }
+        _internal_priceAxisViews(pane, priceScale) {
             if (priceScale !== this._internal__priceScale && !this._private__isOverlay()) {
                 return [];
             }
-            var result = __spreadArray([], this._private__priceAxisViews, true);
-            for (var _i = 0, _a = this._private__customPriceLines; _i < _a.length; _i++) {
-                var customPriceLine = _a[_i];
+            const result = [...this._private__priceAxisViews];
+            for (const customPriceLine of this._private__customPriceLines) {
                 result.push(customPriceLine._internal_priceAxisView());
             }
             return result;
-        };
-        Series.prototype._internal_autoscaleInfo = function (startTimePoint, endTimePoint) {
-            var _this = this;
+        }
+        _internal_autoscaleInfo(startTimePoint, endTimePoint) {
             if (this._private__options.autoscaleInfoProvider !== undefined) {
-                var autoscaleInfo = this._private__options.autoscaleInfoProvider(function () {
-                    var res = _this._private__autoscaleInfoImpl(startTimePoint, endTimePoint);
+                const autoscaleInfo = this._private__options.autoscaleInfoProvider(() => {
+                    const res = this._private__autoscaleInfoImpl(startTimePoint, endTimePoint);
                     return (res === null) ? null : res._internal_toRaw();
                 });
                 return AutoscaleInfoImpl._internal_fromRaw(autoscaleInfo);
             }
             return this._private__autoscaleInfoImpl(startTimePoint, endTimePoint);
-        };
-        Series.prototype._internal_minMove = function () {
+        }
+        _internal_minMove() {
             return this._private__options.priceFormat.minMove;
-        };
-        Series.prototype._internal_formatter = function () {
+        }
+        _internal_formatter() {
             return this._private__formatter;
-        };
-        Series.prototype._internal_updateAllViews = function () {
+        }
+        _internal_updateAllViews() {
             var _a;
             this._private__paneView._internal_update();
             this._private__markersPaneView._internal_update();
-            for (var _i = 0, _b = this._private__priceAxisViews; _i < _b.length; _i++) {
-                var priceAxisView = _b[_i];
+            for (const priceAxisView of this._private__priceAxisViews) {
                 priceAxisView._internal_update();
             }
-            for (var _c = 0, _d = this._private__customPriceLines; _c < _d.length; _c++) {
-                var customPriceLine = _d[_c];
+            for (const customPriceLine of this._private__customPriceLines) {
                 customPriceLine._internal_update();
             }
             this._private__priceLineView._internal_update();
             this._private__baseHorizontalLineView._internal_update();
             (_a = this._private__lastPriceAnimationPaneView) === null || _a === void 0 ? void 0 : _a._internal_update();
-        };
-        Series.prototype._internal_priceScale = function () {
-            return ensureNotNull(_super.prototype._internal_priceScale.call(this));
-        };
-        Series.prototype._internal_markerDataAtIndex = function (index) {
-            var getValue = (this._private__seriesType === 'Line' || this._private__seriesType === 'Area' || this._private__seriesType === 'Baseline') &&
+        }
+        _internal_priceScale() {
+            return ensureNotNull(super._internal_priceScale());
+        }
+        _internal_markerDataAtIndex(index) {
+            const getValue = (this._private__seriesType === 'Line' || this._private__seriesType === 'Area' || this._private__seriesType === 'Baseline') &&
                 this._private__options.crosshairMarkerVisible;
             if (!getValue) {
                 return null;
             }
-            var bar = this._private__data._internal_valueAt(index);
+            const bar = this._private__data._internal_valueAt(index);
             if (bar === null) {
                 return null;
             }
-            var price = bar._internal_value[3 /* Close */];
-            var radius = this._private__markerRadius();
-            var borderColor = this._private__markerBorderColor();
-            var backgroundColor = this._private__markerBackgroundColor(index);
-            return { _internal_price: price, _internal_radius: radius, _internal_borderColor: borderColor, _internal_backgroundColor: backgroundColor };
-        };
-        Series.prototype._internal_title = function () {
+            const price = bar._internal_value[3 /* PlotRowValueIndex.Close */];
+            const radius = this._private__markerRadius();
+            const borderColor = this._private__markerBorderColor();
+            const borderWidth = this._private__markerBorderWidth();
+            const backgroundColor = this._private__markerBackgroundColor(index);
+            return { _internal_price: price, _internal_radius: radius, _internal_borderColor: borderColor, _internal_borderWidth: borderWidth, _internal_backgroundColor: backgroundColor };
+        }
+        _internal_title() {
             return this._private__options.title;
-        };
-        Series.prototype._internal_visible = function () {
+        }
+        _internal_visible() {
             return this._private__options.visible;
-        };
-        Series.prototype._private__isOverlay = function () {
-            var priceScale = this._internal_priceScale();
+        }
+        _private__isOverlay() {
+            const priceScale = this._internal_priceScale();
             return !isDefaultPriceScale(priceScale._internal_id());
-        };
-        Series.prototype._private__autoscaleInfoImpl = function (startTimePoint, endTimePoint) {
+        }
+        _private__autoscaleInfoImpl(startTimePoint, endTimePoint) {
             if (!isInteger(startTimePoint) || !isInteger(endTimePoint) || this._private__data._internal_isEmpty()) {
                 return null;
             }
             // TODO: refactor this
             // series data is strongly hardcoded to keep bars
-            var plots = this._private__seriesType === 'Line' || this._private__seriesType === 'Area' || this._private__seriesType === 'Baseline' || this._private__seriesType === 'Histogram'
-                ? [3 /* Close */]
-                : [2 /* Low */, 1 /* High */];
-            var barsMinMax = this._private__data._internal_minMaxOnRangeCached(startTimePoint, endTimePoint, plots);
-            var range = barsMinMax !== null ? new PriceRangeImpl(barsMinMax._internal_min, barsMinMax._internal_max) : null;
+            const plots = this._private__seriesType === 'Line' || this._private__seriesType === 'Area' || this._private__seriesType === 'Baseline' || this._private__seriesType === 'Histogram'
+                ? [3 /* PlotRowValueIndex.Close */]
+                : [2 /* PlotRowValueIndex.Low */, 1 /* PlotRowValueIndex.High */];
+            const barsMinMax = this._private__data._internal_minMaxOnRangeCached(startTimePoint, endTimePoint, plots);
+            let range = barsMinMax !== null ? new PriceRangeImpl(barsMinMax._internal_min, barsMinMax._internal_max) : null;
             if (this._internal_seriesType() === 'Histogram') {
-                var base = this._private__options.base;
-                var rangeWithBase = new PriceRangeImpl(base, base);
+                const base = this._private__options.base;
+                const rangeWithBase = new PriceRangeImpl(base, base);
                 range = range !== null ? range._internal_merge(rangeWithBase) : rangeWithBase;
             }
             return new AutoscaleInfoImpl(range, this._private__markersPaneView._internal_autoScaleMargins());
-        };
-        Series.prototype._private__markerRadius = function () {
+        }
+        _private__markerRadius() {
             switch (this._private__seriesType) {
                 case 'Line':
                 case 'Area':
@@ -4509,34 +4480,43 @@
                     return this._private__options.crosshairMarkerRadius;
             }
             return 0;
-        };
-        Series.prototype._private__markerBorderColor = function () {
+        }
+        _private__markerBorderColor() {
             switch (this._private__seriesType) {
                 case 'Line':
                 case 'Area':
                 case 'Baseline': {
-                    var crosshairMarkerBorderColor = this._private__options.crosshairMarkerBorderColor;
+                    const crosshairMarkerBorderColor = this._private__options.crosshairMarkerBorderColor;
                     if (crosshairMarkerBorderColor.length !== 0) {
                         return crosshairMarkerBorderColor;
                     }
                 }
             }
             return null;
-        };
-        Series.prototype._private__markerBackgroundColor = function (index) {
+        }
+        _private__markerBorderWidth() {
+            switch (this._private__seriesType) {
+                case 'Line':
+                case 'Area':
+                case 'Baseline':
+                    return this._private__options.crosshairMarkerBorderWidth;
+            }
+            return 0;
+        }
+        _private__markerBackgroundColor(index) {
             switch (this._private__seriesType) {
                 case 'Line':
                 case 'Area':
                 case 'Baseline': {
-                    var crosshairMarkerBackgroundColor = this._private__options.crosshairMarkerBackgroundColor;
+                    const crosshairMarkerBackgroundColor = this._private__options.crosshairMarkerBackgroundColor;
                     if (crosshairMarkerBackgroundColor.length !== 0) {
                         return crosshairMarkerBackgroundColor;
                     }
                 }
             }
             return this._internal_barColorer()._internal_barStyle(index)._internal_barColor;
-        };
-        Series.prototype._private__recreateFormatter = function () {
+        }
+        _private__recreateFormatter() {
             switch (this._private__options.priceFormat.type) {
                 case 'custom': {
                     this._private__formatter = { format: this._private__options.priceFormat.formatter };
@@ -4551,41 +4531,40 @@
                     break;
                 }
                 default: {
-                    var priceScale = Math.pow(10, this._private__options.priceFormat.precision);
+                    const priceScale = Math.pow(10, this._private__options.priceFormat.precision);
                     this._private__formatter = new PriceFormatter(priceScale, this._private__options.priceFormat.minMove * priceScale);
                 }
             }
             if (this._internal__priceScale !== null) {
                 this._internal__priceScale._internal_updateFormatter();
             }
-        };
-        Series.prototype._private__recalculateMarkers = function () {
-            var _this = this;
-            var timeScale = this._internal_model()._internal_timeScale();
+        }
+        _private__recalculateMarkers() {
+            const timeScale = this._internal_model()._internal_timeScale();
             if (timeScale._internal_isEmpty() || this._private__data._internal_size() === 0) {
                 this._private__indexedMarkers = [];
                 return;
             }
-            var firstDataIndex = ensureNotNull(this._private__data._internal_firstIndex());
-            this._private__indexedMarkers = this._private__markers.map(function (marker, index) {
+            const firstDataIndex = ensureNotNull(this._private__data._internal_firstIndex());
+            this._private__indexedMarkers = this._private__markers.map((marker, index) => {
                 // the first find index on the time scale (across all series)
-                var timePointIndex = ensureNotNull(timeScale._internal_timeToIndex(marker.time, true));
+                const timePointIndex = ensureNotNull(timeScale._internal_timeToIndex(marker.time, true));
                 // and then search that index inside the series data
-                var searchMode = timePointIndex < firstDataIndex ? 1 /* NearestRight */ : -1 /* NearestLeft */;
-                var seriesDataIndex = ensureNotNull(_this._private__data._internal_search(timePointIndex, searchMode))._internal_index;
+                const searchMode = timePointIndex < firstDataIndex ? 1 /* MismatchDirection.NearestRight */ : -1 /* MismatchDirection.NearestLeft */;
+                const seriesDataIndex = ensureNotNull(this._private__data._internal_search(timePointIndex, searchMode))._internal_index;
                 return {
                     time: seriesDataIndex,
                     position: marker.position,
                     shape: marker.shape,
                     color: marker.color,
                     id: marker.id,
-                    _internal_internalId: index,
+                    internalId: index,
                     text: marker.text,
                     size: marker.size,
                 };
             });
-        };
-        Series.prototype._private__recreatePaneViews = function () {
+        }
+        _private__recreatePaneViews() {
             this._private__markersPaneView = new SeriesMarkersPaneView(this, this._internal_model());
             switch (this._private__seriesType) {
                 case 'Bar': {
@@ -4614,80 +4593,76 @@
                 }
                 default: throw Error('Unknown chart style assigned: ' + this._private__seriesType);
             }
-        };
-        return Series;
-    }(PriceDataSource));
+        }
+    }
 
-    var Magnet = /** @class */ (function () {
-        function Magnet(options) {
+    class Magnet {
+        constructor(options) {
             this._private__options = options;
         }
-        Magnet.prototype._internal_align = function (price, index, pane) {
-            var res = price;
-            if (this._private__options.mode === 0 /* Normal */) {
+        _internal_align(price, index, pane) {
+            let res = price;
+            if (this._private__options.mode === 0 /* CrosshairMode.Normal */) {
                 return res;
             }
-            var defaultPriceScale = pane._internal_defaultPriceScale();
-            var firstValue = defaultPriceScale._internal_firstValue();
+            const defaultPriceScale = pane._internal_defaultPriceScale();
+            const firstValue = defaultPriceScale._internal_firstValue();
             if (firstValue === null) {
                 return res;
             }
-            var y = defaultPriceScale._internal_priceToCoordinate(price, firstValue);
+            const y = defaultPriceScale._internal_priceToCoordinate(price, firstValue);
             // get all serieses from the pane
-            var serieses = pane._internal_dataSources().filter((function (ds) { return (ds instanceof Series); }));
-            var candidates = serieses.reduce(function (acc, series) {
+            const serieses = pane._internal_dataSources().filter(((ds) => (ds instanceof Series)));
+            const candidates = serieses.reduce((acc, series) => {
                 if (pane._internal_isOverlay(series) || !series._internal_visible()) {
                     return acc;
                 }
-                var ps = series._internal_priceScale();
-                var bars = series._internal_bars();
+                const ps = series._internal_priceScale();
+                const bars = series._internal_bars();
                 if (ps._internal_isEmpty() || !bars._internal_contains(index)) {
                     return acc;
                 }
-                var bar = bars._internal_valueAt(index);
+                const bar = bars._internal_valueAt(index);
                 if (bar === null) {
                     return acc;
                 }
                 // convert bar to pixels
-                var firstPrice = ensure(series._internal_firstValue());
-                return acc.concat([ps._internal_priceToCoordinate(bar._internal_value[3 /* Close */], firstPrice._internal_value)]);
+                const firstPrice = ensure(series._internal_firstValue());
+                return acc.concat([ps._internal_priceToCoordinate(bar._internal_value[3 /* PlotRowValueIndex.Close */], firstPrice._internal_value)]);
             }, []);
             if (candidates.length === 0) {
                 return res;
             }
-            candidates.sort(function (y1, y2) { return Math.abs(y1 - y) - Math.abs(y2 - y); });
-            var nearest = candidates[0];
+            candidates.sort((y1, y2) => Math.abs(y1 - y) - Math.abs(y2 - y));
+            const nearest = candidates[0];
             res = defaultPriceScale._internal_coordinateToPrice(nearest, firstValue);
             return res;
-        };
-        return Magnet;
-    }());
+        }
+    }
 
-    var GridRenderer = /** @class */ (function () {
-        function GridRenderer() {
+    class GridRenderer {
+        constructor() {
             this._private__data = null;
         }
-        GridRenderer.prototype._internal_setData = function (data) {
+        _internal_setData(data) {
             this._private__data = data;
-        };
-        GridRenderer.prototype._internal_draw = function (ctx, pixelRatio, isHovered, hitTestData) {
-            var _this = this;
+        }
+        _internal_draw(ctx, pixelRatio, isHovered, hitTestData) {
             if (this._private__data === null) {
                 return;
             }
-            var lineWidth = Math.max(1, Math.floor(pixelRatio));
+            const lineWidth = Math.max(1, Math.floor(pixelRatio));
             ctx.lineWidth = lineWidth;
-            var height = Math.ceil(this._private__data._internal_h * pixelRatio);
-            var width = Math.ceil(this._private__data._internal_w * pixelRatio);
-            strokeInPixel(ctx, function () {
-                var data = ensureNotNull(_this._private__data);
+            const height = Math.ceil(this._private__data._internal_h * pixelRatio);
+            const width = Math.ceil(this._private__data._internal_w * pixelRatio);
+            strokeInPixel(ctx, () => {
+                const data = ensureNotNull(this._private__data);
                 if (data._internal_vertLinesVisible) {
                     ctx.strokeStyle = data._internal_vertLinesColor;
                     setLineStyle(ctx, data._internal_vertLineStyle);
                     ctx.beginPath();
-                    for (var _i = 0, _a = data._internal_timeMarks; _i < _a.length; _i++) {
-                        var timeMark = _a[_i];
-                        var x = Math.round(timeMark._internal_coord * pixelRatio);
+                    for (const timeMark of data._internal_timeMarks) {
+                        const x = Math.round(timeMark._internal_coord * pixelRatio);
                         ctx.moveTo(x, -lineWidth);
                         ctx.lineTo(x, height + lineWidth);
                     }
@@ -4697,32 +4672,30 @@
                     ctx.strokeStyle = data._internal_horzLinesColor;
                     setLineStyle(ctx, data._internal_horzLineStyle);
                     ctx.beginPath();
-                    for (var _b = 0, _c = data._internal_priceMarks; _b < _c.length; _b++) {
-                        var priceMark = _c[_b];
-                        var y = Math.round(priceMark._internal_coord * pixelRatio);
+                    for (const priceMark of data._internal_priceMarks) {
+                        const y = Math.round(priceMark._internal_coord * pixelRatio);
                         ctx.moveTo(-lineWidth, y);
                         ctx.lineTo(width + lineWidth, y);
                     }
                     ctx.stroke();
                 }
             });
-        };
-        return GridRenderer;
-    }());
+        }
+    }
 
-    var GridPaneView = /** @class */ (function () {
-        function GridPaneView(pane) {
+    class GridPaneView {
+        constructor(pane) {
             this._private__renderer = new GridRenderer();
             this._private__invalidated = true;
             this._private__pane = pane;
         }
-        GridPaneView.prototype._internal_update = function () {
+        _internal_update() {
             this._private__invalidated = true;
-        };
-        GridPaneView.prototype._internal_renderer = function (height, width) {
+        }
+        _internal_renderer(height, width) {
             if (this._private__invalidated) {
-                var gridOptions = this._private__pane._internal_model()._internal_options().grid;
-                var data = {
+                const gridOptions = this._private__pane._internal_model()._internal_options().grid;
+                const data = {
                     _internal_h: height,
                     _internal_w: width,
                     _internal_horzLinesVisible: gridOptions.horzLines.visible,
@@ -4738,21 +4711,19 @@
                 this._private__invalidated = false;
             }
             return this._private__renderer;
-        };
-        return GridPaneView;
-    }());
+        }
+    }
 
-    var Grid = /** @class */ (function () {
-        function Grid(pane) {
+    class Grid {
+        constructor(pane) {
             this._private__paneView = new GridPaneView(pane);
         }
-        Grid.prototype._internal_paneView = function () {
+        _internal_paneView() {
             return this._private__paneView;
-        };
-        return Grid;
-    }());
+        }
+    }
 
-    var defLogFormula = {
+    const defLogFormula = {
         _internal_logicalOffset: 4,
         _internal_coordOffset: 0.0001,
     };
@@ -4763,12 +4734,12 @@
         return (value / 100) * baseValue + baseValue;
     }
     function toPercent(value, baseValue) {
-        var result = 100 * (value - baseValue) / baseValue;
+        const result = 100 * (value - baseValue) / baseValue;
         return (baseValue < 0 ? -result : result);
     }
     function toPercentRange(priceRange, baseValue) {
-        var minPercent = toPercent(priceRange._internal_minValue(), baseValue);
-        var maxPercent = toPercent(priceRange._internal_maxValue(), baseValue);
+        const minPercent = toPercent(priceRange._internal_minValue(), baseValue);
+        const maxPercent = toPercent(priceRange._internal_maxValue(), baseValue);
         return new PriceRangeImpl(minPercent, maxPercent);
     }
     function fromIndexedTo100(value, baseValue) {
@@ -4779,65 +4750,65 @@
         return (value / 100) * baseValue + baseValue;
     }
     function toIndexedTo100(value, baseValue) {
-        var result = 100 * (value - baseValue) / baseValue + 100;
+        const result = 100 * (value - baseValue) / baseValue + 100;
         return (baseValue < 0 ? -result : result);
     }
     function toIndexedTo100Range(priceRange, baseValue) {
-        var minPercent = toIndexedTo100(priceRange._internal_minValue(), baseValue);
-        var maxPercent = toIndexedTo100(priceRange._internal_maxValue(), baseValue);
+        const minPercent = toIndexedTo100(priceRange._internal_minValue(), baseValue);
+        const maxPercent = toIndexedTo100(priceRange._internal_maxValue(), baseValue);
         return new PriceRangeImpl(minPercent, maxPercent);
     }
     function toLog(price, logFormula) {
-        var m = Math.abs(price);
+        const m = Math.abs(price);
         if (m < 1e-15) {
             return 0;
         }
-        var res = log10(m + logFormula._internal_coordOffset) + logFormula._internal_logicalOffset;
+        const res = log10(m + logFormula._internal_coordOffset) + logFormula._internal_logicalOffset;
         return ((price < 0) ? -res : res);
     }
     function fromLog(logical, logFormula) {
-        var m = Math.abs(logical);
+        const m = Math.abs(logical);
         if (m < 1e-15) {
             return 0;
         }
-        var res = Math.pow(10, m - logFormula._internal_logicalOffset) - logFormula._internal_coordOffset;
+        const res = Math.pow(10, m - logFormula._internal_logicalOffset) - logFormula._internal_coordOffset;
         return (logical < 0) ? -res : res;
     }
     function convertPriceRangeToLog(priceRange, logFormula) {
         if (priceRange === null) {
             return null;
         }
-        var min = toLog(priceRange._internal_minValue(), logFormula);
-        var max = toLog(priceRange._internal_maxValue(), logFormula);
+        const min = toLog(priceRange._internal_minValue(), logFormula);
+        const max = toLog(priceRange._internal_maxValue(), logFormula);
         return new PriceRangeImpl(min, max);
     }
     function canConvertPriceRangeFromLog(priceRange, logFormula) {
         if (priceRange === null) {
             return false;
         }
-        var min = fromLog(priceRange._internal_minValue(), logFormula);
-        var max = fromLog(priceRange._internal_maxValue(), logFormula);
+        const min = fromLog(priceRange._internal_minValue(), logFormula);
+        const max = fromLog(priceRange._internal_maxValue(), logFormula);
         return isFinite(min) && isFinite(max);
     }
     function convertPriceRangeFromLog(priceRange, logFormula) {
         if (priceRange === null) {
             return null;
         }
-        var min = fromLog(priceRange._internal_minValue(), logFormula);
-        var max = fromLog(priceRange._internal_maxValue(), logFormula);
+        const min = fromLog(priceRange._internal_minValue(), logFormula);
+        const max = fromLog(priceRange._internal_maxValue(), logFormula);
         return new PriceRangeImpl(min, max);
     }
     function logFormulaForPriceRange(range) {
         if (range === null) {
             return defLogFormula;
         }
-        var diff = Math.abs(range._internal_maxValue() - range._internal_minValue());
+        const diff = Math.abs(range._internal_maxValue() - range._internal_minValue());
         if (diff >= 1 || diff < 1e-15) {
             return defLogFormula;
         }
-        var digits = Math.ceil(Math.abs(Math.log10(diff)));
-        var logicalOffset = defLogFormula._internal_logicalOffset + digits;
-        var coordOffset = 1 / Math.pow(10, logicalOffset);
+        const digits = Math.ceil(Math.abs(Math.log10(diff)));
+        const logicalOffset = defLogFormula._internal_logicalOffset + digits;
+        const coordOffset = 1 / Math.pow(10, logicalOffset);
         return {
             _internal_logicalOffset: logicalOffset,
             _internal_coordOffset: coordOffset,
@@ -4847,8 +4818,8 @@
         return f1._internal_logicalOffset === f2._internal_logicalOffset && f1._internal_coordOffset === f2._internal_coordOffset;
     }
 
-    var PriceTickSpanCalculator = /** @class */ (function () {
-        function PriceTickSpanCalculator(base, integralDividers) {
+    class PriceTickSpanCalculator {
+        constructor(base, integralDividers) {
             this._private__base = base;
             this._private__integralDividers = integralDividers;
             if (isBaseDecimal(this._private__base)) {
@@ -4856,7 +4827,7 @@
             }
             else {
                 this._private__fractionalDividers = [];
-                for (var baseRest = this._private__base; baseRest !== 1;) {
+                for (let baseRest = this._private__base; baseRest !== 1;) {
                     if ((baseRest % 2) === 0) {
                         this._private__fractionalDividers.push(2);
                         baseRest /= 2;
@@ -4874,92 +4845,91 @@
                 }
             }
         }
-        PriceTickSpanCalculator.prototype._internal_tickSpan = function (high, low, maxTickSpan) {
-            var minMovement = (this._private__base === 0) ? (0) : (1 / this._private__base);
-            var resultTickSpan = Math.pow(10, Math.max(0, Math.ceil(log10(high - low))));
-            var index = 0;
-            var c = this._private__integralDividers[0];
+        _internal_tickSpan(high, low, maxTickSpan) {
+            const minMovement = (this._private__base === 0) ? (0) : (1 / this._private__base);
+            let resultTickSpan = Math.pow(10, Math.max(0, Math.ceil(log10(high - low))));
+            let index = 0;
+            let c = this._private__integralDividers[0];
             // eslint-disable-next-line no-constant-condition
             while (true) {
                 // the second part is actual for small with very small values like 1e-10
                 // greaterOrEqual fails for such values
-                var resultTickSpanLargerMinMovement = greaterOrEqual(resultTickSpan, minMovement, 1e-14 /* TickSpanEpsilon */) && resultTickSpan > (minMovement + 1e-14 /* TickSpanEpsilon */);
-                var resultTickSpanLargerMaxTickSpan = greaterOrEqual(resultTickSpan, maxTickSpan * c, 1e-14 /* TickSpanEpsilon */);
-                var resultTickSpanLarger1 = greaterOrEqual(resultTickSpan, 1, 1e-14 /* TickSpanEpsilon */);
-                var haveToContinue = resultTickSpanLargerMinMovement && resultTickSpanLargerMaxTickSpan && resultTickSpanLarger1;
+                const resultTickSpanLargerMinMovement = greaterOrEqual(resultTickSpan, minMovement, 1e-14 /* Constants.TickSpanEpsilon */) && resultTickSpan > (minMovement + 1e-14 /* Constants.TickSpanEpsilon */);
+                const resultTickSpanLargerMaxTickSpan = greaterOrEqual(resultTickSpan, maxTickSpan * c, 1e-14 /* Constants.TickSpanEpsilon */);
+                const resultTickSpanLarger1 = greaterOrEqual(resultTickSpan, 1, 1e-14 /* Constants.TickSpanEpsilon */);
+                const haveToContinue = resultTickSpanLargerMinMovement && resultTickSpanLargerMaxTickSpan && resultTickSpanLarger1;
                 if (!haveToContinue) {
                     break;
                 }
                 resultTickSpan /= c;
                 c = this._private__integralDividers[++index % this._private__integralDividers.length];
             }
-            if (resultTickSpan <= (minMovement + 1e-14 /* TickSpanEpsilon */)) {
+            if (resultTickSpan <= (minMovement + 1e-14 /* Constants.TickSpanEpsilon */)) {
                 resultTickSpan = minMovement;
             }
             resultTickSpan = Math.max(1, resultTickSpan);
-            if ((this._private__fractionalDividers.length > 0) && equal(resultTickSpan, 1, 1e-14 /* TickSpanEpsilon */)) {
+            if ((this._private__fractionalDividers.length > 0) && equal(resultTickSpan, 1, 1e-14 /* Constants.TickSpanEpsilon */)) {
                 index = 0;
                 c = this._private__fractionalDividers[0];
-                while (greaterOrEqual(resultTickSpan, maxTickSpan * c, 1e-14 /* TickSpanEpsilon */) && resultTickSpan > (minMovement + 1e-14 /* TickSpanEpsilon */)) {
+                while (greaterOrEqual(resultTickSpan, maxTickSpan * c, 1e-14 /* Constants.TickSpanEpsilon */) && resultTickSpan > (minMovement + 1e-14 /* Constants.TickSpanEpsilon */)) {
                     resultTickSpan /= c;
                     c = this._private__fractionalDividers[++index % this._private__fractionalDividers.length];
                 }
             }
             return resultTickSpan;
-        };
-        return PriceTickSpanCalculator;
-    }());
+        }
+    }
 
-    var TICK_DENSITY = 2.5;
-    var PriceTickMarkBuilder = /** @class */ (function () {
-        function PriceTickMarkBuilder(priceScale, base, coordinateToLogicalFunc, logicalToCoordinateFunc) {
+    const TICK_DENSITY = 2.5;
+    class PriceTickMarkBuilder {
+        constructor(priceScale, base, coordinateToLogicalFunc, logicalToCoordinateFunc) {
             this._private__marks = [];
             this._private__priceScale = priceScale;
             this._private__base = base;
             this._private__coordinateToLogicalFunc = coordinateToLogicalFunc;
             this._private__logicalToCoordinateFunc = logicalToCoordinateFunc;
         }
-        PriceTickMarkBuilder.prototype._internal_tickSpan = function (high, low) {
+        _internal_tickSpan(high, low) {
             if (high < low) {
                 throw new Error('high < low');
             }
-            var scaleHeight = this._private__priceScale._internal_height();
-            var markHeight = this._private__tickMarkHeight();
-            var maxTickSpan = (high - low) * markHeight / scaleHeight;
-            var spanCalculator1 = new PriceTickSpanCalculator(this._private__base, [2, 2.5, 2]);
-            var spanCalculator2 = new PriceTickSpanCalculator(this._private__base, [2, 2, 2.5]);
-            var spanCalculator3 = new PriceTickSpanCalculator(this._private__base, [2.5, 2, 2]);
-            var spans = [];
+            const scaleHeight = this._private__priceScale._internal_height();
+            const markHeight = this._private__tickMarkHeight();
+            const maxTickSpan = (high - low) * markHeight / scaleHeight;
+            const spanCalculator1 = new PriceTickSpanCalculator(this._private__base, [2, 2.5, 2]);
+            const spanCalculator2 = new PriceTickSpanCalculator(this._private__base, [2, 2, 2.5]);
+            const spanCalculator3 = new PriceTickSpanCalculator(this._private__base, [2.5, 2, 2]);
+            const spans = [];
             spans.push(spanCalculator1._internal_tickSpan(high, low, maxTickSpan), spanCalculator2._internal_tickSpan(high, low, maxTickSpan), spanCalculator3._internal_tickSpan(high, low, maxTickSpan));
             return min(spans);
-        };
-        PriceTickMarkBuilder.prototype._internal_rebuildTickMarks = function () {
-            var priceScale = this._private__priceScale;
-            var firstValue = priceScale._internal_firstValue();
+        }
+        _internal_rebuildTickMarks() {
+            const priceScale = this._private__priceScale;
+            const firstValue = priceScale._internal_firstValue();
             if (firstValue === null) {
                 this._private__marks = [];
                 return;
             }
-            var scaleHeight = priceScale._internal_height();
-            var bottom = this._private__coordinateToLogicalFunc(scaleHeight - 1, firstValue);
-            var top = this._private__coordinateToLogicalFunc(0, firstValue);
-            var extraTopBottomMargin = this._private__priceScale._internal_options().entireTextOnly ? this._private__fontHeight() / 2 : 0;
-            var minCoord = extraTopBottomMargin;
-            var maxCoord = scaleHeight - 1 - extraTopBottomMargin;
-            var high = Math.max(bottom, top);
-            var low = Math.min(bottom, top);
+            const scaleHeight = priceScale._internal_height();
+            const bottom = this._private__coordinateToLogicalFunc(scaleHeight - 1, firstValue);
+            const top = this._private__coordinateToLogicalFunc(0, firstValue);
+            const extraTopBottomMargin = this._private__priceScale._internal_options().entireTextOnly ? this._private__fontHeight() / 2 : 0;
+            const minCoord = extraTopBottomMargin;
+            const maxCoord = scaleHeight - 1 - extraTopBottomMargin;
+            const high = Math.max(bottom, top);
+            const low = Math.min(bottom, top);
             if (high === low) {
                 this._private__marks = [];
                 return;
             }
-            var span = this._internal_tickSpan(high, low);
-            var mod = high % span;
+            let span = this._internal_tickSpan(high, low);
+            let mod = high % span;
             mod += mod < 0 ? span : 0;
-            var sign = (high >= low) ? 1 : -1;
-            var prevCoord = null;
-            var targetIndex = 0;
-            for (var logical = high - mod; logical > low; logical -= span) {
-                var coord = this._private__logicalToCoordinateFunc(logical, firstValue, true);
+            const sign = (high >= low) ? 1 : -1;
+            let prevCoord = null;
+            let targetIndex = 0;
+            for (let logical = high - mod; logical > low; logical -= span) {
+                const coord = this._private__logicalToCoordinateFunc(logical, firstValue, true);
                 // check if there is place for it
                 // this is required for log scale
                 if (prevCoord !== null && Math.abs(coord - prevCoord) < this._private__tickMarkHeight()) {
@@ -4987,21 +4957,20 @@
                 }
             }
             this._private__marks.length = targetIndex;
-        };
-        PriceTickMarkBuilder.prototype._internal_marks = function () {
+        }
+        _internal_marks() {
             return this._private__marks;
-        };
-        PriceTickMarkBuilder.prototype._private__fontHeight = function () {
+        }
+        _private__fontHeight() {
             return this._private__priceScale._internal_fontSize();
-        };
-        PriceTickMarkBuilder.prototype._private__tickMarkHeight = function () {
+        }
+        _private__tickMarkHeight() {
             return Math.ceil(this._private__fontHeight() * TICK_DENSITY);
-        };
-        return PriceTickMarkBuilder;
-    }());
+        }
+    }
 
     function sortSources(sources) {
-        return sources.slice().sort(function (s1, s2) {
+        return sources.slice().sort((s1, s2) => {
             return (ensureNotNull(s1._internal_zorder()) - ensureNotNull(s2._internal_zorder()));
         });
     }
@@ -5029,10 +4998,10 @@
          */
         PriceScaleMode[PriceScaleMode["IndexedTo100"] = 3] = "IndexedTo100";
     })(PriceScaleMode || (PriceScaleMode = {}));
-    var percentageFormatter = new PercentageFormatter();
-    var defaultPriceFormatter = new PriceFormatter(100, 1);
-    var PriceScale = /** @class */ (function () {
-        function PriceScale(id, options, layoutOptions, localizationOptions) {
+    const percentageFormatter = new PercentageFormatter();
+    const defaultPriceFormatter = new PriceFormatter(100, 1);
+    class PriceScale {
+        constructor(id, options, layoutOptions, localizationOptions) {
             this._private__height = 0;
             this._private__internalHeightCache = null;
             this._private__priceRange = null;
@@ -5055,70 +5024,70 @@
             this._private__localizationOptions = localizationOptions;
             this._private__markBuilder = new PriceTickMarkBuilder(this, 100, this._private__coordinateToLogical.bind(this), this._private__logicalToCoordinate.bind(this));
         }
-        PriceScale.prototype._internal_id = function () {
+        _internal_id() {
             return this._private__id;
-        };
-        PriceScale.prototype._internal_options = function () {
+        }
+        _internal_options() {
             return this._private__options;
-        };
-        PriceScale.prototype._internal_applyOptions = function (options) {
+        }
+        _internal_applyOptions(options) {
             merge(this._private__options, options);
             this._internal_updateFormatter();
             if (options.mode !== undefined) {
                 this._internal_setMode({ _internal_mode: options.mode });
             }
             if (options.scaleMargins !== undefined) {
-                var top_1 = ensureDefined(options.scaleMargins.top);
-                var bottom = ensureDefined(options.scaleMargins.bottom);
-                if (top_1 < 0 || top_1 > 1) {
-                    throw new Error("Invalid top margin - expect value between 0 and 1, given=".concat(top_1));
+                const top = ensureDefined(options.scaleMargins.top);
+                const bottom = ensureDefined(options.scaleMargins.bottom);
+                if (top < 0 || top > 1) {
+                    throw new Error(`Invalid top margin - expect value between 0 and 1, given=${top}`);
                 }
-                if (bottom < 0 || bottom > 1 || top_1 + bottom > 1) {
-                    throw new Error("Invalid bottom margin - expect value between 0 and 1, given=".concat(bottom));
+                if (bottom < 0 || bottom > 1 || top + bottom > 1) {
+                    throw new Error(`Invalid bottom margin - expect value between 0 and 1, given=${bottom}`);
                 }
-                if (top_1 + bottom > 1) {
-                    throw new Error("Invalid margins - sum of margins must be less than 1, given=".concat(top_1 + bottom));
+                if (top + bottom > 1) {
+                    throw new Error(`Invalid margins - sum of margins must be less than 1, given=${top + bottom}`);
                 }
                 this._private__invalidateInternalHeightCache();
                 this._private__marksCache = null;
             }
-        };
-        PriceScale.prototype._internal_isAutoScale = function () {
+        }
+        _internal_isAutoScale() {
             return this._private__options.autoScale;
-        };
-        PriceScale.prototype._internal_isLog = function () {
-            return this._private__options.mode === 1 /* Logarithmic */;
-        };
-        PriceScale.prototype._internal_isPercentage = function () {
-            return this._private__options.mode === 2 /* Percentage */;
-        };
-        PriceScale.prototype._internal_isIndexedTo100 = function () {
-            return this._private__options.mode === 3 /* IndexedTo100 */;
-        };
-        PriceScale.prototype._internal_mode = function () {
+        }
+        _internal_isLog() {
+            return this._private__options.mode === 1 /* PriceScaleMode.Logarithmic */;
+        }
+        _internal_isPercentage() {
+            return this._private__options.mode === 2 /* PriceScaleMode.Percentage */;
+        }
+        _internal_isIndexedTo100() {
+            return this._private__options.mode === 3 /* PriceScaleMode.IndexedTo100 */;
+        }
+        _internal_mode() {
             return {
                 _internal_autoScale: this._private__options.autoScale,
                 _internal_isInverted: this._private__options.invertScale,
                 _internal_mode: this._private__options.mode,
             };
-        };
+        }
         // eslint-disable-next-line complexity
-        PriceScale.prototype._internal_setMode = function (newMode) {
-            var oldMode = this._internal_mode();
-            var priceRange = null;
+        _internal_setMode(newMode) {
+            const oldMode = this._internal_mode();
+            let priceRange = null;
             if (newMode._internal_autoScale !== undefined) {
                 this._private__options.autoScale = newMode._internal_autoScale;
             }
             if (newMode._internal_mode !== undefined) {
                 this._private__options.mode = newMode._internal_mode;
-                if (newMode._internal_mode === 2 /* Percentage */ || newMode._internal_mode === 3 /* IndexedTo100 */) {
+                if (newMode._internal_mode === 2 /* PriceScaleMode.Percentage */ || newMode._internal_mode === 3 /* PriceScaleMode.IndexedTo100 */) {
                     this._private__options.autoScale = true;
                 }
                 // TODO: Remove after making rebuildTickMarks lazy
                 this._private__invalidatedForRange._internal_isValid = false;
             }
             // define which scale converted from
-            if (oldMode._internal_mode === 1 /* Logarithmic */ && newMode._internal_mode !== oldMode._internal_mode) {
+            if (oldMode._internal_mode === 1 /* PriceScaleMode.Logarithmic */ && newMode._internal_mode !== oldMode._internal_mode) {
                 if (canConvertPriceRangeFromLog(this._private__priceRange, this._private__logFormula)) {
                     priceRange = convertPriceRangeFromLog(this._private__priceRange, this._private__logFormula);
                     if (priceRange !== null) {
@@ -5130,17 +5099,17 @@
                 }
             }
             // define which scale converted to
-            if (newMode._internal_mode === 1 /* Logarithmic */ && newMode._internal_mode !== oldMode._internal_mode) {
+            if (newMode._internal_mode === 1 /* PriceScaleMode.Logarithmic */ && newMode._internal_mode !== oldMode._internal_mode) {
                 priceRange = convertPriceRangeToLog(this._private__priceRange, this._private__logFormula);
                 if (priceRange !== null) {
                     this._internal_setPriceRange(priceRange);
                 }
             }
-            var modeChanged = oldMode._internal_mode !== this._private__options.mode;
-            if (modeChanged && (oldMode._internal_mode === 2 /* Percentage */ || this._internal_isPercentage())) {
+            const modeChanged = oldMode._internal_mode !== this._private__options.mode;
+            if (modeChanged && (oldMode._internal_mode === 2 /* PriceScaleMode.Percentage */ || this._internal_isPercentage())) {
                 this._internal_updateFormatter();
             }
-            if (modeChanged && (oldMode._internal_mode === 3 /* IndexedTo100 */ || this._internal_isIndexedTo100())) {
+            if (modeChanged && (oldMode._internal_mode === 3 /* PriceScaleMode.IndexedTo100 */ || this._internal_isIndexedTo100())) {
                 this._internal_updateFormatter();
             }
             if (newMode._internal_isInverted !== undefined && oldMode._internal_isInverted !== newMode._internal_isInverted) {
@@ -5148,38 +5117,38 @@
                 this._private__onIsInvertedChanged();
             }
             this._private__modeChanged._internal_fire(oldMode, this._internal_mode());
-        };
-        PriceScale.prototype._internal_modeChanged = function () {
+        }
+        _internal_modeChanged() {
             return this._private__modeChanged;
-        };
-        PriceScale.prototype._internal_fontSize = function () {
+        }
+        _internal_fontSize() {
             return this._private__layoutOptions.fontSize;
-        };
-        PriceScale.prototype._internal_height = function () {
+        }
+        _internal_height() {
             return this._private__height;
-        };
-        PriceScale.prototype._internal_setHeight = function (value) {
+        }
+        _internal_setHeight(value) {
             if (this._private__height === value) {
                 return;
             }
             this._private__height = value;
             this._private__invalidateInternalHeightCache();
             this._private__marksCache = null;
-        };
-        PriceScale.prototype._internal_internalHeight = function () {
+        }
+        _internal_internalHeight() {
             if (this._private__internalHeightCache) {
                 return this._private__internalHeightCache;
             }
-            var res = this._internal_height() - this._private__topMarginPx() - this._private__bottomMarginPx();
+            const res = this._internal_height() - this._private__topMarginPx() - this._private__bottomMarginPx();
             this._private__internalHeightCache = res;
             return res;
-        };
-        PriceScale.prototype._internal_priceRange = function () {
+        }
+        _internal_priceRange() {
             this._private__makeSureItIsValid();
             return this._private__priceRange;
-        };
-        PriceScale.prototype._internal_setPriceRange = function (newPriceRange, isForceSetValue) {
-            var oldPriceRange = this._private__priceRange;
+        }
+        _internal_setPriceRange(newPriceRange, isForceSetValue) {
+            const oldPriceRange = this._private__priceRange;
             if (!isForceSetValue &&
                 !(oldPriceRange === null && newPriceRange !== null) &&
                 (oldPriceRange === null || oldPriceRange._internal_equals(newPriceRange))) {
@@ -5187,15 +5156,15 @@
             }
             this._private__marksCache = null;
             this._private__priceRange = newPriceRange;
-        };
-        PriceScale.prototype._internal_isEmpty = function () {
+        }
+        _internal_isEmpty() {
             this._private__makeSureItIsValid();
             return this._private__height === 0 || !this._private__priceRange || this._private__priceRange._internal_isEmpty();
-        };
-        PriceScale.prototype._internal_invertedCoordinate = function (coordinate) {
+        }
+        _internal_invertedCoordinate(coordinate) {
             return this._internal_isInverted() ? coordinate : this._internal_height() - 1 - coordinate;
-        };
-        PriceScale.prototype._internal_priceToCoordinate = function (price, baseValue) {
+        }
+        _internal_priceToCoordinate(price, baseValue) {
             if (this._internal_isPercentage()) {
                 price = toPercent(price, baseValue);
             }
@@ -5203,60 +5172,60 @@
                 price = toIndexedTo100(price, baseValue);
             }
             return this._private__logicalToCoordinate(price, baseValue);
-        };
-        PriceScale.prototype._internal_pointsArrayToCoordinates = function (points, baseValue, visibleRange) {
+        }
+        _internal_pointsArrayToCoordinates(points, baseValue, visibleRange) {
             this._private__makeSureItIsValid();
-            var bh = this._private__bottomMarginPx();
-            var range = ensureNotNull(this._internal_priceRange());
-            var min = range._internal_minValue();
-            var max = range._internal_maxValue();
-            var ih = (this._internal_internalHeight() - 1);
-            var isInverted = this._internal_isInverted();
-            var hmm = ih / (max - min);
-            var fromIndex = (visibleRange === undefined) ? 0 : visibleRange.from;
-            var toIndex = (visibleRange === undefined) ? points.length : visibleRange.to;
-            var transformFn = this._private__getCoordinateTransformer();
-            for (var i = fromIndex; i < toIndex; i++) {
-                var point = points[i];
-                var price = point._internal_price;
+            const bh = this._private__bottomMarginPx();
+            const range = ensureNotNull(this._internal_priceRange());
+            const min = range._internal_minValue();
+            const max = range._internal_maxValue();
+            const ih = (this._internal_internalHeight() - 1);
+            const isInverted = this._internal_isInverted();
+            const hmm = ih / (max - min);
+            const fromIndex = (visibleRange === undefined) ? 0 : visibleRange.from;
+            const toIndex = (visibleRange === undefined) ? points.length : visibleRange.to;
+            const transformFn = this._private__getCoordinateTransformer();
+            for (let i = fromIndex; i < toIndex; i++) {
+                const point = points[i];
+                const price = point._internal_price;
                 if (isNaN(price)) {
                     continue;
                 }
-                var logical = price;
+                let logical = price;
                 if (transformFn !== null) {
                     logical = transformFn(point._internal_price, baseValue);
                 }
-                var invCoordinate = bh + hmm * (logical - min);
-                var coordinate = isInverted ? invCoordinate : this._private__height - 1 - invCoordinate;
+                const invCoordinate = bh + hmm * (logical - min);
+                const coordinate = isInverted ? invCoordinate : this._private__height - 1 - invCoordinate;
                 point._internal_y = coordinate;
             }
-        };
-        PriceScale.prototype._internal_barPricesToCoordinates = function (pricesList, baseValue, visibleRange) {
+        }
+        _internal_barPricesToCoordinates(pricesList, baseValue, visibleRange) {
             this._private__makeSureItIsValid();
-            var bh = this._private__bottomMarginPx();
-            var range = ensureNotNull(this._internal_priceRange());
-            var min = range._internal_minValue();
-            var max = range._internal_maxValue();
-            var ih = (this._internal_internalHeight() - 1);
-            var isInverted = this._internal_isInverted();
-            var hmm = ih / (max - min);
-            var fromIndex = (visibleRange === undefined) ? 0 : visibleRange.from;
-            var toIndex = (visibleRange === undefined) ? pricesList.length : visibleRange.to;
-            var transformFn = this._private__getCoordinateTransformer();
-            for (var i = fromIndex; i < toIndex; i++) {
-                var bar = pricesList[i];
-                var openLogical = bar.open;
-                var highLogical = bar.high;
-                var lowLogical = bar.low;
-                var closeLogical = bar.close;
+            const bh = this._private__bottomMarginPx();
+            const range = ensureNotNull(this._internal_priceRange());
+            const min = range._internal_minValue();
+            const max = range._internal_maxValue();
+            const ih = (this._internal_internalHeight() - 1);
+            const isInverted = this._internal_isInverted();
+            const hmm = ih / (max - min);
+            const fromIndex = (visibleRange === undefined) ? 0 : visibleRange.from;
+            const toIndex = (visibleRange === undefined) ? pricesList.length : visibleRange.to;
+            const transformFn = this._private__getCoordinateTransformer();
+            for (let i = fromIndex; i < toIndex; i++) {
+                const bar = pricesList[i];
+                let openLogical = bar._internal_open;
+                let highLogical = bar._internal_high;
+                let lowLogical = bar._internal_low;
+                let closeLogical = bar._internal_close;
                 if (transformFn !== null) {
-                    openLogical = transformFn(bar.open, baseValue);
-                    highLogical = transformFn(bar.high, baseValue);
-                    lowLogical = transformFn(bar.low, baseValue);
-                    closeLogical = transformFn(bar.close, baseValue);
+                    openLogical = transformFn(bar._internal_open, baseValue);
+                    highLogical = transformFn(bar._internal_high, baseValue);
+                    lowLogical = transformFn(bar._internal_low, baseValue);
+                    closeLogical = transformFn(bar._internal_close, baseValue);
                 }
-                var invCoordinate = bh + hmm * (openLogical - min);
-                var coordinate = isInverted ? invCoordinate : this._private__height - 1 - invCoordinate;
+                let invCoordinate = bh + hmm * (openLogical - min);
+                let coordinate = isInverted ? invCoordinate : this._private__height - 1 - invCoordinate;
                 bar._internal_openY = coordinate;
                 invCoordinate = bh + hmm * (highLogical - min);
                 coordinate = isInverted ? invCoordinate : this._private__height - 1 - invCoordinate;
@@ -5268,13 +5237,13 @@
                 coordinate = isInverted ? invCoordinate : this._private__height - 1 - invCoordinate;
                 bar._internal_closeY = coordinate;
             }
-        };
-        PriceScale.prototype._internal_coordinateToPrice = function (coordinate, baseValue) {
-            var logical = this._private__coordinateToLogical(coordinate, baseValue);
+        }
+        _internal_coordinateToPrice(coordinate, baseValue) {
+            const logical = this._private__coordinateToLogical(coordinate, baseValue);
             return this._internal_logicalToPrice(logical, baseValue);
-        };
-        PriceScale.prototype._internal_logicalToPrice = function (logical, baseValue) {
-            var value = logical;
+        }
+        _internal_logicalToPrice(logical, baseValue) {
+            let value = logical;
             if (this._internal_isPercentage()) {
                 value = fromPercent(value, baseValue);
             }
@@ -5282,17 +5251,17 @@
                 value = fromIndexedTo100(value, baseValue);
             }
             return value;
-        };
-        PriceScale.prototype._internal_dataSources = function () {
+        }
+        _internal_dataSources() {
             return this._private__dataSources;
-        };
-        PriceScale.prototype._internal_orderedSources = function () {
+        }
+        _internal_orderedSources() {
             if (this._private__cachedOrderedSources) {
                 return this._private__cachedOrderedSources;
             }
-            var sources = [];
-            for (var i = 0; i < this._private__dataSources.length; i++) {
-                var ds = this._private__dataSources[i];
+            let sources = [];
+            for (let i = 0; i < this._private__dataSources.length; i++) {
+                const ds = this._private__dataSources[i];
                 if (ds._internal_zorder() === null) {
                     ds._internal_setZorder(i + 1);
                 }
@@ -5301,17 +5270,17 @@
             sources = sortSources(sources);
             this._private__cachedOrderedSources = sources;
             return this._private__cachedOrderedSources;
-        };
-        PriceScale.prototype._internal_addDataSource = function (source) {
+        }
+        _internal_addDataSource(source) {
             if (this._private__dataSources.indexOf(source) !== -1) {
                 return;
             }
             this._private__dataSources.push(source);
             this._internal_updateFormatter();
             this._internal_invalidateSourcesCache();
-        };
-        PriceScale.prototype._internal_removeDataSource = function (source) {
-            var index = this._private__dataSources.indexOf(source);
+        }
+        _internal_removeDataSource(source) {
+            const index = this._private__dataSources.indexOf(source);
             if (index === -1) {
                 throw new Error('source is not attached to scale');
             }
@@ -5325,13 +5294,12 @@
             }
             this._internal_updateFormatter();
             this._internal_invalidateSourcesCache();
-        };
-        PriceScale.prototype._internal_firstValue = function () {
+        }
+        _internal_firstValue() {
             // TODO: cache the result
-            var result = null;
-            for (var _i = 0, _a = this._private__dataSources; _i < _a.length; _i++) {
-                var source = _a[_i];
-                var firstValue = source._internal_firstValue();
+            let result = null;
+            for (const source of this._private__dataSources) {
+                const firstValue = source._internal_firstValue();
                 if (firstValue === null) {
                     continue;
                 }
@@ -5340,12 +5308,12 @@
                 }
             }
             return result === null ? null : result._internal_value;
-        };
-        PriceScale.prototype._internal_isInverted = function () {
+        }
+        _internal_isInverted() {
             return this._private__options.invertScale;
-        };
-        PriceScale.prototype._internal_marks = function () {
-            var firstValueIsNull = this._internal_firstValue() === null;
+        }
+        _internal_marks() {
+            const firstValueIsNull = this._internal_firstValue() === null;
             // do not recalculate marks if firstValueIsNull is true because in this case we'll always get empty result
             // this could happen in case when a series had some data and then you set empty data to it (in a simplified case)
             // we could display an empty price scale, but this is not good from UX
@@ -5357,15 +5325,15 @@
                 return this._private__marksCache._internal_marks;
             }
             this._private__markBuilder._internal_rebuildTickMarks();
-            var marks = this._private__markBuilder._internal_marks();
+            const marks = this._private__markBuilder._internal_marks();
             this._private__marksCache = { _internal_marks: marks, _internal_firstValueIsNull: firstValueIsNull };
             this._private__onMarksChanged._internal_fire();
             return marks;
-        };
-        PriceScale.prototype._internal_onMarksChanged = function () {
+        }
+        _internal_onMarksChanged() {
             return this._private__onMarksChanged;
-        };
-        PriceScale.prototype._internal_startScale = function (x) {
+        }
+        _internal_startScale(x) {
             if (this._internal_isPercentage() || this._internal_isIndexedTo100()) {
                 return;
             }
@@ -5378,8 +5346,8 @@
             // invert x
             this._private__scaleStartPoint = this._private__height - x;
             this._private__priceRangeSnapshot = ensureNotNull(this._internal_priceRange())._internal_clone();
-        };
-        PriceScale.prototype._internal_scaleTo = function (x) {
+        }
+        _internal_scaleTo(x) {
             if (this._internal_isPercentage() || this._internal_isIndexedTo100()) {
                 return;
             }
@@ -5394,20 +5362,20 @@
             if (x < 0) {
                 x = 0;
             }
-            var scaleCoeff = (this._private__scaleStartPoint + (this._private__height - 1) * 0.2) / (x + (this._private__height - 1) * 0.2);
-            var newPriceRange = ensureNotNull(this._private__priceRangeSnapshot)._internal_clone();
+            let scaleCoeff = (this._private__scaleStartPoint + (this._private__height - 1) * 0.2) / (x + (this._private__height - 1) * 0.2);
+            const newPriceRange = ensureNotNull(this._private__priceRangeSnapshot)._internal_clone();
             scaleCoeff = Math.max(scaleCoeff, 0.1);
             newPriceRange._internal_scaleAroundCenter(scaleCoeff);
             this._internal_setPriceRange(newPriceRange);
-        };
-        PriceScale.prototype._internal_endScale = function () {
+        }
+        _internal_endScale() {
             if (this._internal_isPercentage() || this._internal_isIndexedTo100()) {
                 return;
             }
             this._private__scaleStartPoint = null;
             this._private__priceRangeSnapshot = null;
-        };
-        PriceScale.prototype._internal_startScroll = function (x) {
+        }
+        _internal_startScroll(x) {
             if (this._internal_isAutoScale()) {
                 return;
             }
@@ -5419,26 +5387,26 @@
             }
             this._private__scrollStartPoint = x;
             this._private__priceRangeSnapshot = ensureNotNull(this._internal_priceRange())._internal_clone();
-        };
-        PriceScale.prototype._internal_scrollTo = function (x) {
+        }
+        _internal_scrollTo(x) {
             if (this._internal_isAutoScale()) {
                 return;
             }
             if (this._private__scrollStartPoint === null) {
                 return;
             }
-            var priceUnitsPerPixel = ensureNotNull(this._internal_priceRange())._internal_length() / (this._internal_internalHeight() - 1);
-            var pixelDelta = x - this._private__scrollStartPoint;
+            const priceUnitsPerPixel = ensureNotNull(this._internal_priceRange())._internal_length() / (this._internal_internalHeight() - 1);
+            let pixelDelta = x - this._private__scrollStartPoint;
             if (this._internal_isInverted()) {
                 pixelDelta *= -1;
             }
-            var priceDelta = pixelDelta * priceUnitsPerPixel;
-            var newPriceRange = ensureNotNull(this._private__priceRangeSnapshot)._internal_clone();
+            const priceDelta = pixelDelta * priceUnitsPerPixel;
+            const newPriceRange = ensureNotNull(this._private__priceRangeSnapshot)._internal_clone();
             newPriceRange._internal_shift(priceDelta);
             this._internal_setPriceRange(newPriceRange, true);
             this._private__marksCache = null;
-        };
-        PriceScale.prototype._internal_endScroll = function () {
+        }
+        _internal_endScroll() {
             if (this._internal_isAutoScale()) {
                 return;
             }
@@ -5447,55 +5415,55 @@
             }
             this._private__scrollStartPoint = null;
             this._private__priceRangeSnapshot = null;
-        };
-        PriceScale.prototype._internal_formatter = function () {
+        }
+        _internal_formatter() {
             if (!this._private__formatter) {
                 this._internal_updateFormatter();
             }
             return this._private__formatter;
-        };
-        PriceScale.prototype._internal_formatPrice = function (price, firstValue) {
+        }
+        _internal_formatPrice(price, firstValue) {
             switch (this._private__options.mode) {
-                case 2 /* Percentage */:
+                case 2 /* PriceScaleMode.Percentage */:
                     return this._internal_formatter().format(toPercent(price, firstValue));
-                case 3 /* IndexedTo100 */:
+                case 3 /* PriceScaleMode.IndexedTo100 */:
                     return this._internal_formatter().format(toIndexedTo100(price, firstValue));
                 default:
                     return this._private__formatPrice(price);
             }
-        };
-        PriceScale.prototype._internal_formatLogical = function (logical) {
+        }
+        _internal_formatLogical(logical) {
             switch (this._private__options.mode) {
-                case 2 /* Percentage */:
-                case 3 /* IndexedTo100 */:
+                case 2 /* PriceScaleMode.Percentage */:
+                case 3 /* PriceScaleMode.IndexedTo100 */:
                     return this._internal_formatter().format(logical);
                 default:
                     return this._private__formatPrice(logical);
             }
-        };
-        PriceScale.prototype._internal_formatPriceAbsolute = function (price) {
+        }
+        _internal_formatPriceAbsolute(price) {
             return this._private__formatPrice(price, ensureNotNull(this._private__formatterSource())._internal_formatter());
-        };
-        PriceScale.prototype._internal_formatPricePercentage = function (price, baseValue) {
+        }
+        _internal_formatPricePercentage(price, baseValue) {
             price = toPercent(price, baseValue);
             return percentageFormatter.format(price);
-        };
-        PriceScale.prototype._internal_sourcesForAutoScale = function () {
+        }
+        _internal_sourcesForAutoScale() {
             return this._private__dataSources;
-        };
-        PriceScale.prototype._internal_recalculatePriceRange = function (visibleBars) {
+        }
+        _internal_recalculatePriceRange(visibleBars) {
             this._private__invalidatedForRange = {
                 _internal_visibleBars: visibleBars,
                 _internal_isValid: false,
             };
-        };
-        PriceScale.prototype._internal_updateAllViews = function () {
-            this._private__dataSources.forEach(function (s) { return s._internal_updateAllViews(); });
-        };
-        PriceScale.prototype._internal_updateFormatter = function () {
+        }
+        _internal_updateAllViews() {
+            this._private__dataSources.forEach((s) => s._internal_updateAllViews());
+        }
+        _internal_updateFormatter() {
             this._private__marksCache = null;
-            var formatterSource = this._private__formatterSource();
-            var base = 100;
+            const formatterSource = this._private__formatterSource();
+            let base = 100;
             if (formatterSource !== null) {
                 base = Math.round(1 / formatterSource._internal_minMove());
             }
@@ -5516,92 +5484,91 @@
             }
             this._private__markBuilder = new PriceTickMarkBuilder(this, base, this._private__coordinateToLogical.bind(this), this._private__logicalToCoordinate.bind(this));
             this._private__markBuilder._internal_rebuildTickMarks();
-        };
-        PriceScale.prototype._internal_invalidateSourcesCache = function () {
+        }
+        _internal_invalidateSourcesCache() {
             this._private__cachedOrderedSources = null;
-        };
+        }
         /**
          * @returns The {@link IPriceDataSource} that will be used as the "formatter source" (take minMove for formatter).
          */
-        PriceScale.prototype._private__formatterSource = function () {
+        _private__formatterSource() {
             return this._private__dataSources[0] || null;
-        };
-        PriceScale.prototype._private__topMarginPx = function () {
+        }
+        _private__topMarginPx() {
             return this._internal_isInverted()
                 ? this._private__options.scaleMargins.bottom * this._internal_height() + this._private__marginBelow
                 : this._private__options.scaleMargins.top * this._internal_height() + this._private__marginAbove;
-        };
-        PriceScale.prototype._private__bottomMarginPx = function () {
+        }
+        _private__bottomMarginPx() {
             return this._internal_isInverted()
                 ? this._private__options.scaleMargins.top * this._internal_height() + this._private__marginAbove
                 : this._private__options.scaleMargins.bottom * this._internal_height() + this._private__marginBelow;
-        };
-        PriceScale.prototype._private__makeSureItIsValid = function () {
+        }
+        _private__makeSureItIsValid() {
             if (!this._private__invalidatedForRange._internal_isValid) {
                 this._private__invalidatedForRange._internal_isValid = true;
                 this._private__recalculatePriceRangeImpl();
             }
-        };
-        PriceScale.prototype._private__invalidateInternalHeightCache = function () {
+        }
+        _private__invalidateInternalHeightCache() {
             this._private__internalHeightCache = null;
-        };
-        PriceScale.prototype._private__logicalToCoordinate = function (logical, baseValue) {
+        }
+        _private__logicalToCoordinate(logical, baseValue) {
             this._private__makeSureItIsValid();
             if (this._internal_isEmpty()) {
                 return 0;
             }
             logical = this._internal_isLog() && logical ? toLog(logical, this._private__logFormula) : logical;
-            var range = ensureNotNull(this._internal_priceRange());
-            var invCoordinate = this._private__bottomMarginPx() +
+            const range = ensureNotNull(this._internal_priceRange());
+            const invCoordinate = this._private__bottomMarginPx() +
                 (this._internal_internalHeight() - 1) * (logical - range._internal_minValue()) / range._internal_length();
-            var coordinate = this._internal_invertedCoordinate(invCoordinate);
+            const coordinate = this._internal_invertedCoordinate(invCoordinate);
             return coordinate;
-        };
-        PriceScale.prototype._private__coordinateToLogical = function (coordinate, baseValue) {
+        }
+        _private__coordinateToLogical(coordinate, baseValue) {
             this._private__makeSureItIsValid();
             if (this._internal_isEmpty()) {
                 return 0;
             }
-            var invCoordinate = this._internal_invertedCoordinate(coordinate);
-            var range = ensureNotNull(this._internal_priceRange());
-            var logical = range._internal_minValue() + range._internal_length() *
+            const invCoordinate = this._internal_invertedCoordinate(coordinate);
+            const range = ensureNotNull(this._internal_priceRange());
+            const logical = range._internal_minValue() + range._internal_length() *
                 ((invCoordinate - this._private__bottomMarginPx()) / (this._internal_internalHeight() - 1));
             return this._internal_isLog() ? fromLog(logical, this._private__logFormula) : logical;
-        };
-        PriceScale.prototype._private__onIsInvertedChanged = function () {
+        }
+        _private__onIsInvertedChanged() {
             this._private__marksCache = null;
             this._private__markBuilder._internal_rebuildTickMarks();
-        };
+        }
         // eslint-disable-next-line complexity
-        PriceScale.prototype._private__recalculatePriceRangeImpl = function () {
-            var visibleBars = this._private__invalidatedForRange._internal_visibleBars;
+        _private__recalculatePriceRangeImpl() {
+            const visibleBars = this._private__invalidatedForRange._internal_visibleBars;
             if (visibleBars === null) {
                 return;
             }
-            var priceRange = null;
-            var sources = this._internal_sourcesForAutoScale();
-            var marginAbove = 0;
-            var marginBelow = 0;
-            for (var _i = 0, sources_1 = sources; _i < sources_1.length; _i++) {
-                var source = sources_1[_i];
+            let priceRange = null;
+            const sources = this._internal_sourcesForAutoScale();
+            let marginAbove = 0;
+            let marginBelow = 0;
+            for (const source of sources) {
                 if (!source._internal_visible()) {
                     continue;
                 }
-                var firstValue = source._internal_firstValue();
+                const firstValue = source._internal_firstValue();
                 if (firstValue === null) {
                     continue;
                 }
-                var autoScaleInfo = source._internal_autoscaleInfo(visibleBars._internal_left(), visibleBars._internal_right());
-                var sourceRange = autoScaleInfo && autoScaleInfo._internal_priceRange();
+                const autoScaleInfo = source._internal_autoscaleInfo(visibleBars._internal_left(), visibleBars._internal_right());
+                let sourceRange = autoScaleInfo && autoScaleInfo._internal_priceRange();
                 if (sourceRange !== null) {
                     switch (this._private__options.mode) {
-                        case 1 /* Logarithmic */:
+                        case 1 /* PriceScaleMode.Logarithmic */:
                             sourceRange = convertPriceRangeToLog(sourceRange, this._private__logFormula);
                             break;
-                        case 2 /* Percentage */:
+                        case 2 /* PriceScaleMode.Percentage */:
                             sourceRange = toPercentRange(sourceRange, firstValue._internal_value);
                             break;
-                        case 3 /* IndexedTo100 */:
+                        case 3 /* PriceScaleMode.IndexedTo100 */:
                             sourceRange = toIndexedTo100Range(sourceRange, firstValue._internal_value);
                             break;
                     }
@@ -5612,7 +5579,7 @@
                         priceRange = priceRange._internal_merge(ensureNotNull(sourceRange));
                     }
                     if (autoScaleInfo !== null) {
-                        var margins = autoScaleInfo._internal_margins();
+                        const margins = autoScaleInfo._internal_margins();
                         if (margins !== null) {
                             marginAbove = Math.max(marginAbove, margins.above);
                             marginBelow = Math.max(marginAbove, margins.below);
@@ -5629,11 +5596,11 @@
             if (priceRange !== null) {
                 // keep current range is new is empty
                 if (priceRange._internal_minValue() === priceRange._internal_maxValue()) {
-                    var formatterSource = this._private__formatterSource();
-                    var minMove = formatterSource === null || this._internal_isPercentage() || this._internal_isIndexedTo100() ? 1 : formatterSource._internal_minMove();
+                    const formatterSource = this._private__formatterSource();
+                    const minMove = formatterSource === null || this._internal_isPercentage() || this._internal_isIndexedTo100() ? 1 : formatterSource._internal_minMove();
                     // if price range is degenerated to 1 point let's extend it by 10 min move values
                     // to avoid incorrect range and empty (blank) scale (in case of min tick much greater than 1)
-                    var extendValue = 5 * minMove;
+                    const extendValue = 5 * minMove;
                     if (this._internal_isLog()) {
                         priceRange = convertPriceRangeFromLog(priceRange, this._private__logFormula);
                     }
@@ -5643,10 +5610,10 @@
                     }
                 }
                 if (this._internal_isLog()) {
-                    var rawRange = convertPriceRangeFromLog(priceRange, this._private__logFormula);
-                    var newLogFormula = logFormulaForPriceRange(rawRange);
+                    const rawRange = convertPriceRangeFromLog(priceRange, this._private__logFormula);
+                    const newLogFormula = logFormulaForPriceRange(rawRange);
                     if (!logFormulasAreSame(newLogFormula, this._private__logFormula)) {
-                        var rawSnapshot = this._private__priceRangeSnapshot !== null ? convertPriceRangeFromLog(this._private__priceRangeSnapshot, this._private__logFormula) : null;
+                        const rawSnapshot = this._private__priceRangeSnapshot !== null ? convertPriceRangeFromLog(this._private__priceRangeSnapshot, this._private__logFormula) : null;
                         this._private__logFormula = newLogFormula;
                         priceRange = convertPriceRangeToLog(rawRange, newLogFormula);
                         if (rawSnapshot !== null) {
@@ -5664,9 +5631,8 @@
                 }
             }
             this._private__invalidatedForRange._internal_isValid = true;
-        };
-        PriceScale.prototype._private__getCoordinateTransformer = function () {
-            var _this = this;
+        }
+        _private__getCoordinateTransformer() {
             if (this._internal_isPercentage()) {
                 return toPercent;
             }
@@ -5674,11 +5640,11 @@
                 return toIndexedTo100;
             }
             else if (this._internal_isLog()) {
-                return function (price) { return toLog(price, _this._private__logFormula); };
+                return (price) => toLog(price, this._private__logFormula);
             }
             return null;
-        };
-        PriceScale.prototype._private__formatPrice = function (price, fallbackFormatter) {
+        }
+        _private__formatPrice(price, fallbackFormatter) {
             if (this._private__localizationOptions.priceFormatter === undefined) {
                 if (fallbackFormatter === undefined) {
                     fallbackFormatter = this._internal_formatter();
@@ -5686,13 +5652,12 @@
                 return fallbackFormatter.format(price);
             }
             return this._private__localizationOptions.priceFormatter(price);
-        };
-        return PriceScale;
-    }());
+        }
+    }
 
-    var DEFAULT_STRETCH_FACTOR = 1000;
-    var Pane = /** @class */ (function () {
-        function Pane(timeScale, model) {
+    const DEFAULT_STRETCH_FACTOR = 1000;
+    class Pane {
+        constructor(timeScale, model) {
             this._private__dataSources = [];
             this._private__overlaySourcesByScaleId = new Map();
             this._private__height = 0;
@@ -5703,14 +5668,14 @@
             this._private__timeScale = timeScale;
             this._private__model = model;
             this._private__grid = new Grid(this);
-            var options = model._internal_options();
-            this._private__leftPriceScale = this._private__createPriceScale("left" /* Left */, options.leftPriceScale);
-            this._private__rightPriceScale = this._private__createPriceScale("right" /* Right */, options.rightPriceScale);
+            const options = model._internal_options();
+            this._private__leftPriceScale = this._private__createPriceScale("left" /* DefaultPriceScaleId.Left */, options.leftPriceScale);
+            this._private__rightPriceScale = this._private__createPriceScale("right" /* DefaultPriceScaleId.Right */, options.rightPriceScale);
             this._private__leftPriceScale._internal_modeChanged()._internal_subscribe(this._private__onPriceScaleModeChanged.bind(this, this._private__leftPriceScale), this);
-            this._private__rightPriceScale._internal_modeChanged()._internal_subscribe(this._private__onPriceScaleModeChanged.bind(this, this._private__leftPriceScale), this);
+            this._private__rightPriceScale._internal_modeChanged()._internal_subscribe(this._private__onPriceScaleModeChanged.bind(this, this._private__rightPriceScale), this);
             this._internal_applyScaleOptions(options);
         }
-        Pane.prototype._internal_applyScaleOptions = function (options) {
+        _internal_applyScaleOptions(options) {
             if (options.leftPriceScale) {
                 this._private__leftPriceScale._internal_applyOptions(options.leftPriceScale);
             }
@@ -5722,23 +5687,22 @@
                 this._private__rightPriceScale._internal_updateFormatter();
             }
             if (options.overlayPriceScales) {
-                var sourceArrays = Array.from(this._private__overlaySourcesByScaleId.values());
-                for (var _i = 0, sourceArrays_1 = sourceArrays; _i < sourceArrays_1.length; _i++) {
-                    var arr = sourceArrays_1[_i];
-                    var priceScale = ensureNotNull(arr[0]._internal_priceScale());
+                const sourceArrays = Array.from(this._private__overlaySourcesByScaleId.values());
+                for (const arr of sourceArrays) {
+                    const priceScale = ensureNotNull(arr[0]._internal_priceScale());
                     priceScale._internal_applyOptions(options.overlayPriceScales);
                     if (options.localization) {
                         priceScale._internal_updateFormatter();
                     }
                 }
             }
-        };
-        Pane.prototype._internal_priceScaleById = function (id) {
+        }
+        _internal_priceScaleById(id) {
             switch (id) {
-                case "left" /* Left */: {
+                case "left" /* DefaultPriceScaleId.Left */: {
                     return this._private__leftPriceScale;
                 }
-                case "right" /* Right */: {
+                case "right" /* DefaultPriceScaleId.Right */: {
                     return this._private__rightPriceScale;
                 }
             }
@@ -5746,75 +5710,74 @@
                 return ensureDefined(this._private__overlaySourcesByScaleId.get(id))[0]._internal_priceScale();
             }
             return null;
-        };
-        Pane.prototype._internal_destroy = function () {
+        }
+        _internal_destroy() {
             this._internal_model()._internal_priceScalesOptionsChanged()._internal_unsubscribeAll(this);
             this._private__leftPriceScale._internal_modeChanged()._internal_unsubscribeAll(this);
             this._private__rightPriceScale._internal_modeChanged()._internal_unsubscribeAll(this);
-            this._private__dataSources.forEach(function (source) {
+            this._private__dataSources.forEach((source) => {
                 if (source._internal_destroy) {
                     source._internal_destroy();
                 }
             });
             this._private__destroyed._internal_fire();
-        };
-        Pane.prototype._internal_stretchFactor = function () {
+        }
+        _internal_stretchFactor() {
             return this._private__stretchFactor;
-        };
-        Pane.prototype._internal_setStretchFactor = function (factor) {
+        }
+        _internal_setStretchFactor(factor) {
             this._private__stretchFactor = factor;
-        };
-        Pane.prototype._internal_model = function () {
+        }
+        _internal_model() {
             return this._private__model;
-        };
-        Pane.prototype._internal_width = function () {
+        }
+        _internal_width() {
             return this._private__width;
-        };
-        Pane.prototype._internal_height = function () {
+        }
+        _internal_height() {
             return this._private__height;
-        };
-        Pane.prototype._internal_setWidth = function (width) {
+        }
+        _internal_setWidth(width) {
             this._private__width = width;
             this._internal_updateAllSources();
-        };
-        Pane.prototype._internal_setHeight = function (height) {
-            var _this = this;
+        }
+        _internal_setHeight(height) {
             this._private__height = height;
             this._private__leftPriceScale._internal_setHeight(height);
             this._private__rightPriceScale._internal_setHeight(height);
             // process overlays
-            this._private__dataSources.forEach(function (ds) {
-                if (_this._internal_isOverlay(ds)) {
-                    var priceScale = ds._internal_priceScale();
+            this._private__dataSources.forEach((ds) => {
+                if (this._internal_isOverlay(ds)) {
+                    const priceScale = ds._internal_priceScale();
                     if (priceScale !== null) {
                         priceScale._internal_setHeight(height);
                     }
                 }
             });
             this._internal_updateAllSources();
-        };
-        Pane.prototype._internal_dataSources = function () {
+        }
+        _internal_dataSources() {
             return this._private__dataSources;
-        };
-        Pane.prototype._internal_isOverlay = function (source) {
-            var priceScale = source._internal_priceScale();
+        }
+        _internal_isOverlay(source) {
+            const priceScale = source._internal_priceScale();
             if (priceScale === null) {
                 return true;
             }
             return this._private__leftPriceScale !== priceScale && this._private__rightPriceScale !== priceScale;
-        };
-        Pane.prototype._internal_addDataSource = function (source, targetScaleId, zOrder) {
-            var targetZOrder = (zOrder !== undefined) ? zOrder : this._private__getZOrderMinMax()._internal_maxZOrder + 1;
+        }
+        _internal_addDataSource(source, targetScaleId, zOrder) {
+            const targetZOrder = (zOrder !== undefined) ? zOrder : this._private__getZOrderMinMax()._internal_maxZOrder + 1;
             this._private__insertDataSource(source, targetScaleId, targetZOrder);
-        };
-        Pane.prototype._internal_removeDataSource = function (source) {
-            var index = this._private__dataSources.indexOf(source);
+        }
+        _internal_removeDataSource(source) {
+            const index = this._private__dataSources.indexOf(source);
             assert(index !== -1, 'removeDataSource: invalid data source');
             this._private__dataSources.splice(index, 1);
-            var priceScaleId = ensureNotNull(source._internal_priceScale())._internal_id();
+            const priceScaleId = ensureNotNull(source._internal_priceScale())._internal_id();
             if (this._private__overlaySourcesByScaleId.has(priceScaleId)) {
-                var overlaySources = ensureDefined(this._private__overlaySourcesByScaleId.get(priceScaleId));
-                var overlayIndex = overlaySources.indexOf(source);
+                const overlaySources = ensureDefined(this._private__overlaySourcesByScaleId.get(priceScaleId));
+                const overlayIndex = overlaySources.indexOf(source);
                 if (overlayIndex !== -1) {
                     overlaySources.splice(overlayIndex, 1);
                     if (overlaySources.length === 0) {
@@ -5822,7 +5785,7 @@
                     }
                 }
             }
-            var priceScale = source._internal_priceScale();
+            const priceScale = source._internal_priceScale();
             // if source has owner, it returns owner's price scale
             // and it does not have source in their list
             if (priceScale && priceScale._internal_dataSources().indexOf(source) >= 0) {
@@ -5833,8 +5796,8 @@
                 this._internal_recalculatePriceScale(priceScale);
             }
             this._private__cachedOrderedSources = null;
-        };
-        Pane.prototype._internal_priceScalePosition = function (priceScale) {
+        }
+        _internal_priceScalePosition(priceScale) {
             if (priceScale === this._private__leftPriceScale) {
                 return 'left';
             }
@@ -5842,41 +5805,41 @@
                 return 'right';
             }
             return 'overlay';
-        };
-        Pane.prototype._internal_leftPriceScale = function () {
+        }
+        _internal_leftPriceScale() {
             return this._private__leftPriceScale;
-        };
-        Pane.prototype._internal_rightPriceScale = function () {
+        }
+        _internal_rightPriceScale() {
             return this._private__rightPriceScale;
-        };
-        Pane.prototype._internal_startScalePrice = function (priceScale, x) {
+        }
+        _internal_startScalePrice(priceScale, x) {
             priceScale._internal_startScale(x);
-        };
-        Pane.prototype._internal_scalePriceTo = function (priceScale, x) {
+        }
+        _internal_scalePriceTo(priceScale, x) {
             priceScale._internal_scaleTo(x);
             // TODO: be more smart and update only affected views
             this._internal_updateAllSources();
-        };
-        Pane.prototype._internal_endScalePrice = function (priceScale) {
+        }
+        _internal_endScalePrice(priceScale) {
             priceScale._internal_endScale();
-        };
-        Pane.prototype._internal_startScrollPrice = function (priceScale, x) {
+        }
+        _internal_startScrollPrice(priceScale, x) {
             priceScale._internal_startScroll(x);
-        };
-        Pane.prototype._internal_scrollPriceTo = function (priceScale, x) {
+        }
+        _internal_scrollPriceTo(priceScale, x) {
             priceScale._internal_scrollTo(x);
             this._internal_updateAllSources();
-        };
-        Pane.prototype._internal_endScrollPrice = function (priceScale) {
+        }
+        _internal_endScrollPrice(priceScale) {
             priceScale._internal_endScroll();
-        };
-        Pane.prototype._internal_updateAllSources = function () {
-            this._private__dataSources.forEach(function (source) {
+        }
+        _internal_updateAllSources() {
+            this._private__dataSources.forEach((source) => {
                 source._internal_updateAllViews();
             });
-        };
-        Pane.prototype._internal_defaultPriceScale = function () {
-            var priceScale = null;
+        }
+        _internal_defaultPriceScale() {
+            let priceScale = null;
             if (this._private__model._internal_options().rightPriceScale.visible && this._private__rightPriceScale._internal_dataSources().length !== 0) {
                 priceScale = this._private__rightPriceScale;
             }
@@ -5890,9 +5853,9 @@
                 priceScale = this._private__rightPriceScale;
             }
             return priceScale;
-        };
-        Pane.prototype._internal_defaultVisiblePriceScale = function () {
-            var priceScale = null;
+        }
+        _internal_defaultVisiblePriceScale() {
+            let priceScale = null;
             if (this._private__model._internal_options().rightPriceScale.visible) {
                 priceScale = this._private__rightPriceScale;
             }
@@ -5900,70 +5863,69 @@
                 priceScale = this._private__leftPriceScale;
             }
             return priceScale;
-        };
-        Pane.prototype._internal_recalculatePriceScale = function (priceScale) {
+        }
+        _internal_recalculatePriceScale(priceScale) {
             if (priceScale === null || !priceScale._internal_isAutoScale()) {
                 return;
             }
             this._private__recalculatePriceScaleImpl(priceScale);
-        };
-        Pane.prototype._internal_resetPriceScale = function (priceScale) {
-            var visibleBars = this._private__timeScale._internal_visibleStrictRange();
+        }
+        _internal_resetPriceScale(priceScale) {
+            const visibleBars = this._private__timeScale._internal_visibleStrictRange();
             priceScale._internal_setMode({ _internal_autoScale: true });
             if (visibleBars !== null) {
                 priceScale._internal_recalculatePriceRange(visibleBars);
             }
             this._internal_updateAllSources();
-        };
-        Pane.prototype._internal_momentaryAutoScale = function () {
+        }
+        _internal_momentaryAutoScale() {
             this._private__recalculatePriceScaleImpl(this._private__leftPriceScale);
             this._private__recalculatePriceScaleImpl(this._private__rightPriceScale);
-        };
-        Pane.prototype._internal_recalculate = function () {
-            var _this = this;
+        }
+        _internal_recalculate() {
             this._internal_recalculatePriceScale(this._private__leftPriceScale);
             this._internal_recalculatePriceScale(this._private__rightPriceScale);
-            this._private__dataSources.forEach(function (ds) {
-                if (_this._internal_isOverlay(ds)) {
-                    _this._internal_recalculatePriceScale(ds._internal_priceScale());
+            this._private__dataSources.forEach((ds) => {
+                if (this._internal_isOverlay(ds)) {
+                    this._internal_recalculatePriceScale(ds._internal_priceScale());
                 }
             });
             this._internal_updateAllSources();
             this._private__model._internal_lightUpdate();
-        };
-        Pane.prototype._internal_orderedSources = function () {
+        }
+        _internal_orderedSources() {
             if (this._private__cachedOrderedSources === null) {
                 this._private__cachedOrderedSources = sortSources(this._private__dataSources);
             }
             return this._private__cachedOrderedSources;
-        };
-        Pane.prototype._internal_onDestroyed = function () {
+        }
+        _internal_onDestroyed() {
             return this._private__destroyed;
-        };
-        Pane.prototype._internal_grid = function () {
+        }
+        _internal_grid() {
             return this._private__grid;
-        };
-        Pane.prototype._private__recalculatePriceScaleImpl = function (priceScale) {
+        }
+        _private__recalculatePriceScaleImpl(priceScale) {
             // TODO: can use this checks
-            var sourceForAutoScale = priceScale._internal_sourcesForAutoScale();
+            const sourceForAutoScale = priceScale._internal_sourcesForAutoScale();
             if (sourceForAutoScale && sourceForAutoScale.length > 0 && !this._private__timeScale._internal_isEmpty()) {
-                var visibleBars = this._private__timeScale._internal_visibleStrictRange();
+                const visibleBars = this._private__timeScale._internal_visibleStrictRange();
                 if (visibleBars !== null) {
                     priceScale._internal_recalculatePriceRange(visibleBars);
                 }
             }
             priceScale._internal_updateAllViews();
-        };
-        Pane.prototype._private__getZOrderMinMax = function () {
-            var sources = this._internal_orderedSources();
+        }
+        _private__getZOrderMinMax() {
+            const sources = this._internal_orderedSources();
             if (sources.length === 0) {
                 return { _internal_minZOrder: 0, _internal_maxZOrder: 0 };
             }
-            var minZOrder = 0;
-            var maxZOrder = 0;
-            for (var j = 0; j < sources.length; j++) {
-                var ds = sources[j];
-                var zOrder = ds._internal_zorder();
+            let minZOrder = 0;
+            let maxZOrder = 0;
+            for (let j = 0; j < sources.length; j++) {
+                const ds = sources[j];
+                const zOrder = ds._internal_zorder();
                 if (zOrder !== null) {
                     if (zOrder < minZOrder) {
                         minZOrder = zOrder;
@@ -5974,15 +5936,15 @@
                 }
             }
             return { _internal_minZOrder: minZOrder, _internal_maxZOrder: maxZOrder };
-        };
-        Pane.prototype._private__insertDataSource = function (source, priceScaleId, zOrder) {
-            var priceScale = this._internal_priceScaleById(priceScaleId);
+        }
+        _private__insertDataSource(source, priceScaleId, zOrder) {
+            let priceScale = this._internal_priceScaleById(priceScaleId);
             if (priceScale === null) {
                 priceScale = this._private__createPriceScale(priceScaleId, this._private__model._internal_options().overlayPriceScales);
             }
             this._private__dataSources.push(source);
             if (!isDefaultPriceScale(priceScaleId)) {
-                var overlaySources = this._private__overlaySourcesByScaleId.get(priceScaleId) || [];
+                const overlaySources = this._private__overlaySourcesByScaleId.get(priceScaleId) || [];
                 overlaySources.push(source);
                 this._private__overlaySourcesByScaleId.set(priceScaleId, overlaySources);
             }
@@ -5991,34 +5953,33 @@
             source._internal_setZorder(zOrder);
             this._internal_recalculatePriceScale(priceScale);
             this._private__cachedOrderedSources = null;
-        };
-        Pane.prototype._private__onPriceScaleModeChanged = function (priceScale, oldMode, newMode) {
+        }
+        _private__onPriceScaleModeChanged(priceScale, oldMode, newMode) {
             if (oldMode._internal_mode === newMode._internal_mode) {
                 return;
             }
             // momentary auto scale if we toggle percentage/indexedTo100 mode
             this._private__recalculatePriceScaleImpl(priceScale);
-        };
-        Pane.prototype._private__createPriceScale = function (id, options) {
-            var actualOptions = __assign({ visible: true, autoScale: true }, clone(options));
-            var priceScale = new PriceScale(id, actualOptions, this._private__model._internal_options().layout, this._private__model._internal_options().localization);
+        }
+        _private__createPriceScale(id, options) {
+            const actualOptions = Object.assign({ visible: true, autoScale: true }, clone(options));
+            const priceScale = new PriceScale(id, actualOptions, this._private__model._internal_options().layout, this._private__model._internal_options().localization);
             priceScale._internal_setHeight(this._internal_height());
             return priceScale;
-        };
-        return Pane;
-    }());
+        }
+    }
 
-    var getMonth = function (date) { return date.getUTCMonth() + 1; };
-    var getDay = function (date) { return date.getUTCDate(); };
-    var getYear = function (date) { return date.getUTCFullYear(); };
-    var dd = function (date) { return numberToStringWithLeadingZero(getDay(date), 2); };
-    var MMMM = function (date, locale) { return new Date(date.getUTCFullYear(), date.getUTCMonth(), 1)
-        .toLocaleString(locale, { month: 'long' }); };
-    var MMM = function (date, locale) { return new Date(date.getUTCFullYear(), date.getUTCMonth(), 1)
-        .toLocaleString(locale, { month: 'short' }); };
-    var MM = function (date) { return numberToStringWithLeadingZero(getMonth(date), 2); };
-    var yy = function (date) { return numberToStringWithLeadingZero(getYear(date) % 100, 2); };
-    var yyyy = function (date) { return numberToStringWithLeadingZero(getYear(date), 4); };
+    const getMonth = (date) => date.getUTCMonth() + 1;
+    const getDay = (date) => date.getUTCDate();
+    const getYear = (date) => date.getUTCFullYear();
+    const dd = (date) => numberToStringWithLeadingZero(getDay(date), 2);
+    const MMMM = (date, locale) => new Date(date.getUTCFullYear(), date.getUTCMonth(), 1)
+        .toLocaleString(locale, { month: 'long' });
+    const MMM = (date, locale) => new Date(date.getUTCFullYear(), date.getUTCMonth(), 1)
+        .toLocaleString(locale, { month: 'short' });
+    const MM = (date) => numberToStringWithLeadingZero(getMonth(date), 2);
+    const yy = (date) => numberToStringWithLeadingZero(getYear(date) % 100, 2);
+    const yyyy = (date) => numberToStringWithLeadingZero(getYear(date), 4);
     function formatDate(date, format, locale) {
         return format
             .replace(/yyyy/g, yyyy(date))
@@ -6029,87 +5990,80 @@
             .replace(/dd/g, dd(date));
     }
 
-    var DateFormatter = /** @class */ (function () {
-        function DateFormatter(dateFormat, locale) {
-            if (dateFormat === void 0) { dateFormat = 'yyyy-MM-dd'; }
-            if (locale === void 0) { locale = 'default'; }
+    class DateFormatter {
+        constructor(dateFormat = 'yyyy-MM-dd', locale = 'default') {
             this._private__dateFormat = dateFormat;
             this._private__locale = locale;
         }
-        DateFormatter.prototype._internal_format = function (date) {
+        _internal_format(date) {
             return formatDate(date, this._private__dateFormat, this._private__locale);
-        };
-        return DateFormatter;
-    }());
+        }
+    }
 
-    var TimeFormatter = /** @class */ (function () {
-        function TimeFormatter(format) {
+    class TimeFormatter {
+        constructor(format) {
             this._private__formatStr = format || '%h:%m:%s';
         }
-        TimeFormatter.prototype._internal_format = function (date) {
+        _internal_format(date) {
             return this._private__formatStr.replace('%h', numberToStringWithLeadingZero(date.getUTCHours(), 2)).
                 replace('%m', numberToStringWithLeadingZero(date.getUTCMinutes(), 2)).
                 replace('%s', numberToStringWithLeadingZero(date.getUTCSeconds(), 2));
-        };
-        return TimeFormatter;
-    }());
+        }
+    }
 
-    var defaultParams = {
+    const defaultParams = {
         _internal_dateFormat: 'yyyy-MM-dd',
         _internal_timeFormat: '%h:%m:%s',
         _internal_dateTimeSeparator: ' ',
         _internal_locale: 'default',
     };
-    var DateTimeFormatter = /** @class */ (function () {
-        function DateTimeFormatter(params) {
-            if (params === void 0) { params = {}; }
-            var formatterParams = __assign(__assign({}, defaultParams), params);
+    class DateTimeFormatter {
+        constructor(params = {}) {
+            const formatterParams = Object.assign(Object.assign({}, defaultParams), params);
             this._private__dateFormatter = new DateFormatter(formatterParams._internal_dateFormat, formatterParams._internal_locale);
             this._private__timeFormatter = new TimeFormatter(formatterParams._internal_timeFormat);
             this._private__separator = formatterParams._internal_dateTimeSeparator;
         }
-        DateTimeFormatter.prototype._internal_format = function (dateTime) {
-            return "".concat(this._private__dateFormatter._internal_format(dateTime)).concat(this._private__separator).concat(this._private__timeFormatter._internal_format(dateTime));
-        };
-        return DateTimeFormatter;
-    }());
+        _internal_format(dateTime) {
+            return `${this._private__dateFormatter._internal_format(dateTime)}${this._private__separator}${this._private__timeFormatter._internal_format(dateTime)}`;
+        }
+    }
 
     function defaultTickMarkFormatter(timePoint, tickMarkType, locale) {
-        var formatOptions = {};
+        const formatOptions = {};
         switch (tickMarkType) {
-            case 0 /* Year */:
+            case 0 /* TickMarkType.Year */:
                 formatOptions.year = 'numeric';
                 break;
-            case 1 /* Month */:
+            case 1 /* TickMarkType.Month */:
                 formatOptions.month = 'short';
                 break;
-            case 2 /* DayOfMonth */:
+            case 2 /* TickMarkType.DayOfMonth */:
                 formatOptions.day = 'numeric';
                 break;
-            case 3 /* Time */:
+            case 3 /* TickMarkType.Time */:
                 formatOptions.hour12 = false;
                 formatOptions.hour = '2-digit';
                 formatOptions.minute = '2-digit';
                 break;
-            case 4 /* TimeWithSeconds */:
+            case 4 /* TickMarkType.TimeWithSeconds */:
                 formatOptions.hour12 = false;
                 formatOptions.hour = '2-digit';
                 formatOptions.minute = '2-digit';
                 formatOptions.second = '2-digit';
                 break;
         }
-        var date = timePoint._internal_businessDay === undefined
+        const date = timePoint._internal_businessDay === undefined
             ? new Date(timePoint._internal_timestamp * 1000)
             : new Date(Date.UTC(timePoint._internal_businessDay.year, timePoint._internal_businessDay.month - 1, timePoint._internal_businessDay.day));
         // from given date we should use only as UTC date or timestamp
         // but to format as locale date we can convert UTC date to local date
-        var localDateFromUtc = new Date(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());
+        const localDateFromUtc = new Date(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());
         return localDateFromUtc.toLocaleString(locale, formatOptions);
     }
 
-    var FormattedLabelsCache = /** @class */ (function () {
-        function FormattedLabelsCache(format, size) {
-            if (size === void 0) { size = 50; }
+    class FormattedLabelsCache {
+        constructor(format, size = 50) {
             this._private__actualSize = 0;
             this._private__usageTick = 1;
             this._private__oldestTick = 1;
@@ -6118,54 +6072,53 @@
             this._private__format = format;
             this._private__maxSize = size;
         }
-        FormattedLabelsCache.prototype._internal_format = function (value) {
-            var cacheKey = value._internal_businessDay === undefined
-                ? new Date(value._internal_timestamp * 1000).getTime()
-                : new Date(Date.UTC(value._internal_businessDay.year, value._internal_businessDay.month - 1, value._internal_businessDay.day)).getTime();
-            var tick = this._private__cache.get(cacheKey);
+        _internal_format(tickMark) {
+            const time = tickMark._internal_time;
+            const cacheKey = time._internal_businessDay === undefined
+                ? new Date(time._internal_timestamp * 1000).getTime()
+                : new Date(Date.UTC(time._internal_businessDay.year, time._internal_businessDay.month - 1, time._internal_businessDay.day)).getTime();
+            const tick = this._private__cache.get(cacheKey);
             if (tick !== undefined) {
                 return tick._internal_string;
             }
             if (this._private__actualSize === this._private__maxSize) {
-                var oldestValue = this._private__tick2Labels.get(this._private__oldestTick);
+                const oldestValue = this._private__tick2Labels.get(this._private__oldestTick);
                 this._private__tick2Labels.delete(this._private__oldestTick);
                 this._private__cache.delete(ensureDefined(oldestValue));
                 this._private__oldestTick++;
                 this._private__actualSize--;
             }
-            var str = this._private__format(value);
+            const str = this._private__format(tickMark);
             this._private__cache.set(cacheKey, { _internal_string: str, _internal_tick: this._private__usageTick });
             this._private__tick2Labels.set(this._private__usageTick, cacheKey);
             this._private__actualSize++;
             this._private__usageTick++;
             return str;
-        };
-        return FormattedLabelsCache;
-    }());
+        }
+    }
 
-    var RangeImpl = /** @class */ (function () {
-        function RangeImpl(left, right) {
+    class RangeImpl {
+        constructor(left, right) {
             assert(left <= right, 'right should be >= left');
             this._private__left = left;
             this._private__right = right;
         }
-        RangeImpl.prototype._internal_left = function () {
+        _internal_left() {
             return this._private__left;
-        };
-        RangeImpl.prototype._internal_right = function () {
+        }
+        _internal_right() {
             return this._private__right;
-        };
-        RangeImpl.prototype._internal_count = function () {
+        }
+        _internal_count() {
             return this._private__right - this._private__left + 1;
-        };
-        RangeImpl.prototype._internal_contains = function (index) {
+        }
+        _internal_contains(index) {
             return this._private__left <= index && index <= this._private__right;
-        };
-        RangeImpl.prototype._internal_equals = function (other) {
+        }
+        _internal_equals(other) {
             return this._private__left === other._internal_left() && this._private__right === other._internal_right();
-        };
-        return RangeImpl;
-    }());
+        }
+    }
     function areRangesEqual(first, second) {
         if (first === null || second === null) {
             return first === second;
@@ -6173,17 +6126,17 @@
         return first._internal_equals(second);
     }
 
-    var TickMarks = /** @class */ (function () {
-        function TickMarks() {
+    class TickMarks {
+        constructor() {
             this._private__marksByWeight = new Map();
             this._private__cache = null;
         }
-        TickMarks.prototype._internal_setTimeScalePoints = function (newPoints, firstChangedPointIndex) {
+        _internal_setTimeScalePoints(newPoints, firstChangedPointIndex) {
             this._private__removeMarksSinceIndex(firstChangedPointIndex);
             this._private__cache = null;
-            for (var index = firstChangedPointIndex; index < newPoints.length; ++index) {
-                var point = newPoints[index];
-                var marksForWeight = this._private__marksByWeight.get(point._internal_timeWeight);
+            for (let index = firstChangedPointIndex; index < newPoints.length; ++index) {
+                const point = newPoints[index];
+                let marksForWeight = this._private__marksByWeight.get(point._internal_timeWeight);
                 if (marksForWeight === undefined) {
                     marksForWeight = [];
                     this._private__marksByWeight.set(point._internal_timeWeight, marksForWeight);
@@ -6192,11 +6145,12 @@
                     _internal_index: index,
                     _internal_time: point._internal_time,
                     _internal_weight: point._internal_timeWeight,
+                    _internal_originalTime: point._internal_originalTime,
                 });
             }
-        };
-        TickMarks.prototype._internal_build = function (spacing, maxWidth) {
-            var maxIndexesPerMark = Math.ceil(maxWidth / spacing);
+        }
+        _internal_build(spacing, maxWidth) {
+            const maxIndexesPerMark = Math.ceil(maxWidth / spacing);
             if (this._private__cache === null || this._private__cache._internal_maxIndexesPerMark !== maxIndexesPerMark) {
                 this._private__cache = {
                     _internal_marks: this._private__buildMarksImpl(maxIndexesPerMark),
@@ -6204,50 +6158,48 @@
                 };
             }
             return this._private__cache._internal_marks;
-        };
-        TickMarks.prototype._private__removeMarksSinceIndex = function (sinceIndex) {
+        }
+        _private__removeMarksSinceIndex(sinceIndex) {
             if (sinceIndex === 0) {
                 this._private__marksByWeight.clear();
                 return;
             }
-            var weightsToClear = [];
-            this._private__marksByWeight.forEach(function (marks, timeWeight) {
+            const weightsToClear = [];
+            this._private__marksByWeight.forEach((marks, timeWeight) => {
                 if (sinceIndex <= marks[0]._internal_index) {
                     weightsToClear.push(timeWeight);
                 }
                 else {
-                    marks.splice(lowerbound(marks, sinceIndex, function (tm) { return tm._internal_index < sinceIndex; }), Infinity);
+                    marks.splice(lowerbound(marks, sinceIndex, (tm) => tm._internal_index < sinceIndex), Infinity);
                 }
             });
-            for (var _i = 0, weightsToClear_1 = weightsToClear; _i < weightsToClear_1.length; _i++) {
-                var weight = weightsToClear_1[_i];
+            for (const weight of weightsToClear) {
                 this._private__marksByWeight.delete(weight);
             }
-        };
-        TickMarks.prototype._private__buildMarksImpl = function (maxIndexesPerMark) {
-            var marks = [];
-            for (var _i = 0, _a = Array.from(this._private__marksByWeight.keys()).sort(function (a, b) { return b - a; }); _i < _a.length; _i++) {
-                var weight = _a[_i];
+        }
+        _private__buildMarksImpl(maxIndexesPerMark) {
+            let marks = [];
+            for (const weight of Array.from(this._private__marksByWeight.keys()).sort((a, b) => b - a)) {
                 if (!this._private__marksByWeight.get(weight)) {
                     continue;
                 }
                 // Built tickMarks are now prevMarks, and marks it as new array
-                var prevMarks = marks;
+                const prevMarks = marks;
                 marks = [];
-                var prevMarksLength = prevMarks.length;
-                var prevMarksPointer = 0;
-                var currentWeight = ensureDefined(this._private__marksByWeight.get(weight));
-                var currentWeightLength = currentWeight.length;
-                var rightIndex = Infinity;
-                var leftIndex = -Infinity;
-                for (var i = 0; i < currentWeightLength; i++) {
-                    var mark = currentWeight[i];
-                    var currentIndex = mark._internal_index;
+                const prevMarksLength = prevMarks.length;
+                let prevMarksPointer = 0;
+                const currentWeight = ensureDefined(this._private__marksByWeight.get(weight));
+                const currentWeightLength = currentWeight.length;
+                let rightIndex = Infinity;
+                let leftIndex = -Infinity;
+                for (let i = 0; i < currentWeightLength; i++) {
+                    const mark = currentWeight[i];
+                    const currentIndex = mark._internal_index;
                     // Determine indexes with which current index will be compared
                     // All marks to the right is moved to new array
                     while (prevMarksPointer < prevMarksLength) {
-                        var lastMark = prevMarks[prevMarksPointer];
-                        var lastIndex = lastMark._internal_index;
+                        const lastMark = prevMarks[prevMarksPointer];
+                        const lastIndex = lastMark._internal_index;
                         if (lastIndex < currentIndex) {
                             prevMarksPointer++;
                             marks.push(lastMark);
@@ -6271,28 +6223,26 @@
                 }
             }
             return marks;
-        };
-        return TickMarks;
-    }());
+        }
+    }
 
-    var TimeScaleVisibleRange = /** @class */ (function () {
-        function TimeScaleVisibleRange(logicalRange) {
+    class TimeScaleVisibleRange {
+        constructor(logicalRange) {
             this._private__logicalRange = logicalRange;
         }
-        TimeScaleVisibleRange.prototype._internal_strictRange = function () {
+        _internal_strictRange() {
             if (this._private__logicalRange === null) {
                 return null;
             }
             return new RangeImpl(Math.floor(this._private__logicalRange._internal_left()), Math.ceil(this._private__logicalRange._internal_right()));
-        };
-        TimeScaleVisibleRange.prototype._internal_logicalRange = function () {
+        }
+        _internal_logicalRange() {
             return this._private__logicalRange;
-        };
-        TimeScaleVisibleRange._internal_invalid = function () {
+        }
+        static _internal_invalid() {
             return new TimeScaleVisibleRange(null);
-        };
-        return TimeScaleVisibleRange;
-    }());
+        }
+    }
 
     /**
      * Represents the type of a tick mark on the time axis.
@@ -6314,14 +6264,15 @@
         /**
          * A time without seconds.
          */
+        // eslint-disable-next-line @typescript-eslint/no-shadow
         TickMarkType[TickMarkType["Time"] = 3] = "Time";
         /**
          * A time with seconds.
          */
         TickMarkType[TickMarkType["TimeWithSeconds"] = 4] = "TimeWithSeconds";
     })(TickMarkType || (TickMarkType = {}));
-    var TimeScale = /** @class */ (function () {
-        function TimeScale(model, options, localizationOptions) {
+    class TimeScale {
+        constructor(model, options, localizationOptions) {
             this._private__width = 0;
             this._private__baseIndexOrNull = null;
             this._private__points = [];
@@ -6344,15 +6295,15 @@
             this._private__model = model;
             this._private__updateDateTimeFormatter();
         }
-        TimeScale.prototype._internal_options = function () {
+        _internal_options() {
             return this._private__options;
-        };
-        TimeScale.prototype._internal_applyLocalizationOptions = function (localizationOptions) {
+        }
+        _internal_applyLocalizationOptions(localizationOptions) {
             merge(this._private__localizationOptions, localizationOptions);
             this._private__invalidateTickMarks();
             this._private__updateDateTimeFormatter();
-        };
-        TimeScale.prototype._internal_applyOptions = function (options, localizationOptions) {
+        }
+        _internal_applyOptions(options, localizationOptions) {
             var _a;
             merge(this._private__options, options);
             if (this._private__options.fixLeftEdge) {
@@ -6377,12 +6328,16 @@
             this._private__invalidateTickMarks();
             this._private__updateDateTimeFormatter();
             this._private__optionsApplied._internal_fire();
-        };
-        TimeScale.prototype._internal_indexToTime = function (index) {
+        }
+        _internal_indexToTime(index) {
+            var _a, _b;
+            return (_b = (_a = this._private__points[index]) === null || _a === void 0 ? void 0 : _a._internal_time) !== null && _b !== void 0 ? _b : null;
+        }
+        _internal_indexToTimeScalePoint(index) {
             var _a;
-            return ((_a = this._private__points[index]) === null || _a === void 0 ? void 0 : _a._internal_time) || null;
-        };
-        TimeScale.prototype._internal_timeToIndex = function (time, findNearest) {
+            return (_a = this._private__points[index]) !== null && _a !== void 0 ? _a : null;
+        }
+        _internal_timeToIndex(time, findNearest) {
             if (this._private__points.length < 1) {
                 // no time points available
                 return null;
@@ -6391,173 +6346,174 @@
                 // special case
                 return findNearest ? this._private__points.length - 1 : null;
             }
-            var index = lowerbound(this._private__points, time._internal_timestamp, function (a, b) { return a._internal_time._internal_timestamp < b; });
+            const index = lowerbound(this._private__points, time._internal_timestamp, (a, b) => a._internal_time._internal_timestamp < b);
             if (time._internal_timestamp < this._private__points[index]._internal_time._internal_timestamp) {
                 return findNearest ? index : null;
             }
             return index;
-        };
-        TimeScale.prototype._internal_isEmpty = function () {
+        }
+        _internal_isEmpty() {
             return this._private__width === 0 || this._private__points.length === 0 || this._private__baseIndexOrNull === null;
-        };
+        }
         // strict range: integer indices of the bars in the visible range rounded in more wide direction
-        TimeScale.prototype._internal_visibleStrictRange = function () {
+        _internal_visibleStrictRange() {
             this._private__updateVisibleRange();
             return this._private__visibleRange._internal_strictRange();
-        };
-        TimeScale.prototype._internal_visibleLogicalRange = function () {
+        }
+        _internal_visibleLogicalRange() {
             this._private__updateVisibleRange();
             return this._private__visibleRange._internal_logicalRange();
-        };
-        TimeScale.prototype._internal_visibleTimeRange = function () {
-            var visibleBars = this._internal_visibleStrictRange();
+        }
+        _internal_visibleTimeRange() {
+            const visibleBars = this._internal_visibleStrictRange();
             if (visibleBars === null) {
                 return null;
             }
-            var range = {
+            const range = {
                 from: visibleBars._internal_left(),
                 to: visibleBars._internal_right(),
             };
             return this._internal_timeRangeForLogicalRange(range);
-        };
-        TimeScale.prototype._internal_timeRangeForLogicalRange = function (range) {
-            var from = Math.round(range.from);
-            var to = Math.round(range.to);
-            var firstIndex = ensureNotNull(this._private__firstIndex());
-            var lastIndex = ensureNotNull(this._private__lastIndex());
+        }
+        _internal_timeRangeForLogicalRange(range) {
+            const from = Math.round(range.from);
+            const to = Math.round(range.to);
+            const firstIndex = ensureNotNull(this._private__firstIndex());
+            const lastIndex = ensureNotNull(this._private__lastIndex());
             return {
                 from: ensureNotNull(this._internal_indexToTime(Math.max(firstIndex, from))),
                 to: ensureNotNull(this._internal_indexToTime(Math.min(lastIndex, to))),
             };
-        };
-        TimeScale.prototype._internal_logicalRangeForTimeRange = function (range) {
+        }
+        _internal_logicalRangeForTimeRange(range) {
             return {
                 from: ensureNotNull(this._internal_timeToIndex(range.from, true)),
                 to: ensureNotNull(this._internal_timeToIndex(range.to, true)),
             };
-        };
-        TimeScale.prototype._internal_width = function () {
+        }
+        _internal_width() {
             return this._private__width;
-        };
-        TimeScale.prototype._internal_setWidth = function (width) {
-            if (!isFinite(width) || width <= 0) {
+        }
+        _internal_setWidth(newWidth) {
+            if (!isFinite(newWidth) || newWidth <= 0) {
                 return;
             }
-            if (this._private__width === width) {
+            if (this._private__width === newWidth) {
                 return;
             }
-            if (this._private__options.lockVisibleTimeRangeOnResize && this._private__width) {
+            // when we change the width and we need to correct visible range because of fixing left edge
+            // we need to check the previous visible range rather than the new one
+            // because it might be updated by changing width, bar spacing, etc
+            // but we need to try to keep the same range
+            const previousVisibleRange = this._internal_visibleLogicalRange();
+            const oldWidth = this._private__width;
+            this._private__width = newWidth;
+            this._private__visibleRangeInvalidated = true;
+            if (this._private__options.lockVisibleTimeRangeOnResize && oldWidth !== 0) {
                 // recalculate bar spacing
-                var newBarSpacing = this._private__barSpacing * width / this._private__width;
+                const newBarSpacing = this._private__barSpacing * newWidth / oldWidth;
                 this._private__barSpacing = newBarSpacing;
             }
             // if time scale is scrolled to the end of data and we have fixed right edge
             // keep left edge instead of right
             // we need it to avoid "shaking" if the last bar visibility affects time scale width
             if (this._private__options.fixLeftEdge) {
-                var visibleRange = this._internal_visibleStrictRange();
-                if (visibleRange !== null) {
-                    var firstVisibleBar = visibleRange._internal_left();
-                    // firstVisibleBar could be less than 0
-                    // since index is a center of bar
-                    if (firstVisibleBar <= 0) {
-                        var delta = this._private__width - width;
-                        // reduce  _rightOffset means move right
-                        // we could move more than required - this will be fixed by _correctOffset()
-                        this._private__rightOffset -= Math.round(delta / this._private__barSpacing) + 1;
-                    }
+                // note that logical left range means not the middle of a bar (it's the left border)
+                if (previousVisibleRange !== null && previousVisibleRange._internal_left() <= 0) {
+                    const delta = oldWidth - newWidth;
+                    // reduce  _rightOffset means move right
+                    // we could move more than required - this will be fixed by _correctOffset()
+                    this._private__rightOffset -= Math.round(delta / this._private__barSpacing) + 1;
+                    this._private__visibleRangeInvalidated = true;
                 }
             }
-            this._private__width = width;
-            this._private__visibleRangeInvalidated = true;
             // updating bar spacing should be first because right offset depends on it
             this._private__correctBarSpacing();
             this._private__correctOffset();
-        };
-        TimeScale.prototype._internal_indexToCoordinate = function (index) {
+        }
+        _internal_indexToCoordinate(index) {
             if (this._internal_isEmpty() || !isInteger(index)) {
                 return 0;
             }
-            var baseIndex = this._internal_baseIndex();
-            var deltaFromRight = baseIndex + this._private__rightOffset - index;
-            var coordinate = this._private__width - (deltaFromRight + 0.5) * this._private__barSpacing - 1;
+            const baseIndex = this._internal_baseIndex();
+            const deltaFromRight = baseIndex + this._private__rightOffset - index;
+            const coordinate = this._private__width - (deltaFromRight + 0.5) * this._private__barSpacing - 1;
             return coordinate;
-        };
-        TimeScale.prototype._internal_indexesToCoordinates = function (points, visibleRange) {
-            var baseIndex = this._internal_baseIndex();
-            var indexFrom = (visibleRange === undefined) ? 0 : visibleRange.from;
-            var indexTo = (visibleRange === undefined) ? points.length : visibleRange.to;
-            for (var i = indexFrom; i < indexTo; i++) {
-                var index = points[i]._internal_time;
-                var deltaFromRight = baseIndex + this._private__rightOffset - index;
-                var coordinate = this._private__width - (deltaFromRight + 0.5) * this._private__barSpacing - 1;
+        }
+        _internal_indexesToCoordinates(points, visibleRange) {
+            const baseIndex = this._internal_baseIndex();
+            const indexFrom = (visibleRange === undefined) ? 0 : visibleRange.from;
+            const indexTo = (visibleRange === undefined) ? points.length : visibleRange.to;
+            for (let i = indexFrom; i < indexTo; i++) {
+                const index = points[i]._internal_time;
+                const deltaFromRight = baseIndex + this._private__rightOffset - index;
+                const coordinate = this._private__width - (deltaFromRight + 0.5) * this._private__barSpacing - 1;
                 points[i]._internal_x = coordinate;
             }
-        };
-        TimeScale.prototype._internal_coordinateToIndex = function (x) {
+        }
+        _internal_coordinateToIndex(x) {
             return Math.ceil(this._private__coordinateToFloatIndex(x));
-        };
-        TimeScale.prototype._internal_setRightOffset = function (offset) {
+        }
+        _internal_setRightOffset(offset) {
             this._private__visibleRangeInvalidated = true;
             this._private__rightOffset = offset;
             this._private__correctOffset();
             this._private__model._internal_recalculateAllPanes();
             this._private__model._internal_lightUpdate();
-        };
-        TimeScale.prototype._internal_barSpacing = function () {
+        }
+        _internal_barSpacing() {
             return this._private__barSpacing;
-        };
-        TimeScale.prototype._internal_setBarSpacing = function (newBarSpacing) {
+        }
+        _internal_setBarSpacing(newBarSpacing) {
             this._private__setBarSpacing(newBarSpacing);
             // do not allow scroll out of visible bars
             this._private__correctOffset();
             this._private__model._internal_recalculateAllPanes();
             this._private__model._internal_lightUpdate();
-        };
-        TimeScale.prototype._internal_rightOffset = function () {
+        }
+        _internal_rightOffset() {
             return this._private__rightOffset;
-        };
+        }
         // eslint-disable-next-line complexity
-        TimeScale.prototype._internal_marks = function () {
+        _internal_marks() {
             if (this._internal_isEmpty()) {
                 return null;
             }
             if (this._private__timeMarksCache !== null) {
                 return this._private__timeMarksCache;
             }
-            var spacing = this._private__barSpacing;
-            var fontSize = this._private__model._internal_options().layout.fontSize;
-            var maxLabelWidth = (fontSize + 4) * 5;
-            var indexPerLabel = Math.round(maxLabelWidth / spacing);
-            var visibleBars = ensureNotNull(this._internal_visibleStrictRange());
-            var firstBar = Math.max(visibleBars._internal_left(), visibleBars._internal_left() - indexPerLabel);
-            var lastBar = Math.max(visibleBars._internal_right(), visibleBars._internal_right() - indexPerLabel);
-            var items = this._private__tickMarks._internal_build(spacing, maxLabelWidth);
+            const spacing = this._private__barSpacing;
+            const fontSize = this._private__model._internal_options().layout.fontSize;
+            const maxLabelWidth = (fontSize + 4) * 5;
+            const indexPerLabel = Math.round(maxLabelWidth / spacing);
+            const visibleBars = ensureNotNull(this._internal_visibleStrictRange());
+            const firstBar = Math.max(visibleBars._internal_left(), visibleBars._internal_left() - indexPerLabel);
+            const lastBar = Math.max(visibleBars._internal_right(), visibleBars._internal_right() - indexPerLabel);
+            const items = this._private__tickMarks._internal_build(spacing, maxLabelWidth);
             // according to indexPerLabel value this value means "earliest index which _might be_ used as the second label on time scale"
-            var earliestIndexOfSecondLabel = this._private__firstIndex() + indexPerLabel;
+            const earliestIndexOfSecondLabel = this._private__firstIndex() + indexPerLabel;
             // according to indexPerLabel value this value means "earliest index which _might be_ used as the second last label on time scale"
-            var indexOfSecondLastLabel = this._private__lastIndex() - indexPerLabel;
-            var isAllScalingAndScrollingDisabled = this._private__isAllScalingAndScrollingDisabled();
-            var isLeftEdgeFixed = this._private__options.fixLeftEdge || isAllScalingAndScrollingDisabled;
-            var isRightEdgeFixed = this._private__options.fixRightEdge || isAllScalingAndScrollingDisabled;
-            var targetIndex = 0;
-            for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
-                var tm = items_1[_i];
+            const indexOfSecondLastLabel = this._private__lastIndex() - indexPerLabel;
+            const isAllScalingAndScrollingDisabled = this._private__isAllScalingAndScrollingDisabled();
+            const isLeftEdgeFixed = this._private__options.fixLeftEdge || isAllScalingAndScrollingDisabled;
+            const isRightEdgeFixed = this._private__options.fixRightEdge || isAllScalingAndScrollingDisabled;
+            let targetIndex = 0;
+            for (const tm of items) {
                 if (!(firstBar <= tm._internal_index && tm._internal_index <= lastBar)) {
                     continue;
                 }
-                var label = void 0;
+                let label;
                 if (targetIndex < this._private__labels.length) {
                     label = this._private__labels[targetIndex];
                     label._internal_coord = this._internal_indexToCoordinate(tm._internal_index);
-                    label._internal_label = this._private__formatLabel(tm._internal_time, tm._internal_weight);
+                    label._internal_label = this._private__formatLabel(tm);
                     label._internal_weight = tm._internal_weight;
                 }
                 else {
                     label = {
                         _internal_needAlignCoordinate: false,
                         _internal_coord: this._internal_indexToCoordinate(tm._internal_index),
-                        _internal_label: this._private__formatLabel(tm._internal_time, tm._internal_weight),
+                        _internal_label: this._private__formatLabel(tm),
                         _internal_weight: tm._internal_weight,
                     };
                     this._private__labels.push(label);
@@ -6576,18 +6532,18 @@
             this._private__labels.length = targetIndex;
             this._private__timeMarksCache = this._private__labels;
             return this._private__labels;
-        };
-        TimeScale.prototype._internal_restoreDefault = function () {
+        }
+        _internal_restoreDefault() {
             this._private__visibleRangeInvalidated = true;
             this._internal_setBarSpacing(this._private__options.barSpacing);
             this._internal_setRightOffset(this._private__options.rightOffset);
-        };
-        TimeScale.prototype._internal_setBaseIndex = function (baseIndex) {
+        }
+        _internal_setBaseIndex(baseIndex) {
             this._private__visibleRangeInvalidated = true;
             this._private__baseIndexOrNull = baseIndex;
             this._private__correctOffset();
             this._private__doFixLeftEdge();
-        };
+        }
         /**
          * Zoom in/out the scale around a `zoomPoint` on `scale` value.
          *
@@ -6596,18 +6552,18 @@
          * @param scale - Zoom value (in 1/10 parts of current bar spacing).
          * Negative value means zoom out, positive - zoom in.
          */
-        TimeScale.prototype._internal_zoom = function (zoomPoint, scale) {
-            var floatIndexAtZoomPoint = this._private__coordinateToFloatIndex(zoomPoint);
-            var barSpacing = this._internal_barSpacing();
-            var newBarSpacing = barSpacing + scale * (barSpacing / 10);
+        _internal_zoom(zoomPoint, scale) {
+            const floatIndexAtZoomPoint = this._private__coordinateToFloatIndex(zoomPoint);
+            const barSpacing = this._internal_barSpacing();
+            const newBarSpacing = barSpacing + scale * (barSpacing / 10);
             // zoom in/out bar spacing
             this._internal_setBarSpacing(newBarSpacing);
             if (!this._private__options.rightBarStaysOnScroll) {
                 // and then correct right offset to move index under zoomPoint back to its coordinate
                 this._internal_setRightOffset(this._internal_rightOffset() + (floatIndexAtZoomPoint - this._private__coordinateToFloatIndex(zoomPoint)));
             }
-        };
-        TimeScale.prototype._internal_startScale = function (x) {
+        }
+        _internal_startScale(x) {
             if (this._private__scrollStartPoint) {
                 this._internal_endScroll();
             }
@@ -6619,26 +6575,26 @@
             }
             this._private__scaleStartPoint = x;
             this._private__saveCommonTransitionsStartState();
-        };
-        TimeScale.prototype._internal_scaleTo = function (x) {
+        }
+        _internal_scaleTo(x) {
             if (this._private__commonTransitionStartState === null) {
                 return;
             }
-            var startLengthFromRight = clamp(this._private__width - x, 0, this._private__width);
-            var currentLengthFromRight = clamp(this._private__width - ensureNotNull(this._private__scaleStartPoint), 0, this._private__width);
+            const startLengthFromRight = clamp(this._private__width - x, 0, this._private__width);
+            const currentLengthFromRight = clamp(this._private__width - ensureNotNull(this._private__scaleStartPoint), 0, this._private__width);
             if (startLengthFromRight === 0 || currentLengthFromRight === 0) {
                 return;
             }
             this._internal_setBarSpacing(this._private__commonTransitionStartState._internal_barSpacing * startLengthFromRight / currentLengthFromRight);
-        };
-        TimeScale.prototype._internal_endScale = function () {
+        }
+        _internal_endScale() {
             if (this._private__scaleStartPoint === null) {
                 return;
             }
             this._private__scaleStartPoint = null;
             this._private__clearCommonTransitionsStartState();
-        };
-        TimeScale.prototype._internal_startScroll = function (x) {
+        }
+        _internal_startScroll(x) {
             if (this._private__scrollStartPoint !== null || this._private__commonTransitionStartState !== null) {
                 return;
             }
@@ -6647,128 +6603,124 @@
             }
             this._private__scrollStartPoint = x;
             this._private__saveCommonTransitionsStartState();
-        };
-        TimeScale.prototype._internal_scrollTo = function (x) {
+        }
+        _internal_scrollTo(x) {
             if (this._private__scrollStartPoint === null) {
                 return;
             }
-            var shiftInLogical = (this._private__scrollStartPoint - x) / this._internal_barSpacing();
+            const shiftInLogical = (this._private__scrollStartPoint - x) / this._internal_barSpacing();
             this._private__rightOffset = ensureNotNull(this._private__commonTransitionStartState)._internal_rightOffset + shiftInLogical;
             this._private__visibleRangeInvalidated = true;
             // do not allow scroll out of visible bars
             this._private__correctOffset();
-        };
-        TimeScale.prototype._internal_endScroll = function () {
+        }
+        _internal_endScroll() {
             if (this._private__scrollStartPoint === null) {
                 return;
             }
             this._private__scrollStartPoint = null;
             this._private__clearCommonTransitionsStartState();
-        };
-        TimeScale.prototype._internal_scrollToRealTime = function () {
+        }
+        _internal_scrollToRealTime() {
             this._internal_scrollToOffsetAnimated(this._private__options.rightOffset);
-        };
-        TimeScale.prototype._internal_scrollToOffsetAnimated = function (offset, animationDuration) {
-            var _this = this;
-            if (animationDuration === void 0) { animationDuration = 400 /* DefaultAnimationDuration */; }
+        }
+        _internal_scrollToOffsetAnimated(offset, animationDuration = 400 /* Constants.DefaultAnimationDuration */) {
             if (!isFinite(offset)) {
                 throw new RangeError('offset is required and must be finite number');
             }
             if (!isFinite(animationDuration) || animationDuration <= 0) {
                 throw new RangeError('animationDuration (optional) must be finite positive number');
             }
-            var source = this._private__rightOffset;
-            var animationStart = performance.now();
-            var animationFn = function () {
-                var animationProgress = (performance.now() - animationStart) / animationDuration;
-                var finishAnimation = animationProgress >= 1;
-                var rightOffset = finishAnimation ? offset : source + (offset - source) * animationProgress;
-                _this._internal_setRightOffset(rightOffset);
-                if (!finishAnimation) {
-                    setTimeout(animationFn, 20);
-                }
-            };
-            animationFn();
-        };
-        TimeScale.prototype._internal_update = function (newPoints, firstChangedPointIndex) {
+            const source = this._private__rightOffset;
+            const animationStart = performance.now();
+            this._private__model._internal_setTimeScaleAnimation({
+                _internal_finished: (time) => (time - animationStart) / animationDuration >= 1,
+                _internal_getPosition: (time) => {
+                    const animationProgress = (time - animationStart) / animationDuration;
+                    const finishAnimation = animationProgress >= 1;
+                    return finishAnimation ? offset : source + (offset - source) * animationProgress;
+                },
+            });
+        }
+        _internal_update(newPoints, firstChangedPointIndex) {
             this._private__visibleRangeInvalidated = true;
             this._private__points = newPoints;
             this._private__tickMarks._internal_setTimeScalePoints(newPoints, firstChangedPointIndex);
             this._private__correctOffset();
-        };
-        TimeScale.prototype._internal_visibleBarsChanged = function () {
+        }
+        _internal_visibleBarsChanged() {
             return this._private__visibleBarsChanged;
-        };
-        TimeScale.prototype._internal_logicalRangeChanged = function () {
+        }
+        _internal_logicalRangeChanged() {
             return this._private__logicalRangeChanged;
-        };
-        TimeScale.prototype._internal_optionsApplied = function () {
+        }
+        _internal_optionsApplied() {
             return this._private__optionsApplied;
-        };
-        TimeScale.prototype._internal_baseIndex = function () {
+        }
+        _internal_baseIndex() {
             // null is used to known that baseIndex is not set yet
             // so in methods which should known whether it is set or not
             // we should check field `_baseIndexOrNull` instead of getter `baseIndex()`
             // see minRightOffset for example
             return this._private__baseIndexOrNull || 0;
-        };
-        TimeScale.prototype._internal_setVisibleRange = function (range) {
-            var length = range._internal_count();
+        }
+        _internal_setVisibleRange(range) {
+            const length = range._internal_count();
             this._private__setBarSpacing(this._private__width / length);
             this._private__rightOffset = range._internal_right() - this._internal_baseIndex();
             this._private__correctOffset();
             this._private__visibleRangeInvalidated = true;
             this._private__model._internal_recalculateAllPanes();
             this._private__model._internal_lightUpdate();
-        };
-        TimeScale.prototype._internal_fitContent = function () {
-            var first = this._private__firstIndex();
-            var last = this._private__lastIndex();
+        }
+        _internal_fitContent() {
+            const first = this._private__firstIndex();
+            const last = this._private__lastIndex();
             if (first === null || last === null) {
                 return;
             }
             this._internal_setVisibleRange(new RangeImpl(first, last + this._private__options.rightOffset));
-        };
-        TimeScale.prototype._internal_setLogicalRange = function (range) {
-            var barRange = new RangeImpl(range.from, range.to);
+        }
+        _internal_setLogicalRange(range) {
+            const barRange = new RangeImpl(range.from, range.to);
             this._internal_setVisibleRange(barRange);
-        };
-        TimeScale.prototype._internal_formatDateTime = function (time) {
+        }
+        _internal_formatDateTime(timeScalePoint) {
             if (this._private__localizationOptions.timeFormatter !== undefined) {
-                return this._private__localizationOptions.timeFormatter(time._internal_businessDay || time._internal_timestamp);
+                return this._private__localizationOptions.timeFormatter(timeScalePoint._internal_originalTime);
             }
-            return this._private__dateTimeFormatter._internal_format(new Date(time._internal_timestamp * 1000));
-        };
-        TimeScale.prototype._private__isAllScalingAndScrollingDisabled = function () {
-            var _a = this._private__model._internal_options(), handleScroll = _a.handleScroll, handleScale = _a.handleScale;
+            return this._private__dateTimeFormatter._internal_format(new Date(timeScalePoint._internal_time._internal_timestamp * 1000));
+        }
+        _private__isAllScalingAndScrollingDisabled() {
+            const { handleScroll, handleScale } = this._private__model._internal_options();
             return !handleScroll.horzTouchDrag
                 && !handleScroll.mouseWheel
                 && !handleScroll.pressedMouseMove
                 && !handleScroll.vertTouchDrag
-                && !handleScale.axisDoubleClickReset
+                && !handleScale.axisDoubleClickReset.time
                 && !handleScale.axisPressedMouseMove.time
                 && !handleScale.mouseWheel
                 && !handleScale.pinch;
-        };
-        TimeScale.prototype._private__firstIndex = function () {
+        }
+        _private__firstIndex() {
             return this._private__points.length === 0 ? null : 0;
-        };
-        TimeScale.prototype._private__lastIndex = function () {
+        }
+        _private__lastIndex() {
             return this._private__points.length === 0 ? null : (this._private__points.length - 1);
-        };
-        TimeScale.prototype._private__rightOffsetForCoordinate = function (x) {
+        }
+        _private__rightOffsetForCoordinate(x) {
             return (this._private__width - 1 - x) / this._private__barSpacing;
-        };
-        TimeScale.prototype._private__coordinateToFloatIndex = function (x) {
-            var deltaFromRight = this._private__rightOffsetForCoordinate(x);
-            var baseIndex = this._internal_baseIndex();
-            var index = baseIndex + this._private__rightOffset - deltaFromRight;
+        }
+        _private__coordinateToFloatIndex(x) {
+            const deltaFromRight = this._private__rightOffsetForCoordinate(x);
+            const baseIndex = this._internal_baseIndex();
+            const index = baseIndex + this._private__rightOffset - deltaFromRight;
             // JavaScript uses very strange rounding
             // we need rounding to avoid problems with calculation errors
             return Math.round(index * 1000000) / 1000000;
-        };
-        TimeScale.prototype._private__setBarSpacing = function (newBarSpacing) {
-            var oldBarSpacing = this._private__barSpacing;
+        }
+        _private__setBarSpacing(newBarSpacing) {
+            const oldBarSpacing = this._private__barSpacing;
             this._private__barSpacing = newBarSpacing;
             this._private__correctBarSpacing();
             // this._barSpacing might be changed in _correctBarSpacing
@@ -6776,8 +6728,8 @@
                 this._private__visibleRangeInvalidated = true;
                 this._private__resetTimeMarksCache();
             }
-        };
-        TimeScale.prototype._private__updateVisibleRange = function () {
+        }
+        _private__updateVisibleRange() {
             if (!this._private__visibleRangeInvalidated) {
                 return;
             }
@@ -6786,103 +6738,94 @@
                 this._private__setVisibleRange(TimeScaleVisibleRange._internal_invalid());
                 return;
             }
-            var baseIndex = this._internal_baseIndex();
-            var newBarsLength = this._private__width / this._private__barSpacing;
-            var rightBorder = this._private__rightOffset + baseIndex;
-            var leftBorder = rightBorder - newBarsLength + 1;
-            var logicalRange = new RangeImpl(leftBorder, rightBorder);
+            const baseIndex = this._internal_baseIndex();
+            const newBarsLength = this._private__width / this._private__barSpacing;
+            const rightBorder = this._private__rightOffset + baseIndex;
+            const leftBorder = rightBorder - newBarsLength + 1;
+            const logicalRange = new RangeImpl(leftBorder, rightBorder);
             this._private__setVisibleRange(new TimeScaleVisibleRange(logicalRange));
-        };
-        TimeScale.prototype._private__correctBarSpacing = function () {
-            var minBarSpacing = this._private__minBarSpacing();
+        }
+        _private__correctBarSpacing() {
+            const minBarSpacing = this._private__minBarSpacing();
             if (this._private__barSpacing < minBarSpacing) {
                 this._private__barSpacing = minBarSpacing;
                 this._private__visibleRangeInvalidated = true;
             }
             if (this._private__width !== 0) {
                 // make sure that this (1 / Constants.MinVisibleBarsCount) >= coeff in max bar spacing (it's 0.5 here)
-                var maxBarSpacing = this._private__width * 0.5;
+                const maxBarSpacing = this._private__width * 0.5;
                 if (this._private__barSpacing > maxBarSpacing) {
                     this._private__barSpacing = maxBarSpacing;
                     this._private__visibleRangeInvalidated = true;
                 }
             }
-        };
-        TimeScale.prototype._private__minBarSpacing = function () {
+        }
+        _private__minBarSpacing() {
             // if both options are enabled then limit bar spacing so that zooming-out is not possible
             // if it would cause either the first or last points to move too far from an edge
             if (this._private__options.fixLeftEdge && this._private__options.fixRightEdge && this._private__points.length !== 0) {
                 return this._private__width / this._private__points.length;
             }
             return this._private__options.minBarSpacing;
-        };
-        TimeScale.prototype._private__correctOffset = function () {
+        }
+        _private__correctOffset() {
             // block scrolling of to future
-            var maxRightOffset = this._private__maxRightOffset();
+            const maxRightOffset = this._private__maxRightOffset();
             if (this._private__rightOffset > maxRightOffset) {
                 this._private__rightOffset = maxRightOffset;
                 this._private__visibleRangeInvalidated = true;
             }
             // block scrolling of to past
-            var minRightOffset = this._private__minRightOffset();
+            const minRightOffset = this._private__minRightOffset();
             if (minRightOffset !== null && this._private__rightOffset < minRightOffset) {
                 this._private__rightOffset = minRightOffset;
                 this._private__visibleRangeInvalidated = true;
             }
-        };
-        TimeScale.prototype._private__minRightOffset = function () {
-            var firstIndex = this._private__firstIndex();
-            var baseIndex = this._private__baseIndexOrNull;
+        }
+        _private__minRightOffset() {
+            const firstIndex = this._private__firstIndex();
+            const baseIndex = this._private__baseIndexOrNull;
             if (firstIndex === null || baseIndex === null) {
                 return null;
             }
-            var barsEstimation = this._private__options.fixLeftEdge
+            const barsEstimation = this._private__options.fixLeftEdge
                 ? this._private__width / this._private__barSpacing
-                : Math.min(2 /* MinVisibleBarsCount */, this._private__points.length);
+                : Math.min(2 /* Constants.MinVisibleBarsCount */, this._private__points.length);
             return firstIndex - baseIndex - 1 + barsEstimation;
-        };
-        TimeScale.prototype._private__maxRightOffset = function () {
+        }
+        _private__maxRightOffset() {
             return this._private__options.fixRightEdge
                 ? 0
-                : (this._private__width / this._private__barSpacing) - Math.min(2 /* MinVisibleBarsCount */, this._private__points.length);
-        };
-        TimeScale.prototype._private__saveCommonTransitionsStartState = function () {
+                : (this._private__width / this._private__barSpacing) - Math.min(2 /* Constants.MinVisibleBarsCount */, this._private__points.length);
+        }
+        _private__saveCommonTransitionsStartState() {
             this._private__commonTransitionStartState = {
                 _internal_barSpacing: this._internal_barSpacing(),
                 _internal_rightOffset: this._internal_rightOffset(),
             };
-        };
-        TimeScale.prototype._private__clearCommonTransitionsStartState = function () {
+        }
+        _private__clearCommonTransitionsStartState() {
             this._private__commonTransitionStartState = null;
-        };
-        TimeScale.prototype._private__formatLabel = function (time, weight) {
-            var _this = this;
-            var formatter = this._private__formattedByWeight.get(weight);
+        }
+        _private__formatLabel(tickMark) {
+            let formatter = this._private__formattedByWeight.get(tickMark._internal_weight);
             if (formatter === undefined) {
-                formatter = new FormattedLabelsCache(function (timePoint) {
-                    return _this._private__formatLabelImpl(timePoint, weight);
+                formatter = new FormattedLabelsCache((mark) => {
+                    return this._private__formatLabelImpl(mark);
                 });
-                this._private__formattedByWeight.set(weight, formatter);
+                this._private__formattedByWeight.set(tickMark._internal_weight, formatter);
             }
-            return formatter._internal_format(time);
-        };
-        TimeScale.prototype._private__formatLabelImpl = function (timePoint, weight) {
-            var _a;
-            var tickMarkType = weightToTickMarkType(weight, this._private__options.timeVisible, this._private__options.secondsVisible);
+            return formatter._internal_format(tickMark);
+        }
+        _private__formatLabelImpl(tickMark) {
+            const tickMarkType = weightToTickMarkType(tickMark._internal_weight, this._private__options.timeVisible, this._private__options.secondsVisible);
             if (this._private__options.tickMarkFormatter !== undefined) {
-                // this is temporary solution to make more consistency API
-                // it looks like that all time types in API should have the same form
-                // but for know defaultTickMarkFormatter is on model level and can't determine whether passed time is business day or UTCTimestamp
-                // because type guards are declared on API level
-                // in other hand, type guards couldn't be declared on model level so far
-                // because they are know about string representation of business day ¯\_(ツ)_/¯
-                // let's fix in for all cases for the whole API
-                return this._private__options.tickMarkFormatter((_a = timePoint._internal_businessDay) !== null && _a !== void 0 ? _a : timePoint._internal_timestamp, tickMarkType, this._private__localizationOptions.locale);
-            }
-            return defaultTickMarkFormatter(timePoint, tickMarkType, this._private__localizationOptions.locale);
-        };
-        TimeScale.prototype._private__setVisibleRange = function (newVisibleRange) {
-            var oldVisibleRange = this._private__visibleRange;
+                return this._private__options.tickMarkFormatter(tickMark._internal_originalTime, tickMarkType, this._private__localizationOptions.locale);
+            }
+            return defaultTickMarkFormatter(tickMark._internal_time, tickMarkType, this._private__localizationOptions.locale);
+        }
+        _private__setVisibleRange(newVisibleRange) {
+            const oldVisibleRange = this._private__visibleRange;
             this._private__visibleRange = newVisibleRange;
             if (!areRangesEqual(oldVisibleRange._internal_strictRange(), this._private__visibleRange._internal_strictRange())) {
                 this._private__visibleBarsChanged._internal_fire();
@@ -6892,16 +6835,16 @@
             }
             // TODO: reset only coords in case when this._visibleBars has not been changed
             this._private__resetTimeMarksCache();
-        };
-        TimeScale.prototype._private__resetTimeMarksCache = function () {
+        }
+        _private__resetTimeMarksCache() {
             this._private__timeMarksCache = null;
-        };
-        TimeScale.prototype._private__invalidateTickMarks = function () {
+        }
+        _private__invalidateTickMarks() {
             this._private__resetTimeMarksCache();
             this._private__formattedByWeight.clear();
-        };
-        TimeScale.prototype._private__updateDateTimeFormatter = function () {
-            var dateFormat = this._private__localizationOptions.dateFormat;
+        }
+        _private__updateDateTimeFormatter() {
+            const dateFormat = this._private__localizationOptions.dateFormat;
             if (this._private__options.timeVisible) {
                 this._private__dateTimeFormatter = new DateTimeFormatter({
                     _internal_dateFormat: dateFormat,
@@ -6913,79 +6856,75 @@
             else {
                 this._private__dateTimeFormatter = new DateFormatter(dateFormat, this._private__localizationOptions.locale);
             }
-        };
-        TimeScale.prototype._private__doFixLeftEdge = function () {
+        }
+        _private__doFixLeftEdge() {
             if (!this._private__options.fixLeftEdge) {
                 return;
             }
-            var firstIndex = this._private__firstIndex();
+            const firstIndex = this._private__firstIndex();
             if (firstIndex === null) {
                 return;
             }
-            var visibleRange = this._internal_visibleStrictRange();
+            const visibleRange = this._internal_visibleStrictRange();
             if (visibleRange === null) {
                 return;
             }
-            var delta = visibleRange._internal_left() - firstIndex;
+            const delta = visibleRange._internal_left() - firstIndex;
             if (delta < 0) {
-                var leftEdgeOffset = this._private__rightOffset - delta - 1;
+                const leftEdgeOffset = this._private__rightOffset - delta - 1;
                 this._internal_setRightOffset(leftEdgeOffset);
             }
             this._private__correctBarSpacing();
-        };
-        TimeScale.prototype._private__doFixRightEdge = function () {
+        }
+        _private__doFixRightEdge() {
             this._private__correctOffset();
             this._private__correctBarSpacing();
-        };
-        return TimeScale;
-    }());
+        }
+    }
     // eslint-disable-next-line complexity
     function weightToTickMarkType(weight, timeVisible, secondsVisible) {
         switch (weight) {
-            case 0 /* LessThanSecond */:
-            case 10 /* Second */:
+            case 0 /* TickMarkWeight.LessThanSecond */:
+            case 10 /* TickMarkWeight.Second */:
                 return timeVisible
-                    ? (secondsVisible ? 4 /* TimeWithSeconds */ : 3 /* Time */)
-                    : 2 /* DayOfMonth */;
-            case 20 /* Minute1 */:
-            case 21 /* Minute5 */:
-            case 22 /* Minute30 */:
-            case 30 /* Hour1 */:
-            case 31 /* Hour3 */:
-            case 32 /* Hour6 */:
-            case 33 /* Hour12 */:
-                return timeVisible ? 3 /* Time */ : 2 /* DayOfMonth */;
-            case 50 /* Day */:
-                return 2 /* DayOfMonth */;
-            case 60 /* Month */:
-                return 1 /* Month */;
-            case 70 /* Year */:
-                return 0 /* Year */;
-        }
-    }
-
-    var WatermarkRenderer = /** @class */ (function (_super) {
-        __extends(WatermarkRenderer, _super);
-        function WatermarkRenderer(data) {
-            var _this = _super.call(this) || this;
-            _this._private__metricsCache = new Map();
-            _this._private__data = data;
-            return _this;
-        }
-        WatermarkRenderer.prototype._internal__drawImpl = function (ctx) { };
-        WatermarkRenderer.prototype._internal__drawBackgroundImpl = function (ctx) {
+                    ? (secondsVisible ? 4 /* TickMarkType.TimeWithSeconds */ : 3 /* TickMarkType.Time */)
+                    : 2 /* TickMarkType.DayOfMonth */;
+            case 20 /* TickMarkWeight.Minute1 */:
+            case 21 /* TickMarkWeight.Minute5 */:
+            case 22 /* TickMarkWeight.Minute30 */:
+            case 30 /* TickMarkWeight.Hour1 */:
+            case 31 /* TickMarkWeight.Hour3 */:
+            case 32 /* TickMarkWeight.Hour6 */:
+            case 33 /* TickMarkWeight.Hour12 */:
+                return timeVisible ? 3 /* TickMarkType.Time */ : 2 /* TickMarkType.DayOfMonth */;
+            case 50 /* TickMarkWeight.Day */:
+                return 2 /* TickMarkType.DayOfMonth */;
+            case 60 /* TickMarkWeight.Month */:
+                return 1 /* TickMarkType.Month */;
+            case 70 /* TickMarkWeight.Year */:
+                return 0 /* TickMarkType.Year */;
+        }
+    }
+
+    class WatermarkRenderer extends ScaledRenderer {
+        constructor(data) {
+            super();
+            this._private__metricsCache = new Map();
+            this._private__data = data;
+        }
+        _internal__drawImpl(ctx) { }
+        _internal__drawBackgroundImpl(ctx) {
             if (!this._private__data._internal_visible) {
                 return;
             }
             ctx.save();
-            var textHeight = 0;
-            for (var _i = 0, _a = this._private__data._internal_lines; _i < _a.length; _i++) {
-                var line = _a[_i];
+            let textHeight = 0;
+            for (const line of this._private__data._internal_lines) {
                 if (line._internal_text.length === 0) {
                     continue;
                 }
                 ctx.font = line._internal_font;
-                var textWidth = this._private__metrics(ctx, line._internal_text);
+                const textWidth = this._private__metrics(ctx, line._internal_text);
                 if (textWidth > this._private__data._internal_width) {
                     line._internal_zoom = this._private__data._internal_width / textWidth;
                 }
@@ -6994,7 +6933,7 @@
                 }
                 textHeight += line._internal_lineHeight * line._internal_zoom;
             }
-            var vertOffset = 0;
+            let vertOffset = 0;
             switch (this._private__data._internal_vertAlign) {
                 case 'top':
                     vertOffset = 0;
@@ -7007,10 +6946,9 @@
                     break;
             }
             ctx.fillStyle = this._private__data._internal_color;
-            for (var _b = 0, _c = this._private__data._internal_lines; _b < _c.length; _b++) {
-                var line = _c[_b];
+            for (const line of this._private__data._internal_lines) {
                 ctx.save();
-                var horzOffset = 0;
+                let horzOffset = 0;
                 switch (this._private__data._internal_horzAlign) {
                     case 'left':
                         ctx.textAlign = 'left';
@@ -7034,29 +6972,28 @@
                 vertOffset += line._internal_lineHeight * line._internal_zoom;
             }
             ctx.restore();
-        };
-        WatermarkRenderer.prototype._private__metrics = function (ctx, text) {
-            var fontCache = this._private__fontCache(ctx.font);
-            var result = fontCache.get(text);
+        }
+        _private__metrics(ctx, text) {
+            const fontCache = this._private__fontCache(ctx.font);
+            let result = fontCache.get(text);
             if (result === undefined) {
                 result = ctx.measureText(text).width;
                 fontCache.set(text, result);
             }
             return result;
-        };
-        WatermarkRenderer.prototype._private__fontCache = function (font) {
-            var fontCache = this._private__metricsCache.get(font);
+        }
+        _private__fontCache(font) {
+            let fontCache = this._private__metricsCache.get(font);
             if (fontCache === undefined) {
                 fontCache = new Map();
                 this._private__metricsCache.set(font, fontCache);
             }
             return fontCache;
-        };
-        return WatermarkRenderer;
-    }(ScaledRenderer));
+        }
+    }
 
-    var WatermarkPaneView = /** @class */ (function () {
-        function WatermarkPaneView(source) {
+    class WatermarkPaneView {
+        constructor(source) {
             this._private__invalidated = true;
             this._private__rendererData = {
                 _internal_visible: false,
@@ -7070,19 +7007,19 @@
             this._private__renderer = new WatermarkRenderer(this._private__rendererData);
             this._private__source = source;
         }
-        WatermarkPaneView.prototype._internal_update = function () {
+        _internal_update() {
             this._private__invalidated = true;
-        };
-        WatermarkPaneView.prototype._internal_renderer = function (height, width) {
+        }
+        _internal_renderer(height, width) {
             if (this._private__invalidated) {
                 this._private__updateImpl(height, width);
                 this._private__invalidated = false;
             }
             return this._private__renderer;
-        };
-        WatermarkPaneView.prototype._private__updateImpl = function (height, width) {
-            var options = this._private__source._internal_options();
-            var data = this._private__rendererData;
+        }
+        _private__updateImpl(height, width) {
+            const options = this._private__source._internal_options();
+            const data = this._private__rendererData;
             data._internal_visible = options.visible;
             if (!data._internal_visible) {
                 return;
@@ -7101,32 +7038,28 @@
                     _internal_zoom: 0,
                 },
             ];
-        };
-        return WatermarkPaneView;
-    }());
+        }
+    }
 
-    var Watermark = /** @class */ (function (_super) {
-        __extends(Watermark, _super);
-        function Watermark(model, options) {
-            var _this = _super.call(this) || this;
-            _this._private__options = options;
-            _this._private__paneView = new WatermarkPaneView(_this);
-            return _this;
+    class Watermark extends DataSource {
+        constructor(model, options) {
+            super();
+            this._private__options = options;
+            this._private__paneView = new WatermarkPaneView(this);
         }
-        Watermark.prototype._internal_priceAxisViews = function () {
+        _internal_priceAxisViews() {
             return [];
-        };
-        Watermark.prototype._internal_paneViews = function () {
+        }
+        _internal_paneViews() {
             return [this._private__paneView];
-        };
-        Watermark.prototype._internal_options = function () {
+        }
+        _internal_options() {
             return this._private__options;
-        };
-        Watermark.prototype._internal_updateAllViews = function () {
+        }
+        _internal_updateAllViews() {
             this._private__paneView._internal_update();
-        };
-        return Watermark;
-    }(DataSource));
+        }
+    }
 
     /// <reference types="_build-time-constants" />
     /**
@@ -7146,12 +7079,11 @@
          */
         TrackingModeExitMode[TrackingModeExitMode["OnNextTap"] = 1] = "OnNextTap";
     })(TrackingModeExitMode || (TrackingModeExitMode = {}));
-    var ChartModel = /** @class */ (function () {
-        function ChartModel(invalidateHandler, options) {
+    class ChartModel {
+        constructor(invalidateHandler, options) {
             this._private__panes = [];
             this._private__serieses = [];
             this._private__width = 0;
-            this._private__initialTimeScrollPos = null;
             this._private__hoveredSource = null;
             this._private__priceScalesOptionsChanged = new Delegate();
             this._private__crosshairMoved = new Delegate();
@@ -7165,27 +7097,27 @@
             this._private__watermark = new Watermark(this, options.watermark);
             this._internal_createPane();
             this._private__panes[0]._internal_setStretchFactor(DEFAULT_STRETCH_FACTOR * 2);
-            this._private__backgroundTopColor = this._private__getBackgroundColor(0 /* Top */);
-            this._private__backgroundBottomColor = this._private__getBackgroundColor(1 /* Bottom */);
+            this._private__backgroundTopColor = this._private__getBackgroundColor(0 /* BackgroundColorSide.Top */);
+            this._private__backgroundBottomColor = this._private__getBackgroundColor(1 /* BackgroundColorSide.Bottom */);
         }
-        ChartModel.prototype._internal_fullUpdate = function () {
-            this._private__invalidate(new InvalidateMask(3 /* Full */));
-        };
-        ChartModel.prototype._internal_lightUpdate = function () {
-            this._private__invalidate(new InvalidateMask(2 /* Light */));
-        };
-        ChartModel.prototype._internal_cursorUpdate = function () {
-            this._private__invalidate(new InvalidateMask(1 /* Cursor */));
-        };
-        ChartModel.prototype._internal_updateSource = function (source) {
-            var inv = this._private__invalidationMaskForSource(source);
+        _internal_fullUpdate() {
+            this._private__invalidate(InvalidateMask._internal_full());
+        }
+        _internal_lightUpdate() {
+            this._private__invalidate(InvalidateMask._internal_light());
+        }
+        _internal_cursorUpdate() {
+            this._private__invalidate(new InvalidateMask(1 /* InvalidationLevel.Cursor */));
+        }
+        _internal_updateSource(source) {
+            const inv = this._private__invalidationMaskForSource(source);
             this._private__invalidate(inv);
-        };
-        ChartModel.prototype._internal_hoveredSource = function () {
+        }
+        _internal_hoveredSource() {
             return this._private__hoveredSource;
-        };
-        ChartModel.prototype._internal_setHoveredSource = function (source) {
-            var prevSource = this._private__hoveredSource;
+        }
+        _internal_setHoveredSource(source) {
+            const prevSource = this._private__hoveredSource;
             this._private__hoveredSource = source;
             if (prevSource !== null) {
                 this._internal_updateSource(prevSource._internal_source);
@@ -7193,13 +7125,13 @@
             if (source !== null) {
                 this._internal_updateSource(source._internal_source);
             }
-        };
-        ChartModel.prototype._internal_options = function () {
+        }
+        _internal_options() {
             return this._private__options;
-        };
-        ChartModel.prototype._internal_applyOptions = function (options) {
+        }
+        _internal_applyOptions(options) {
             merge(this._private__options, options);
-            this._private__panes.forEach(function (p) { return p._internal_applyScaleOptions(options); });
+            this._private__panes.forEach((p) => p._internal_applyScaleOptions(options));
             if (options.timeScale !== undefined) {
                 this._private__timeScale._internal_applyOptions(options.timeScale);
             }
@@ -7209,36 +7141,35 @@
             if (options.leftPriceScale || options.rightPriceScale) {
                 this._private__priceScalesOptionsChanged._internal_fire();
             }
-            this._private__backgroundTopColor = this._private__getBackgroundColor(0 /* Top */);
-            this._private__backgroundBottomColor = this._private__getBackgroundColor(1 /* Bottom */);
+            this._private__backgroundTopColor = this._private__getBackgroundColor(0 /* BackgroundColorSide.Top */);
+            this._private__backgroundBottomColor = this._private__getBackgroundColor(1 /* BackgroundColorSide.Bottom */);
             this._internal_fullUpdate();
-        };
-        ChartModel.prototype._internal_applyPriceScaleOptions = function (priceScaleId, options) {
-            if (priceScaleId === "left" /* Left */) {
+        }
+        _internal_applyPriceScaleOptions(priceScaleId, options) {
+            if (priceScaleId === "left" /* DefaultPriceScaleId.Left */) {
                 this._internal_applyOptions({
                     leftPriceScale: options,
                 });
                 return;
             }
-            else if (priceScaleId === "right" /* Right */) {
+            else if (priceScaleId === "right" /* DefaultPriceScaleId.Right */) {
                 this._internal_applyOptions({
                     rightPriceScale: options,
                 });
                 return;
             }
-            var res = this._internal_findPriceScale(priceScaleId);
+            const res = this._internal_findPriceScale(priceScaleId);
             if (res === null) {
                 {
-                    throw new Error("Trying to apply price scale options with incorrect ID: ".concat(priceScaleId));
+                    throw new Error(`Trying to apply price scale options with incorrect ID: ${priceScaleId}`);
                 }
             }
             res._internal_priceScale._internal_applyOptions(options);
             this._private__priceScalesOptionsChanged._internal_fire();
-        };
-        ChartModel.prototype._internal_findPriceScale = function (priceScaleId) {
-            for (var _i = 0, _a = this._private__panes; _i < _a.length; _i++) {
-                var pane = _a[_i];
-                var priceScale = pane._internal_priceScaleById(priceScaleId);
+        }
+        _internal_findPriceScale(priceScaleId) {
+            for (const pane of this._private__panes) {
+                const priceScale = pane._internal_priceScaleById(priceScaleId);
                 if (priceScale !== null) {
                     return {
                         _internal_pane: pane,
@@ -7247,34 +7178,34 @@
                 }
             }
             return null;
-        };
-        ChartModel.prototype._internal_timeScale = function () {
+        }
+        _internal_timeScale() {
             return this._private__timeScale;
-        };
-        ChartModel.prototype._internal_panes = function () {
+        }
+        _internal_panes() {
             return this._private__panes;
-        };
-        ChartModel.prototype._internal_watermarkSource = function () {
+        }
+        _internal_watermarkSource() {
             return this._private__watermark;
-        };
-        ChartModel.prototype._internal_crosshairSource = function () {
+        }
+        _internal_crosshairSource() {
             return this._private__crosshair;
-        };
-        ChartModel.prototype._internal_crosshairMoved = function () {
+        }
+        _internal_crosshairMoved() {
             return this._private__crosshairMoved;
-        };
-        ChartModel.prototype._internal_setPaneHeight = function (pane, height) {
+        }
+        _internal_setPaneHeight(pane, height) {
             pane._internal_setHeight(height);
             this._internal_recalculateAllPanes();
-        };
-        ChartModel.prototype._internal_setWidth = function (width) {
+        }
+        _internal_setWidth(width) {
             this._private__width = width;
             this._private__timeScale._internal_setWidth(this._private__width);
-            this._private__panes.forEach(function (pane) { return pane._internal_setWidth(width); });
+            this._private__panes.forEach((pane) => pane._internal_setWidth(width));
             this._internal_recalculateAllPanes();
-        };
-        ChartModel.prototype._internal_createPane = function (index) {
-            var pane = new Pane(this._private__timeScale, this);
+        }
+        _internal_createPane(index) {
+            const pane = new Pane(this._private__timeScale, this);
             if (index !== undefined) {
                 this._private__panes.splice(index, 0, pane);
             }
@@ -7282,201 +7213,193 @@
                 // adding to the end - common case
                 this._private__panes.push(pane);
             }
-            var actualIndex = (index === undefined) ? this._private__panes.length - 1 : index;
+            const actualIndex = (index === undefined) ? this._private__panes.length - 1 : index;
             // we always do autoscaling on the creation
             // if autoscale option is true, it is ok, just recalculate by invalidation mask
             // if autoscale option is false, autoscale anyway on the first draw
             // also there is a scenario when autoscale is true in constructor and false later on applyOptions
-            var mask = new InvalidateMask(3 /* Full */);
+            const mask = InvalidateMask._internal_full();
             mask._internal_invalidatePane(actualIndex, {
-                _internal_level: 0 /* None */,
+                _internal_level: 0 /* InvalidationLevel.None */,
                 _internal_autoScale: true,
             });
             this._private__invalidate(mask);
             return pane;
-        };
-        ChartModel.prototype._internal_startScalePrice = function (pane, priceScale, x) {
+        }
+        _internal_startScalePrice(pane, priceScale, x) {
             pane._internal_startScalePrice(priceScale, x);
-        };
-        ChartModel.prototype._internal_scalePriceTo = function (pane, priceScale, x) {
+        }
+        _internal_scalePriceTo(pane, priceScale, x) {
             pane._internal_scalePriceTo(priceScale, x);
             this._internal_updateCrosshair();
-            this._private__invalidate(this._private__paneInvalidationMask(pane, 2 /* Light */));
-        };
-        ChartModel.prototype._internal_endScalePrice = function (pane, priceScale) {
+            this._private__invalidate(this._private__paneInvalidationMask(pane, 2 /* InvalidationLevel.Light */));
+        }
+        _internal_endScalePrice(pane, priceScale) {
             pane._internal_endScalePrice(priceScale);
-            this._private__invalidate(this._private__paneInvalidationMask(pane, 2 /* Light */));
-        };
-        ChartModel.prototype._internal_startScrollPrice = function (pane, priceScale, x) {
+            this._private__invalidate(this._private__paneInvalidationMask(pane, 2 /* InvalidationLevel.Light */));
+        }
+        _internal_startScrollPrice(pane, priceScale, x) {
             if (priceScale._internal_isAutoScale()) {
                 return;
             }
             pane._internal_startScrollPrice(priceScale, x);
-        };
-        ChartModel.prototype._internal_scrollPriceTo = function (pane, priceScale, x) {
+        }
+        _internal_scrollPriceTo(pane, priceScale, x) {
             if (priceScale._internal_isAutoScale()) {
                 return;
             }
             pane._internal_scrollPriceTo(priceScale, x);
             this._internal_updateCrosshair();
-            this._private__invalidate(this._private__paneInvalidationMask(pane, 2 /* Light */));
-        };
-        ChartModel.prototype._internal_endScrollPrice = function (pane, priceScale) {
+            this._private__invalidate(this._private__paneInvalidationMask(pane, 2 /* InvalidationLevel.Light */));
+        }
+        _internal_endScrollPrice(pane, priceScale) {
             if (priceScale._internal_isAutoScale()) {
                 return;
             }
             pane._internal_endScrollPrice(priceScale);
-            this._private__invalidate(this._private__paneInvalidationMask(pane, 2 /* Light */));
-        };
-        ChartModel.prototype._internal_resetPriceScale = function (pane, priceScale) {
+            this._private__invalidate(this._private__paneInvalidationMask(pane, 2 /* InvalidationLevel.Light */));
+        }
+        _internal_resetPriceScale(pane, priceScale) {
             pane._internal_resetPriceScale(priceScale);
-            this._private__invalidate(this._private__paneInvalidationMask(pane, 2 /* Light */));
-        };
-        ChartModel.prototype._internal_startScaleTime = function (position) {
+            this._private__invalidate(this._private__paneInvalidationMask(pane, 2 /* InvalidationLevel.Light */));
+        }
+        _internal_startScaleTime(position) {
             this._private__timeScale._internal_startScale(position);
-        };
+        }
         /**
          * Zoom in/out the chart (depends on scale value).
          *
          * @param pointX - X coordinate of the point to apply the zoom (the point which should stay on its place)
          * @param scale - Zoom value. Negative value means zoom out, positive - zoom in.
          */
-        ChartModel.prototype._internal_zoomTime = function (pointX, scale) {
-            var timeScale = this._internal_timeScale();
+        _internal_zoomTime(pointX, scale) {
+            const timeScale = this._internal_timeScale();
             if (timeScale._internal_isEmpty() || scale === 0) {
                 return;
             }
-            var timeScaleWidth = timeScale._internal_width();
+            const timeScaleWidth = timeScale._internal_width();
             pointX = Math.max(1, Math.min(pointX, timeScaleWidth));
             timeScale._internal_zoom(pointX, scale);
             this._internal_recalculateAllPanes();
-        };
-        ChartModel.prototype._internal_scrollChart = function (x) {
+        }
+        _internal_scrollChart(x) {
             this._internal_startScrollTime(0);
             this._internal_scrollTimeTo(x);
             this._internal_endScrollTime();
-        };
-        ChartModel.prototype._internal_scaleTimeTo = function (x) {
+        }
+        _internal_scaleTimeTo(x) {
             this._private__timeScale._internal_scaleTo(x);
             this._internal_recalculateAllPanes();
-        };
-        ChartModel.prototype._internal_endScaleTime = function () {
+        }
+        _internal_endScaleTime() {
             this._private__timeScale._internal_endScale();
             this._internal_lightUpdate();
-        };
-        ChartModel.prototype._internal_startScrollTime = function (x) {
-            this._private__initialTimeScrollPos = x;
+        }
+        _internal_startScrollTime(x) {
             this._private__timeScale._internal_startScroll(x);
-        };
-        ChartModel.prototype._internal_scrollTimeTo = function (x) {
-            var res = false;
-            if (this._private__initialTimeScrollPos !== null && Math.abs(x - this._private__initialTimeScrollPos) > 20) {
-                this._private__initialTimeScrollPos = null;
-                res = true;
-            }
+        }
+        _internal_scrollTimeTo(x) {
             this._private__timeScale._internal_scrollTo(x);
             this._internal_recalculateAllPanes();
-            return res;
-        };
-        ChartModel.prototype._internal_endScrollTime = function () {
+        }
+        _internal_endScrollTime() {
             this._private__timeScale._internal_endScroll();
             this._internal_lightUpdate();
-            this._private__initialTimeScrollPos = null;
-        };
-        ChartModel.prototype._internal_serieses = function () {
+        }
+        _internal_serieses() {
             return this._private__serieses;
-        };
-        ChartModel.prototype._internal_setAndSaveCurrentPosition = function (x, y, pane) {
+        }
+        _internal_setAndSaveCurrentPosition(x, y, pane) {
             this._private__crosshair._internal_saveOriginCoord(x, y);
-            var price = NaN;
-            var index = this._private__timeScale._internal_coordinateToIndex(x);
-            var visibleBars = this._private__timeScale._internal_visibleStrictRange();
+            let price = NaN;
+            let index = this._private__timeScale._internal_coordinateToIndex(x);
+            const visibleBars = this._private__timeScale._internal_visibleStrictRange();
             if (visibleBars !== null) {
                 index = Math.min(Math.max(visibleBars._internal_left(), index), visibleBars._internal_right());
             }
-            var priceScale = pane._internal_defaultPriceScale();
-            var firstValue = priceScale._internal_firstValue();
+            const priceScale = pane._internal_defaultPriceScale();
+            const firstValue = priceScale._internal_firstValue();
             if (firstValue !== null) {
                 price = priceScale._internal_coordinateToPrice(y, firstValue);
             }
             price = this._private__magnet._internal_align(price, index, pane);
             this._private__crosshair._internal_setPosition(index, price, pane);
             this._internal_cursorUpdate();
-            this._private__crosshairMoved._internal_fire(this._private__crosshair._internal_appliedIndex(), { x: x, y: y });
-        };
-        ChartModel.prototype._internal_clearCurrentPosition = function () {
-            var crosshair = this._internal_crosshairSource();
+            this._private__crosshairMoved._internal_fire(this._private__crosshair._internal_appliedIndex(), { x, y });
+        }
+        _internal_clearCurrentPosition() {
+            const crosshair = this._internal_crosshairSource();
             crosshair._internal_clearPosition();
             this._internal_cursorUpdate();
             this._private__crosshairMoved._internal_fire(null, null);
-        };
-        ChartModel.prototype._internal_updateCrosshair = function () {
+        }
+        _internal_updateCrosshair() {
             // apply magnet
-            var pane = this._private__crosshair._internal_pane();
+            const pane = this._private__crosshair._internal_pane();
             if (pane !== null) {
-                var x = this._private__crosshair._internal_originCoordX();
-                var y = this._private__crosshair._internal_originCoordY();
+                const x = this._private__crosshair._internal_originCoordX();
+                const y = this._private__crosshair._internal_originCoordY();
                 this._internal_setAndSaveCurrentPosition(x, y, pane);
             }
             this._private__crosshair._internal_updateAllViews();
-        };
-        ChartModel.prototype._internal_updateTimeScale = function (newBaseIndex, newPoints, firstChangedPointIndex) {
-            var oldFirstTime = this._private__timeScale._internal_indexToTime(0);
+        }
+        _internal_updateTimeScale(newBaseIndex, newPoints, firstChangedPointIndex) {
+            const oldFirstTime = this._private__timeScale._internal_indexToTime(0);
             if (newPoints !== undefined && firstChangedPointIndex !== undefined) {
                 this._private__timeScale._internal_update(newPoints, firstChangedPointIndex);
             }
-            var newFirstTime = this._private__timeScale._internal_indexToTime(0);
-            var currentBaseIndex = this._private__timeScale._internal_baseIndex();
-            var visibleBars = this._private__timeScale._internal_visibleStrictRange();
+            const newFirstTime = this._private__timeScale._internal_indexToTime(0);
+            const currentBaseIndex = this._private__timeScale._internal_baseIndex();
+            const visibleBars = this._private__timeScale._internal_visibleStrictRange();
             // if time scale cannot return current visible bars range (e.g. time scale has zero-width)
             // then we do not need to update right offset to shift visible bars range to have the same right offset as we have before new bar
             // (and actually we cannot)
             if (visibleBars !== null && oldFirstTime !== null && newFirstTime !== null) {
-                var isLastSeriesBarVisible = visibleBars._internal_contains(currentBaseIndex);
-                var isLeftBarShiftToLeft = oldFirstTime._internal_timestamp > newFirstTime._internal_timestamp;
-                var isSeriesPointsAdded = newBaseIndex !== null && newBaseIndex > currentBaseIndex;
-                var isSeriesPointsAddedToRight = isSeriesPointsAdded && !isLeftBarShiftToLeft;
-                var needShiftVisibleRangeOnNewBar = isLastSeriesBarVisible && this._private__timeScale._internal_options().shiftVisibleRangeOnNewBar;
+                const isLastSeriesBarVisible = visibleBars._internal_contains(currentBaseIndex);
+                const isLeftBarShiftToLeft = oldFirstTime._internal_timestamp > newFirstTime._internal_timestamp;
+                const isSeriesPointsAdded = newBaseIndex !== null && newBaseIndex > currentBaseIndex;
+                const isSeriesPointsAddedToRight = isSeriesPointsAdded && !isLeftBarShiftToLeft;
+                const needShiftVisibleRangeOnNewBar = isLastSeriesBarVisible && this._private__timeScale._internal_options().shiftVisibleRangeOnNewBar;
                 if (isSeriesPointsAddedToRight && !needShiftVisibleRangeOnNewBar) {
-                    var compensationShift = newBaseIndex - currentBaseIndex;
+                    const compensationShift = newBaseIndex - currentBaseIndex;
                     this._private__timeScale._internal_setRightOffset(this._private__timeScale._internal_rightOffset() - compensationShift);
                 }
             }
             this._private__timeScale._internal_setBaseIndex(newBaseIndex);
-        };
-        ChartModel.prototype._internal_recalculatePane = function (pane) {
+        }
+        _internal_recalculatePane(pane) {
             if (pane !== null) {
                 pane._internal_recalculate();
             }
-        };
-        ChartModel.prototype._internal_paneForSource = function (source) {
-            var pane = this._private__panes.find(function (p) { return p._internal_orderedSources().includes(source); });
+        }
+        _internal_paneForSource(source) {
+            const pane = this._private__panes.find((p) => p._internal_orderedSources().includes(source));
             return pane === undefined ? null : pane;
-        };
-        ChartModel.prototype._internal_recalculateAllPanes = function () {
+        }
+        _internal_recalculateAllPanes() {
             this._private__watermark._internal_updateAllViews();
-            this._private__panes.forEach(function (p) { return p._internal_recalculate(); });
+            this._private__panes.forEach((p) => p._internal_recalculate());
             this._internal_updateCrosshair();
-        };
-        ChartModel.prototype._internal_destroy = function () {
-            this._private__panes.forEach(function (p) { return p._internal_destroy(); });
+        }
+        _internal_destroy() {
+            this._private__panes.forEach((p) => p._internal_destroy());
             this._private__panes.length = 0;
             // to avoid memleaks
             this._private__options.localization.priceFormatter = undefined;
             this._private__options.localization.timeFormatter = undefined;
-        };
-        ChartModel.prototype._internal_rendererOptionsProvider = function () {
+        }
+        _internal_rendererOptionsProvider() {
             return this._private__rendererOptionsProvider;
-        };
-        ChartModel.prototype._internal_priceAxisRendererOptions = function () {
+        }
+        _internal_priceAxisRendererOptions() {
             return this._private__rendererOptionsProvider._internal_options();
-        };
-        ChartModel.prototype._internal_priceScalesOptionsChanged = function () {
+        }
+        _internal_priceScalesOptionsChanged() {
             return this._private__priceScalesOptionsChanged;
-        };
-        ChartModel.prototype._internal_createSeries = function (seriesType, options) {
-            var pane = this._private__panes[0];
-            var series = this._private__createSeries(options, seriesType, pane);
+        }
+        _internal_createSeries(seriesType, options) {
+            const pane = this._private__panes[0];
+            const series = this._private__createSeries(options, seriesType, pane);
             this._private__serieses.push(series);
             if (this._private__serieses.length === 1) {
                 // call fullUpdate to recalculate chart's parts geometry
@@ -7486,71 +7409,81 @@
                 this._internal_lightUpdate();
             }
             return series;
-        };
-        ChartModel.prototype._internal_removeSeries = function (series) {
-            var pane = this._internal_paneForSource(series);
-            var seriesIndex = this._private__serieses.indexOf(series);
+        }
+        _internal_removeSeries(series) {
+            const pane = this._internal_paneForSource(series);
+            const seriesIndex = this._private__serieses.indexOf(series);
             assert(seriesIndex !== -1, 'Series not found');
             this._private__serieses.splice(seriesIndex, 1);
             ensureNotNull(pane)._internal_removeDataSource(series);
             if (series._internal_destroy) {
                 series._internal_destroy();
             }
-        };
-        ChartModel.prototype._internal_moveSeriesToScale = function (series, targetScaleId) {
-            var pane = ensureNotNull(this._internal_paneForSource(series));
+        }
+        _internal_moveSeriesToScale(series, targetScaleId) {
+            const pane = ensureNotNull(this._internal_paneForSource(series));
             pane._internal_removeDataSource(series);
             // check if targetScaleId exists
-            var target = this._internal_findPriceScale(targetScaleId);
+            const target = this._internal_findPriceScale(targetScaleId);
             if (target === null) {
                 // new scale on the same pane
-                var zOrder = series._internal_zorder();
+                const zOrder = series._internal_zorder();
                 pane._internal_addDataSource(series, targetScaleId, zOrder);
             }
             else {
                 // if move to the new scale of the same pane, keep zorder
                 // if move to new pane
-                var zOrder = (target._internal_pane === pane) ? series._internal_zorder() : undefined;
+                const zOrder = (target._internal_pane === pane) ? series._internal_zorder() : undefined;
                 target._internal_pane._internal_addDataSource(series, targetScaleId, zOrder);
             }
-        };
-        ChartModel.prototype._internal_fitContent = function () {
-            var mask = new InvalidateMask(2 /* Light */);
+        }
+        _internal_fitContent() {
+            const mask = InvalidateMask._internal_light();
             mask._internal_setFitContent();
             this._private__invalidate(mask);
-        };
-        ChartModel.prototype._internal_setTargetLogicalRange = function (range) {
-            var mask = new InvalidateMask(2 /* Light */);
+        }
+        _internal_setTargetLogicalRange(range) {
+            const mask = InvalidateMask._internal_light();
             mask._internal_applyRange(range);
             this._private__invalidate(mask);
-        };
-        ChartModel.prototype._internal_resetTimeScale = function () {
-            var mask = new InvalidateMask(2 /* Light */);
+        }
+        _internal_resetTimeScale() {
+            const mask = InvalidateMask._internal_light();
             mask._internal_resetTimeScale();
             this._private__invalidate(mask);
-        };
-        ChartModel.prototype._internal_setBarSpacing = function (spacing) {
-            var mask = new InvalidateMask(2 /* Light */);
+        }
+        _internal_setBarSpacing(spacing) {
+            const mask = InvalidateMask._internal_light();
             mask._internal_setBarSpacing(spacing);
             this._private__invalidate(mask);
-        };
-        ChartModel.prototype._internal_setRightOffset = function (offset) {
-            var mask = new InvalidateMask(2 /* Light */);
+        }
+        _internal_setRightOffset(offset) {
+            const mask = InvalidateMask._internal_light();
             mask._internal_setRightOffset(offset);
             this._private__invalidate(mask);
-        };
-        ChartModel.prototype._internal_defaultVisiblePriceScaleId = function () {
-            return this._private__options.rightPriceScale.visible ? "right" /* Right */ : "left" /* Left */;
-        };
-        ChartModel.prototype._internal_backgroundBottomColor = function () {
+        }
+        _internal_setTimeScaleAnimation(animation) {
+            const mask = InvalidateMask._internal_light();
+            mask._internal_setTimeScaleAnimation(animation);
+            this._private__invalidate(mask);
+        }
+        _internal_stopTimeScaleAnimation() {
+            const mask = InvalidateMask._internal_light();
+            mask._internal_stopTimeScaleAnimation();
+            this._private__invalidate(mask);
+        }
+        _internal_defaultVisiblePriceScaleId() {
+            return this._private__options.rightPriceScale.visible ? "right" /* DefaultPriceScaleId.Right */ : "left" /* DefaultPriceScaleId.Left */;
+        }
+        _internal_backgroundBottomColor() {
             return this._private__backgroundBottomColor;
-        };
-        ChartModel.prototype._internal_backgroundTopColor = function () {
+        }
+        _internal_backgroundTopColor() {
             return this._private__backgroundTopColor;
-        };
-        ChartModel.prototype._internal_backgroundColorAtYPercentFromTop = function (percent) {
-            var bottomColor = this._private__backgroundBottomColor;
-            var topColor = this._private__backgroundTopColor;
+        }
+        _internal_backgroundColorAtYPercentFromTop(percent) {
+            const bottomColor = this._private__backgroundBottomColor;
+            const topColor = this._private__backgroundTopColor;
             if (bottomColor === topColor) {
                 // solid background
                 return bottomColor;
@@ -7567,58 +7500,57 @@
                 };
             }
             else {
-                var cachedValue = this._private__gradientColorsCache._internal_colors.get(percent);
+                const cachedValue = this._private__gradientColorsCache._internal_colors.get(percent);
                 if (cachedValue !== undefined) {
                     return cachedValue;
                 }
             }
-            var result = gradientColorAtPercent(topColor, bottomColor, percent / 100);
+            const result = gradientColorAtPercent(topColor, bottomColor, percent / 100);
             this._private__gradientColorsCache._internal_colors.set(percent, result);
             return result;
-        };
-        ChartModel.prototype._private__paneInvalidationMask = function (pane, level) {
-            var inv = new InvalidateMask(level);
+        }
+        _private__paneInvalidationMask(pane, level) {
+            const inv = new InvalidateMask(level);
             if (pane !== null) {
-                var index = this._private__panes.indexOf(pane);
+                const index = this._private__panes.indexOf(pane);
                 inv._internal_invalidatePane(index, {
                     _internal_level: level,
                 });
             }
             return inv;
-        };
-        ChartModel.prototype._private__invalidationMaskForSource = function (source, invalidateType) {
+        }
+        _private__invalidationMaskForSource(source, invalidateType) {
             if (invalidateType === undefined) {
-                invalidateType = 2 /* Light */;
+                invalidateType = 2 /* InvalidationLevel.Light */;
             }
             return this._private__paneInvalidationMask(this._internal_paneForSource(source), invalidateType);
-        };
-        ChartModel.prototype._private__invalidate = function (mask) {
+        }
+        _private__invalidate(mask) {
             if (this._private__invalidateHandler) {
                 this._private__invalidateHandler(mask);
             }
-            this._private__panes.forEach(function (pane) { return pane._internal_grid()._internal_paneView()._internal_update(); });
-        };
-        ChartModel.prototype._private__createSeries = function (options, seriesType, pane) {
-            var series = new Series(this, options, seriesType);
-            var targetScaleId = options.priceScaleId !== undefined ? options.priceScaleId : this._internal_defaultVisiblePriceScaleId();
+            this._private__panes.forEach((pane) => pane._internal_grid()._internal_paneView()._internal_update());
+        }
+        _private__createSeries(options, seriesType, pane) {
+            const series = new Series(this, options, seriesType);
+            const targetScaleId = options.priceScaleId !== undefined ? options.priceScaleId : this._internal_defaultVisiblePriceScaleId();
             pane._internal_addDataSource(series, targetScaleId);
             if (!isDefaultPriceScale(targetScaleId)) {
                 // let's apply that options again to apply margins
                 series._internal_applyOptions(options);
             }
             return series;
-        };
-        ChartModel.prototype._private__getBackgroundColor = function (side) {
-            var layoutOptions = this._private__options.layout;
-            if (layoutOptions.background.type === "gradient" /* VerticalGradient */) {
-                return side === 0 /* Top */ ?
+        }
+        _private__getBackgroundColor(side) {
+            const layoutOptions = this._private__options.layout;
+            if (layoutOptions.background.type === "gradient" /* ColorType.VerticalGradient */) {
+                return side === 0 /* BackgroundColorSide.Top */ ?
                     layoutOptions.background.topColor :
                     layoutOptions.background.bottomColor;
             }
             return layoutOptions.background.color;
-        };
-        return ChartModel;
-    }());
+        }
+    }
 
     function fillUpDownCandlesticksColors(options) {
         if (options.borderColor !== undefined) {
@@ -7652,10 +7584,10 @@
         if (minMove >= 1) {
             return 0;
         }
-        var i = 0;
+        let i = 0;
         for (; i < 8; i++) {
-            var intPart = Math.round(minMove);
-            var fractPart = Math.abs(intPart - minMove);
+            const intPart = Math.round(minMove);
+            const fractPart = Math.abs(intPart - minMove);
             if (fractPart < 1e-8) {
                 return i;
             }
@@ -7714,6 +7646,55 @@
         return data.open !== undefined || data.value !== undefined;
     }
 
+    /**
+     * When you're trying to use the library in server-side context (for instance in SSR)
+     * you don't have some browser-specific variables like navigator or window
+     * and if the library will use them on the top level of the library
+     * the import will fail due ReferenceError
+     * thus, this allows use the navigator on the top level and being imported in server-side context as well
+     * See issue #446
+     */
+    // eslint-disable-next-line @typescript-eslint/tslint/config
+    const isRunningOnClientSide = typeof window !== 'undefined';
+
+    function isFF() {
+        if (!isRunningOnClientSide) {
+            return false;
+        }
+        return window.navigator.userAgent.toLowerCase().indexOf('firefox') > -1;
+    }
+    function isIOS() {
+        if (!isRunningOnClientSide) {
+            return false;
+        }
+        // eslint-disable-next-line deprecation/deprecation
+        return /iPhone|iPad|iPod/.test(window.navigator.platform);
+    }
+    function isChrome() {
+        if (!isRunningOnClientSide) {
+            return false;
+        }
+        return window.chrome !== undefined;
+    }
+    // Determine whether the browser is running on windows.
+    function isWindows() {
+        var _a;
+        // more accurate if available
+        if ((_a = navigator === null || navigator === void 0 ? void 0 : navigator.userAgentData) === null || _a === void 0 ? void 0 : _a.platform) {
+            return navigator.userAgentData.platform === 'Windows';
+        }
+        return navigator.userAgent.toLowerCase().indexOf('win') >= 0;
+    }
+    // Determine whether the browser is Chromium based.
+    function isChromiumBased() {
+        if (!navigator.userAgentData) {
+            return false;
+        }
+        return navigator.userAgentData.brands.some((brand) => {
+            return brand.brand.includes('Chromium');
+        });
+    }
+
     var defaultBindingOptions = {
         allowDownsampling: true,
     };
@@ -7822,16 +7803,15 @@
         return DevicePixelRatioBinding;
     }());
 
-    var Size = /** @class */ (function () {
-        function Size(w, h) {
+    class Size {
+        constructor(w, h) {
             this._internal_w = w;
             this._internal_h = h;
         }
-        Size.prototype._internal_equals = function (size) {
+        _internal_equals(size) {
             return (this._internal_w === size._internal_w) && (this._internal_h === size._internal_h);
-        };
-        return Size;
-    }());
+        }
+    }
     function getCanvasDevicePixelRatio(canvas) {
         return canvas.ownerDocument &&
             canvas.ownerDocument.defaultView &&
@@ -7839,7 +7819,7 @@
             || 1;
     }
     function getContext2D(canvas) {
-        var ctx = ensureNotNull(canvas.getContext('2d'));
+        const ctx = ensureNotNull(canvas.getContext('2d'));
         // sometimes (very often) ctx getContext returns the same context every time
         // and there might be previous transformation
         // so let's reset it to be sure that everything is ok
@@ -7848,21 +7828,21 @@
         return ctx;
     }
     function createPreconfiguredCanvas(doc, size) {
-        var canvas = doc.createElement('canvas');
-        var pixelRatio = getCanvasDevicePixelRatio(canvas);
+        const canvas = doc.createElement('canvas');
+        const pixelRatio = getCanvasDevicePixelRatio(canvas);
         // we should keep the layout size...
-        canvas.style.width = "".concat(size._internal_w, "px");
-        canvas.style.height = "".concat(size._internal_h, "px");
+        canvas.style.width = `${size._internal_w}px`;
+        canvas.style.height = `${size._internal_h}px`;
         // ...but multiply coordinate space dimensions to device pixel ratio
         canvas.width = size._internal_w * pixelRatio;
         canvas.height = size._internal_h * pixelRatio;
         return canvas;
     }
     function createBoundCanvas(parentElement, size) {
-        var doc = ensureNotNull(parentElement.ownerDocument);
-        var canvas = doc.createElement('canvas');
+        const doc = ensureNotNull(parentElement.ownerDocument);
+        const canvas = doc.createElement('canvas');
         parentElement.appendChild(canvas);
-        var binding = bindToDevicePixelRatio(canvas, { allowDownsampling: false });
+        const binding = bindToDevicePixelRatio(canvas, { allowDownsampling: false });
         binding.resizeCanvas({
             width: size._internal_w,
             height: size._internal_h,
@@ -7874,15 +7854,15 @@
         return pos1._internal_position - pos2._internal_position;
     }
     function speedPxPerMSec(pos1, pos2, maxSpeed) {
-        var speed = (pos1._internal_position - pos2._internal_position) / (pos1._internal_time - pos2._internal_time);
+        const speed = (pos1._internal_position - pos2._internal_position) / (pos1._internal_time - pos2._internal_time);
         return Math.sign(speed) * Math.min(Math.abs(speed), maxSpeed);
     }
     function durationMSec(speed, dumpingCoeff) {
-        var lnDumpingCoeff = Math.log(dumpingCoeff);
-        return Math.log((1 /* EpsilonDistance */ * lnDumpingCoeff) / -speed) / (lnDumpingCoeff);
+        const lnDumpingCoeff = Math.log(dumpingCoeff);
+        return Math.log((1 /* Constants.EpsilonDistance */ * lnDumpingCoeff) / -speed) / (lnDumpingCoeff);
     }
-    var KineticAnimation = /** @class */ (function () {
-        function KineticAnimation(minSpeed, maxSpeed, dumpingCoeff, minMove) {
+    class KineticAnimation {
+        constructor(minSpeed, maxSpeed, dumpingCoeff, minMove) {
             this._private__position1 = null;
             this._private__position2 = null;
             this._private__position3 = null;
@@ -7890,13 +7870,12 @@
             this._private__animationStartPosition = null;
             this._private__durationMsecs = 0;
             this._private__speedPxPerMsec = 0;
-            this._private__terminated = false;
             this._private__minSpeed = minSpeed;
             this._private__maxSpeed = maxSpeed;
             this._private__dumpingCoeff = dumpingCoeff;
             this._private__minMove = minMove;
         }
-        KineticAnimation.prototype._internal_addPosition = function (position, time) {
+        _internal_addPosition(position, time) {
             if (this._private__position1 !== null) {
                 if (this._private__position1._internal_time === time) {
                     this._private__position1._internal_position = position;
@@ -7910,35 +7889,35 @@
             this._private__position3 = this._private__position2;
             this._private__position2 = this._private__position1;
             this._private__position1 = { _internal_time: time, _internal_position: position };
-        };
-        KineticAnimation.prototype._internal_start = function (position, time) {
+        }
+        _internal_start(position, time) {
             if (this._private__position1 === null || this._private__position2 === null) {
                 return;
             }
-            if (time - this._private__position1._internal_time > 50 /* MaxStartDelay */) {
+            if (time - this._private__position1._internal_time > 50 /* Constants.MaxStartDelay */) {
                 return;
             }
             // To calculate all the rest parameters we should calculate the speed af first
-            var totalDistance = 0;
-            var speed1 = speedPxPerMSec(this._private__position1, this._private__position2, this._private__maxSpeed);
-            var distance1 = distanceBetweenPoints(this._private__position1, this._private__position2);
+            let totalDistance = 0;
+            const speed1 = speedPxPerMSec(this._private__position1, this._private__position2, this._private__maxSpeed);
+            const distance1 = distanceBetweenPoints(this._private__position1, this._private__position2);
             // We're calculating weighted average speed
             // Than more distance for a segment, than more its weight
-            var speedItems = [speed1];
-            var distanceItems = [distance1];
+            const speedItems = [speed1];
+            const distanceItems = [distance1];
             totalDistance += distance1;
             if (this._private__position3 !== null) {
-                var speed2 = speedPxPerMSec(this._private__position2, this._private__position3, this._private__maxSpeed);
+                const speed2 = speedPxPerMSec(this._private__position2, this._private__position3, this._private__maxSpeed);
                 // stop at this moment if direction of the segment is opposite
                 if (Math.sign(speed2) === Math.sign(speed1)) {
-                    var distance2 = distanceBetweenPoints(this._private__position2, this._private__position3);
+                    const distance2 = distanceBetweenPoints(this._private__position2, this._private__position3);
                     speedItems.push(speed2);
                     distanceItems.push(distance2);
                     totalDistance += distance2;
                     if (this._private__position4 !== null) {
-                        var speed3 = speedPxPerMSec(this._private__position3, this._private__position4, this._private__maxSpeed);
+                        const speed3 = speedPxPerMSec(this._private__position3, this._private__position4, this._private__maxSpeed);
                         if (Math.sign(speed3) === Math.sign(speed1)) {
-                            var distance3 = distanceBetweenPoints(this._private__position3, this._private__position4);
+                            const distance3 = distanceBetweenPoints(this._private__position3, this._private__position4);
                             speedItems.push(speed3);
                             distanceItems.push(distance3);
                             totalDistance += distance3;
@@ -7946,8 +7925,8 @@
                     }
                 }
             }
-            var resultSpeed = 0;
-            for (var i = 0; i < speedItems.length; ++i) {
+            let resultSpeed = 0;
+            for (let i = 0; i < speedItems.length; ++i) {
                 resultSpeed += distanceItems[i] / totalDistance * speedItems[i];
             }
             if (Math.abs(resultSpeed) < this._private__minSpeed) {
@@ -7956,66 +7935,28 @@
             this._private__animationStartPosition = { _internal_position: position, _internal_time: time };
             this._private__speedPxPerMsec = resultSpeed;
             this._private__durationMsecs = durationMSec(Math.abs(resultSpeed), this._private__dumpingCoeff);
-        };
-        KineticAnimation.prototype._internal_getPosition = function (time) {
-            var startPosition = ensureNotNull(this._private__animationStartPosition);
-            var durationMsecs = time - startPosition._internal_time;
+        }
+        _internal_getPosition(time) {
+            const startPosition = ensureNotNull(this._private__animationStartPosition);
+            const durationMsecs = time - startPosition._internal_time;
             return startPosition._internal_position + this._private__speedPxPerMsec * (Math.pow(this._private__dumpingCoeff, durationMsecs) - 1) / (Math.log(this._private__dumpingCoeff));
-        };
-        KineticAnimation.prototype._internal_finished = function (time) {
-            return this._private__animationStartPosition === null || this._private__progressDuration(time) === this._private__durationMsecs;
-        };
-        KineticAnimation.prototype._internal_terminated = function () {
-            return this._private__terminated;
-        };
-        KineticAnimation.prototype._internal_terminate = function () {
-            this._private__terminated = true;
-        };
-        KineticAnimation.prototype._private__progressDuration = function (time) {
-            var startPosition = ensureNotNull(this._private__animationStartPosition);
-            var progress = time - startPosition._internal_time;
-            return Math.min(progress, this._private__durationMsecs);
-        };
-        return KineticAnimation;
-    }());
-
-    /**
-     * When you're trying to use the library in server-side context (for instance in SSR)
-     * you don't have some browser-specific variables like navigator or window
-     * and if the library will use them on the top level of the library
-     * the import will fail due ReferenceError
-     * thus, this allows use the navigator on the top level and being imported in server-side context as well
-     * See issue #446
-     */
-    // eslint-disable-next-line @typescript-eslint/tslint/config
-    var isRunningOnClientSide = typeof window !== 'undefined';
-
-    function isFF() {
-        if (!isRunningOnClientSide) {
-            return false;
         }
-        return window.navigator.userAgent.toLowerCase().indexOf('firefox') > -1;
-    }
-    function isIOS() {
-        if (!isRunningOnClientSide) {
-            return false;
+        _internal_finished(time) {
+            return this._private__animationStartPosition === null || this._private__progressDuration(time) === this._private__durationMsecs;
         }
-        // eslint-disable-next-line deprecation/deprecation
-        return /iPhone|iPad|iPod/.test(window.navigator.platform);
-    }
-    function isChrome() {
-        if (!isRunningOnClientSide) {
-            return false;
+        _private__progressDuration(time) {
+            const startPosition = ensureNotNull(this._private__animationStartPosition);
+            const progress = time - startPosition._internal_time;
+            return Math.min(progress, this._private__durationMsecs);
         }
-        return window.chrome !== undefined;
     }
 
     function preventScrollByWheelClick(el) {
         if (!isChrome()) {
             return;
         }
-        el.addEventListener('mousedown', function (e) {
-            if (e.button === 1 /* Middle */) {
+        el.addEventListener('mousedown', (e) => {
+            if (e.button === 1 /* MouseEventButton.Middle */) {
                 // prevent incorrect scrolling event
                 e.preventDefault();
                 return false;
@@ -8025,9 +7966,8 @@
     }
 
     // TODO: get rid of a lot of boolean flags, probably we should replace it with some enum
-    var MouseEventHandler = /** @class */ (function () {
-        function MouseEventHandler(target, handler, options) {
-            var _this = this;
+    class MouseEventHandler {
+        constructor(target, handler, options) {
             this._private__clickCount = 0;
             this._private__clickTimeoutId = null;
             this._private__clickPosition = { _internal_x: Number.NEGATIVE_INFINITY, _internal_y: Number.POSITIVE_INFINITY };
@@ -8064,8 +8004,8 @@
              * To prevent the mouse from hanging while pressed we're subscribing on the mouseleave event of the document element.
              * We're subscribing on mouseleave, but this event is actually fired on mouseup outside of the browser's border.
              */
-            this._private__onFirefoxOutsideMouseUp = function (mouseUpEvent) {
-                _this._private__mouseUpHandler(mouseUpEvent);
+            this._private__onFirefoxOutsideMouseUp = (mouseUpEvent) => {
+                this._private__mouseUpHandler(mouseUpEvent);
             };
             /**
              * Safari doesn't fire touchstart/mousedown events on double tap since iOS 13.
@@ -8074,27 +8014,27 @@
              * 2) Add listener on dblclick event that fires with the preceding mousedown/mouseup.
              * https://developer.apple.com/forums/thread/125073
              */
-            this._private__onMobileSafariDoubleClick = function (dblClickEvent) {
-                if (_this._private__firesTouchEvents(dblClickEvent)) {
-                    var compatEvent = _this._private__makeCompatEvent(dblClickEvent);
-                    ++_this._private__tapCount;
-                    if (_this._private__tapTimeoutId && _this._private__tapCount > 1) {
-                        var manhattanDistance = _this._private__touchMouseMoveWithDownInfo(getPosition(dblClickEvent), _this._private__tapPosition)._internal_manhattanDistance;
-                        if (manhattanDistance < 30 /* DoubleTapManhattanDistance */ && !_this._private__cancelTap) {
-                            _this._private__processTouchEvent(compatEvent, _this._private__handler._internal_doubleTapEvent);
+            this._private__onMobileSafariDoubleClick = (dblClickEvent) => {
+                if (this._private__firesTouchEvents(dblClickEvent)) {
+                    const compatEvent = this._private__makeCompatEvent(dblClickEvent);
+                    ++this._private__tapCount;
+                    if (this._private__tapTimeoutId && this._private__tapCount > 1) {
+                        const { _internal_manhattanDistance: manhattanDistance } = this._private__touchMouseMoveWithDownInfo(getPosition(dblClickEvent), this._private__tapPosition);
+                        if (manhattanDistance < 30 /* Constants.DoubleTapManhattanDistance */ && !this._private__cancelTap) {
+                            this._private__processTouchEvent(compatEvent, this._private__handler._internal_doubleTapEvent);
                         }
-                        _this._private__resetTapTimeout();
+                        this._private__resetTapTimeout();
                     }
                 }
                 else {
-                    var compatEvent = _this._private__makeCompatEvent(dblClickEvent);
-                    ++_this._private__clickCount;
-                    if (_this._private__clickTimeoutId && _this._private__clickCount > 1) {
-                        var manhattanDistance = _this._private__touchMouseMoveWithDownInfo(getPosition(dblClickEvent), _this._private__clickPosition)._internal_manhattanDistance;
-                        if (manhattanDistance < 5 /* DoubleClickManhattanDistance */ && !_this._private__cancelClick) {
-                            _this._private__processMouseEvent(compatEvent, _this._private__handler._internal_mouseDoubleClickEvent);
+                    const compatEvent = this._private__makeCompatEvent(dblClickEvent);
+                    ++this._private__clickCount;
+                    if (this._private__clickTimeoutId && this._private__clickCount > 1) {
+                        const { _internal_manhattanDistance: manhattanDistance } = this._private__touchMouseMoveWithDownInfo(getPosition(dblClickEvent), this._private__clickPosition);
+                        if (manhattanDistance < 5 /* Constants.DoubleClickManhattanDistance */ && !this._private__cancelClick) {
+                            this._private__processMouseEvent(compatEvent, this._private__handler._internal_mouseDoubleClickEvent);
                         }
-                        _this._private__resetClickTimeout();
+                        this._private__resetClickTimeout();
                     }
                 }
             };
@@ -8103,7 +8043,7 @@
             this._private__options = options;
             this._private__init();
         }
-        MouseEventHandler.prototype._internal_destroy = function () {
+        _internal_destroy() {
             if (this._private__unsubscribeOutsideMouseEvents !== null) {
                 this._private__unsubscribeOutsideMouseEvents();
                 this._private__unsubscribeOutsideMouseEvents = null;
@@ -8130,53 +8070,52 @@
             }
             this._private__clearLongTapTimeout();
             this._private__resetClickTimeout();
-        };
-        MouseEventHandler.prototype._private__mouseEnterHandler = function (enterEvent) {
-            var _this = this;
+        }
+        _private__mouseEnterHandler(enterEvent) {
             if (this._private__unsubscribeMousemove) {
                 this._private__unsubscribeMousemove();
             }
-            var boundMouseMoveHandler = this._private__mouseMoveHandler.bind(this);
-            this._private__unsubscribeMousemove = function () {
-                _this._private__target.removeEventListener('mousemove', boundMouseMoveHandler);
+            const boundMouseMoveHandler = this._private__mouseMoveHandler.bind(this);
+            this._private__unsubscribeMousemove = () => {
+                this._private__target.removeEventListener('mousemove', boundMouseMoveHandler);
             };
             this._private__target.addEventListener('mousemove', boundMouseMoveHandler);
             if (this._private__firesTouchEvents(enterEvent)) {
                 return;
             }
-            var compatEvent = this._private__makeCompatEvent(enterEvent);
+            const compatEvent = this._private__makeCompatEvent(enterEvent);
             this._private__processMouseEvent(compatEvent, this._private__handler._internal_mouseEnterEvent);
             this._private__acceptMouseLeave = true;
-        };
-        MouseEventHandler.prototype._private__resetClickTimeout = function () {
+        }
+        _private__resetClickTimeout() {
             if (this._private__clickTimeoutId !== null) {
                 clearTimeout(this._private__clickTimeoutId);
             }
             this._private__clickCount = 0;
             this._private__clickTimeoutId = null;
             this._private__clickPosition = { _internal_x: Number.NEGATIVE_INFINITY, _internal_y: Number.POSITIVE_INFINITY };
-        };
-        MouseEventHandler.prototype._private__resetTapTimeout = function () {
+        }
+        _private__resetTapTimeout() {
             if (this._private__tapTimeoutId !== null) {
                 clearTimeout(this._private__tapTimeoutId);
             }
             this._private__tapCount = 0;
             this._private__tapTimeoutId = null;
             this._private__tapPosition = { _internal_x: Number.NEGATIVE_INFINITY, _internal_y: Number.POSITIVE_INFINITY };
-        };
-        MouseEventHandler.prototype._private__mouseMoveHandler = function (moveEvent) {
+        }
+        _private__mouseMoveHandler(moveEvent) {
             if (this._private__mousePressed || this._private__touchMoveStartPosition !== null) {
                 return;
             }
             if (this._private__firesTouchEvents(moveEvent)) {
                 return;
             }
-            var compatEvent = this._private__makeCompatEvent(moveEvent);
+            const compatEvent = this._private__makeCompatEvent(moveEvent);
             this._private__processMouseEvent(compatEvent, this._private__handler._internal_mouseMoveEvent);
             this._private__acceptMouseLeave = true;
-        };
-        MouseEventHandler.prototype._private__touchMoveHandler = function (moveEvent) {
-            var touch = touchWithId(moveEvent.changedTouches, ensureNotNull(this._private__activeTouchId));
+        }
+        _private__touchMoveHandler(moveEvent) {
+            const touch = touchWithId(moveEvent.changedTouches, ensureNotNull(this._private__activeTouchId));
             if (touch === null) {
                 return;
             }
@@ -8189,19 +8128,19 @@
             }
             // prevent pinch if move event comes faster than the second touch
             this._private__pinchPrevented = true;
-            var moveInfo = this._private__touchMouseMoveWithDownInfo(getPosition(touch), ensureNotNull(this._private__touchMoveStartPosition));
-            var xOffset = moveInfo._internal_xOffset, yOffset = moveInfo._internal_yOffset, manhattanDistance = moveInfo._internal_manhattanDistance;
-            if (!this._private__touchMoveExceededManhattanDistance && manhattanDistance < 5 /* CancelTapManhattanDistance */) {
+            const moveInfo = this._private__touchMouseMoveWithDownInfo(getPosition(touch), ensureNotNull(this._private__touchMoveStartPosition));
+            const { _internal_xOffset: xOffset, _internal_yOffset: yOffset, _internal_manhattanDistance: manhattanDistance } = moveInfo;
+            if (!this._private__touchMoveExceededManhattanDistance && manhattanDistance < 5 /* Constants.CancelTapManhattanDistance */) {
                 return;
             }
             if (!this._private__touchMoveExceededManhattanDistance) {
                 // first time when current position exceeded manhattan distance
                 // vertical drag is more important than horizontal drag
                 // because we scroll the page vertically often than horizontally
-                var correctedXOffset = xOffset * 0.5;
+                const correctedXOffset = xOffset * 0.5;
                 // a drag can be only if touch page scroll isn't allowed
-                var isVertDrag = yOffset >= correctedXOffset && !this._private__options._internal_treatVertTouchDragAsPageScroll();
-                var isHorzDrag = correctedXOffset > yOffset && !this._private__options._internal_treatHorzTouchDragAsPageScroll();
+                const isVertDrag = yOffset >= correctedXOffset && !this._private__options._internal_treatVertTouchDragAsPageScroll();
+                const isHorzDrag = correctedXOffset > yOffset && !this._private__options._internal_treatHorzTouchDragAsPageScroll();
                 // if drag event happened then we should revert preventDefault state to original one
                 // and try to process the drag event
                 // else we shouldn't prevent default of the event and ignore processing the drag event
@@ -8215,43 +8154,43 @@
                 this._private__resetTapTimeout();
             }
             if (!this._private__preventTouchDragProcess) {
-                var compatEvent = this._private__makeCompatEvent(moveEvent, touch);
+                const compatEvent = this._private__makeCompatEvent(moveEvent, touch);
                 this._private__processTouchEvent(compatEvent, this._private__handler._internal_touchMoveEvent);
                 // we should prevent default in case of touch only
                 // to prevent scroll of the page
                 preventDefault(moveEvent);
             }
-        };
-        MouseEventHandler.prototype._private__mouseMoveWithDownHandler = function (moveEvent) {
-            if (moveEvent.button !== 0 /* Left */) {
+        }
+        _private__mouseMoveWithDownHandler(moveEvent) {
+            if (moveEvent.button !== 0 /* MouseEventButton.Left */) {
                 return;
             }
-            var moveInfo = this._private__touchMouseMoveWithDownInfo(getPosition(moveEvent), ensureNotNull(this._private__mouseMoveStartPosition));
-            var manhattanDistance = moveInfo._internal_manhattanDistance;
-            if (manhattanDistance >= 5 /* CancelClickManhattanDistance */) {
+            const moveInfo = this._private__touchMouseMoveWithDownInfo(getPosition(moveEvent), ensureNotNull(this._private__mouseMoveStartPosition));
+            const { _internal_manhattanDistance: manhattanDistance } = moveInfo;
+            if (manhattanDistance >= 5 /* Constants.CancelClickManhattanDistance */) {
                 // if manhattan distance is more that 5 - we should cancel click event
                 this._private__cancelClick = true;
                 this._private__resetClickTimeout();
             }
             if (this._private__cancelClick) {
                 // if this._cancelClick is true, that means that minimum manhattan distance is already exceeded
-                var compatEvent = this._private__makeCompatEvent(moveEvent);
+                const compatEvent = this._private__makeCompatEvent(moveEvent);
                 this._private__processMouseEvent(compatEvent, this._private__handler._internal_pressedMouseMoveEvent);
             }
-        };
-        MouseEventHandler.prototype._private__touchMouseMoveWithDownInfo = function (currentPosition, startPosition) {
-            var xOffset = Math.abs(startPosition._internal_x - currentPosition._internal_x);
-            var yOffset = Math.abs(startPosition._internal_y - currentPosition._internal_y);
-            var manhattanDistance = xOffset + yOffset;
+        }
+        _private__touchMouseMoveWithDownInfo(currentPosition, startPosition) {
+            const xOffset = Math.abs(startPosition._internal_x - currentPosition._internal_x);
+            const yOffset = Math.abs(startPosition._internal_y - currentPosition._internal_y);
+            const manhattanDistance = xOffset + yOffset;
             return {
                 _internal_xOffset: xOffset,
                 _internal_yOffset: yOffset,
                 _internal_manhattanDistance: manhattanDistance,
             };
-        };
+        }
         // eslint-disable-next-line complexity
-        MouseEventHandler.prototype._private__touchEndHandler = function (touchEndEvent) {
-            var touch = touchWithId(touchEndEvent.changedTouches, ensureNotNull(this._private__activeTouchId));
+        _private__touchEndHandler(touchEndEvent) {
+            let touch = touchWithId(touchEndEvent.changedTouches, ensureNotNull(this._private__activeTouchId));
             if (touch === null && touchEndEvent.touches.length === 0) {
                 // something went wrong, somehow we missed the required touchend event
                 // probably the browser has not sent this event
@@ -8268,13 +8207,13 @@
                 this._private__unsubscribeRootTouchEvents();
                 this._private__unsubscribeRootTouchEvents = null;
             }
-            var compatEvent = this._private__makeCompatEvent(touchEndEvent, touch);
+            const compatEvent = this._private__makeCompatEvent(touchEndEvent, touch);
             this._private__processTouchEvent(compatEvent, this._private__handler._internal_touchEndEvent);
             ++this._private__tapCount;
             if (this._private__tapTimeoutId && this._private__tapCount > 1) {
                 // check that both clicks are near enough
-                var manhattanDistance = this._private__touchMouseMoveWithDownInfo(getPosition(touch), this._private__tapPosition)._internal_manhattanDistance;
-                if (manhattanDistance < 30 /* DoubleTapManhattanDistance */ && !this._private__cancelTap) {
+                const { _internal_manhattanDistance: manhattanDistance } = this._private__touchMouseMoveWithDownInfo(getPosition(touch), this._private__tapPosition);
+                if (manhattanDistance < 30 /* Constants.DoubleTapManhattanDistance */ && !this._private__cancelTap) {
                     this._private__processTouchEvent(compatEvent, this._private__handler._internal_doubleTapEvent);
                 }
                 this._private__resetTapTimeout();
@@ -8301,12 +8240,12 @@
                     preventDefault(touchEndEvent);
                 }
             }
-        };
-        MouseEventHandler.prototype._private__mouseUpHandler = function (mouseUpEvent) {
-            if (mouseUpEvent.button !== 0 /* Left */) {
+        }
+        _private__mouseUpHandler(mouseUpEvent) {
+            if (mouseUpEvent.button !== 0 /* MouseEventButton.Left */) {
                 return;
             }
-            var compatEvent = this._private__makeCompatEvent(mouseUpEvent);
+            const compatEvent = this._private__makeCompatEvent(mouseUpEvent);
             this._private__mouseMoveStartPosition = null;
             this._private__mousePressed = false;
             if (this._private__unsubscribeRootMouseEvents) {
@@ -8314,7 +8253,7 @@
                 this._private__unsubscribeRootMouseEvents = null;
             }
             if (isFF()) {
-                var rootElement = this._private__target.ownerDocument.documentElement;
+                const rootElement = this._private__target.ownerDocument.documentElement;
                 rootElement.removeEventListener('mouseleave', this._private__onFirefoxOutsideMouseUp);
             }
             if (this._private__firesTouchEvents(mouseUpEvent)) {
@@ -8324,8 +8263,8 @@
             ++this._private__clickCount;
             if (this._private__clickTimeoutId && this._private__clickCount > 1) {
                 // check that both clicks are near enough
-                var manhattanDistance = this._private__touchMouseMoveWithDownInfo(getPosition(mouseUpEvent), this._private__clickPosition)._internal_manhattanDistance;
-                if (manhattanDistance < 5 /* DoubleClickManhattanDistance */ && !this._private__cancelClick) {
+                const { _internal_manhattanDistance: manhattanDistance } = this._private__touchMouseMoveWithDownInfo(getPosition(mouseUpEvent), this._private__clickPosition);
+                if (manhattanDistance < 5 /* Constants.DoubleClickManhattanDistance */ && !this._private__cancelClick) {
                     this._private__processMouseEvent(compatEvent, this._private__handler._internal_mouseDoubleClickEvent);
                 }
                 this._private__resetClickTimeout();
@@ -8335,22 +8274,22 @@
                     this._private__processMouseEvent(compatEvent, this._private__handler._internal_mouseClickEvent);
                 }
             }
-        };
-        MouseEventHandler.prototype._private__clearLongTapTimeout = function () {
+        }
+        _private__clearLongTapTimeout() {
             if (this._private__longTapTimeoutId === null) {
                 return;
             }
             clearTimeout(this._private__longTapTimeoutId);
             this._private__longTapTimeoutId = null;
-        };
-        MouseEventHandler.prototype._private__touchStartHandler = function (downEvent) {
+        }
+        _private__touchStartHandler(downEvent) {
             if (this._private__activeTouchId !== null) {
                 return;
             }
-            var touch = downEvent.changedTouches[0];
+            const touch = downEvent.changedTouches[0];
             this._private__activeTouchId = touch.identifier;
             this._private__lastTouchEventTimeStamp = eventTimeStamp(downEvent);
-            var rootElement = this._private__target.ownerDocument.documentElement;
+            const rootElement = this._private__target.ownerDocument.documentElement;
             this._private__cancelTap = false;
             this._private__touchMoveExceededManhattanDistance = false;
             this._private__preventTouchDragProcess = false;
@@ -8360,30 +8299,30 @@
                 this._private__unsubscribeRootTouchEvents = null;
             }
             {
-                var boundTouchMoveWithDownHandler_1 = this._private__touchMoveHandler.bind(this);
-                var boundTouchEndHandler_1 = this._private__touchEndHandler.bind(this);
-                this._private__unsubscribeRootTouchEvents = function () {
-                    rootElement.removeEventListener('touchmove', boundTouchMoveWithDownHandler_1);
-                    rootElement.removeEventListener('touchend', boundTouchEndHandler_1);
+                const boundTouchMoveWithDownHandler = this._private__touchMoveHandler.bind(this);
+                const boundTouchEndHandler = this._private__touchEndHandler.bind(this);
+                this._private__unsubscribeRootTouchEvents = () => {
+                    rootElement.removeEventListener('touchmove', boundTouchMoveWithDownHandler);
+                    rootElement.removeEventListener('touchend', boundTouchEndHandler);
                 };
-                rootElement.addEventListener('touchmove', boundTouchMoveWithDownHandler_1, { passive: false });
-                rootElement.addEventListener('touchend', boundTouchEndHandler_1, { passive: false });
+                rootElement.addEventListener('touchmove', boundTouchMoveWithDownHandler, { passive: false });
+                rootElement.addEventListener('touchend', boundTouchEndHandler, { passive: false });
                 this._private__clearLongTapTimeout();
-                this._private__longTapTimeoutId = setTimeout(this._private__longTapHandler.bind(this, downEvent), 240 /* LongTap */);
+                this._private__longTapTimeoutId = setTimeout(this._private__longTapHandler.bind(this, downEvent), 240 /* Delay.LongTap */);
             }
-            var compatEvent = this._private__makeCompatEvent(downEvent, touch);
+            const compatEvent = this._private__makeCompatEvent(downEvent, touch);
             this._private__processTouchEvent(compatEvent, this._private__handler._internal_touchStartEvent);
             if (!this._private__tapTimeoutId) {
                 this._private__tapCount = 0;
-                this._private__tapTimeoutId = setTimeout(this._private__resetTapTimeout.bind(this), 500 /* ResetClick */);
+                this._private__tapTimeoutId = setTimeout(this._private__resetTapTimeout.bind(this), 500 /* Delay.ResetClick */);
                 this._private__tapPosition = getPosition(touch);
             }
-        };
-        MouseEventHandler.prototype._private__mouseDownHandler = function (downEvent) {
-            if (downEvent.button !== 0 /* Left */) {
+        }
+        _private__mouseDownHandler(downEvent) {
+            if (downEvent.button !== 0 /* MouseEventButton.Left */) {
                 return;
             }
-            var rootElement = this._private__target.ownerDocument.documentElement;
+            const rootElement = this._private__target.ownerDocument.documentElement;
             if (isFF()) {
                 rootElement.addEventListener('mouseleave', this._private__onFirefoxOutsideMouseUp);
             }
@@ -8394,55 +8333,57 @@
                 this._private__unsubscribeRootMouseEvents = null;
             }
             {
-                var boundMouseMoveWithDownHandler_1 = this._private__mouseMoveWithDownHandler.bind(this);
-                var boundMouseUpHandler_1 = this._private__mouseUpHandler.bind(this);
-                this._private__unsubscribeRootMouseEvents = function () {
-                    rootElement.removeEventListener('mousemove', boundMouseMoveWithDownHandler_1);
-                    rootElement.removeEventListener('mouseup', boundMouseUpHandler_1);
+                const boundMouseMoveWithDownHandler = this._private__mouseMoveWithDownHandler.bind(this);
+                const boundMouseUpHandler = this._private__mouseUpHandler.bind(this);
+                this._private__unsubscribeRootMouseEvents = () => {
+                    rootElement.removeEventListener('mousemove', boundMouseMoveWithDownHandler);
+                    rootElement.removeEventListener('mouseup', boundMouseUpHandler);
                 };
-                rootElement.addEventListener('mousemove', boundMouseMoveWithDownHandler_1);
-                rootElement.addEventListener('mouseup', boundMouseUpHandler_1);
+                rootElement.addEventListener('mousemove', boundMouseMoveWithDownHandler);
+                rootElement.addEventListener('mouseup', boundMouseUpHandler);
             }
             this._private__mousePressed = true;
             if (this._private__firesTouchEvents(downEvent)) {
                 return;
             }
-            var compatEvent = this._private__makeCompatEvent(downEvent);
+            const compatEvent = this._private__makeCompatEvent(downEvent);
             this._private__processMouseEvent(compatEvent, this._private__handler._internal_mouseDownEvent);
             if (!this._private__clickTimeoutId) {
                 this._private__clickCount = 0;
-                this._private__clickTimeoutId = setTimeout(this._private__resetClickTimeout.bind(this), 500 /* ResetClick */);
+                this._private__clickTimeoutId = setTimeout(this._private__resetClickTimeout.bind(this), 500 /* Delay.ResetClick */);
                 this._private__clickPosition = getPosition(downEvent);
             }
-        };
-        MouseEventHandler.prototype._private__init = function () {
-            var _this = this;
+        }
+        _private__init() {
             this._private__target.addEventListener('mouseenter', this._private__mouseEnterHandler.bind(this));
             // Do not show context menu when something went wrong
             this._private__target.addEventListener('touchcancel', this._private__clearLongTapTimeout.bind(this));
             {
-                var doc_1 = this._private__target.ownerDocument;
-                var outsideHandler_1 = function (event) {
-                    if (!_this._private__handler._internal_mouseDownOutsideEvent) {
+                const doc = this._private__target.ownerDocument;
+                const outsideHandler = (event) => {
+                    if (!this._private__handler._internal_mouseDownOutsideEvent) {
+                        return;
+                    }
+                    if (event.composed && this._private__target.contains(event.composedPath()[0])) {
                         return;
                     }
-                    if (event.target && _this._private__target.contains(event.target)) {
+                    if (event.target && this._private__target.contains(event.target)) {
                         return;
                     }
-                    _this._private__handler._internal_mouseDownOutsideEvent();
+                    this._private__handler._internal_mouseDownOutsideEvent();
                 };
-                this._private__unsubscribeOutsideTouchEvents = function () {
-                    doc_1.removeEventListener('touchstart', outsideHandler_1);
+                this._private__unsubscribeOutsideTouchEvents = () => {
+                    doc.removeEventListener('touchstart', outsideHandler);
                 };
-                this._private__unsubscribeOutsideMouseEvents = function () {
-                    doc_1.removeEventListener('mousedown', outsideHandler_1);
+                this._private__unsubscribeOutsideMouseEvents = () => {
+                    doc.removeEventListener('mousedown', outsideHandler);
                 };
-                doc_1.addEventListener('mousedown', outsideHandler_1);
-                doc_1.addEventListener('touchstart', outsideHandler_1, { passive: true });
+                doc.addEventListener('mousedown', outsideHandler);
+                doc.addEventListener('touchstart', outsideHandler, { passive: true });
             }
             if (isIOS()) {
-                this._private__unsubscribeMobileSafariEvents = function () {
-                    _this._private__target.removeEventListener('dblclick', _this._private__onMobileSafariDoubleClick);
+                this._private__unsubscribeMobileSafariEvents = () => {
+                    this._private__target.removeEventListener('dblclick', this._private__onMobileSafariDoubleClick);
                 };
                 this._private__target.addEventListener('dblclick', this._private__onMobileSafariDoubleClick);
             }
@@ -8456,32 +8397,31 @@
             // it treats a touchstart and the following touchmove events as cancelable=false,
             // so we can't prevent them (as soon we subscribe on touchmove inside touchstart's handler).
             // And we'll get scroll of the page along with chart's one instead of only chart's scroll.
-            this._private__target.addEventListener('touchmove', function () { }, { passive: false });
-        };
-        MouseEventHandler.prototype._private__initPinch = function () {
-            var _this = this;
+            this._private__target.addEventListener('touchmove', () => { }, { passive: false });
+        }
+        _private__initPinch() {
             if (this._private__handler._internal_pinchStartEvent === undefined &&
                 this._private__handler._internal_pinchEvent === undefined &&
                 this._private__handler._internal_pinchEndEvent === undefined) {
                 return;
             }
-            this._private__target.addEventListener('touchstart', function (event) { return _this._private__checkPinchState(event.touches); }, { passive: true });
-            this._private__target.addEventListener('touchmove', function (event) {
-                if (event.touches.length !== 2 || _this._private__startPinchMiddlePoint === null) {
+            this._private__target.addEventListener('touchstart', (event) => this._private__checkPinchState(event.touches), { passive: true });
+            this._private__target.addEventListener('touchmove', (event) => {
+                if (event.touches.length !== 2 || this._private__startPinchMiddlePoint === null) {
                     return;
                 }
-                if (_this._private__handler._internal_pinchEvent !== undefined) {
-                    var currentDistance = getDistance(event.touches[0], event.touches[1]);
-                    var scale = currentDistance / _this._private__startPinchDistance;
-                    _this._private__handler._internal_pinchEvent(_this._private__startPinchMiddlePoint, scale);
+                if (this._private__handler._internal_pinchEvent !== undefined) {
+                    const currentDistance = getDistance(event.touches[0], event.touches[1]);
+                    const scale = currentDistance / this._private__startPinchDistance;
+                    this._private__handler._internal_pinchEvent(this._private__startPinchMiddlePoint, scale);
                     preventDefault(event);
                 }
             }, { passive: false });
-            this._private__target.addEventListener('touchend', function (event) {
-                _this._private__checkPinchState(event.touches);
+            this._private__target.addEventListener('touchend', (event) => {
+                this._private__checkPinchState(event.touches);
             });
-        };
-        MouseEventHandler.prototype._private__checkPinchState = function (touches) {
+        }
+        _private__checkPinchState(touches) {
             if (touches.length === 1) {
                 this._private__pinchPrevented = false;
             }
@@ -8491,9 +8431,9 @@
             else {
                 this._private__startPinch(touches);
             }
-        };
-        MouseEventHandler.prototype._private__startPinch = function (touches) {
-            var box = getBoundingClientRect(this._private__target);
+        }
+        _private__startPinch(touches) {
+            const box = getBoundingClientRect(this._private__target);
             this._private__startPinchMiddlePoint = {
                 _internal_x: ((touches[0].clientX - box.left) + (touches[1].clientX - box.left)) / 2,
                 _internal_y: ((touches[0].clientY - box.top) + (touches[1].clientY - box.top)) / 2,
@@ -8503,8 +8443,8 @@
                 this._private__handler._internal_pinchStartEvent();
             }
             this._private__clearLongTapTimeout();
-        };
-        MouseEventHandler.prototype._private__stopPinch = function () {
+        }
+        _private__stopPinch() {
             if (this._private__startPinchMiddlePoint === null) {
                 return;
             }
@@ -8512,8 +8452,8 @@
             if (this._private__handler._internal_pinchEndEvent !== undefined) {
                 this._private__handler._internal_pinchEndEvent();
             }
-        };
-        MouseEventHandler.prototype._private__mouseLeaveHandler = function (event) {
+        }
+        _private__mouseLeaveHandler(event) {
             if (this._private__unsubscribeMousemove) {
                 this._private__unsubscribeMousemove();
             }
@@ -8525,44 +8465,44 @@
                 // just ignore this event if there was no mouse move or mouse enter events
                 return;
             }
-            var compatEvent = this._private__makeCompatEvent(event);
+            const compatEvent = this._private__makeCompatEvent(event);
             this._private__processMouseEvent(compatEvent, this._private__handler._internal_mouseLeaveEvent);
             // accept all mouse leave events if it's not an iOS device
             this._private__acceptMouseLeave = !isIOS();
-        };
-        MouseEventHandler.prototype._private__longTapHandler = function (event) {
-            var touch = touchWithId(event.touches, ensureNotNull(this._private__activeTouchId));
+        }
+        _private__longTapHandler(event) {
+            const touch = touchWithId(event.touches, ensureNotNull(this._private__activeTouchId));
             if (touch === null) {
                 return;
             }
-            var compatEvent = this._private__makeCompatEvent(event, touch);
+            const compatEvent = this._private__makeCompatEvent(event, touch);
             this._private__processTouchEvent(compatEvent, this._private__handler._internal_longTapEvent);
             this._private__cancelTap = true;
             // long tap is active until touchend event with 0 touches occurred
             this._private__longTapActive = true;
-        };
-        MouseEventHandler.prototype._private__firesTouchEvents = function (e) {
+        }
+        _private__firesTouchEvents(e) {
             if (e.sourceCapabilities && e.sourceCapabilities.firesTouchEvents !== undefined) {
                 return e.sourceCapabilities.firesTouchEvents;
             }
-            return eventTimeStamp(e) < this._private__lastTouchEventTimeStamp + 500 /* PreventFiresTouchEvents */;
-        };
-        MouseEventHandler.prototype._private__processTouchEvent = function (event, callback) {
+            return eventTimeStamp(e) < this._private__lastTouchEventTimeStamp + 500 /* Delay.PreventFiresTouchEvents */;
+        }
+        _private__processTouchEvent(event, callback) {
             if (callback) {
                 callback.call(this._private__handler, event);
             }
-        };
-        MouseEventHandler.prototype._private__processMouseEvent = function (event, callback) {
+        }
+        _private__processMouseEvent(event, callback) {
             if (!callback) {
                 return;
             }
             callback.call(this._private__handler, event);
-        };
-        MouseEventHandler.prototype._private__makeCompatEvent = function (event, touch) {
+        }
+        _private__makeCompatEvent(event, touch) {
             // TouchEvent has no clientX/Y coordinates:
             // We have to use the last Touch instead
-            var eventLike = touch || event;
-            var box = this._private__target.getBoundingClientRect() || { left: 0, top: 0 };
+            const eventLike = touch || event;
+            const box = this._private__target.getBoundingClientRect() || { left: 0, top: 0 };
             return {
                 _internal_clientX: eventLike.clientX,
                 _internal_clientY: eventLike.clientY,
@@ -8580,22 +8520,21 @@
                 _internal_srcType: event.type,
                 _internal_target: eventLike.target,
                 _internal_view: event.view,
-                _internal_preventDefault: function () {
+                _internal_preventDefault: () => {
                     if (event.type !== 'touchstart') {
                         // touchstart is passive and cannot be prevented
                         preventDefault(event);
                     }
                 },
             };
-        };
-        return MouseEventHandler;
-    }());
+        }
+    }
     function getBoundingClientRect(element) {
         return element.getBoundingClientRect() || { left: 0, top: 0 };
     }
     function getDistance(p1, p2) {
-        var xDiff = p1.clientX - p2.clientX;
-        var yDiff = p1.clientY - p2.clientY;
+        const xDiff = p1.clientX - p2.clientX;
+        const yDiff = p1.clientY - p2.clientY;
         return Math.sqrt(xDiff * xDiff + yDiff * yDiff);
     }
     function preventDefault(event) {
@@ -8614,7 +8553,7 @@
         return e.timeStamp || performance.now();
     }
     function touchWithId(touches, id) {
-        for (var i = 0; i < touches.length; ++i) {
+        for (let i = 0; i < touches.length; ++i) {
             if (touches[i].identifier === id) {
                 return touches[i];
             }
@@ -8622,102 +8561,29 @@
         return null;
     }
 
-    var MAX_COUNT = 200;
-    var LabelsImageCache = /** @class */ (function () {
-        function LabelsImageCache(fontSize, color, fontFamily, fontStyle) {
-            this._private__textWidthCache = new TextWidthCache(MAX_COUNT);
-            this._private__fontSize = 0;
-            this._private__color = '';
-            this._private__font = '';
-            this._private__keys = [];
-            this._private__hash = new Map();
-            this._private__fontSize = fontSize;
-            this._private__color = color;
-            this._private__font = makeFont(fontSize, fontFamily, fontStyle);
-        }
-        LabelsImageCache.prototype._internal_destroy = function () {
-            this._private__textWidthCache._internal_reset();
-            this._private__keys = [];
-            this._private__hash.clear();
-        };
-        LabelsImageCache.prototype._internal_paintTo = function (ctx, text, x, y, align) {
-            var label = this._private__getLabelImage(ctx, text);
-            if (align !== 'left') {
-                var pixelRatio = getCanvasDevicePixelRatio(ctx.canvas);
-                x -= Math.floor(label._internal_textWidth * pixelRatio);
-            }
-            y -= Math.floor(label._internal_height / 2);
-            ctx.drawImage(label._internal_canvas, x, y, label._internal_width, label._internal_height);
-        };
-        LabelsImageCache.prototype._private__getLabelImage = function (ctx, text) {
-            var _this = this;
-            var item;
-            if (this._private__hash.has(text)) {
-                // Cache hit!
-                item = ensureDefined(this._private__hash.get(text));
-            }
-            else {
-                if (this._private__keys.length >= MAX_COUNT) {
-                    var key = ensureDefined(this._private__keys.shift());
-                    this._private__hash.delete(key);
-                }
-                var pixelRatio = getCanvasDevicePixelRatio(ctx.canvas);
-                var margin_1 = Math.ceil(this._private__fontSize / 4.5);
-                var baselineOffset_1 = Math.round(this._private__fontSize / 10);
-                var textWidth = Math.ceil(this._private__textWidthCache._internal_measureText(ctx, text));
-                var width = ceiledEven(Math.round(textWidth + margin_1 * 2));
-                var height_1 = ceiledEven(this._private__fontSize + margin_1 * 2);
-                var canvas = createPreconfiguredCanvas(document, new Size(width, height_1));
-                // Allocate new
-                item = {
-                    _internal_text: text,
-                    _internal_textWidth: Math.round(Math.max(1, textWidth)),
-                    _internal_width: Math.ceil(width * pixelRatio),
-                    _internal_height: Math.ceil(height_1 * pixelRatio),
-                    _internal_canvas: canvas,
-                };
-                if (textWidth !== 0) {
-                    this._private__keys.push(item._internal_text);
-                    this._private__hash.set(item._internal_text, item);
-                }
-                ctx = getContext2D(item._internal_canvas);
-                drawScaled(ctx, pixelRatio, function () {
-                    ctx.font = _this._private__font;
-                    ctx.fillStyle = _this._private__color;
-                    ctx.fillText(text, 0, height_1 - margin_1 - baselineOffset_1);
-                });
-            }
-            return item;
-        };
-        return LabelsImageCache;
-    }());
-
-    var PriceAxisWidget = /** @class */ (function () {
-        function PriceAxisWidget(pane, options, rendererOptionsProvider, side) {
-            var _this = this;
+    class PriceAxisWidget {
+        constructor(pane, options, rendererOptionsProvider, side) {
             this._private__priceScale = null;
             this._private__size = null;
             this._private__mousedown = false;
-            this._private__widthCache = new TextWidthCache(50);
-            this._private__tickMarksCache = new LabelsImageCache(11, '#000');
-            this._private__color = null;
+            this._private__widthCache = new TextWidthCache(200);
             this._private__font = null;
             this._private__prevOptimalWidth = 0;
             this._private__isSettingSize = false;
-            this._private__canvasConfiguredHandler = function () {
-                _this._private__recreateTickMarksCache(_this._private__rendererOptionsProvider._internal_options());
-                if (!_this._private__isSettingSize) {
-                    _this._private__pane._internal_chart()._internal_model()._internal_lightUpdate();
+            this._private__canvasConfiguredHandler = () => {
+                if (!this._private__isSettingSize) {
+                    this._private__pane._internal_chart()._internal_model()._internal_lightUpdate();
                 }
             };
-            this._private__topCanvasConfiguredHandler = function () {
-                if (_this._private__isSettingSize) {
+            this._private__topCanvasConfiguredHandler = () => {
+                if (this._private__isSettingSize) {
                     return;
                 }
-                _this._private__pane._internal_chart()._internal_model()._internal_lightUpdate();
+                this._private__pane._internal_chart()._internal_model()._internal_lightUpdate();
             };
             this._private__pane = pane;
             this._private__options = options;
+            this._private__layoutOptions = options.layout;
             this._private__rendererOptionsProvider = rendererOptionsProvider;
             this._private__isLeft = side === 'left';
             this._private__cell = document.createElement('div');
@@ -8728,19 +8594,19 @@
             this._private__cell.style.position = 'relative';
             this._private__canvasBinding = createBoundCanvas(this._private__cell, new Size(16, 16));
             this._private__canvasBinding.subscribeCanvasConfigured(this._private__canvasConfiguredHandler);
-            var canvas = this._private__canvasBinding.canvas;
+            const canvas = this._private__canvasBinding.canvas;
             canvas.style.position = 'absolute';
             canvas.style.zIndex = '1';
             canvas.style.left = '0';
             canvas.style.top = '0';
             this._private__topCanvasBinding = createBoundCanvas(this._private__cell, new Size(16, 16));
             this._private__topCanvasBinding.subscribeCanvasConfigured(this._private__topCanvasConfiguredHandler);
-            var topCanvas = this._private__topCanvasBinding.canvas;
+            const topCanvas = this._private__topCanvasBinding.canvas;
             topCanvas.style.position = 'absolute';
             topCanvas.style.zIndex = '2';
             topCanvas.style.left = '0';
             topCanvas.style.top = '0';
-            var handler = {
+            const handler = {
                 _internal_mouseDownEvent: this._private__mouseDownEvent.bind(this),
                 _internal_touchStartEvent: this._private__mouseDownEvent.bind(this),
                 _internal_pressedMouseMoveEvent: this._private__pressedMouseMoveEvent.bind(this),
@@ -8754,11 +8620,11 @@
                 _internal_mouseLeaveEvent: this._private__mouseLeaveEvent.bind(this),
             };
             this._private__mouseEventHandler = new MouseEventHandler(this._private__topCanvasBinding.canvas, handler, {
-                _internal_treatVertTouchDragAsPageScroll: function () { return false; },
-                _internal_treatHorzTouchDragAsPageScroll: function () { return true; },
+                _internal_treatVertTouchDragAsPageScroll: () => false,
+                _internal_treatHorzTouchDragAsPageScroll: () => true,
             });
         }
-        PriceAxisWidget.prototype._internal_destroy = function () {
+        _internal_destroy() {
             this._private__mouseEventHandler._internal_destroy();
             this._private__topCanvasBinding.unsubscribeCanvasConfigured(this._private__topCanvasConfiguredHandler);
             this._private__topCanvasBinding.destroy();
@@ -8768,73 +8634,59 @@
                 this._private__priceScale._internal_onMarksChanged()._internal_unsubscribeAll(this);
             }
             this._private__priceScale = null;
-            this._private__tickMarksCache._internal_destroy();
-        };
-        PriceAxisWidget.prototype._internal_getElement = function () {
+        }
+        _internal_getElement() {
             return this._private__cell;
-        };
-        PriceAxisWidget.prototype._internal_lineColor = function () {
-            return ensureNotNull(this._private__priceScale)._internal_options().borderColor;
-        };
-        PriceAxisWidget.prototype._internal_textColor = function () {
-            return this._private__options.textColor;
-        };
-        PriceAxisWidget.prototype._internal_fontSize = function () {
-            return this._private__options.fontSize;
-        };
-        PriceAxisWidget.prototype._internal_baseFont = function () {
-            return makeFont(this._internal_fontSize(), this._private__options.fontFamily);
-        };
-        PriceAxisWidget.prototype._internal_rendererOptions = function () {
-            var options = this._private__rendererOptionsProvider._internal_options();
-            var isColorChanged = this._private__color !== options._internal_color;
-            var isFontChanged = this._private__font !== options._internal_font;
-            if (isColorChanged || isFontChanged) {
-                this._private__recreateTickMarksCache(options);
-                this._private__color = options._internal_color;
-            }
+        }
+        _internal_fontSize() {
+            return this._private__layoutOptions.fontSize;
+        }
+        _internal_rendererOptions() {
+            const options = this._private__rendererOptionsProvider._internal_options();
+            const isFontChanged = this._private__font !== options._internal_font;
             if (isFontChanged) {
                 this._private__widthCache._internal_reset();
                 this._private__font = options._internal_font;
             }
             return options;
-        };
-        PriceAxisWidget.prototype._internal_optimalWidth = function () {
+        }
+        _internal_optimalWidth() {
             if (this._private__priceScale === null) {
                 return 0;
             }
-            var tickMarkMaxWidth = 0;
-            var rendererOptions = this._internal_rendererOptions();
-            var ctx = getContext2D(this._private__canvasBinding.canvas);
-            var tickMarks = this._private__priceScale._internal_marks();
-            ctx.font = this._internal_baseFont();
+            let tickMarkMaxWidth = 0;
+            const rendererOptions = this._internal_rendererOptions();
+            const ctx = getContext2D(this._private__canvasBinding.canvas);
+            const tickMarks = this._private__priceScale._internal_marks();
+            ctx.font = this._private__baseFont();
             if (tickMarks.length > 0) {
                 tickMarkMaxWidth = Math.max(this._private__widthCache._internal_measureText(ctx, tickMarks[0]._internal_label), this._private__widthCache._internal_measureText(ctx, tickMarks[tickMarks.length - 1]._internal_label));
             }
-            var views = this._private__backLabels();
-            for (var j = views.length; j--;) {
-                var width = this._private__widthCache._internal_measureText(ctx, views[j]._internal_text());
+            const views = this._private__backLabels();
+            for (let j = views.length; j--;) {
+                const width = this._private__widthCache._internal_measureText(ctx, views[j]._internal_text());
                 if (width > tickMarkMaxWidth) {
                     tickMarkMaxWidth = width;
                 }
             }
-            var firstValue = this._private__priceScale._internal_firstValue();
+            const firstValue = this._private__priceScale._internal_firstValue();
             if (firstValue !== null && this._private__size !== null) {
-                var topValue = this._private__priceScale._internal_coordinateToPrice(1, firstValue);
-                var bottomValue = this._private__priceScale._internal_coordinateToPrice(this._private__size._internal_h - 2, firstValue);
+                const topValue = this._private__priceScale._internal_coordinateToPrice(1, firstValue);
+                const bottomValue = this._private__priceScale._internal_coordinateToPrice(this._private__size._internal_h - 2, firstValue);
                 tickMarkMaxWidth = Math.max(tickMarkMaxWidth, this._private__widthCache._internal_measureText(ctx, this._private__priceScale._internal_formatPrice(Math.floor(Math.min(topValue, bottomValue)) + 0.11111111111111, firstValue)), this._private__widthCache._internal_measureText(ctx, this._private__priceScale._internal_formatPrice(Math.ceil(Math.max(topValue, bottomValue)) - 0.11111111111111, firstValue)));
             }
-            var resultTickMarksMaxWidth = tickMarkMaxWidth || 34 /* DefaultOptimalWidth */;
-            var res = Math.ceil(rendererOptions._internal_borderSize +
+            const resultTickMarksMaxWidth = tickMarkMaxWidth || 34 /* Constants.DefaultOptimalWidth */;
+            let res = Math.ceil(rendererOptions._internal_borderSize +
                 rendererOptions._internal_tickLength +
                 rendererOptions._internal_paddingInner +
                 rendererOptions._internal_paddingOuter +
+                5 /* Constants.LabelOffset */ +
                 resultTickMarksMaxWidth);
-            // make it even
+            // make it even, remove this after migration to perfect fancy canvas
             res += res % 2;
             return res;
-        };
-        PriceAxisWidget.prototype._internal_setSize = function (size) {
+        }
+        _internal_setSize(size) {
             if (size._internal_w < 0 || size._internal_h < 0) {
                 throw new Error('Try to set invalid size to PriceAxisWidget ' + JSON.stringify(size));
             }
@@ -8849,11 +8701,11 @@
                 this._private__cell.style.height = size._internal_h + 'px';
                 this._private__cell.style.minWidth = size._internal_w + 'px'; // for right calculate position of .pane-legend
             }
-        };
-        PriceAxisWidget.prototype._internal_getWidth = function () {
+        }
+        _internal_getWidth() {
             return ensureNotNull(this._private__size)._internal_w;
-        };
-        PriceAxisWidget.prototype._internal_setPriceScale = function (priceScale) {
+        }
+        _internal_setPriceScale(priceScale) {
             if (this._private__priceScale === priceScale) {
                 return;
             }
@@ -8862,108 +8714,107 @@
             }
             this._private__priceScale = priceScale;
             priceScale._internal_onMarksChanged()._internal_subscribe(this._private__onMarksChanged.bind(this), this);
-        };
-        PriceAxisWidget.prototype._internal_priceScale = function () {
+        }
+        _internal_priceScale() {
             return this._private__priceScale;
-        };
-        PriceAxisWidget.prototype._internal_reset = function () {
-            var pane = this._private__pane._internal_state();
-            var model = this._private__pane._internal_chart()._internal_model();
+        }
+        _internal_reset() {
+            const pane = this._private__pane._internal_state();
+            const model = this._private__pane._internal_chart()._internal_model();
             model._internal_resetPriceScale(pane, ensureNotNull(this._internal_priceScale()));
-        };
-        PriceAxisWidget.prototype._internal_paint = function (type) {
+        }
+        _internal_paint(type) {
             if (this._private__size === null) {
                 return;
             }
-            if (type !== 1 /* Cursor */) {
-                var ctx = getContext2D(this._private__canvasBinding.canvas);
+            if (type !== 1 /* InvalidationLevel.Cursor */) {
+                const ctx = getContext2D(this._private__canvasBinding.canvas);
                 this._private__alignLabels();
                 this._private__drawBackground(ctx, this._private__canvasBinding.pixelRatio);
                 this._private__drawBorder(ctx, this._private__canvasBinding.pixelRatio);
                 this._private__drawTickMarks(ctx, this._private__canvasBinding.pixelRatio);
                 this._private__drawBackLabels(ctx, this._private__canvasBinding.pixelRatio);
             }
-            var topCtx = getContext2D(this._private__topCanvasBinding.canvas);
-            var width = this._private__size._internal_w;
-            var height = this._private__size._internal_h;
-            drawScaled(topCtx, this._private__topCanvasBinding.pixelRatio, function () {
+            const topCtx = getContext2D(this._private__topCanvasBinding.canvas);
+            const width = this._private__size._internal_w;
+            const height = this._private__size._internal_h;
+            drawScaled(topCtx, this._private__topCanvasBinding.pixelRatio, () => {
                 topCtx.clearRect(0, 0, width, height);
             });
             this._private__drawCrosshairLabel(topCtx, this._private__topCanvasBinding.pixelRatio);
-        };
-        PriceAxisWidget.prototype._internal_getImage = function () {
+        }
+        _internal_getImage() {
             return this._private__canvasBinding.canvas;
-        };
-        PriceAxisWidget.prototype._internal_update = function () {
+        }
+        _internal_update() {
             var _a;
             // this call has side-effect - it regenerates marks on the price scale
             (_a = this._private__priceScale) === null || _a === void 0 ? void 0 : _a._internal_marks();
-        };
-        PriceAxisWidget.prototype._private__mouseDownEvent = function (e) {
-            if (this._private__priceScale === null || this._private__priceScale._internal_isEmpty() || !this._private__pane._internal_chart()._internal_options().handleScale.axisPressedMouseMove.price) {
+        }
+        _private__mouseDownEvent(e) {
+            if (this._private__priceScale === null || this._private__priceScale._internal_isEmpty() || !this._private__options.handleScale.axisPressedMouseMove.price) {
                 return;
             }
-            var model = this._private__pane._internal_chart()._internal_model();
-            var pane = this._private__pane._internal_state();
+            const model = this._private__pane._internal_chart()._internal_model();
+            const pane = this._private__pane._internal_state();
             this._private__mousedown = true;
             model._internal_startScalePrice(pane, this._private__priceScale, e._internal_localY);
-        };
-        PriceAxisWidget.prototype._private__pressedMouseMoveEvent = function (e) {
-            if (this._private__priceScale === null || !this._private__pane._internal_chart()._internal_options().handleScale.axisPressedMouseMove.price) {
+        }
+        _private__pressedMouseMoveEvent(e) {
+            if (this._private__priceScale === null || !this._private__options.handleScale.axisPressedMouseMove.price) {
                 return;
             }
-            var model = this._private__pane._internal_chart()._internal_model();
-            var pane = this._private__pane._internal_state();
-            var priceScale = this._private__priceScale;
+            const model = this._private__pane._internal_chart()._internal_model();
+            const pane = this._private__pane._internal_state();
+            const priceScale = this._private__priceScale;
             model._internal_scalePriceTo(pane, priceScale, e._internal_localY);
-        };
-        PriceAxisWidget.prototype._private__mouseDownOutsideEvent = function () {
-            if (this._private__priceScale === null || !this._private__pane._internal_chart()._internal_options().handleScale.axisPressedMouseMove.price) {
+        }
+        _private__mouseDownOutsideEvent() {
+            if (this._private__priceScale === null || !this._private__options.handleScale.axisPressedMouseMove.price) {
                 return;
             }
-            var model = this._private__pane._internal_chart()._internal_model();
-            var pane = this._private__pane._internal_state();
-            var priceScale = this._private__priceScale;
+            const model = this._private__pane._internal_chart()._internal_model();
+            const pane = this._private__pane._internal_state();
+            const priceScale = this._private__priceScale;
             if (this._private__mousedown) {
                 this._private__mousedown = false;
                 model._internal_endScalePrice(pane, priceScale);
             }
-        };
-        PriceAxisWidget.prototype._private__mouseUpEvent = function (e) {
-            if (this._private__priceScale === null || !this._private__pane._internal_chart()._internal_options().handleScale.axisPressedMouseMove.price) {
+        }
+        _private__mouseUpEvent(e) {
+            if (this._private__priceScale === null || !this._private__options.handleScale.axisPressedMouseMove.price) {
                 return;
             }
-            var model = this._private__pane._internal_chart()._internal_model();
-            var pane = this._private__pane._internal_state();
+            const model = this._private__pane._internal_chart()._internal_model();
+            const pane = this._private__pane._internal_state();
             this._private__mousedown = false;
             model._internal_endScalePrice(pane, this._private__priceScale);
-        };
-        PriceAxisWidget.prototype._private__mouseDoubleClickEvent = function (e) {
-            if (this._private__pane._internal_chart()._internal_options().handleScale.axisDoubleClickReset) {
+        }
+        _private__mouseDoubleClickEvent(e) {
+            if (this._private__options.handleScale.axisDoubleClickReset.price) {
                 this._internal_reset();
             }
-        };
-        PriceAxisWidget.prototype._private__mouseEnterEvent = function (e) {
+        }
+        _private__mouseEnterEvent(e) {
             if (this._private__priceScale === null) {
                 return;
             }
-            var model = this._private__pane._internal_chart()._internal_model();
+            const model = this._private__pane._internal_chart()._internal_model();
             if (model._internal_options().handleScale.axisPressedMouseMove.price && !this._private__priceScale._internal_isPercentage() && !this._private__priceScale._internal_isIndexedTo100()) {
-                this._private__setCursor(1 /* NsResize */);
+                this._private__setCursor(1 /* CursorType.NsResize */);
             }
-        };
-        PriceAxisWidget.prototype._private__mouseLeaveEvent = function (e) {
-            this._private__setCursor(0 /* Default */);
-        };
-        PriceAxisWidget.prototype._private__backLabels = function () {
-            var _this = this;
-            var res = [];
-            var priceScale = (this._private__priceScale === null) ? undefined : this._private__priceScale;
-            var addViewsForSources = function (sources) {
-                for (var i = 0; i < sources.length; ++i) {
-                    var source = sources[i];
-                    var views = source._internal_priceAxisViews(_this._private__pane._internal_state(), priceScale);
-                    for (var j = 0; j < views.length; j++) {
+        }
+        _private__mouseLeaveEvent(e) {
+            this._private__setCursor(0 /* CursorType.Default */);
+        }
+        _private__backLabels() {
+            const res = [];
+            const priceScale = (this._private__priceScale === null) ? undefined : this._private__priceScale;
+            const addViewsForSources = (sources) => {
+                for (let i = 0; i < sources.length; ++i) {
+                    const source = sources[i];
+                    const views = source._internal_priceAxisViews(this._private__pane._internal_state(), priceScale);
+                    for (let j = 0; j < views.length; j++) {
                         res.push(views[j]);
                     }
                 }
@@ -8972,18 +8823,17 @@
             // crosshair individually
             addViewsForSources(this._private__pane._internal_state()._internal_orderedSources());
             return res;
-        };
-        PriceAxisWidget.prototype._private__drawBackground = function (ctx, pixelRatio) {
-            var _this = this;
+        }
+        _private__drawBackground(ctx, pixelRatio) {
             if (this._private__size === null) {
                 return;
             }
-            var width = this._private__size._internal_w;
-            var height = this._private__size._internal_h;
-            drawScaled(ctx, pixelRatio, function () {
-                var model = _this._private__pane._internal_state()._internal_model();
-                var topColor = model._internal_backgroundTopColor();
-                var bottomColor = model._internal_backgroundBottomColor();
+            const width = this._private__size._internal_w;
+            const height = this._private__size._internal_h;
+            drawScaled(ctx, pixelRatio, () => {
+                const model = this._private__pane._internal_state()._internal_model();
+                const topColor = model._internal_backgroundTopColor();
+                const bottomColor = model._internal_backgroundBottomColor();
                 if (topColor === bottomColor) {
                     clearRect(ctx, 0, 0, width, height, topColor);
                 }
@@ -8991,15 +8841,15 @@
                     clearRectWithGradient(ctx, 0, 0, width, height, topColor, bottomColor);
                 }
             });
-        };
-        PriceAxisWidget.prototype._private__drawBorder = function (ctx, pixelRatio) {
+        }
+        _private__drawBorder(ctx, pixelRatio) {
             if (this._private__size === null || this._private__priceScale === null || !this._private__priceScale._internal_options().borderVisible) {
                 return;
             }
             ctx.save();
-            ctx.fillStyle = this._internal_lineColor();
-            var borderSize = Math.max(1, Math.floor(this._internal_rendererOptions()._internal_borderSize * pixelRatio));
-            var left;
+            ctx.fillStyle = this._private__priceScale._internal_options().borderColor;
+            const borderSize = Math.max(1, Math.floor(this._internal_rendererOptions()._internal_borderSize * pixelRatio));
+            let left;
             if (this._private__isLeft) {
                 left = Math.floor(this._private__size._internal_w * pixelRatio) - borderSize;
             }
@@ -9008,70 +8858,74 @@
             }
             ctx.fillRect(left, 0, borderSize, Math.ceil(this._private__size._internal_h * pixelRatio));
             ctx.restore();
-        };
-        PriceAxisWidget.prototype._private__drawTickMarks = function (ctx, pixelRatio) {
+        }
+        _private__drawTickMarks(ctx, pixelRatio) {
+            var _a;
             if (this._private__size === null || this._private__priceScale === null) {
                 return;
             }
-            var tickMarks = this._private__priceScale._internal_marks();
+            const tickMarks = this._private__priceScale._internal_marks();
             ctx.save();
-            ctx.strokeStyle = this._internal_lineColor();
-            ctx.font = this._internal_baseFont();
-            ctx.fillStyle = this._internal_lineColor();
-            var rendererOptions = this._internal_rendererOptions();
-            var drawTicks = this._private__priceScale._internal_options().borderVisible && this._private__priceScale._internal_options().drawTicks;
-            var tickMarkLeftX = this._private__isLeft ?
-                Math.floor((this._private__size._internal_w - rendererOptions._internal_tickLength) * pixelRatio - rendererOptions._internal_borderSize * pixelRatio) :
-                Math.floor(rendererOptions._internal_borderSize * pixelRatio);
-            var textLeftX = this._private__isLeft ?
+            const priceScaleOptions = this._private__priceScale._internal_options();
+            ctx.strokeStyle = priceScaleOptions.borderColor;
+            ctx.font = this._private__baseFont();
+            ctx.fillStyle = priceScaleOptions.borderColor;
+            const rendererOptions = this._internal_rendererOptions();
+            const tickMarkLeftX = this._private__isLeft ?
+                Math.floor((this._private__size._internal_w - rendererOptions._internal_tickLength) * pixelRatio) :
+                0;
+            const textLeftX = this._private__isLeft ?
                 Math.round(tickMarkLeftX - rendererOptions._internal_paddingInner * pixelRatio) :
                 Math.round(tickMarkLeftX + rendererOptions._internal_tickLength * pixelRatio + rendererOptions._internal_paddingInner * pixelRatio);
-            var textAlign = this._private__isLeft ? 'right' : 'left';
-            var tickHeight = Math.max(1, Math.floor(pixelRatio));
-            var tickOffset = Math.floor(pixelRatio * 0.5);
-            if (drawTicks) {
-                var tickLength = Math.round(rendererOptions._internal_tickLength * pixelRatio);
+            const tickHeight = Math.max(1, Math.floor(pixelRatio));
+            const tickOffset = Math.floor(pixelRatio * 0.5);
+            if (priceScaleOptions.borderVisible && priceScaleOptions.ticksVisible) {
+                const tickLength = Math.round(rendererOptions._internal_tickLength * pixelRatio);
                 ctx.beginPath();
-                for (var _i = 0, tickMarks_1 = tickMarks; _i < tickMarks_1.length; _i++) {
-                    var tickMark = tickMarks_1[_i];
+                for (const tickMark of tickMarks) {
                     ctx.rect(tickMarkLeftX, Math.round(tickMark._internal_coord * pixelRatio) - tickOffset, tickLength, tickHeight);
                 }
                 ctx.fill();
             }
-            ctx.fillStyle = this._internal_textColor();
-            for (var _a = 0, tickMarks_2 = tickMarks; _a < tickMarks_2.length; _a++) {
-                var tickMark = tickMarks_2[_a];
-                this._private__tickMarksCache._internal_paintTo(ctx, tickMark._internal_label, textLeftX, Math.round(tickMark._internal_coord * pixelRatio), textAlign);
-            }
+            ctx.fillStyle = (_a = priceScaleOptions.textColor) !== null && _a !== void 0 ? _a : this._private__layoutOptions.textColor;
+            ctx.textAlign = this._private__isLeft ? 'right' : 'left';
+            ctx.textBaseline = 'middle';
+            const yMidCorrections = tickMarks.map((mark) => this._private__widthCache._internal_yMidCorrection(ctx, mark._internal_label));
+            drawScaled(ctx, pixelRatio, () => {
+                for (let i = tickMarks.length; i--;) {
+                    const tickMark = tickMarks[i];
+                    ctx.fillText(tickMark._internal_label, textLeftX / pixelRatio, tickMark._internal_coord + yMidCorrections[i]);
+                }
+            });
             ctx.restore();
-        };
-        PriceAxisWidget.prototype._private__alignLabels = function () {
+        }
+        _private__alignLabels() {
             if (this._private__size === null || this._private__priceScale === null) {
                 return;
             }
-            var center = this._private__size._internal_h / 2;
-            var views = [];
-            var orderedSources = this._private__priceScale._internal_orderedSources().slice(); // Copy of array
-            var pane = this._private__pane;
-            var paneState = pane._internal_state();
-            var rendererOptions = this._internal_rendererOptions();
+            let center = this._private__size._internal_h / 2;
+            const views = [];
+            const orderedSources = this._private__priceScale._internal_orderedSources().slice(); // Copy of array
+            const pane = this._private__pane;
+            const paneState = pane._internal_state();
+            const rendererOptions = this._internal_rendererOptions();
             // if we are default price scale, append labels from no-scale
-            var isDefault = this._private__priceScale === paneState._internal_defaultVisiblePriceScale();
+            const isDefault = this._private__priceScale === paneState._internal_defaultVisiblePriceScale();
             if (isDefault) {
-                this._private__pane._internal_state()._internal_orderedSources().forEach(function (source) {
+                this._private__pane._internal_state()._internal_orderedSources().forEach((source) => {
                     if (paneState._internal_isOverlay(source)) {
                         orderedSources.push(source);
                     }
                 });
             }
             // we can use any, but let's use the first source as "center" one
-            var centerSource = this._private__priceScale._internal_dataSources()[0];
-            var priceScale = this._private__priceScale;
-            var updateForSources = function (sources) {
-                sources.forEach(function (source) {
-                    var sourceViews = source._internal_priceAxisViews(paneState, priceScale);
+            const centerSource = this._private__priceScale._internal_dataSources()[0];
+            const priceScale = this._private__priceScale;
+            const updateForSources = (sources) => {
+                sources.forEach((source) => {
+                    const sourceViews = source._internal_priceAxisViews(paneState, priceScale);
                     // never align selected sources
-                    sourceViews.forEach(function (view) {
+                    sourceViews.forEach((view) => {
                         view._internal_setFixedCoordinate(null);
                         if (view._internal_isVisible()) {
                             views.push(view);
@@ -9084,105 +8938,117 @@
             };
             // crosshair individually
             updateForSources(orderedSources);
+            views.forEach((view) => view._internal_setFixedCoordinate(view._internal_coordinate()));
+            const options = this._private__priceScale._internal_options();
+            if (!options.alignLabels) {
+                return;
+            }
+            this._private__fixLabelOverlap(views, rendererOptions, center);
+        }
+        _private__fixLabelOverlap(views, rendererOptions, center) {
+            if (this._private__size === null) {
+                return;
+            }
             // split into two parts
-            var top = views.filter(function (view) { return view._internal_coordinate() <= center; });
-            var bottom = views.filter(function (view) { return view._internal_coordinate() > center; });
+            const top = views.filter((view) => view._internal_coordinate() <= center);
+            const bottom = views.filter((view) => view._internal_coordinate() > center);
             // sort top from center to top
-            top.sort(function (l, r) { return r._internal_coordinate() - l._internal_coordinate(); });
+            top.sort((l, r) => r._internal_coordinate() - l._internal_coordinate());
             // share center label
             if (top.length && bottom.length) {
                 bottom.push(top[0]);
             }
-            bottom.sort(function (l, r) { return l._internal_coordinate() - r._internal_coordinate(); });
-            views.forEach(function (view) { return view._internal_setFixedCoordinate(view._internal_coordinate()); });
-            var options = this._private__priceScale._internal_options();
-            if (!options.alignLabels) {
-                return;
+            bottom.sort((l, r) => l._internal_coordinate() - r._internal_coordinate());
+            for (const view of views) {
+                const halfHeight = Math.floor(view._internal_height(rendererOptions) / 2);
+                const coordinate = view._internal_coordinate();
+                if (coordinate > -halfHeight && coordinate < halfHeight) {
+                    view._internal_setFixedCoordinate(halfHeight);
+                }
+                if (coordinate > (this._private__size._internal_h - halfHeight) && coordinate < this._private__size._internal_h + halfHeight) {
+                    view._internal_setFixedCoordinate(this._private__size._internal_h - halfHeight);
+                }
             }
-            for (var i = 1; i < top.length; i++) {
-                var view = top[i];
-                var prev = top[i - 1];
-                var height = prev._internal_height(rendererOptions, false);
-                var coordinate = view._internal_coordinate();
-                var prevFixedCoordinate = prev._internal_getFixedCoordinate();
+            for (let i = 1; i < top.length; i++) {
+                const view = top[i];
+                const prev = top[i - 1];
+                const height = prev._internal_height(rendererOptions, false);
+                const coordinate = view._internal_coordinate();
+                const prevFixedCoordinate = prev._internal_getFixedCoordinate();
                 if (coordinate > prevFixedCoordinate - height) {
                     view._internal_setFixedCoordinate(prevFixedCoordinate - height);
                 }
             }
-            for (var j = 1; j < bottom.length; j++) {
-                var view = bottom[j];
-                var prev = bottom[j - 1];
-                var height = prev._internal_height(rendererOptions, true);
-                var coordinate = view._internal_coordinate();
-                var prevFixedCoordinate = prev._internal_getFixedCoordinate();
+            for (let j = 1; j < bottom.length; j++) {
+                const view = bottom[j];
+                const prev = bottom[j - 1];
+                const height = prev._internal_height(rendererOptions, true);
+                const coordinate = view._internal_coordinate();
+                const prevFixedCoordinate = prev._internal_getFixedCoordinate();
                 if (coordinate < prevFixedCoordinate + height) {
                     view._internal_setFixedCoordinate(prevFixedCoordinate + height);
                 }
             }
-        };
-        PriceAxisWidget.prototype._private__drawBackLabels = function (ctx, pixelRatio) {
-            var _this = this;
+        }
+        _private__drawBackLabels(ctx, pixelRatio) {
             if (this._private__size === null) {
                 return;
             }
             ctx.save();
-            var size = this._private__size;
-            var views = this._private__backLabels();
-            var rendererOptions = this._internal_rendererOptions();
-            var align = this._private__isLeft ? 'right' : 'left';
-            views.forEach(function (view) {
+            const size = this._private__size;
+            const views = this._private__backLabels();
+            const rendererOptions = this._internal_rendererOptions();
+            const align = this._private__isLeft ? 'right' : 'left';
+            views.forEach((view) => {
                 if (view._internal_isAxisLabelVisible()) {
-                    var renderer = view._internal_renderer(ensureNotNull(_this._private__priceScale));
+                    const renderer = view._internal_renderer(ensureNotNull(this._private__priceScale));
                     ctx.save();
-                    renderer._internal_draw(ctx, rendererOptions, _this._private__widthCache, size._internal_w, align, pixelRatio);
+                    renderer._internal_draw(ctx, rendererOptions, this._private__widthCache, size._internal_w, align, pixelRatio);
                     ctx.restore();
                 }
             });
             ctx.restore();
-        };
-        PriceAxisWidget.prototype._private__drawCrosshairLabel = function (ctx, pixelRatio) {
-            var _this = this;
+        }
+        _private__drawCrosshairLabel(ctx, pixelRatio) {
             if (this._private__size === null || this._private__priceScale === null) {
                 return;
             }
             ctx.save();
-            var size = this._private__size;
-            var model = this._private__pane._internal_chart()._internal_model();
-            var views = []; // array of arrays
-            var pane = this._private__pane._internal_state();
-            var v = model._internal_crosshairSource()._internal_priceAxisViews(pane, this._private__priceScale);
+            const size = this._private__size;
+            const model = this._private__pane._internal_chart()._internal_model();
+            const views = []; // array of arrays
+            const pane = this._private__pane._internal_state();
+            const v = model._internal_crosshairSource()._internal_priceAxisViews(pane, this._private__priceScale);
             if (v.length) {
                 views.push(v);
             }
-            var ro = this._internal_rendererOptions();
-            var align = this._private__isLeft ? 'right' : 'left';
-            views.forEach(function (arr) {
-                arr.forEach(function (view) {
+            const ro = this._internal_rendererOptions();
+            const align = this._private__isLeft ? 'right' : 'left';
+            views.forEach((arr) => {
+                arr.forEach((view) => {
                     ctx.save();
-                    view._internal_renderer(ensureNotNull(_this._private__priceScale))._internal_draw(ctx, ro, _this._private__widthCache, size._internal_w, align, pixelRatio);
+                    view._internal_renderer(ensureNotNull(this._private__priceScale))._internal_draw(ctx, ro, this._private__widthCache, size._internal_w, align, pixelRatio);
                     ctx.restore();
                 });
             });
             ctx.restore();
-        };
-        PriceAxisWidget.prototype._private__setCursor = function (type) {
-            this._private__cell.style.cursor = type === 1 /* NsResize */ ? 'ns-resize' : 'default';
-        };
-        PriceAxisWidget.prototype._private__onMarksChanged = function () {
-            var width = this._internal_optimalWidth();
+        }
+        _private__setCursor(type) {
+            this._private__cell.style.cursor = type === 1 /* CursorType.NsResize */ ? 'ns-resize' : 'default';
+        }
+        _private__onMarksChanged() {
+            const width = this._internal_optimalWidth();
             // avoid price scale is shrunk
             // using < instead !== to avoid infinite changes
             if (this._private__prevOptimalWidth < width) {
                 this._private__pane._internal_chart()._internal_model()._internal_fullUpdate();
             }
             this._private__prevOptimalWidth = width;
-        };
-        PriceAxisWidget.prototype._private__recreateTickMarksCache = function (options) {
-            this._private__tickMarksCache._internal_destroy();
-            this._private__tickMarksCache = new LabelsImageCache(options._internal_fontSize, options._internal_color, options._internal_fontFamily);
-        };
-        return PriceAxisWidget;
-    }());
+        }
+        _private__baseFont() {
+            return makeFont(this._private__layoutOptions.fontSize, this._private__layoutOptions.fontFamily);
+        }
+    }
 
     function drawBackground(renderer, ctx, pixelRatio, isHovered, hitTestData) {
         if (renderer._internal_drawBackground) {
@@ -9195,12 +9061,14 @@
     function sourcePaneViews(source, pane) {
         return source._internal_paneViews(pane);
     }
+    function sourceLabelPaneViews(source, pane) {
+        return source._internal_labelPaneViews(pane);
+    }
     function sourceTopPaneViews(source, pane) {
         return source._internal_topPaneViews !== undefined ? source._internal_topPaneViews(pane) : [];
     }
-    var PaneWidget = /** @class */ (function () {
-        function PaneWidget(chart, state) {
-            var _this = this;
+    class PaneWidget {
+        constructor(chart, state) {
             this._private__size = new Size(0, 0);
             this._private__leftPriceAxisWidget = null;
             this._private__rightPriceAxisWidget = null;
@@ -9214,17 +9082,17 @@
             this._private__initCrosshairPosition = null;
             this._private__scrollXAnimation = null;
             this._private__isSettingSize = false;
-            this._private__canvasConfiguredHandler = function () {
-                if (_this._private__isSettingSize || _this._private__state === null) {
+            this._private__canvasConfiguredHandler = () => {
+                if (this._private__isSettingSize || this._private__state === null) {
                     return;
                 }
-                _this._private__model()._internal_lightUpdate();
+                this._private__model()._internal_lightUpdate();
             };
-            this._private__topCanvasConfiguredHandler = function () {
-                if (_this._private__isSettingSize || _this._private__state === null) {
+            this._private__topCanvasConfiguredHandler = () => {
+                if (this._private__isSettingSize || this._private__state === null) {
                     return;
                 }
-                _this._private__model()._internal_lightUpdate();
+                this._private__model()._internal_lightUpdate();
             };
             this._private__chart = chart;
             this._private__state = state;
@@ -9232,7 +9100,7 @@
             this._private__paneCell = document.createElement('td');
             this._private__paneCell.style.padding = '0';
             this._private__paneCell.style.position = 'relative';
-            var paneWrapper = document.createElement('div');
+            const paneWrapper = document.createElement('div');
             paneWrapper.style.width = '100%';
             paneWrapper.style.height = '100%';
             paneWrapper.style.position = 'relative';
@@ -9244,14 +9112,14 @@
             this._private__paneCell.appendChild(paneWrapper);
             this._private__canvasBinding = createBoundCanvas(paneWrapper, new Size(16, 16));
             this._private__canvasBinding.subscribeCanvasConfigured(this._private__canvasConfiguredHandler);
-            var canvas = this._private__canvasBinding.canvas;
+            const canvas = this._private__canvasBinding.canvas;
             canvas.style.position = 'absolute';
             canvas.style.zIndex = '1';
             canvas.style.left = '0';
             canvas.style.top = '0';
             this._private__topCanvasBinding = createBoundCanvas(paneWrapper, new Size(16, 16));
             this._private__topCanvasBinding.subscribeCanvasConfigured(this._private__topCanvasConfiguredHandler);
-            var topCanvas = this._private__topCanvasBinding.canvas;
+            const topCanvas = this._private__topCanvasBinding.canvas;
             topCanvas.style.position = 'absolute';
             topCanvas.style.zIndex = '2';
             topCanvas.style.left = '0';
@@ -9262,11 +9130,11 @@
             this._private__rowElement.appendChild(this._private__rightAxisCell);
             this._internal_updatePriceAxisWidgetsStates();
             this._private__mouseEventHandler = new MouseEventHandler(this._private__topCanvasBinding.canvas, this, {
-                _internal_treatVertTouchDragAsPageScroll: function () { return _this._private__startTrackPoint === null && !_this._private__chart._internal_options().handleScroll.vertTouchDrag; },
-                _internal_treatHorzTouchDragAsPageScroll: function () { return _this._private__startTrackPoint === null && !_this._private__chart._internal_options().handleScroll.horzTouchDrag; },
+                _internal_treatVertTouchDragAsPageScroll: () => this._private__startTrackPoint === null && !this._private__chart._internal_options().handleScroll.vertTouchDrag,
+                _internal_treatHorzTouchDragAsPageScroll: () => this._private__startTrackPoint === null && !this._private__chart._internal_options().handleScroll.horzTouchDrag,
             });
         }
-        PaneWidget.prototype._internal_destroy = function () {
+        _internal_destroy() {
             if (this._private__leftPriceAxisWidget !== null) {
                 this._private__leftPriceAxisWidget._internal_destroy();
             }
@@ -9281,11 +9149,11 @@
                 this._private__state._internal_onDestroyed()._internal_unsubscribeAll(this);
             }
             this._private__mouseEventHandler._internal_destroy();
-        };
-        PaneWidget.prototype._internal_state = function () {
+        }
+        _internal_state() {
             return ensureNotNull(this._private__state);
-        };
-        PaneWidget.prototype._internal_setState = function (pane) {
+        }
+        _internal_setState(pane) {
             if (this._private__state !== null) {
                 this._private__state._internal_onDestroyed()._internal_unsubscribeAll(this);
             }
@@ -9294,14 +9162,14 @@
                 this._private__state._internal_onDestroyed()._internal_subscribe(PaneWidget.prototype._private__onStateDestroyed.bind(this), this, true);
             }
             this._internal_updatePriceAxisWidgetsStates();
-        };
-        PaneWidget.prototype._internal_chart = function () {
+        }
+        _internal_chart() {
             return this._private__chart;
-        };
-        PaneWidget.prototype._internal_getElement = function () {
+        }
+        _internal_getElement() {
             return this._private__rowElement;
-        };
-        PaneWidget.prototype._internal_updatePriceAxisWidgetsStates = function () {
+        }
+        _internal_updatePriceAxisWidgetsStates() {
             if (this._private__state === null) {
                 return;
             }
@@ -9310,153 +9178,153 @@
                 return;
             }
             if (this._private__leftPriceAxisWidget !== null) {
-                var leftPriceScale = this._private__state._internal_leftPriceScale();
+                const leftPriceScale = this._private__state._internal_leftPriceScale();
                 this._private__leftPriceAxisWidget._internal_setPriceScale(ensureNotNull(leftPriceScale));
             }
             if (this._private__rightPriceAxisWidget !== null) {
-                var rightPriceScale = this._private__state._internal_rightPriceScale();
+                const rightPriceScale = this._private__state._internal_rightPriceScale();
                 this._private__rightPriceAxisWidget._internal_setPriceScale(ensureNotNull(rightPriceScale));
             }
-        };
-        PaneWidget.prototype._internal_updatePriceAxisWidgets = function () {
+        }
+        _internal_updatePriceAxisWidgets() {
             if (this._private__leftPriceAxisWidget !== null) {
                 this._private__leftPriceAxisWidget._internal_update();
             }
             if (this._private__rightPriceAxisWidget !== null) {
                 this._private__rightPriceAxisWidget._internal_update();
             }
-        };
-        PaneWidget.prototype._internal_stretchFactor = function () {
+        }
+        _internal_stretchFactor() {
             return this._private__state !== null ? this._private__state._internal_stretchFactor() : 0;
-        };
-        PaneWidget.prototype._internal_setStretchFactor = function (stretchFactor) {
+        }
+        _internal_setStretchFactor(stretchFactor) {
             if (this._private__state) {
                 this._private__state._internal_setStretchFactor(stretchFactor);
             }
-        };
-        PaneWidget.prototype._internal_mouseEnterEvent = function (event) {
+        }
+        _internal_mouseEnterEvent(event) {
             if (!this._private__state) {
                 return;
             }
             this._private__onMouseEvent();
-            var x = event._internal_localX;
-            var y = event._internal_localY;
+            const x = event._internal_localX;
+            const y = event._internal_localY;
             this._private__setCrosshairPosition(x, y);
-        };
-        PaneWidget.prototype._internal_mouseDownEvent = function (event) {
+        }
+        _internal_mouseDownEvent(event) {
             this._private__onMouseEvent();
             this._private__mouseTouchDownEvent();
             this._private__setCrosshairPosition(event._internal_localX, event._internal_localY);
-        };
-        PaneWidget.prototype._internal_mouseMoveEvent = function (event) {
+        }
+        _internal_mouseMoveEvent(event) {
             if (!this._private__state) {
                 return;
             }
             this._private__onMouseEvent();
-            var x = event._internal_localX;
-            var y = event._internal_localY;
+            const x = event._internal_localX;
+            const y = event._internal_localY;
             this._private__setCrosshairPosition(x, y);
-            var hitTest = this._internal_hitTest(x, y);
+            const hitTest = this._internal_hitTest(x, y);
             this._private__model()._internal_setHoveredSource(hitTest && { _internal_source: hitTest._internal_source, _internal_object: hitTest._internal_object });
-        };
-        PaneWidget.prototype._internal_mouseClickEvent = function (event) {
+        }
+        _internal_mouseClickEvent(event) {
             if (this._private__state === null) {
                 return;
             }
             this._private__onMouseEvent();
-            var x = event._internal_localX;
-            var y = event._internal_localY;
-            if (this._private__clicked._internal_hasListeners()) {
-                var currentTime = this._private__model()._internal_crosshairSource()._internal_appliedIndex();
-                this._private__clicked._internal_fire(currentTime, { x: x, y: y });
-            }
-        };
-        PaneWidget.prototype._internal_pressedMouseMoveEvent = function (event) {
+            this._private__fireClickedDelegate(event);
+        }
+        _internal_pressedMouseMoveEvent(event) {
             this._private__onMouseEvent();
             this._private__pressedMouseTouchMoveEvent(event);
             this._private__setCrosshairPosition(event._internal_localX, event._internal_localY);
-        };
-        PaneWidget.prototype._internal_mouseUpEvent = function (event) {
+        }
+        _internal_mouseUpEvent(event) {
             if (this._private__state === null) {
                 return;
             }
             this._private__onMouseEvent();
             this._private__longTap = false;
             this._private__endScroll(event);
-        };
-        PaneWidget.prototype._internal_longTapEvent = function (event) {
+        }
+        _internal_tapEvent(event) {
+            if (this._private__state === null) {
+                return;
+            }
+            this._private__fireClickedDelegate(event);
+        }
+        _internal_longTapEvent(event) {
             this._private__longTap = true;
             if (this._private__startTrackPoint === null) {
-                var point = { x: event._internal_localX, y: event._internal_localY };
+                const point = { x: event._internal_localX, y: event._internal_localY };
                 this._private__startTrackingMode(point, point);
             }
-        };
-        PaneWidget.prototype._internal_mouseLeaveEvent = function (event) {
+        }
+        _internal_mouseLeaveEvent(event) {
             if (this._private__state === null) {
                 return;
             }
             this._private__onMouseEvent();
             this._private__state._internal_model()._internal_setHoveredSource(null);
             this._private__clearCrosshairPosition();
-        };
-        PaneWidget.prototype._internal_clicked = function () {
+        }
+        _internal_clicked() {
             return this._private__clicked;
-        };
-        PaneWidget.prototype._internal_pinchStartEvent = function () {
+        }
+        _internal_pinchStartEvent() {
             this._private__prevPinchScale = 1;
-            this._private__terminateKineticAnimation();
-        };
-        PaneWidget.prototype._internal_pinchEvent = function (middlePoint, scale) {
+            this._private__model()._internal_stopTimeScaleAnimation();
+        }
+        _internal_pinchEvent(middlePoint, scale) {
             if (!this._private__chart._internal_options().handleScale.pinch) {
                 return;
             }
-            var zoomScale = (scale - this._private__prevPinchScale) * 5;
+            const zoomScale = (scale - this._private__prevPinchScale) * 5;
             this._private__prevPinchScale = scale;
             this._private__model()._internal_zoomTime(middlePoint._internal_x, zoomScale);
-        };
-        PaneWidget.prototype._internal_touchStartEvent = function (event) {
+        }
+        _internal_touchStartEvent(event) {
             this._private__longTap = false;
             this._private__exitTrackingModeOnNextTry = this._private__startTrackPoint !== null;
             this._private__mouseTouchDownEvent();
             if (this._private__startTrackPoint !== null) {
-                var crosshair = this._private__model()._internal_crosshairSource();
+                const crosshair = this._private__model()._internal_crosshairSource();
                 this._private__initCrosshairPosition = { x: crosshair._internal_appliedX(), y: crosshair._internal_appliedY() };
                 this._private__startTrackPoint = { x: event._internal_localX, y: event._internal_localY };
             }
-        };
-        PaneWidget.prototype._internal_touchMoveEvent = function (event) {
+        }
+        _internal_touchMoveEvent(event) {
             if (this._private__state === null) {
                 return;
             }
-            var x = event._internal_localX;
-            var y = event._internal_localY;
+            const x = event._internal_localX;
+            const y = event._internal_localY;
             if (this._private__startTrackPoint !== null) {
                 // tracking mode: move crosshair
                 this._private__exitTrackingModeOnNextTry = false;
-                var origPoint = ensureNotNull(this._private__initCrosshairPosition);
-                var newX = origPoint.x + (x - this._private__startTrackPoint.x);
-                var newY = origPoint.y + (y - this._private__startTrackPoint.y);
+                const origPoint = ensureNotNull(this._private__initCrosshairPosition);
+                const newX = origPoint.x + (x - this._private__startTrackPoint.x);
+                const newY = origPoint.y + (y - this._private__startTrackPoint.y);
                 this._private__setCrosshairPosition(newX, newY);
                 return;
             }
             this._private__pressedMouseTouchMoveEvent(event);
-        };
-        PaneWidget.prototype._internal_touchEndEvent = function (event) {
-            if (this._internal_chart()._internal_options().trackingMode.exitMode === 0 /* OnTouchEnd */) {
+        }
+        _internal_touchEndEvent(event) {
+            if (this._internal_chart()._internal_options().trackingMode.exitMode === 0 /* TrackingModeExitMode.OnTouchEnd */) {
                 this._private__exitTrackingModeOnNextTry = true;
             }
             this._private__tryExitTrackingMode();
             this._private__endScroll(event);
-        };
-        PaneWidget.prototype._internal_hitTest = function (x, y) {
-            var state = this._private__state;
+        }
+        _internal_hitTest(x, y) {
+            const state = this._private__state;
             if (state === null) {
                 return null;
             }
-            var sources = state._internal_orderedSources();
-            for (var _i = 0, sources_1 = sources; _i < sources_1.length; _i++) {
-                var source = sources_1[_i];
-                var sourceResult = this._private__hitTestPaneView(source._internal_paneViews(state), x, y);
+            const sources = state._internal_orderedSources();
+            for (const source of sources) {
+                const sourceResult = this._private__hitTestPaneView(source._internal_paneViews(state), x, y);
                 if (sourceResult !== null) {
                     return {
                         _internal_source: source,
@@ -9466,15 +9334,15 @@
                 }
             }
             return null;
-        };
-        PaneWidget.prototype._internal_setPriceAxisSize = function (width, position) {
-            var priceAxisWidget = position === 'left' ? this._private__leftPriceAxisWidget : this._private__rightPriceAxisWidget;
+        }
+        _internal_setPriceAxisSize(width, position) {
+            const priceAxisWidget = position === 'left' ? this._private__leftPriceAxisWidget : this._private__rightPriceAxisWidget;
             ensureNotNull(priceAxisWidget)._internal_setSize(new Size(width, this._private__size._internal_h));
-        };
-        PaneWidget.prototype._internal_getSize = function () {
+        }
+        _internal_getSize() {
             return this._private__size;
-        };
-        PaneWidget.prototype._internal_setSize = function (size) {
+        }
+        _internal_setSize(size) {
             if (size._internal_w < 0 || size._internal_h < 0) {
                 throw new Error('Try to set invalid size to PaneWidget ' + JSON.stringify(size));
             }
@@ -9488,15 +9356,14 @@
             this._private__isSettingSize = false;
             this._private__paneCell.style.width = size._internal_w + 'px';
             this._private__paneCell.style.height = size._internal_h + 'px';
-        };
-        PaneWidget.prototype._internal_recalculatePriceScales = function () {
-            var pane = ensureNotNull(this._private__state);
+        }
+        _internal_recalculatePriceScales() {
+            const pane = ensureNotNull(this._private__state);
             pane._internal_recalculatePriceScale(pane._internal_leftPriceScale());
             pane._internal_recalculatePriceScale(pane._internal_rightPriceScale());
-            for (var _i = 0, _a = pane._internal_dataSources(); _i < _a.length; _i++) {
-                var source = _a[_i];
+            for (const source of pane._internal_dataSources()) {
                 if (pane._internal_isOverlay(source)) {
-                    var priceScale = source._internal_priceScale();
+                    const priceScale = source._internal_priceScale();
                     if (priceScale !== null) {
                         pane._internal_recalculatePriceScale(priceScale);
                     }
@@ -9505,18 +9372,18 @@
                     source._internal_updateAllViews();
                 }
             }
-        };
-        PaneWidget.prototype._internal_getImage = function () {
+        }
+        _internal_getImage() {
             return this._private__canvasBinding.canvas;
-        };
-        PaneWidget.prototype._internal_paint = function (type) {
-            if (type === 0 /* None */) {
+        }
+        _internal_paint(type) {
+            if (type === 0 /* InvalidationLevel.None */) {
                 return;
             }
             if (this._private__state === null) {
                 return;
             }
-            if (type > 1 /* Cursor */) {
+            if (type > 1 /* InvalidationLevel.Cursor */) {
                 this._internal_recalculatePriceScales();
             }
             if (this._private__leftPriceAxisWidget !== null) {
@@ -9525,104 +9392,107 @@
             if (this._private__rightPriceAxisWidget !== null) {
                 this._private__rightPriceAxisWidget._internal_paint(type);
             }
-            if (type !== 1 /* Cursor */) {
-                var ctx = getContext2D(this._private__canvasBinding.canvas);
+            if (type !== 1 /* InvalidationLevel.Cursor */) {
+                const ctx = getContext2D(this._private__canvasBinding.canvas);
                 ctx.save();
                 this._private__drawBackground(ctx, this._private__canvasBinding.pixelRatio);
                 if (this._private__state) {
                     this._private__drawGrid(ctx, this._private__canvasBinding.pixelRatio);
                     this._private__drawWatermark(ctx, this._private__canvasBinding.pixelRatio);
                     this._private__drawSources(ctx, this._private__canvasBinding.pixelRatio, sourcePaneViews);
+                    this._private__drawSources(ctx, this._private__canvasBinding.pixelRatio, sourceLabelPaneViews);
                 }
                 ctx.restore();
             }
-            var topCtx = getContext2D(this._private__topCanvasBinding.canvas);
+            const topCtx = getContext2D(this._private__topCanvasBinding.canvas);
             topCtx.clearRect(0, 0, Math.ceil(this._private__size._internal_w * this._private__topCanvasBinding.pixelRatio), Math.ceil(this._private__size._internal_h * this._private__topCanvasBinding.pixelRatio));
             this._private__drawSources(topCtx, this._private__canvasBinding.pixelRatio, sourceTopPaneViews);
             this._private__drawCrosshair(topCtx, this._private__topCanvasBinding.pixelRatio);
-        };
-        PaneWidget.prototype._internal_leftPriceAxisWidget = function () {
+        }
+        _internal_leftPriceAxisWidget() {
             return this._private__leftPriceAxisWidget;
-        };
-        PaneWidget.prototype._internal_rightPriceAxisWidget = function () {
+        }
+        _internal_rightPriceAxisWidget() {
             return this._private__rightPriceAxisWidget;
-        };
-        PaneWidget.prototype._private__onStateDestroyed = function () {
+        }
+        _private__onStateDestroyed() {
             if (this._private__state !== null) {
                 this._private__state._internal_onDestroyed()._internal_unsubscribeAll(this);
             }
             this._private__state = null;
-        };
-        PaneWidget.prototype._private__drawBackground = function (ctx, pixelRatio) {
-            var _this = this;
-            drawScaled(ctx, pixelRatio, function () {
-                var model = _this._private__model();
-                var topColor = model._internal_backgroundTopColor();
-                var bottomColor = model._internal_backgroundBottomColor();
+        }
+        _private__fireClickedDelegate(event) {
+            const x = event._internal_localX;
+            const y = event._internal_localY;
+            if (this._private__clicked._internal_hasListeners()) {
+                this._private__clicked._internal_fire(this._private__model()._internal_timeScale()._internal_coordinateToIndex(x), { x, y });
+            }
+        }
+        _private__drawBackground(ctx, pixelRatio) {
+            drawScaled(ctx, pixelRatio, () => {
+                const model = this._private__model();
+                const topColor = model._internal_backgroundTopColor();
+                const bottomColor = model._internal_backgroundBottomColor();
                 if (topColor === bottomColor) {
-                    clearRect(ctx, 0, 0, _this._private__size._internal_w, _this._private__size._internal_h, bottomColor);
+                    clearRect(ctx, 0, 0, this._private__size._internal_w, this._private__size._internal_h, bottomColor);
                 }
                 else {
-                    clearRectWithGradient(ctx, 0, 0, _this._private__size._internal_w, _this._private__size._internal_h, topColor, bottomColor);
+                    clearRectWithGradient(ctx, 0, 0, this._private__size._internal_w, this._private__size._internal_h, topColor, bottomColor);
                 }
             });
-        };
-        PaneWidget.prototype._private__drawGrid = function (ctx, pixelRatio) {
-            var state = ensureNotNull(this._private__state);
-            var paneView = state._internal_grid()._internal_paneView();
-            var renderer = paneView._internal_renderer(state._internal_height(), state._internal_width());
+        }
+        _private__drawGrid(ctx, pixelRatio) {
+            const state = ensureNotNull(this._private__state);
+            const paneView = state._internal_grid()._internal_paneView();
+            const renderer = paneView._internal_renderer(state._internal_height(), state._internal_width());
             if (renderer !== null) {
                 ctx.save();
                 renderer._internal_draw(ctx, pixelRatio, false);
                 ctx.restore();
             }
-        };
-        PaneWidget.prototype._private__drawWatermark = function (ctx, pixelRatio) {
-            var source = this._private__model()._internal_watermarkSource();
+        }
+        _private__drawWatermark(ctx, pixelRatio) {
+            const source = this._private__model()._internal_watermarkSource();
             this._private__drawSourceImpl(ctx, pixelRatio, sourcePaneViews, drawBackground, source);
             this._private__drawSourceImpl(ctx, pixelRatio, sourcePaneViews, drawForeground, source);
-        };
-        PaneWidget.prototype._private__drawCrosshair = function (ctx, pixelRatio) {
+        }
+        _private__drawCrosshair(ctx, pixelRatio) {
             this._private__drawSourceImpl(ctx, pixelRatio, sourcePaneViews, drawForeground, this._private__model()._internal_crosshairSource());
-        };
-        PaneWidget.prototype._private__drawSources = function (ctx, pixelRatio, paneViewsGetter) {
-            var state = ensureNotNull(this._private__state);
-            var sources = state._internal_orderedSources();
-            for (var _i = 0, sources_2 = sources; _i < sources_2.length; _i++) {
-                var source = sources_2[_i];
+        }
+        _private__drawSources(ctx, pixelRatio, paneViewsGetter) {
+            const state = ensureNotNull(this._private__state);
+            const sources = state._internal_orderedSources();
+            for (const source of sources) {
                 this._private__drawSourceImpl(ctx, pixelRatio, paneViewsGetter, drawBackground, source);
             }
-            for (var _a = 0, sources_3 = sources; _a < sources_3.length; _a++) {
-                var source = sources_3[_a];
+            for (const source of sources) {
                 this._private__drawSourceImpl(ctx, pixelRatio, paneViewsGetter, drawForeground, source);
             }
-        };
-        PaneWidget.prototype._private__drawSourceImpl = function (ctx, pixelRatio, paneViewsGetter, drawFn, source) {
-            var state = ensureNotNull(this._private__state);
-            var paneViews = paneViewsGetter(source, state);
-            var height = state._internal_height();
-            var width = state._internal_width();
-            var hoveredSource = state._internal_model()._internal_hoveredSource();
-            var isHovered = hoveredSource !== null && hoveredSource._internal_source === source;
-            var objecId = hoveredSource !== null && isHovered && hoveredSource._internal_object !== undefined
+        }
+        _private__drawSourceImpl(ctx, pixelRatio, paneViewsGetter, drawFn, source) {
+            const state = ensureNotNull(this._private__state);
+            const paneViews = paneViewsGetter(source, state);
+            const height = state._internal_height();
+            const width = state._internal_width();
+            const hoveredSource = state._internal_model()._internal_hoveredSource();
+            const isHovered = hoveredSource !== null && hoveredSource._internal_source === source;
+            const objecId = hoveredSource !== null && isHovered && hoveredSource._internal_object !== undefined
                 ? hoveredSource._internal_object._internal_hitTestData
                 : undefined;
-            for (var _i = 0, paneViews_1 = paneViews; _i < paneViews_1.length; _i++) {
-                var paneView = paneViews_1[_i];
-                var renderer = paneView._internal_renderer(height, width);
+            for (const paneView of paneViews) {
+                const renderer = paneView._internal_renderer(height, width);
                 if (renderer !== null) {
                     ctx.save();
                     drawFn(renderer, ctx, pixelRatio, isHovered, objecId);
                     ctx.restore();
                 }
             }
-        };
-        PaneWidget.prototype._private__hitTestPaneView = function (paneViews, x, y) {
-            for (var _i = 0, paneViews_2 = paneViews; _i < paneViews_2.length; _i++) {
-                var paneView = paneViews_2[_i];
-                var renderer = paneView._internal_renderer(this._private__size._internal_h, this._private__size._internal_w);
+        }
+        _private__hitTestPaneView(paneViews, x, y) {
+            for (const paneView of paneViews) {
+                const renderer = paneView._internal_renderer(this._private__size._internal_h, this._private__size._internal_w);
                 if (renderer !== null && renderer._internal_hitTest) {
-                    var result = renderer._internal_hitTest(x, y);
+                    const result = renderer._internal_hitTest(x, y);
                     if (result !== null) {
                         return {
                             _internal_view: paneView,
@@ -9632,14 +9502,14 @@
                 }
             }
             return null;
-        };
-        PaneWidget.prototype._private__recreatePriceAxisWidgets = function () {
+        }
+        _private__recreatePriceAxisWidgets() {
             if (this._private__state === null) {
                 return;
             }
-            var chart = this._private__chart;
-            var leftAxisVisible = this._private__state._internal_leftPriceScale()._internal_options().visible;
-            var rightAxisVisible = this._private__state._internal_rightPriceScale()._internal_options().visible;
+            const chart = this._private__chart;
+            const leftAxisVisible = this._private__state._internal_leftPriceScale()._internal_options().visible;
+            const rightAxisVisible = this._private__state._internal_rightPriceScale()._internal_options().visible;
             if (!leftAxisVisible && this._private__leftPriceAxisWidget !== null) {
                 this._private__leftAxisCell.removeChild(this._private__leftPriceAxisWidget._internal_getElement());
                 this._private__leftPriceAxisWidget._internal_destroy();
@@ -9650,138 +9520,109 @@
                 this._private__rightPriceAxisWidget._internal_destroy();
                 this._private__rightPriceAxisWidget = null;
             }
-            var rendererOptionsProvider = chart._internal_model()._internal_rendererOptionsProvider();
+            const rendererOptionsProvider = chart._internal_model()._internal_rendererOptionsProvider();
             if (leftAxisVisible && this._private__leftPriceAxisWidget === null) {
-                this._private__leftPriceAxisWidget = new PriceAxisWidget(this, chart._internal_options().layout, rendererOptionsProvider, 'left');
+                this._private__leftPriceAxisWidget = new PriceAxisWidget(this, chart._internal_options(), rendererOptionsProvider, 'left');
                 this._private__leftAxisCell.appendChild(this._private__leftPriceAxisWidget._internal_getElement());
             }
             if (rightAxisVisible && this._private__rightPriceAxisWidget === null) {
-                this._private__rightPriceAxisWidget = new PriceAxisWidget(this, chart._internal_options().layout, rendererOptionsProvider, 'right');
+                this._private__rightPriceAxisWidget = new PriceAxisWidget(this, chart._internal_options(), rendererOptionsProvider, 'right');
                 this._private__rightAxisCell.appendChild(this._private__rightPriceAxisWidget._internal_getElement());
             }
-        };
-        PaneWidget.prototype._private__preventScroll = function (event) {
+        }
+        _private__preventScroll(event) {
             return event._internal_isTouch && this._private__longTap || this._private__startTrackPoint !== null;
-        };
-        PaneWidget.prototype._private__correctXCoord = function (x) {
+        }
+        _private__correctXCoord(x) {
             return Math.max(0, Math.min(x, this._private__size._internal_w - 1));
-        };
-        PaneWidget.prototype._private__correctYCoord = function (y) {
+        }
+        _private__correctYCoord(y) {
             return Math.max(0, Math.min(y, this._private__size._internal_h - 1));
-        };
-        PaneWidget.prototype._private__setCrosshairPosition = function (x, y) {
+        }
+        _private__setCrosshairPosition(x, y) {
             this._private__model()._internal_setAndSaveCurrentPosition(this._private__correctXCoord(x), this._private__correctYCoord(y), ensureNotNull(this._private__state));
-        };
-        PaneWidget.prototype._private__clearCrosshairPosition = function () {
+        }
+        _private__clearCrosshairPosition() {
             this._private__model()._internal_clearCurrentPosition();
-        };
-        PaneWidget.prototype._private__tryExitTrackingMode = function () {
+        }
+        _private__tryExitTrackingMode() {
             if (this._private__exitTrackingModeOnNextTry) {
                 this._private__startTrackPoint = null;
                 this._private__clearCrosshairPosition();
             }
-        };
-        PaneWidget.prototype._private__startTrackingMode = function (startTrackPoint, crossHairPosition) {
+        }
+        _private__startTrackingMode(startTrackPoint, crossHairPosition) {
             this._private__startTrackPoint = startTrackPoint;
             this._private__exitTrackingModeOnNextTry = false;
             this._private__setCrosshairPosition(crossHairPosition.x, crossHairPosition.y);
-            var crosshair = this._private__model()._internal_crosshairSource();
+            const crosshair = this._private__model()._internal_crosshairSource();
             this._private__initCrosshairPosition = { x: crosshair._internal_appliedX(), y: crosshair._internal_appliedY() };
-        };
-        PaneWidget.prototype._private__model = function () {
+        }
+        _private__model() {
             return this._private__chart._internal_model();
-        };
-        PaneWidget.prototype._private__finishScroll = function () {
-            var model = this._private__model();
-            var state = this._internal_state();
-            var priceScale = state._internal_defaultPriceScale();
-            model._internal_endScrollPrice(state, priceScale);
-            model._internal_endScrollTime();
-            this._private__startScrollingPos = null;
-            this._private__isScrolling = false;
-        };
-        PaneWidget.prototype._private__endScroll = function (event) {
-            var _this = this;
+        }
+        _private__endScroll(event) {
             if (!this._private__isScrolling) {
                 return;
             }
-            var startAnimationTime = performance.now();
+            const model = this._private__model();
+            const state = this._internal_state();
+            model._internal_endScrollPrice(state, state._internal_defaultPriceScale());
+            this._private__startScrollingPos = null;
+            this._private__isScrolling = false;
+            model._internal_endScrollTime();
             if (this._private__scrollXAnimation !== null) {
-                this._private__scrollXAnimation._internal_start(event._internal_localX, startAnimationTime);
-            }
-            if ((this._private__scrollXAnimation === null || this._private__scrollXAnimation._internal_finished(startAnimationTime))) {
-                // animation is not needed
-                this._private__finishScroll();
-                return;
-            }
-            var model = this._private__model();
-            var timeScale = model._internal_timeScale();
-            var scrollXAnimation = this._private__scrollXAnimation;
-            var animationFn = function () {
-                if ((scrollXAnimation._internal_terminated())) {
-                    // animation terminated, see _terminateKineticAnimation
-                    return;
-                }
-                var now = performance.now();
-                var xAnimationFinished = scrollXAnimation._internal_finished(now);
-                if (!scrollXAnimation._internal_terminated()) {
-                    var prevRightOffset = timeScale._internal_rightOffset();
-                    model._internal_scrollTimeTo(scrollXAnimation._internal_getPosition(now));
-                    if (prevRightOffset === timeScale._internal_rightOffset()) {
-                        xAnimationFinished = true;
-                        _this._private__scrollXAnimation = null;
-                    }
+                const startAnimationTime = performance.now();
+                const timeScale = model._internal_timeScale();
+                this._private__scrollXAnimation._internal_start(timeScale._internal_rightOffset(), startAnimationTime);
+                if (!this._private__scrollXAnimation._internal_finished(startAnimationTime)) {
+                    model._internal_setTimeScaleAnimation(this._private__scrollXAnimation);
                 }
-                if (xAnimationFinished) {
-                    _this._private__finishScroll();
-                    return;
-                }
-                requestAnimationFrame(animationFn);
-            };
-            requestAnimationFrame(animationFn);
-        };
-        PaneWidget.prototype._private__onMouseEvent = function () {
+            }
+        }
+        _private__onMouseEvent() {
             this._private__startTrackPoint = null;
-        };
-        PaneWidget.prototype._private__mouseTouchDownEvent = function () {
+        }
+        _private__mouseTouchDownEvent() {
             if (!this._private__state) {
                 return;
             }
-            this._private__terminateKineticAnimation();
+            this._private__model()._internal_stopTimeScaleAnimation();
             if (document.activeElement !== document.body && document.activeElement !== document.documentElement) {
                 // If any focusable element except the page itself is focused, remove the focus
                 ensureNotNull(document.activeElement).blur();
             }
             else {
                 // Clear selection
-                var selection = document.getSelection();
+                const selection = document.getSelection();
                 if (selection !== null) {
                     selection.removeAllRanges();
                 }
             }
-            var priceScale = this._private__state._internal_defaultPriceScale();
+            const priceScale = this._private__state._internal_defaultPriceScale();
             if (priceScale._internal_isEmpty() || this._private__model()._internal_timeScale()._internal_isEmpty()) {
                 return;
             }
-        };
+        }
         // eslint-disable-next-line complexity
-        PaneWidget.prototype._private__pressedMouseTouchMoveEvent = function (event) {
+        _private__pressedMouseTouchMoveEvent(event) {
             if (this._private__state === null) {
                 return;
             }
-            var model = this._private__model();
-            if (model._internal_timeScale()._internal_isEmpty()) {
+            const model = this._private__model();
+            const timeScale = model._internal_timeScale();
+            if (timeScale._internal_isEmpty()) {
                 return;
             }
-            var chartOptions = this._private__chart._internal_options();
-            var scrollOptions = chartOptions.handleScroll;
-            var kineticScrollOptions = chartOptions.kineticScroll;
+            const chartOptions = this._private__chart._internal_options();
+            const scrollOptions = chartOptions.handleScroll;
+            const kineticScrollOptions = chartOptions.kineticScroll;
             if ((!scrollOptions.pressedMouseMove || event._internal_isTouch) &&
                 (!scrollOptions.horzTouchDrag && !scrollOptions.vertTouchDrag || !event._internal_isTouch)) {
                 return;
             }
-            var priceScale = this._private__state._internal_defaultPriceScale();
-            var now = performance.now();
+            const priceScale = this._private__state._internal_defaultPriceScale();
+            const now = performance.now();
             if (this._private__startScrollingPos === null && !this._private__preventScroll(event)) {
                 this._private__startScrollingPos = {
                     x: event._internal_clientX,
@@ -9791,17 +9632,16 @@
                     _internal_localY: event._internal_localY,
                 };
             }
-            if (this._private__scrollXAnimation !== null) {
-                this._private__scrollXAnimation._internal_addPosition(event._internal_localX, now);
-            }
             if (this._private__startScrollingPos !== null &&
                 !this._private__isScrolling &&
                 (this._private__startScrollingPos.x !== event._internal_clientX || this._private__startScrollingPos.y !== event._internal_clientY)) {
-                if (this._private__scrollXAnimation === null && (event._internal_isTouch && kineticScrollOptions.touch ||
-                    !event._internal_isTouch && kineticScrollOptions.mouse)) {
-                    this._private__scrollXAnimation = new KineticAnimation(0.2 /* MinScrollSpeed */, 7 /* MaxScrollSpeed */, 0.997 /* DumpingCoeff */, 15 /* ScrollMinMove */);
-                    this._private__scrollXAnimation._internal_addPosition(this._private__startScrollingPos._internal_localX, this._private__startScrollingPos._internal_timestamp);
-                    this._private__scrollXAnimation._internal_addPosition(event._internal_localX, now);
+                if (event._internal_isTouch && kineticScrollOptions.touch || !event._internal_isTouch && kineticScrollOptions.mouse) {
+                    const barSpacing = timeScale._internal_barSpacing();
+                    this._private__scrollXAnimation = new KineticAnimation(0.2 /* KineticScrollConstants.MinScrollSpeed */ / barSpacing, 7 /* KineticScrollConstants.MaxScrollSpeed */ / barSpacing, 0.997 /* KineticScrollConstants.DumpingCoeff */, 15 /* KineticScrollConstants.ScrollMinMove */ / barSpacing);
+                    this._private__scrollXAnimation._internal_addPosition(timeScale._internal_rightOffset(), this._private__startScrollingPos._internal_timestamp);
+                }
+                else {
+                    this._private__scrollXAnimation = null;
                 }
                 if (!priceScale._internal_isEmpty()) {
                     model._internal_startScrollPrice(this._private__state, priceScale, event._internal_localY);
@@ -9815,30 +9655,18 @@
                     model._internal_scrollPriceTo(this._private__state, priceScale, event._internal_localY);
                 }
                 model._internal_scrollTimeTo(event._internal_localX);
-            }
-        };
-        PaneWidget.prototype._private__terminateKineticAnimation = function () {
-            var now = performance.now();
-            var xAnimationFinished = this._private__scrollXAnimation === null || this._private__scrollXAnimation._internal_finished(now);
-            if (this._private__scrollXAnimation !== null) {
-                if (!xAnimationFinished) {
-                    this._private__finishScroll();
+                if (this._private__scrollXAnimation !== null) {
+                    this._private__scrollXAnimation._internal_addPosition(timeScale._internal_rightOffset(), now);
                 }
             }
-            if (this._private__scrollXAnimation !== null) {
-                this._private__scrollXAnimation._internal_terminate();
-                this._private__scrollXAnimation = null;
-            }
-        };
-        return PaneWidget;
-    }());
+        }
+    }
 
-    var PriceAxisStub = /** @class */ (function () {
-        function PriceAxisStub(side, options, params, borderVisible, bottomColor) {
-            var _this = this;
+    class PriceAxisStub {
+        constructor(side, options, params, borderVisible, bottomColor) {
             this._private__invalidated = true;
             this._private__size = new Size(0, 0);
-            this._private__canvasConfiguredHandler = function () { return _this._internal_paint(3 /* Full */); };
+            this._private__canvasConfiguredHandler = () => this._internal_paint(3 /* InvalidationLevel.Full */);
             this._private__isLeft = side === 'left';
             this._private__rendererOptionsProvider = params._internal_rendererOptionsProvider;
             this._private__options = options;
@@ -9851,71 +9679,68 @@
             this._private__canvasBinding = createBoundCanvas(this._private__cell, new Size(16, 16));
             this._private__canvasBinding.subscribeCanvasConfigured(this._private__canvasConfiguredHandler);
         }
-        PriceAxisStub.prototype._internal_destroy = function () {
+        _internal_destroy() {
             this._private__canvasBinding.unsubscribeCanvasConfigured(this._private__canvasConfiguredHandler);
             this._private__canvasBinding.destroy();
-        };
-        PriceAxisStub.prototype._internal_getElement = function () {
+        }
+        _internal_getElement() {
             return this._private__cell;
-        };
-        PriceAxisStub.prototype._internal_getSize = function () {
+        }
+        _internal_getSize() {
             return this._private__size;
-        };
-        PriceAxisStub.prototype._internal_setSize = function (size) {
+        }
+        _internal_setSize(size) {
             if (size._internal_w < 0 || size._internal_h < 0) {
                 throw new Error('Try to set invalid size to PriceAxisStub ' + JSON.stringify(size));
             }
             if (!this._private__size._internal_equals(size)) {
                 this._private__size = size;
                 this._private__canvasBinding.resizeCanvas({ width: size._internal_w, height: size._internal_h });
-                this._private__cell.style.width = "".concat(size._internal_w, "px");
-                this._private__cell.style.minWidth = "".concat(size._internal_w, "px"); // for right calculate position of .pane-legend
-                this._private__cell.style.height = "".concat(size._internal_h, "px");
+                this._private__cell.style.width = `${size._internal_w}px`;
+                this._private__cell.style.minWidth = `${size._internal_w}px`; // for right calculate position of .pane-legend
+                this._private__cell.style.height = `${size._internal_h}px`;
                 this._private__invalidated = true;
             }
-        };
-        PriceAxisStub.prototype._internal_paint = function (type) {
-            if (type < 3 /* Full */ && !this._private__invalidated) {
+        }
+        _internal_paint(type) {
+            if (type < 3 /* InvalidationLevel.Full */ && !this._private__invalidated) {
                 return;
             }
             if (this._private__size._internal_w === 0 || this._private__size._internal_h === 0) {
                 return;
             }
             this._private__invalidated = false;
-            var ctx = getContext2D(this._private__canvasBinding.canvas);
+            const ctx = getContext2D(this._private__canvasBinding.canvas);
             this._private__drawBackground(ctx, this._private__canvasBinding.pixelRatio);
             this._private__drawBorder(ctx, this._private__canvasBinding.pixelRatio);
-        };
-        PriceAxisStub.prototype._internal_getImage = function () {
+        }
+        _internal_getImage() {
             return this._private__canvasBinding.canvas;
-        };
-        PriceAxisStub.prototype._private__drawBorder = function (ctx, pixelRatio) {
+        }
+        _private__drawBorder(ctx, pixelRatio) {
             if (!this._private__borderVisible()) {
                 return;
             }
-            var width = this._private__size._internal_w;
+            const width = this._private__size._internal_w;
             ctx.save();
             ctx.fillStyle = this._private__options.timeScale.borderColor;
-            var borderSize = Math.floor(this._private__rendererOptionsProvider._internal_options()._internal_borderSize * pixelRatio);
-            var left = (this._private__isLeft) ? Math.round(width * pixelRatio) - borderSize : 0;
+            const borderSize = Math.floor(this._private__rendererOptionsProvider._internal_options()._internal_borderSize * pixelRatio);
+            const left = (this._private__isLeft) ? Math.round(width * pixelRatio) - borderSize : 0;
             ctx.fillRect(left, 0, borderSize, borderSize);
             ctx.restore();
-        };
-        PriceAxisStub.prototype._private__drawBackground = function (ctx, pixelRatio) {
-            var _this = this;
-            drawScaled(ctx, pixelRatio, function () {
-                clearRect(ctx, 0, 0, _this._private__size._internal_w, _this._private__size._internal_h, _this._private__bottomColor());
+        }
+        _private__drawBackground(ctx, pixelRatio) {
+            drawScaled(ctx, pixelRatio, () => {
+                clearRect(ctx, 0, 0, this._private__size._internal_w, this._private__size._internal_h, this._private__bottomColor());
             });
-        };
-        return PriceAxisStub;
-    }());
+        }
+    }
 
     function markWithGreaterWeight(a, b) {
         return a._internal_weight > b._internal_weight ? a : b;
     }
-    var TimeAxisWidget = /** @class */ (function () {
-        function TimeAxisWidget(chartWidget) {
-            var _this = this;
+    class TimeAxisWidget {
+        constructor(chartWidget) {
             this._private__leftStub = null;
             this._private__rightStub = null;
             this._private__rendererOptions = null;
@@ -9924,14 +9749,14 @@
             this._private__sizeChanged = new Delegate();
             this._private__widthCache = new TextWidthCache(5);
             this._private__isSettingSize = false;
-            this._private__canvasConfiguredHandler = function () {
-                if (!_this._private__isSettingSize) {
-                    _this._private__chart._internal_model()._internal_lightUpdate();
+            this._private__canvasConfiguredHandler = () => {
+                if (!this._private__isSettingSize) {
+                    this._private__chart._internal_model()._internal_lightUpdate();
                 }
             };
-            this._private__topCanvasConfiguredHandler = function () {
-                if (!_this._private__isSettingSize) {
-                    _this._private__chart._internal_model()._internal_lightUpdate();
+            this._private__topCanvasConfiguredHandler = () => {
+                if (!this._private__isSettingSize) {
+                    this._private__chart._internal_model()._internal_lightUpdate();
                 }
             };
             this._private__chart = chartWidget;
@@ -9952,14 +9777,14 @@
             this._private__cell.appendChild(this._private__dv);
             this._private__canvasBinding = createBoundCanvas(this._private__dv, new Size(16, 16));
             this._private__canvasBinding.subscribeCanvasConfigured(this._private__canvasConfiguredHandler);
-            var canvas = this._private__canvasBinding.canvas;
+            const canvas = this._private__canvasBinding.canvas;
             canvas.style.position = 'absolute';
             canvas.style.zIndex = '1';
             canvas.style.left = '0';
             canvas.style.top = '0';
             this._private__topCanvasBinding = createBoundCanvas(this._private__dv, new Size(16, 16));
             this._private__topCanvasBinding.subscribeCanvasConfigured(this._private__topCanvasConfiguredHandler);
-            var topCanvas = this._private__topCanvasBinding.canvas;
+            const topCanvas = this._private__topCanvasBinding.canvas;
             topCanvas.style.position = 'absolute';
             topCanvas.style.zIndex = '2';
             topCanvas.style.left = '0';
@@ -9970,11 +9795,11 @@
             this._private__recreateStubs();
             this._private__chart._internal_model()._internal_priceScalesOptionsChanged()._internal_subscribe(this._private__recreateStubs.bind(this), this);
             this._private__mouseEventHandler = new MouseEventHandler(this._private__topCanvasBinding.canvas, this, {
-                _internal_treatVertTouchDragAsPageScroll: function () { return true; },
-                _internal_treatHorzTouchDragAsPageScroll: function () { return false; },
+                _internal_treatVertTouchDragAsPageScroll: () => true,
+                _internal_treatHorzTouchDragAsPageScroll: () => false,
             });
         }
-        TimeAxisWidget.prototype._internal_destroy = function () {
+        _internal_destroy() {
             this._private__mouseEventHandler._internal_destroy();
             if (this._private__leftStub !== null) {
                 this._private__leftStub._internal_destroy();
@@ -9986,83 +9811,83 @@
             this._private__topCanvasBinding.destroy();
             this._private__canvasBinding.unsubscribeCanvasConfigured(this._private__canvasConfiguredHandler);
             this._private__canvasBinding.destroy();
-        };
-        TimeAxisWidget.prototype._internal_getElement = function () {
+        }
+        _internal_getElement() {
             return this._private__element;
-        };
-        TimeAxisWidget.prototype._internal_leftStub = function () {
+        }
+        _internal_leftStub() {
             return this._private__leftStub;
-        };
-        TimeAxisWidget.prototype._internal_rightStub = function () {
+        }
+        _internal_rightStub() {
             return this._private__rightStub;
-        };
-        TimeAxisWidget.prototype._internal_mouseDownEvent = function (event) {
+        }
+        _internal_mouseDownEvent(event) {
             if (this._private__mouseDown) {
                 return;
             }
             this._private__mouseDown = true;
-            var model = this._private__chart._internal_model();
+            const model = this._private__chart._internal_model();
             if (model._internal_timeScale()._internal_isEmpty() || !this._private__chart._internal_options().handleScale.axisPressedMouseMove.time) {
                 return;
             }
             model._internal_startScaleTime(event._internal_localX);
-        };
-        TimeAxisWidget.prototype._internal_touchStartEvent = function (event) {
+        }
+        _internal_touchStartEvent(event) {
             this._internal_mouseDownEvent(event);
-        };
-        TimeAxisWidget.prototype._internal_mouseDownOutsideEvent = function () {
-            var model = this._private__chart._internal_model();
+        }
+        _internal_mouseDownOutsideEvent() {
+            const model = this._private__chart._internal_model();
             if (!model._internal_timeScale()._internal_isEmpty() && this._private__mouseDown) {
                 this._private__mouseDown = false;
                 if (this._private__chart._internal_options().handleScale.axisPressedMouseMove.time) {
                     model._internal_endScaleTime();
                 }
             }
-        };
-        TimeAxisWidget.prototype._internal_pressedMouseMoveEvent = function (event) {
-            var model = this._private__chart._internal_model();
+        }
+        _internal_pressedMouseMoveEvent(event) {
+            const model = this._private__chart._internal_model();
             if (model._internal_timeScale()._internal_isEmpty() || !this._private__chart._internal_options().handleScale.axisPressedMouseMove.time) {
                 return;
             }
             model._internal_scaleTimeTo(event._internal_localX);
-        };
-        TimeAxisWidget.prototype._internal_touchMoveEvent = function (event) {
+        }
+        _internal_touchMoveEvent(event) {
             this._internal_pressedMouseMoveEvent(event);
-        };
-        TimeAxisWidget.prototype._internal_mouseUpEvent = function () {
+        }
+        _internal_mouseUpEvent() {
             this._private__mouseDown = false;
-            var model = this._private__chart._internal_model();
+            const model = this._private__chart._internal_model();
             if (model._internal_timeScale()._internal_isEmpty() && !this._private__chart._internal_options().handleScale.axisPressedMouseMove.time) {
                 return;
             }
             model._internal_endScaleTime();
-        };
-        TimeAxisWidget.prototype._internal_touchEndEvent = function () {
+        }
+        _internal_touchEndEvent() {
             this._internal_mouseUpEvent();
-        };
-        TimeAxisWidget.prototype._internal_mouseDoubleClickEvent = function () {
-            if (this._private__chart._internal_options().handleScale.axisDoubleClickReset) {
+        }
+        _internal_mouseDoubleClickEvent() {
+            if (this._private__chart._internal_options().handleScale.axisDoubleClickReset.time) {
                 this._private__chart._internal_model()._internal_resetTimeScale();
             }
-        };
-        TimeAxisWidget.prototype._internal_doubleTapEvent = function () {
+        }
+        _internal_doubleTapEvent() {
             this._internal_mouseDoubleClickEvent();
-        };
-        TimeAxisWidget.prototype._internal_mouseEnterEvent = function () {
+        }
+        _internal_mouseEnterEvent() {
             if (this._private__chart._internal_model()._internal_options().handleScale.axisPressedMouseMove.time) {
-                this._private__setCursor(1 /* EwResize */);
+                this._private__setCursor(1 /* CursorType.EwResize */);
             }
-        };
-        TimeAxisWidget.prototype._internal_mouseLeaveEvent = function () {
-            this._private__setCursor(0 /* Default */);
-        };
-        TimeAxisWidget.prototype._internal_getSize = function () {
+        }
+        _internal_mouseLeaveEvent() {
+            this._private__setCursor(0 /* CursorType.Default */);
+        }
+        _internal_getSize() {
             return this._private__size;
-        };
-        TimeAxisWidget.prototype._internal_sizeChanged = function () {
+        }
+        _internal_sizeChanged() {
             return this._private__sizeChanged;
-        };
-        TimeAxisWidget.prototype._internal_setSizes = function (timeAxisSize, leftStubWidth, rightStubWidth) {
+        }
+        _internal_setSizes(timeAxisSize, leftStubWidth, rightStubWidth) {
             if (!this._private__size || !this._private__size._internal_equals(timeAxisSize)) {
                 this._private__size = timeAxisSize;
                 this._private__isSettingSize = true;
@@ -10079,30 +9904,31 @@
             if (this._private__rightStub !== null) {
                 this._private__rightStub._internal_setSize(new Size(rightStubWidth, timeAxisSize._internal_h));
             }
-        };
-        TimeAxisWidget.prototype._internal_optimalHeight = function () {
-            var rendererOptions = this._private__getRendererOptions();
+        }
+        _internal_optimalHeight() {
+            const rendererOptions = this._private__getRendererOptions();
             return Math.ceil(
             // rendererOptions.offsetSize +
             rendererOptions._internal_borderSize +
                 rendererOptions._internal_tickLength +
                 rendererOptions._internal_fontSize +
                 rendererOptions._internal_paddingTop +
-                rendererOptions._internal_paddingBottom);
-        };
-        TimeAxisWidget.prototype._internal_update = function () {
+                rendererOptions._internal_paddingBottom +
+                rendererOptions._internal_labelBottomOffset);
+        }
+        _internal_update() {
             // this call has side-effect - it regenerates marks on the time scale
             this._private__chart._internal_model()._internal_timeScale()._internal_marks();
-        };
-        TimeAxisWidget.prototype._internal_getImage = function () {
+        }
+        _internal_getImage() {
             return this._private__canvasBinding.canvas;
-        };
-        TimeAxisWidget.prototype._internal_paint = function (type) {
-            if (type === 0 /* None */) {
+        }
+        _internal_paint(type) {
+            if (type === 0 /* InvalidationLevel.None */) {
                 return;
             }
-            if (type !== 1 /* Cursor */) {
-                var ctx = getContext2D(this._private__canvasBinding.canvas);
+            if (type !== 1 /* InvalidationLevel.Cursor */) {
+                const ctx = getContext2D(this._private__canvasBinding.canvas);
                 this._private__drawBackground(ctx, this._private__canvasBinding.pixelRatio);
                 this._private__drawBorder(ctx, this._private__canvasBinding.pixelRatio);
                 this._private__drawTickMarks(ctx, this._private__canvasBinding.pixelRatio);
@@ -10116,86 +9942,83 @@
                     this._private__rightStub._internal_paint(type);
                 }
             }
-            var topCtx = getContext2D(this._private__topCanvasBinding.canvas);
-            var pixelRatio = this._private__topCanvasBinding.pixelRatio;
+            const topCtx = getContext2D(this._private__topCanvasBinding.canvas);
+            const pixelRatio = this._private__topCanvasBinding.pixelRatio;
             topCtx.clearRect(0, 0, Math.ceil(this._private__size._internal_w * pixelRatio), Math.ceil(this._private__size._internal_h * pixelRatio));
             this._private__drawLabels([this._private__chart._internal_model()._internal_crosshairSource()], topCtx, pixelRatio);
-        };
-        TimeAxisWidget.prototype._private__drawBackground = function (ctx, pixelRatio) {
-            var _this = this;
-            drawScaled(ctx, pixelRatio, function () {
-                clearRect(ctx, 0, 0, _this._private__size._internal_w, _this._private__size._internal_h, _this._private__chart._internal_model()._internal_backgroundBottomColor());
+        }
+        _private__drawBackground(ctx, pixelRatio) {
+            drawScaled(ctx, pixelRatio, () => {
+                clearRect(ctx, 0, 0, this._private__size._internal_w, this._private__size._internal_h, this._private__chart._internal_model()._internal_backgroundBottomColor());
             });
-        };
-        TimeAxisWidget.prototype._private__drawBorder = function (ctx, pixelRatio) {
+        }
+        _private__drawBorder(ctx, pixelRatio) {
             if (this._private__chart._internal_options().timeScale.borderVisible) {
                 ctx.save();
                 ctx.fillStyle = this._private__lineColor();
-                var borderSize = Math.max(1, Math.floor(this._private__getRendererOptions()._internal_borderSize * pixelRatio));
+                const borderSize = Math.max(1, Math.floor(this._private__getRendererOptions()._internal_borderSize * pixelRatio));
                 ctx.fillRect(0, 0, Math.ceil(this._private__size._internal_w * pixelRatio), borderSize);
                 ctx.restore();
             }
-        };
-        TimeAxisWidget.prototype._private__drawTickMarks = function (ctx, pixelRatio) {
-            var _this = this;
-            var tickMarks = this._private__chart._internal_model()._internal_timeScale()._internal_marks();
+        }
+        _private__drawTickMarks(ctx, pixelRatio) {
+            const timeScale = this._private__chart._internal_model()._internal_timeScale();
+            const tickMarks = timeScale._internal_marks();
             if (!tickMarks || tickMarks.length === 0) {
                 return;
             }
-            var maxWeight = tickMarks.reduce(markWithGreaterWeight, tickMarks[0])._internal_weight;
+            let maxWeight = tickMarks.reduce(markWithGreaterWeight, tickMarks[0])._internal_weight;
             // special case: it looks strange if 15:00 is bold but 14:00 is not
             // so if maxWeight > TickMarkWeight.Hour1 and < TickMarkWeight.Day reduce it to TickMarkWeight.Hour1
-            if (maxWeight > 30 /* Hour1 */ && maxWeight < 50 /* Day */) {
-                maxWeight = 30 /* Hour1 */;
+            if (maxWeight > 30 /* TickMarkWeight.Hour1 */ && maxWeight < 50 /* TickMarkWeight.Day */) {
+                maxWeight = 30 /* TickMarkWeight.Hour1 */;
             }
             ctx.save();
             ctx.strokeStyle = this._private__lineColor();
-            var rendererOptions = this._private__getRendererOptions();
-            var yText = (rendererOptions._internal_borderSize +
+            const rendererOptions = this._private__getRendererOptions();
+            const yText = (rendererOptions._internal_borderSize +
                 rendererOptions._internal_tickLength +
                 rendererOptions._internal_paddingTop +
-                rendererOptions._internal_fontSize -
-                rendererOptions._internal_baselineOffset);
+                rendererOptions._internal_fontSize / 2);
             ctx.textAlign = 'center';
+            ctx.textBaseline = 'middle';
             ctx.fillStyle = this._private__lineColor();
-            var borderSize = Math.floor(this._private__getRendererOptions()._internal_borderSize * pixelRatio);
-            var tickWidth = Math.max(1, Math.floor(pixelRatio));
-            var tickOffset = Math.floor(pixelRatio * 0.5);
-            if (this._private__chart._internal_model()._internal_timeScale()._internal_options().borderVisible) {
+            const tickWidth = Math.max(1, Math.floor(pixelRatio));
+            const tickOffset = Math.floor(pixelRatio * 0.5);
+            const options = timeScale._internal_options();
+            if (options.borderVisible && options.ticksVisible) {
                 ctx.beginPath();
-                var tickLen = Math.round(rendererOptions._internal_tickLength * pixelRatio);
-                for (var index = tickMarks.length; index--;) {
-                    var x = Math.round(tickMarks[index]._internal_coord * pixelRatio);
-                    ctx.rect(x - tickOffset, borderSize, tickWidth, tickLen);
+                const tickLen = Math.round(rendererOptions._internal_tickLength * pixelRatio);
+                for (let index = tickMarks.length; index--;) {
+                    const x = Math.round(tickMarks[index]._internal_coord * pixelRatio);
+                    ctx.rect(x - tickOffset, 0, tickWidth, tickLen);
                 }
                 ctx.fill();
             }
             ctx.fillStyle = this._private__textColor();
-            drawScaled(ctx, pixelRatio, function () {
+            drawScaled(ctx, pixelRatio, () => {
                 // draw base marks
-                ctx.font = _this._private__baseFont();
-                for (var _i = 0, tickMarks_1 = tickMarks; _i < tickMarks_1.length; _i++) {
-                    var tickMark = tickMarks_1[_i];
+                ctx.font = this._private__baseFont();
+                for (const tickMark of tickMarks) {
                     if (tickMark._internal_weight < maxWeight) {
-                        var coordinate = tickMark._internal_needAlignCoordinate ? _this._private__alignTickMarkLabelCoordinate(ctx, tickMark._internal_coord, tickMark._internal_label) : tickMark._internal_coord;
+                        const coordinate = tickMark._internal_needAlignCoordinate ? this._private__alignTickMarkLabelCoordinate(ctx, tickMark._internal_coord, tickMark._internal_label) : tickMark._internal_coord;
                         ctx.fillText(tickMark._internal_label, coordinate, yText);
                     }
                 }
-                ctx.font = _this._private__baseBoldFont();
-                for (var _a = 0, tickMarks_2 = tickMarks; _a < tickMarks_2.length; _a++) {
-                    var tickMark = tickMarks_2[_a];
+                ctx.font = this._private__baseBoldFont();
+                for (const tickMark of tickMarks) {
                     if (tickMark._internal_weight >= maxWeight) {
-                        var coordinate = tickMark._internal_needAlignCoordinate ? _this._private__alignTickMarkLabelCoordinate(ctx, tickMark._internal_coord, tickMark._internal_label) : tickMark._internal_coord;
+                        const coordinate = tickMark._internal_needAlignCoordinate ? this._private__alignTickMarkLabelCoordinate(ctx, tickMark._internal_coord, tickMark._internal_label) : tickMark._internal_coord;
                         ctx.fillText(tickMark._internal_label, coordinate, yText);
                     }
                 }
             });
             ctx.restore();
-        };
-        TimeAxisWidget.prototype._private__alignTickMarkLabelCoordinate = function (ctx, coordinate, labelText) {
-            var labelWidth = this._private__widthCache._internal_measureText(ctx, labelText);
-            var labelWidthHalf = labelWidth / 2;
-            var leftTextCoordinate = Math.floor(coordinate - labelWidthHalf) + 0.5;
+        }
+        _private__alignTickMarkLabelCoordinate(ctx, coordinate, labelText) {
+            const labelWidth = this._private__widthCache._internal_measureText(ctx, labelText);
+            const labelWidthHalf = labelWidth / 2;
+            const leftTextCoordinate = Math.floor(coordinate - labelWidthHalf) + 0.5;
             if (leftTextCoordinate < 0) {
                 coordinate = coordinate + Math.abs(0 - leftTextCoordinate);
             }
@@ -10203,68 +10026,68 @@
                 coordinate = coordinate - Math.abs(this._private__size._internal_w - (leftTextCoordinate + labelWidth));
             }
             return coordinate;
-        };
-        TimeAxisWidget.prototype._private__drawLabels = function (sources, ctx, pixelRatio) {
-            var rendererOptions = this._private__getRendererOptions();
-            for (var _i = 0, sources_1 = sources; _i < sources_1.length; _i++) {
-                var source = sources_1[_i];
-                for (var _a = 0, _b = source._internal_timeAxisViews(); _a < _b.length; _a++) {
-                    var view = _b[_a];
+        }
+        _private__drawLabels(sources, ctx, pixelRatio) {
+            const rendererOptions = this._private__getRendererOptions();
+            for (const source of sources) {
+                for (const view of source._internal_timeAxisViews()) {
                     ctx.save();
                     view._internal_renderer()._internal_draw(ctx, rendererOptions, pixelRatio);
                     ctx.restore();
                 }
             }
-        };
-        TimeAxisWidget.prototype._private__lineColor = function () {
+        }
+        _private__lineColor() {
             return this._private__chart._internal_options().timeScale.borderColor;
-        };
-        TimeAxisWidget.prototype._private__textColor = function () {
+        }
+        _private__textColor() {
             return this._private__options.textColor;
-        };
-        TimeAxisWidget.prototype._private__fontSize = function () {
+        }
+        _private__fontSize() {
             return this._private__options.fontSize;
-        };
-        TimeAxisWidget.prototype._private__baseFont = function () {
+        }
+        _private__baseFont() {
             return makeFont(this._private__fontSize(), this._private__options.fontFamily);
-        };
-        TimeAxisWidget.prototype._private__baseBoldFont = function () {
+        }
+        _private__baseBoldFont() {
             return makeFont(this._private__fontSize(), this._private__options.fontFamily, 'bold');
-        };
-        TimeAxisWidget.prototype._private__getRendererOptions = function () {
+        }
+        _private__getRendererOptions() {
             if (this._private__rendererOptions === null) {
                 this._private__rendererOptions = {
-                    _internal_borderSize: 1 /* BorderSize */,
+                    _internal_borderSize: 1 /* Constants.BorderSize */,
                     _internal_baselineOffset: NaN,
                     _internal_paddingTop: NaN,
                     _internal_paddingBottom: NaN,
                     _internal_paddingHorizontal: NaN,
-                    _internal_tickLength: 3 /* TickLength */,
+                    _internal_tickLength: 5 /* Constants.TickLength */,
                     _internal_fontSize: NaN,
                     _internal_font: '',
                     _internal_widthCache: new TextWidthCache(),
+                    _internal_labelBottomOffset: 0,
                 };
             }
-            var rendererOptions = this._private__rendererOptions;
-            var newFont = this._private__baseFont();
+            const rendererOptions = this._private__rendererOptions;
+            const newFont = this._private__baseFont();
             if (rendererOptions._internal_font !== newFont) {
-                var fontSize = this._private__fontSize();
+                const fontSize = this._private__fontSize();
                 rendererOptions._internal_fontSize = fontSize;
                 rendererOptions._internal_font = newFont;
-                rendererOptions._internal_paddingTop = Math.ceil(fontSize / 2.5);
-                rendererOptions._internal_paddingBottom = rendererOptions._internal_paddingTop;
-                rendererOptions._internal_paddingHorizontal = Math.ceil(fontSize / 2);
-                rendererOptions._internal_baselineOffset = Math.round(this._private__fontSize() / 5);
+                rendererOptions._internal_paddingTop = 3 * fontSize / 12;
+                rendererOptions._internal_paddingBottom = 3 * fontSize / 12;
+                rendererOptions._internal_paddingHorizontal = 9 * fontSize / 12;
+                rendererOptions._internal_baselineOffset = 0;
+                rendererOptions._internal_labelBottomOffset = 4 * fontSize / 12;
                 rendererOptions._internal_widthCache._internal_reset();
             }
             return this._private__rendererOptions;
-        };
-        TimeAxisWidget.prototype._private__setCursor = function (type) {
-            this._private__cell.style.cursor = type === 1 /* EwResize */ ? 'ew-resize' : 'default';
-        };
-        TimeAxisWidget.prototype._private__recreateStubs = function () {
-            var model = this._private__chart._internal_model();
-            var options = model._internal_options();
+        }
+        _private__setCursor(type) {
+            this._private__cell.style.cursor = type === 1 /* CursorType.EwResize */ ? 'ew-resize' : 'default';
+        }
+        _private__recreateStubs() {
+            const model = this._private__chart._internal_model();
+            const options = model._internal_options();
             if (!options.leftPriceScale.visible && this._private__leftStub !== null) {
                 this._private__leftStubCell.removeChild(this._private__leftStub._internal_getElement());
                 this._private__leftStub._internal_destroy();
@@ -10275,14 +10098,14 @@
                 this._private__rightStub._internal_destroy();
                 this._private__rightStub = null;
             }
-            var rendererOptionsProvider = this._private__chart._internal_model()._internal_rendererOptionsProvider();
-            var params = {
+            const rendererOptionsProvider = this._private__chart._internal_model()._internal_rendererOptionsProvider();
+            const params = {
                 _internal_rendererOptionsProvider: rendererOptionsProvider,
             };
-            var borderVisibleGetter = function () {
+            const borderVisibleGetter = () => {
                 return options.leftPriceScale.borderVisible && model._internal_timeScale()._internal_options().borderVisible;
             };
-            var bottomColorGetter = function () { return model._internal_backgroundBottomColor(); };
+            const bottomColorGetter = () => model._internal_backgroundBottomColor();
             if (options.leftPriceScale.visible && this._private__leftStub === null) {
                 this._private__leftStub = new PriceAxisStub('left', options, params, borderVisibleGetter, bottomColorGetter);
                 this._private__leftStubCell.appendChild(this._private__leftStub._internal_getElement());
@@ -10291,12 +10114,12 @@
                 this._private__rightStub = new PriceAxisStub('right', options, params, borderVisibleGetter, bottomColorGetter);
                 this._private__rightStubCell.appendChild(this._private__rightStub._internal_getElement());
             }
-        };
-        return TimeAxisWidget;
-    }());
+        }
+    }
 
-    var ChartWidget = /** @class */ (function () {
-        function ChartWidget(container, options) {
+    const windowsChrome = isChromiumBased() && isWindows();
+    class ChartWidget {
+        constructor(container, options) {
             this._private__paneWidgets = [];
             this._private__drawRafId = 0;
             this._private__height = 0;
@@ -10318,15 +10141,17 @@
             this._private__tableElement.setAttribute('cellspacing', '0');
             this._private__element.appendChild(this._private__tableElement);
             this._private__onWheelBound = this._private__onMousewheel.bind(this);
-            this._private__element.addEventListener('wheel', this._private__onWheelBound, { passive: false });
+            if (shouldSubscribeMouseWheel(this._private__options)) {
+                this._private__setMouseWheelEventListener(true);
+            }
             this._private__model = new ChartModel(this._private__invalidateHandler.bind(this), this._private__options);
             this._internal_model()._internal_crosshairMoved()._internal_subscribe(this._private__onPaneWidgetCrosshairMoved.bind(this), this);
             this._private__timeAxisWidget = new TimeAxisWidget(this);
             this._private__tableElement.appendChild(this._private__timeAxisWidget._internal_getElement());
-            var width = this._private__options.width;
-            var height = this._private__options.height;
+            let width = this._private__options.width;
+            let height = this._private__options.height;
             if (width === 0 || height === 0) {
-                var containerRect = container.getBoundingClientRect();
+                const containerRect = container.getBoundingClientRect();
                 // TODO: Fix it better
                 // on Hi-DPI CSS size * Device Pixel Ratio should be integer to avoid smoothing
                 // For chart widget we decreases because we must be inside container.
@@ -10349,20 +10174,20 @@
             this._private__model._internal_timeScale()._internal_optionsApplied()._internal_subscribe(this._private__model._internal_fullUpdate.bind(this._private__model), this);
             this._private__model._internal_priceScalesOptionsChanged()._internal_subscribe(this._private__model._internal_fullUpdate.bind(this._private__model), this);
         }
-        ChartWidget.prototype._internal_model = function () {
+        _internal_model() {
             return this._private__model;
-        };
-        ChartWidget.prototype._internal_options = function () {
+        }
+        _internal_options() {
             return this._private__options;
-        };
-        ChartWidget.prototype._internal_paneWidgets = function () {
+        }
+        _internal_paneWidgets() {
             return this._private__paneWidgets;
-        };
-        ChartWidget.prototype._internal_timeAxisWidget = function () {
+        }
+        _internal_timeAxisWidget() {
             return this._private__timeAxisWidget;
-        };
-        ChartWidget.prototype._internal_destroy = function () {
-            this._private__element.removeEventListener('wheel', this._private__onWheelBound);
+        }
+        _internal_destroy() {
+            this._private__setMouseWheelEventListener(false);
             if (this._private__drawRafId !== 0) {
                 window.cancelAnimationFrame(this._private__drawRafId);
             }
@@ -10370,8 +10195,7 @@
             this._private__model._internal_timeScale()._internal_optionsApplied()._internal_unsubscribeAll(this);
             this._private__model._internal_priceScalesOptionsChanged()._internal_unsubscribeAll(this);
             this._private__model._internal_destroy();
-            for (var _i = 0, _a = this._private__paneWidgets; _i < _a.length; _i++) {
-                var paneWidget = _a[_i];
+            for (const paneWidget of this._private__paneWidgets) {
                 this._private__tableElement.removeChild(paneWidget._internal_getElement());
                 paneWidget._internal_clicked()._internal_unsubscribeAll(this);
                 paneWidget._internal_destroy();
@@ -10387,74 +10211,77 @@
             }
             this._private__crosshairMoved._internal_destroy();
             this._private__clicked._internal_destroy();
-        };
-        ChartWidget.prototype._internal_resize = function (width, height, forceRepaint) {
-            if (forceRepaint === void 0) { forceRepaint = false; }
+        }
+        _internal_resize(width, height, forceRepaint = false) {
             if (this._private__height === height && this._private__width === width) {
                 return;
             }
             this._private__height = height;
             this._private__width = width;
-            var heightStr = height + 'px';
-            var widthStr = width + 'px';
+            const heightStr = height + 'px';
+            const widthStr = width + 'px';
             ensureNotNull(this._private__element).style.height = heightStr;
             ensureNotNull(this._private__element).style.width = widthStr;
             this._private__tableElement.style.height = heightStr;
             this._private__tableElement.style.width = widthStr;
             if (forceRepaint) {
-                this._private__drawImpl(new InvalidateMask(3 /* Full */));
+                this._private__drawImpl(InvalidateMask._internal_full(), performance.now());
             }
             else {
                 this._private__model._internal_fullUpdate();
             }
-        };
-        ChartWidget.prototype._internal_paint = function (invalidateMask) {
+        }
+        _internal_paint(invalidateMask) {
             if (invalidateMask === undefined) {
-                invalidateMask = new InvalidateMask(3 /* Full */);
+                invalidateMask = InvalidateMask._internal_full();
             }
-            for (var i = 0; i < this._private__paneWidgets.length; i++) {
+            for (let i = 0; i < this._private__paneWidgets.length; i++) {
                 this._private__paneWidgets[i]._internal_paint(invalidateMask._internal_invalidateForPane(i)._internal_level);
             }
             if (this._private__options.timeScale.visible) {
                 this._private__timeAxisWidget._internal_paint(invalidateMask._internal_fullInvalidation());
             }
-        };
-        ChartWidget.prototype._internal_applyOptions = function (options) {
+        }
+        _internal_applyOptions(options) {
+            const currentlyHasMouseWheelListener = shouldSubscribeMouseWheel(this._private__options);
             // we don't need to merge options here because it's done in chart model
             // and since both model and widget share the same object it will be done automatically for widget as well
             // not ideal solution for sure, but it work's for now ¯\_(ツ)_/¯
             this._private__model._internal_applyOptions(options);
+            const shouldHaveMouseWheelListener = shouldSubscribeMouseWheel(this._private__options);
+            if (shouldHaveMouseWheelListener !== currentlyHasMouseWheelListener) {
+                this._private__setMouseWheelEventListener(shouldHaveMouseWheelListener);
+            }
             this._private__updateTimeAxisVisibility();
-            var width = options.width || this._private__width;
-            var height = options.height || this._private__height;
+            const width = options.width || this._private__width;
+            const height = options.height || this._private__height;
             this._internal_resize(width, height);
-        };
-        ChartWidget.prototype._internal_clicked = function () {
+        }
+        _internal_clicked() {
             return this._private__clicked;
-        };
-        ChartWidget.prototype._internal_crosshairMoved = function () {
+        }
+        _internal_crosshairMoved() {
             return this._private__crosshairMoved;
-        };
-        ChartWidget.prototype._internal_takeScreenshot = function () {
-            var _this = this;
+        }
+        _internal_takeScreenshot() {
             if (this._private__invalidateMask !== null) {
-                this._private__drawImpl(this._private__invalidateMask);
+                this._private__drawImpl(this._private__invalidateMask, performance.now());
                 this._private__invalidateMask = null;
             }
             // calculate target size
-            var firstPane = this._private__paneWidgets[0];
-            var targetCanvas = createPreconfiguredCanvas(document, new Size(this._private__width, this._private__height));
-            var ctx = getContext2D(targetCanvas);
-            var pixelRatio = getCanvasDevicePixelRatio(targetCanvas);
-            drawScaled(ctx, pixelRatio, function () {
-                var targetX = 0;
-                var targetY = 0;
-                var drawPriceAxises = function (position) {
-                    for (var paneIndex = 0; paneIndex < _this._private__paneWidgets.length; paneIndex++) {
-                        var paneWidget = _this._private__paneWidgets[paneIndex];
-                        var paneWidgetHeight = paneWidget._internal_getSize()._internal_h;
-                        var priceAxisWidget = ensureNotNull(position === 'left' ? paneWidget._internal_leftPriceAxisWidget() : paneWidget._internal_rightPriceAxisWidget());
-                        var image = priceAxisWidget._internal_getImage();
+            const firstPane = this._private__paneWidgets[0];
+            const targetCanvas = createPreconfiguredCanvas(document, new Size(this._private__width, this._private__height));
+            const ctx = getContext2D(targetCanvas);
+            const pixelRatio = getCanvasDevicePixelRatio(targetCanvas);
+            drawScaled(ctx, pixelRatio, () => {
+                let targetX = 0;
+                let targetY = 0;
+                const drawPriceAxises = (position) => {
+                    for (let paneIndex = 0; paneIndex < this._private__paneWidgets.length; paneIndex++) {
+                        const paneWidget = this._private__paneWidgets[paneIndex];
+                        const paneWidgetHeight = paneWidget._internal_getSize()._internal_h;
+                        const priceAxisWidget = ensureNotNull(position === 'left' ? paneWidget._internal_leftPriceAxisWidget() : paneWidget._internal_rightPriceAxisWidget());
+                        const image = priceAxisWidget._internal_getImage();
                         ctx.drawImage(image, targetX, targetY, priceAxisWidget._internal_getWidth(), paneWidgetHeight);
                         targetY += paneWidgetHeight;
                         // if (paneIndex < this._paneWidgets.length - 1) {
@@ -10467,15 +10294,15 @@
                     }
                 };
                 // draw left price scale if exists
-                if (_this._private__isLeftAxisVisible()) {
+                if (this._private__isLeftAxisVisible()) {
                     drawPriceAxises('left');
                     targetX = ensureNotNull(firstPane._internal_leftPriceAxisWidget())._internal_getWidth();
                 }
                 targetY = 0;
-                for (var paneIndex = 0; paneIndex < _this._private__paneWidgets.length; paneIndex++) {
-                    var paneWidget = _this._private__paneWidgets[paneIndex];
-                    var paneWidgetSize = paneWidget._internal_getSize();
-                    var image = paneWidget._internal_getImage();
+                for (let paneIndex = 0; paneIndex < this._private__paneWidgets.length; paneIndex++) {
+                    const paneWidget = this._private__paneWidgets[paneIndex];
+                    const paneWidgetSize = paneWidget._internal_getSize();
+                    const image = paneWidget._internal_getImage();
                     ctx.drawImage(image, targetX, targetY, paneWidgetSize._internal_w, paneWidgetSize._internal_h);
                     targetY += paneWidgetSize._internal_h;
                     // if (paneIndex < this._paneWidgets.length - 1) {
@@ -10487,27 +10314,27 @@
                     // }
                 }
                 targetX += firstPane._internal_getSize()._internal_w;
-                if (_this._private__isRightAxisVisible()) {
+                if (this._private__isRightAxisVisible()) {
                     targetY = 0;
                     drawPriceAxises('right');
                 }
-                var drawStub = function (position) {
-                    var stub = ensureNotNull(position === 'left' ? _this._private__timeAxisWidget._internal_leftStub() : _this._private__timeAxisWidget._internal_rightStub());
-                    var size = stub._internal_getSize();
-                    var image = stub._internal_getImage();
+                const drawStub = (position) => {
+                    const stub = ensureNotNull(position === 'left' ? this._private__timeAxisWidget._internal_leftStub() : this._private__timeAxisWidget._internal_rightStub());
+                    const size = stub._internal_getSize();
+                    const image = stub._internal_getImage();
                     ctx.drawImage(image, targetX, targetY, size._internal_w, size._internal_h);
                 };
                 // draw time scale
-                if (_this._private__options.timeScale.visible) {
+                if (this._private__options.timeScale.visible) {
                     targetX = 0;
-                    if (_this._private__isLeftAxisVisible()) {
+                    if (this._private__isLeftAxisVisible()) {
                         drawStub('left');
                         targetX = ensureNotNull(firstPane._internal_leftPriceAxisWidget())._internal_getWidth();
                     }
-                    var size = _this._private__timeAxisWidget._internal_getSize();
-                    var image = _this._private__timeAxisWidget._internal_getImage();
+                    const size = this._private__timeAxisWidget._internal_getSize();
+                    const image = this._private__timeAxisWidget._internal_getImage();
                     ctx.drawImage(image, targetX, targetY, size._internal_w, size._internal_h);
-                    if (_this._private__isRightAxisVisible()) {
+                    if (this._private__isRightAxisVisible()) {
                         targetX += firstPane._internal_getSize()._internal_w;
                         drawStub('right');
                         ctx.restore();
@@ -10515,11 +10342,8 @@
                 }
             });
             return targetCanvas;
-        };
-        ChartWidget.prototype._internal_getPriceAxisWidth = function (position) {
-            if (position === 'none') {
-                return 0;
-            }
+        }
+        _internal_getPriceAxisWidth(position) {
             if (position === 'left' && !this._private__isLeftAxisVisible()) {
                 return 0;
             }
@@ -10532,18 +10356,17 @@
             // we don't need to worry about exactly pane widget here
             // because all pane widgets have the same width of price axis widget
             // see _adjustSizeImpl
-            var priceAxisWidget = position === 'left'
+            const priceAxisWidget = position === 'left'
                 ? this._private__paneWidgets[0]._internal_leftPriceAxisWidget()
                 : this._private__paneWidgets[0]._internal_rightPriceAxisWidget();
             return ensureNotNull(priceAxisWidget)._internal_getWidth();
-        };
+        }
         // eslint-disable-next-line complexity
-        ChartWidget.prototype._private__adjustSizeImpl = function () {
-            var totalStretch = 0;
-            var leftPriceAxisWidth = 0;
-            var rightPriceAxisWidth = 0;
-            for (var _i = 0, _a = this._private__paneWidgets; _i < _a.length; _i++) {
-                var paneWidget = _a[_i];
+        _private__adjustSizeImpl() {
+            let totalStretch = 0;
+            let leftPriceAxisWidth = 0;
+            let rightPriceAxisWidth = 0;
+            for (const paneWidget of this._private__paneWidgets) {
                 if (this._private__isLeftAxisVisible()) {
                     leftPriceAxisWidth = Math.max(leftPriceAxisWidth, ensureNotNull(paneWidget._internal_leftPriceAxisWidget())._internal_optimalWidth());
                 }
@@ -10552,28 +10375,28 @@
                 }
                 totalStretch += paneWidget._internal_stretchFactor();
             }
-            var width = this._private__width;
-            var height = this._private__height;
-            var paneWidth = Math.max(width - leftPriceAxisWidth - rightPriceAxisWidth, 0);
+            const width = this._private__width;
+            const height = this._private__height;
+            const paneWidth = Math.max(width - leftPriceAxisWidth - rightPriceAxisWidth, 0);
             // const separatorCount = this._paneSeparators.length;
             // const separatorHeight = SEPARATOR_HEIGHT;
-            var separatorsHeight = 0; // separatorHeight * separatorCount;
-            var timeAxisVisible = this._private__options.timeScale.visible;
-            var timeAxisHeight = timeAxisVisible ? this._private__timeAxisWidget._internal_optimalHeight() : 0;
+            const separatorsHeight = 0; // separatorHeight * separatorCount;
+            const timeAxisVisible = this._private__options.timeScale.visible;
+            let timeAxisHeight = timeAxisVisible ? this._private__timeAxisWidget._internal_optimalHeight() : 0;
             // TODO: Fix it better
             // on Hi-DPI CSS size * Device Pixel Ratio should be integer to avoid smoothing
             if (timeAxisHeight % 2) {
                 timeAxisHeight += 1;
             }
-            var otherWidgetHeight = separatorsHeight + timeAxisHeight;
-            var totalPaneHeight = height < otherWidgetHeight ? 0 : height - otherWidgetHeight;
-            var stretchPixels = totalPaneHeight / totalStretch;
-            var accumulatedHeight = 0;
-            for (var paneIndex = 0; paneIndex < this._private__paneWidgets.length; ++paneIndex) {
-                var paneWidget = this._private__paneWidgets[paneIndex];
+            const otherWidgetHeight = separatorsHeight + timeAxisHeight;
+            const totalPaneHeight = height < otherWidgetHeight ? 0 : height - otherWidgetHeight;
+            const stretchPixels = totalPaneHeight / totalStretch;
+            let accumulatedHeight = 0;
+            for (let paneIndex = 0; paneIndex < this._private__paneWidgets.length; ++paneIndex) {
+                const paneWidget = this._private__paneWidgets[paneIndex];
                 paneWidget._internal_setState(this._private__model._internal_panes()[paneIndex]);
-                var paneHeight = 0;
-                var calculatePaneHeight = 0;
+                let paneHeight = 0;
+                let calculatePaneHeight = 0;
                 if (paneIndex === this._private__paneWidgets.length - 1) {
                     calculatePaneHeight = totalPaneHeight - accumulatedHeight;
                 }
@@ -10601,106 +10424,123 @@
             if (this._private__rightPriceAxisWidth !== rightPriceAxisWidth) {
                 this._private__rightPriceAxisWidth = rightPriceAxisWidth;
             }
-        };
-        ChartWidget.prototype._private__onMousewheel = function (event) {
-            var deltaX = event.deltaX / 100;
-            var deltaY = -(event.deltaY / 100);
-            if ((deltaX === 0 || !this._private__options.handleScroll.mouseWheel) &&
-                (deltaY === 0 || !this._private__options.handleScale.mouseWheel)) {
+        }
+        _private__setMouseWheelEventListener(add) {
+            if (add) {
+                this._private__element.addEventListener('wheel', this._private__onWheelBound, { passive: false });
                 return;
             }
-            if (event.cancelable) {
-                event.preventDefault();
-            }
+            this._private__element.removeEventListener('wheel', this._private__onWheelBound);
+        }
+        _private__determineWheelSpeedAdjustment(event) {
             switch (event.deltaMode) {
                 case event.DOM_DELTA_PAGE:
                     // one screen at time scroll mode
-                    deltaX *= 120;
-                    deltaY *= 120;
-                    break;
+                    return 120;
                 case event.DOM_DELTA_LINE:
                     // one line at time scroll mode
-                    deltaX *= 32;
-                    deltaY *= 32;
-                    break;
+                    return 32;
+            }
+            if (!windowsChrome) {
+                return 1;
+            }
+            // Chromium on Windows has a bug where the scroll speed isn't correctly
+            // adjusted for high density displays. We need to correct for this so that
+            // scroll speed is consistent between browsers.
+            // https://bugs.chromium.org/p/chromium/issues/detail?id=1001735
+            // https://bugs.chromium.org/p/chromium/issues/detail?id=1207308
+            return (1 / window.devicePixelRatio);
+        }
+        _private__onMousewheel(event) {
+            if ((event.deltaX === 0 || !this._private__options.handleScroll.mouseWheel) &&
+                (event.deltaY === 0 || !this._private__options.handleScale.mouseWheel)) {
+                return;
+            }
+            const scrollSpeedAdjustment = this._private__determineWheelSpeedAdjustment(event);
+            const deltaX = scrollSpeedAdjustment * event.deltaX / 100;
+            const deltaY = -(scrollSpeedAdjustment * event.deltaY / 100);
+            if (event.cancelable) {
+                event.preventDefault();
             }
             if (deltaY !== 0 && this._private__options.handleScale.mouseWheel) {
-                var zoomScale = Math.sign(deltaY) * Math.min(1, Math.abs(deltaY));
-                var scrollPosition = event.clientX - this._private__element.getBoundingClientRect().left;
+                const zoomScale = Math.sign(deltaY) * Math.min(1, Math.abs(deltaY));
+                const scrollPosition = event.clientX - this._private__element.getBoundingClientRect().left;
                 this._internal_model()._internal_zoomTime(scrollPosition, zoomScale);
             }
             if (deltaX !== 0 && this._private__options.handleScroll.mouseWheel) {
                 this._internal_model()._internal_scrollChart(deltaX * -80); // 80 is a made up coefficient, and minus is for the "natural" scroll
             }
-        };
-        ChartWidget.prototype._private__drawImpl = function (invalidateMask) {
+        }
+        _private__drawImpl(invalidateMask, time) {
             var _a;
-            var invalidationType = invalidateMask._internal_fullInvalidation();
+            const invalidationType = invalidateMask._internal_fullInvalidation();
             // actions for full invalidation ONLY (not shared with light)
-            if (invalidationType === 3 /* Full */) {
+            if (invalidationType === 3 /* InvalidationLevel.Full */) {
                 this._private__updateGui();
             }
             // light or full invalidate actions
-            if (invalidationType === 3 /* Full */ ||
-                invalidationType === 2 /* Light */) {
+            if (invalidationType === 3 /* InvalidationLevel.Full */ ||
+                invalidationType === 2 /* InvalidationLevel.Light */) {
                 this._private__applyMomentaryAutoScale(invalidateMask);
-                this._private__applyTimeScaleInvalidations(invalidateMask);
+                this._private__applyTimeScaleInvalidations(invalidateMask, time);
                 this._private__timeAxisWidget._internal_update();
-                this._private__paneWidgets.forEach(function (pane) {
+                this._private__paneWidgets.forEach((pane) => {
                     pane._internal_updatePriceAxisWidgets();
                 });
                 // In the case a full invalidation has been postponed during the draw, reapply
                 // the timescale invalidations. A full invalidation would mean there is a change
                 // in the timescale width (caused by price scale changes) that needs to be drawn
                 // right away to avoid flickering.
-                if (((_a = this._private__invalidateMask) === null || _a === void 0 ? void 0 : _a._internal_fullInvalidation()) === 3 /* Full */) {
+                if (((_a = this._private__invalidateMask) === null || _a === void 0 ? void 0 : _a._internal_fullInvalidation()) === 3 /* InvalidationLevel.Full */) {
                     this._private__invalidateMask._internal_merge(invalidateMask);
                     this._private__updateGui();
                     this._private__applyMomentaryAutoScale(this._private__invalidateMask);
-                    this._private__applyTimeScaleInvalidations(this._private__invalidateMask);
+                    this._private__applyTimeScaleInvalidations(this._private__invalidateMask, time);
                     invalidateMask = this._private__invalidateMask;
                     this._private__invalidateMask = null;
                 }
             }
             this._internal_paint(invalidateMask);
-        };
-        ChartWidget.prototype._private__applyTimeScaleInvalidations = function (invalidateMask) {
-            var timeScaleInvalidations = invalidateMask._internal_timeScaleInvalidations();
-            for (var _i = 0, timeScaleInvalidations_1 = timeScaleInvalidations; _i < timeScaleInvalidations_1.length; _i++) {
-                var tsInvalidation = timeScaleInvalidations_1[_i];
-                this._private__applyTimeScaleInvalidation(tsInvalidation);
+        }
+        _private__applyTimeScaleInvalidations(invalidateMask, time) {
+            for (const tsInvalidation of invalidateMask._internal_timeScaleInvalidations()) {
+                this._private__applyTimeScaleInvalidation(tsInvalidation, time);
             }
-        };
-        ChartWidget.prototype._private__applyMomentaryAutoScale = function (invalidateMask) {
-            var panes = this._private__model._internal_panes();
-            for (var i = 0; i < panes.length; i++) {
+        }
+        _private__applyMomentaryAutoScale(invalidateMask) {
+            const panes = this._private__model._internal_panes();
+            for (let i = 0; i < panes.length; i++) {
                 if (invalidateMask._internal_invalidateForPane(i)._internal_autoScale) {
                     panes[i]._internal_momentaryAutoScale();
                 }
             }
-        };
-        ChartWidget.prototype._private__applyTimeScaleInvalidation = function (invalidation) {
-            var timeScale = this._private__model._internal_timeScale();
+        }
+        _private__applyTimeScaleInvalidation(invalidation, time) {
+            const timeScale = this._private__model._internal_timeScale();
             switch (invalidation._internal_type) {
-                case 0 /* FitContent */:
+                case 0 /* TimeScaleInvalidationType.FitContent */:
                     timeScale._internal_fitContent();
                     break;
-                case 1 /* ApplyRange */:
+                case 1 /* TimeScaleInvalidationType.ApplyRange */:
                     timeScale._internal_setLogicalRange(invalidation._internal_value);
                     break;
-                case 2 /* ApplyBarSpacing */:
+                case 2 /* TimeScaleInvalidationType.ApplyBarSpacing */:
                     timeScale._internal_setBarSpacing(invalidation._internal_value);
                     break;
-                case 3 /* ApplyRightOffset */:
+                case 3 /* TimeScaleInvalidationType.ApplyRightOffset */:
                     timeScale._internal_setRightOffset(invalidation._internal_value);
                     break;
-                case 4 /* Reset */:
+                case 4 /* TimeScaleInvalidationType.Reset */:
                     timeScale._internal_restoreDefault();
                     break;
+                case 5 /* TimeScaleInvalidationType.Animation */:
+                    if (!invalidation._internal_value._internal_finished(time)) {
+                        timeScale._internal_setRightOffset(invalidation._internal_value._internal_getPosition(time));
+                    }
+                    break;
             }
-        };
-        ChartWidget.prototype._private__invalidateHandler = function (invalidateMask) {
-            var _this = this;
+        }
+        _private__invalidateHandler(invalidateMask) {
             if (this._private__invalidateMask !== null) {
                 this._private__invalidateMask._internal_merge(invalidateMask);
             }
@@ -10709,31 +10549,37 @@
             }
             if (!this._private__drawPlanned) {
                 this._private__drawPlanned = true;
-                this._private__drawRafId = window.requestAnimationFrame(function () {
-                    _this._private__drawPlanned = false;
-                    _this._private__drawRafId = 0;
-                    if (_this._private__invalidateMask !== null) {
-                        var mask = _this._private__invalidateMask;
-                        _this._private__invalidateMask = null;
-                        _this._private__drawImpl(mask);
+                this._private__drawRafId = window.requestAnimationFrame((time) => {
+                    this._private__drawPlanned = false;
+                    this._private__drawRafId = 0;
+                    if (this._private__invalidateMask !== null) {
+                        const mask = this._private__invalidateMask;
+                        this._private__invalidateMask = null;
+                        this._private__drawImpl(mask, time);
+                        for (const tsInvalidation of mask._internal_timeScaleInvalidations()) {
+                            if (tsInvalidation._internal_type === 5 /* TimeScaleInvalidationType.Animation */ && !tsInvalidation._internal_value._internal_finished(time)) {
+                                this._internal_model()._internal_setTimeScaleAnimation(tsInvalidation._internal_value);
+                                break;
+                            }
+                        }
                     }
                 });
             }
-        };
-        ChartWidget.prototype._private__updateGui = function () {
+        }
+        _private__updateGui() {
             this._private__syncGuiWithModel();
-        };
+        }
         // private _destroySeparator(separator: PaneSeparator): void {
         // 	this._tableElement.removeChild(separator.getElement());
         // 	separator.destroy();
         // }
-        ChartWidget.prototype._private__syncGuiWithModel = function () {
-            var panes = this._private__model._internal_panes();
-            var targetPaneWidgetsCount = panes.length;
-            var actualPaneWidgetsCount = this._private__paneWidgets.length;
+        _private__syncGuiWithModel() {
+            const panes = this._private__model._internal_panes();
+            const targetPaneWidgetsCount = panes.length;
+            const actualPaneWidgetsCount = this._private__paneWidgets.length;
             // Remove (if needed) pane widgets and separators
-            for (var i = targetPaneWidgetsCount; i < actualPaneWidgetsCount; i++) {
-                var paneWidget = ensureDefined(this._private__paneWidgets.pop());
+            for (let i = targetPaneWidgetsCount; i < actualPaneWidgetsCount; i++) {
+                const paneWidget = ensureDefined(this._private__paneWidgets.pop());
                 this._private__tableElement.removeChild(paneWidget._internal_getElement());
                 paneWidget._internal_clicked()._internal_unsubscribeAll(this);
                 paneWidget._internal_destroy();
@@ -10743,8 +10589,8 @@
                 // }
             }
             // Create (if needed) new pane widgets and separators
-            for (var i = actualPaneWidgetsCount; i < targetPaneWidgetsCount; i++) {
-                var paneWidget = new PaneWidget(this, panes[i]);
+            for (let i = actualPaneWidgetsCount; i < targetPaneWidgetsCount; i++) {
+                const paneWidget = new PaneWidget(this, panes[i]);
                 paneWidget._internal_clicked()._internal_subscribe(this._private__onPaneWidgetClicked.bind(this), this);
                 this._private__paneWidgets.push(paneWidget);
                 // create and insert separator
@@ -10756,9 +10602,9 @@
                 // insert paneWidget
                 this._private__tableElement.insertBefore(paneWidget._internal_getElement(), this._private__timeAxisWidget._internal_getElement());
             }
-            for (var i = 0; i < targetPaneWidgetsCount; i++) {
-                var state = panes[i];
-                var paneWidget = this._private__paneWidgets[i];
+            for (let i = 0; i < targetPaneWidgetsCount; i++) {
+                const state = panes[i];
+                const paneWidget = this._private__paneWidgets[i];
                 if (paneWidget._internal_state() !== state) {
                     paneWidget._internal_setState(state);
                 }
@@ -10768,61 +10614,60 @@
             }
             this._private__updateTimeAxisVisibility();
             this._private__adjustSizeImpl();
-        };
-        ChartWidget.prototype._private__getMouseEventParamsImpl = function (index, point) {
-            var seriesPrices = new Map();
+        }
+        _private__getMouseEventParamsImpl(index, point) {
+            var _a;
+            const seriesData = new Map();
             if (index !== null) {
-                var serieses = this._private__model._internal_serieses();
-                serieses.forEach(function (s) {
+                const serieses = this._private__model._internal_serieses();
+                serieses.forEach((s) => {
                     // TODO: replace with search left
-                    var prices = s._internal_dataAt(index);
-                    if (prices !== null) {
-                        seriesPrices.set(s, prices);
+                    const data = s._internal_bars()._internal_search(index);
+                    if (data !== null) {
+                        seriesData.set(s, data);
                     }
                 });
             }
-            var clientTime;
+            let clientTime;
             if (index !== null) {
-                var timePoint = this._private__model._internal_timeScale()._internal_indexToTime(index);
-                if (timePoint !== null) {
+                const timePoint = (_a = this._private__model._internal_timeScale()._internal_indexToTimeScalePoint(index)) === null || _a === void 0 ? void 0 : _a._internal_originalTime;
+                if (timePoint !== undefined) {
                     clientTime = timePoint;
                 }
             }
-            var hoveredSource = this._internal_model()._internal_hoveredSource();
-            var hoveredSeries = hoveredSource !== null && hoveredSource._internal_source instanceof Series
+            const hoveredSource = this._internal_model()._internal_hoveredSource();
+            const hoveredSeries = hoveredSource !== null && hoveredSource._internal_source instanceof Series
                 ? hoveredSource._internal_source
                 : undefined;
-            var hoveredObject = hoveredSource !== null && hoveredSource._internal_object !== undefined
+            const hoveredObject = hoveredSource !== null && hoveredSource._internal_object !== undefined
                 ? hoveredSource._internal_object._internal_externalId
                 : undefined;
             return {
                 _internal_time: clientTime,
-                _internal_point: point || undefined,
+                _internal_index: index !== null && index !== void 0 ? index : undefined,
+                _internal_point: point !== null && point !== void 0 ? point : undefined,
                 _internal_hoveredSeries: hoveredSeries,
-                _internal_seriesPrices: seriesPrices,
+                _internal_seriesData: seriesData,
                 _internal_hoveredObject: hoveredObject,
             };
-        };
-        ChartWidget.prototype._private__onPaneWidgetClicked = function (time, point) {
-            var _this = this;
-            this._private__clicked._internal_fire(function () { return _this._private__getMouseEventParamsImpl(time, point); });
-        };
-        ChartWidget.prototype._private__onPaneWidgetCrosshairMoved = function (time, point) {
-            var _this = this;
-            this._private__crosshairMoved._internal_fire(function () { return _this._private__getMouseEventParamsImpl(time, point); });
-        };
-        ChartWidget.prototype._private__updateTimeAxisVisibility = function () {
-            var display = this._private__options.timeScale.visible ? '' : 'none';
+        }
+        _private__onPaneWidgetClicked(time, point) {
+            this._private__clicked._internal_fire(() => this._private__getMouseEventParamsImpl(time, point));
+        }
+        _private__onPaneWidgetCrosshairMoved(time, point) {
+            this._private__crosshairMoved._internal_fire(() => this._private__getMouseEventParamsImpl(time, point));
+        }
+        _private__updateTimeAxisVisibility() {
+            const display = this._private__options.timeScale.visible ? '' : 'none';
             this._private__timeAxisWidget._internal_getElement().style.display = display;
-        };
-        ChartWidget.prototype._private__isLeftAxisVisible = function () {
+        }
+        _private__isLeftAxisVisible() {
             return this._private__paneWidgets[0]._internal_state()._internal_leftPriceScale()._internal_options().visible;
-        };
-        ChartWidget.prototype._private__isRightAxisVisible = function () {
+        }
+        _private__isRightAxisVisible() {
             return this._private__paneWidgets[0]._internal_state()._internal_rightPriceScale()._internal_options().visible;
-        };
-        return ChartWidget;
-    }());
+        }
+    }
     function disableSelection(element) {
         element.style.userSelect = 'none';
         // eslint-disable-next-line deprecation/deprecation
@@ -10834,53 +10679,71 @@
         // eslint-disable-next-line @typescript-eslint/no-explicit-any,@typescript-eslint/no-unsafe-member-access
         element.style.webkitTapHighlightColor = 'transparent';
     }
+    function shouldSubscribeMouseWheel(options) {
+        return Boolean(options.handleScroll.mouseWheel || options.handleScale.mouseWheel);
+    }
 
-    /// <reference types="_build-time-constants" />
-    function warn(msg) {
-        {
-            // eslint-disable-next-line no-console
-            console.warn(msg);
+    function getColoredLineBasedSeriesPlotRow(time, index, item, originalTime) {
+        const val = item.value;
+        const res = { _internal_index: index, _internal_time: time, _internal_value: [val, val, val, val], _internal_originalTime: originalTime };
+        if (item.color !== undefined) {
+            res._internal_color = item.color;
         }
+        return res;
     }
-
-    function getLineBasedSeriesPlotRow(time, index, item) {
-        var val = item.value;
-        return { _internal_index: index, _internal_time: time, _internal_value: [val, val, val, val] };
+    function getAreaSeriesPlotRow(time, index, item, originalTime) {
+        const val = item.value;
+        const res = { _internal_index: index, _internal_time: time, _internal_value: [val, val, val, val], _internal_originalTime: originalTime };
+        if (item.lineColor !== undefined) {
+            res._internal_lineColor = item.lineColor;
+        }
+        if (item.topColor !== undefined) {
+            res._internal_topColor = item.topColor;
+        }
+        if (item.bottomColor !== undefined) {
+            res._internal_bottomColor = item.bottomColor;
+        }
+        return res;
     }
-    function getColoredLineBasedSeriesPlotRow(time, index, item) {
-        var val = item.value;
-        var res = { _internal_index: index, _internal_time: time, _internal_value: [val, val, val, val] };
-        // 'color' here is public property (from API) so we can use `in` here safely
-        // eslint-disable-next-line no-restricted-syntax
-        if ('color' in item && item.color !== undefined) {
-            res._internal_color = item.color;
+    function getBaselineSeriesPlotRow(time, index, item, originalTime) {
+        const val = item.value;
+        const res = { _internal_index: index, _internal_time: time, _internal_value: [val, val, val, val], _internal_originalTime: originalTime };
+        if (item.topLineColor !== undefined) {
+            res._internal_topLineColor = item.topLineColor;
+        }
+        if (item.bottomLineColor !== undefined) {
+            res._internal_bottomLineColor = item.bottomLineColor;
+        }
+        if (item.topFillColor1 !== undefined) {
+            res._internal_topFillColor1 = item.topFillColor1;
+        }
+        if (item.topFillColor2 !== undefined) {
+            res._internal_topFillColor2 = item.topFillColor2;
+        }
+        if (item.bottomFillColor1 !== undefined) {
+            res._internal_bottomFillColor1 = item.bottomFillColor1;
+        }
+        if (item.bottomFillColor2 !== undefined) {
+            res._internal_bottomFillColor2 = item.bottomFillColor2;
         }
         return res;
     }
-    function getBarSeriesPlotRow(time, index, item) {
-        var res = { _internal_index: index, _internal_time: time, _internal_value: [item.open, item.high, item.low, item.close] };
-        // 'color' here is public property (from API) so we can use `in` here safely
-        // eslint-disable-next-line no-restricted-syntax
-        if ('color' in item && item.color !== undefined) {
+    function getBarSeriesPlotRow(time, index, item, originalTime) {
+        const res = { _internal_index: index, _internal_time: time, _internal_value: [item.open, item.high, item.low, item.close], _internal_originalTime: originalTime };
+        if (item.color !== undefined) {
             res._internal_color = item.color;
         }
         return res;
     }
-    function getCandlestickSeriesPlotRow(time, index, item) {
-        var res = { _internal_index: index, _internal_time: time, _internal_value: [item.open, item.high, item.low, item.close] };
-        // 'color' here is public property (from API) so we can use `in` here safely
-        // eslint-disable-next-line no-restricted-syntax
-        if ('color' in item && item.color !== undefined) {
+    function getCandlestickSeriesPlotRow(time, index, item, originalTime) {
+        const res = { _internal_index: index, _internal_time: time, _internal_value: [item.open, item.high, item.low, item.close], _internal_originalTime: originalTime };
+        if (item.color !== undefined) {
             res._internal_color = item.color;
         }
-        // 'borderColor' here is public property (from API) so we can use `in` here safely
-        // eslint-disable-next-line no-restricted-syntax
-        if ('borderColor' in item && item.borderColor !== undefined) {
+        if (item.borderColor !== undefined) {
             res._internal_borderColor = item.borderColor;
         }
-        // 'wickColor' here is public property (from API) so we can use `in` here safely
-        // eslint-disable-next-line no-restricted-syntax
-        if ('wickColor' in item && item.wickColor !== undefined) {
+        if (item.wickColor !== undefined) {
             res._internal_wickColor = item.wickColor;
         }
         return res;
@@ -10889,18 +10752,18 @@
         return row._internal_value !== undefined;
     }
     function wrapWhitespaceData(createPlotRowFn) {
-        return function (time, index, bar) {
+        return (time, index, bar, originalTime) => {
             if (isWhitespaceData(bar)) {
-                return { _internal_time: time, _internal_index: index };
+                return { _internal_time: time, _internal_index: index, _internal_originalTime: originalTime };
             }
-            return createPlotRowFn(time, index, bar);
+            return createPlotRowFn(time, index, bar, originalTime);
         };
     }
-    var seriesPlotRowFnMap = {
+    const seriesPlotRowFnMap = {
         Candlestick: wrapWhitespaceData(getCandlestickSeriesPlotRow),
         Bar: wrapWhitespaceData(getBarSeriesPlotRow),
-        Area: wrapWhitespaceData(getLineBasedSeriesPlotRow),
-        Baseline: wrapWhitespaceData(getLineBasedSeriesPlotRow),
+        Area: wrapWhitespaceData(getAreaSeriesPlotRow),
+        Baseline: wrapWhitespaceData(getBaselineSeriesPlotRow),
         Histogram: wrapWhitespaceData(getColoredLineBasedSeriesPlotRow),
         Line: wrapWhitespaceData(getColoredLineBasedSeriesPlotRow),
     };
@@ -10917,44 +10780,43 @@
     function seconds(count) {
         return count * 1000;
     }
-    var intradayWeightDivisors = [
-        { _internal_divisor: seconds(1), _internal_weight: 10 /* Second */ },
-        { _internal_divisor: minutes(1), _internal_weight: 20 /* Minute1 */ },
-        { _internal_divisor: minutes(5), _internal_weight: 21 /* Minute5 */ },
-        { _internal_divisor: minutes(30), _internal_weight: 22 /* Minute30 */ },
-        { _internal_divisor: hours(1), _internal_weight: 30 /* Hour1 */ },
-        { _internal_divisor: hours(3), _internal_weight: 31 /* Hour3 */ },
-        { _internal_divisor: hours(6), _internal_weight: 32 /* Hour6 */ },
-        { _internal_divisor: hours(12), _internal_weight: 33 /* Hour12 */ },
+    const intradayWeightDivisors = [
+        { _internal_divisor: seconds(1), _internal_weight: 10 /* TickMarkWeight.Second */ },
+        { _internal_divisor: minutes(1), _internal_weight: 20 /* TickMarkWeight.Minute1 */ },
+        { _internal_divisor: minutes(5), _internal_weight: 21 /* TickMarkWeight.Minute5 */ },
+        { _internal_divisor: minutes(30), _internal_weight: 22 /* TickMarkWeight.Minute30 */ },
+        { _internal_divisor: hours(1), _internal_weight: 30 /* TickMarkWeight.Hour1 */ },
+        { _internal_divisor: hours(3), _internal_weight: 31 /* TickMarkWeight.Hour3 */ },
+        { _internal_divisor: hours(6), _internal_weight: 32 /* TickMarkWeight.Hour6 */ },
+        { _internal_divisor: hours(12), _internal_weight: 33 /* TickMarkWeight.Hour12 */ },
     ];
     function weightByTime(currentDate, prevDate) {
         if (currentDate.getUTCFullYear() !== prevDate.getUTCFullYear()) {
-            return 70 /* Year */;
+            return 70 /* TickMarkWeight.Year */;
         }
         else if (currentDate.getUTCMonth() !== prevDate.getUTCMonth()) {
-            return 60 /* Month */;
+            return 60 /* TickMarkWeight.Month */;
         }
         else if (currentDate.getUTCDate() !== prevDate.getUTCDate()) {
-            return 50 /* Day */;
+            return 50 /* TickMarkWeight.Day */;
         }
-        for (var i = intradayWeightDivisors.length - 1; i >= 0; --i) {
+        for (let i = intradayWeightDivisors.length - 1; i >= 0; --i) {
             if (Math.floor(prevDate.getTime() / intradayWeightDivisors[i]._internal_divisor) !== Math.floor(currentDate.getTime() / intradayWeightDivisors[i]._internal_divisor)) {
                 return intradayWeightDivisors[i]._internal_weight;
             }
         }
-        return 0 /* LessThanSecond */;
+        return 0 /* TickMarkWeight.LessThanSecond */;
     }
-    function fillWeightsForPoints(sortedTimePoints, startIndex) {
-        if (startIndex === void 0) { startIndex = 0; }
+    function fillWeightsForPoints(sortedTimePoints, startIndex = 0) {
         if (sortedTimePoints.length === 0) {
             return;
         }
-        var prevTime = startIndex === 0 ? null : sortedTimePoints[startIndex - 1]._internal_time._internal_timestamp;
-        var prevDate = prevTime !== null ? new Date(prevTime * 1000) : null;
-        var totalTimeDiff = 0;
-        for (var index = startIndex; index < sortedTimePoints.length; ++index) {
-            var currentPoint = sortedTimePoints[index];
-            var currentDate = new Date(currentPoint._internal_time._internal_timestamp * 1000);
+        let prevTime = startIndex === 0 ? null : sortedTimePoints[startIndex - 1]._internal_time._internal_timestamp;
+        let prevDate = prevTime !== null ? new Date(prevTime * 1000) : null;
+        let totalTimeDiff = 0;
+        for (let index = startIndex; index < sortedTimePoints.length; ++index) {
+            const currentPoint = sortedTimePoints[index];
+            const currentDate = new Date(currentPoint._internal_time._internal_timestamp * 1000);
             if (prevDate !== null) {
                 currentPoint._internal_timeWeight = weightByTime(currentDate, prevDate);
             }
@@ -10965,8 +10827,8 @@
         if (startIndex === 0 && sortedTimePoints.length > 1) {
             // let's guess a weight for the first point
             // let's say the previous point was average time back in the history
-            var averageTimeDiff = Math.ceil(totalTimeDiff / (sortedTimePoints.length - 1));
-            var approxPrevDate = new Date((sortedTimePoints[0]._internal_time._internal_timestamp - averageTimeDiff) * 1000);
+            const averageTimeDiff = Math.ceil(totalTimeDiff / (sortedTimePoints.length - 1));
+            const approxPrevDate = new Date((sortedTimePoints[0]._internal_time._internal_timestamp - averageTimeDiff) * 1000);
             sortedTimePoints[0]._internal_timeWeight = weightByTime(new Date(sortedTimePoints[0]._internal_time._internal_timestamp * 1000), approxPrevDate);
         }
     }
@@ -10976,7 +10838,7 @@
         if (!isBusinessDay(time)) {
             throw new Error('time must be of type BusinessDay');
         }
-        var date = new Date(Date.UTC(time.year, time.month - 1, time.day, 0, 0, 0, 0));
+        const date = new Date(Date.UTC(time.year, time.month - 1, time.day, 0, 0, 0, 0));
         return {
             _internal_timestamp: Math.round(date.getTime() / 1000),
             _internal_businessDay: time,
@@ -11008,7 +10870,7 @@
         }
         return businessDayConverter(time);
     }
-    var validDateRegex = /^\d\d\d\d-\d\d-\d\d$/;
+    const validDateRegex = /^\d\d\d\d-\d\d-\d\d$/;
     function stringToBusinessDay(value) {
         {
             // in some browsers (I look at your Chrome) the Date constructor may accept invalid date string
@@ -11018,12 +10880,12 @@
             // so, we need to be sure that date has valid format to avoid strange behavior and hours of debugging
             // but let's do this in development build only because of perf
             if (!validDateRegex.test(value)) {
-                throw new Error("Invalid date string=".concat(value, ", expected format=yyyy-mm-dd"));
+                throw new Error(`Invalid date string=${value}, expected format=yyyy-mm-dd`);
             }
         }
-        var d = new Date(value);
+        const d = new Date(value);
         if (isNaN(d.getTime())) {
-            throw new Error("Invalid date string=".concat(value, ", expected format=yyyy-mm-dd"));
+            throw new Error(`Invalid date string=${value}, expected format=yyyy-mm-dd`);
         }
         return {
             day: d.getUTCDate(),
@@ -11052,8 +10914,8 @@
         };
     }
     function seriesUpdateInfo(seriesRows, prevSeriesRows) {
-        var firstAndLastTime = seriesRowsFirsAndLastTime(seriesRows);
-        var prevFirstAndLastTime = seriesRowsFirsAndLastTime(prevSeriesRows);
+        const firstAndLastTime = seriesRowsFirsAndLastTime(seriesRows);
+        const prevFirstAndLastTime = seriesRowsFirsAndLastTime(prevSeriesRows);
         if (firstAndLastTime !== undefined && prevFirstAndLastTime !== undefined) {
             return {
                 _internal_lastBarUpdatedOrNewBarsAddedToTheRight: firstAndLastTime._internal_lastTime >= prevFirstAndLastTime._internal_lastTime &&
@@ -11062,8 +10924,23 @@
         }
         return undefined;
     }
-    var DataLayer = /** @class */ (function () {
-        function DataLayer() {
+    function timeScalePointTime(mergedPointData) {
+        let result;
+        mergedPointData.forEach((v) => {
+            if (result === undefined) {
+                result = v._internal_originalTime;
+            }
+        });
+        return ensureDefined(result);
+    }
+    function saveOriginalTime(data) {
+        // eslint-disable-next-line @typescript-eslint/tslint/config
+        if (data._internal_originalTime === undefined) {
+            data._internal_originalTime = data.time;
+        }
+    }
+    class DataLayer {
+        constructor() {
             // note that _pointDataByTimePoint and _seriesRowsBySeries shares THE SAME objects in their values between each other
             // it's just different kind of maps to make usages/perf better
             this._private__pointDataByTimePoint = new Map();
@@ -11072,18 +10949,17 @@
             // this is kind of "dest" values (in opposite to "source" ones) - we don't need to modify it manually, the only by calling _updateTimeScalePoints or updateSeriesData methods
             this._private__sortedTimePoints = [];
         }
-        DataLayer.prototype._internal_destroy = function () {
+        _internal_destroy() {
             this._private__pointDataByTimePoint.clear();
             this._private__seriesRowsBySeries.clear();
             this._private__seriesLastTimePoint.clear();
             this._private__sortedTimePoints = [];
-        };
-        DataLayer.prototype._internal_setSeriesData = function (series, data) {
-            var _this = this;
-            var needCleanupPoints = this._private__pointDataByTimePoint.size !== 0;
-            var isTimeScaleAffected = false;
+        }
+        _internal_setSeriesData(series, data) {
+            let needCleanupPoints = this._private__pointDataByTimePoint.size !== 0;
+            let isTimeScaleAffected = false;
             // save previous series rows data before it's replaced inside this._setRowsToSeries
-            var prevSeriesRows = this._private__seriesRowsBySeries.get(series);
+            const prevSeriesRows = this._private__seriesRowsBySeries.get(series);
             if (prevSeriesRows !== undefined) {
                 if (this._private__seriesRowsBySeries.size === 1) {
                     needCleanupPoints = false;
@@ -11094,29 +10970,30 @@
                 else {
                     // perf optimization - actually we have to use this._pointDataByTimePoint for going through here
                     // but as soon as this._sortedTimePoints is just a different form of _pointDataByTimePoint we can use it as well
-                    for (var _i = 0, _a = this._private__sortedTimePoints; _i < _a.length; _i++) {
-                        var point = _a[_i];
+                    for (const point of this._private__sortedTimePoints) {
                         if (point.pointData._internal_mapping.delete(series)) {
                             isTimeScaleAffected = true;
                         }
                     }
                 }
             }
-            var seriesRows = [];
+            let seriesRows = [];
             if (data.length !== 0) {
+                const extendedData = data;
+                extendedData.forEach((i) => saveOriginalTime(i));
                 convertStringsToBusinessDays(data);
-                var timeConverter_1 = ensureNotNull(selectTimeConverter(data));
-                var createPlotRow_1 = getSeriesPlotRowCreator(series._internal_seriesType());
-                seriesRows = data.map(function (item) {
-                    var time = timeConverter_1(item.time);
-                    var timePointData = _this._private__pointDataByTimePoint.get(time._internal_timestamp);
+                const timeConverter = ensureNotNull(selectTimeConverter(data));
+                const createPlotRow = getSeriesPlotRowCreator(series._internal_seriesType());
+                seriesRows = extendedData.map((item) => {
+                    const time = timeConverter(item.time);
+                    let timePointData = this._private__pointDataByTimePoint.get(time._internal_timestamp);
                     if (timePointData === undefined) {
                         // the indexes will be sync later
                         timePointData = createEmptyTimePointData(time);
-                        _this._private__pointDataByTimePoint.set(time._internal_timestamp, timePointData);
+                        this._private__pointDataByTimePoint.set(time._internal_timestamp, timePointData);
                         isTimeScaleAffected = true;
                     }
-                    var row = createPlotRow_1(time, timePointData._internal_index, item);
+                    const row = createPlotRow(time, timePointData._internal_index, item, item._internal_originalTime);
                     timePointData._internal_mapping.set(series, row);
                     return row;
                 });
@@ -11127,66 +11004,78 @@
                 this._private__cleanupPointsData();
             }
             this._private__setRowsToSeries(series, seriesRows);
-            var firstChangedPointIndex = -1;
+            let firstChangedPointIndex = -1;
             if (isTimeScaleAffected) {
                 // then generate the time scale points
                 // timeWeight will be updates in _updateTimeScalePoints later
-                var newTimeScalePoints_1 = [];
-                this._private__pointDataByTimePoint.forEach(function (pointData) {
-                    newTimeScalePoints_1.push({ _internal_timeWeight: 0, _internal_time: pointData._internal_timePoint, pointData: pointData });
+                const newTimeScalePoints = [];
+                this._private__pointDataByTimePoint.forEach((pointData) => {
+                    newTimeScalePoints.push({
+                        _internal_timeWeight: 0,
+                        _internal_time: pointData._internal_timePoint,
+                        pointData,
+                        _internal_originalTime: timeScalePointTime(pointData._internal_mapping),
+                    });
                 });
-                newTimeScalePoints_1.sort(function (t1, t2) { return t1._internal_time._internal_timestamp - t2._internal_time._internal_timestamp; });
-                firstChangedPointIndex = this._private__replaceTimeScalePoints(newTimeScalePoints_1);
+                newTimeScalePoints.sort((t1, t2) => t1._internal_time._internal_timestamp - t2._internal_time._internal_timestamp);
+                firstChangedPointIndex = this._private__replaceTimeScalePoints(newTimeScalePoints);
             }
             return this._private__getUpdateResponse(series, firstChangedPointIndex, seriesUpdateInfo(this._private__seriesRowsBySeries.get(series), prevSeriesRows));
-        };
-        DataLayer.prototype._internal_removeSeries = function (series) {
+        }
+        _internal_removeSeries(series) {
             return this._internal_setSeriesData(series, []);
-        };
-        DataLayer.prototype._internal_updateSeriesData = function (series, data) {
+        }
+        _internal_updateSeriesData(series, data) {
+            const extendedData = data;
+            saveOriginalTime(extendedData);
             convertStringToBusinessDay(data);
-            var time = ensureNotNull(selectTimeConverter([data]))(data.time);
-            var lastSeriesTime = this._private__seriesLastTimePoint.get(series);
+            const time = ensureNotNull(selectTimeConverter([data]))(data.time);
+            const lastSeriesTime = this._private__seriesLastTimePoint.get(series);
             if (lastSeriesTime !== undefined && time._internal_timestamp < lastSeriesTime._internal_timestamp) {
-                throw new Error("Cannot update oldest data, last time=".concat(lastSeriesTime._internal_timestamp, ", new time=").concat(time._internal_timestamp));
+                throw new Error(`Cannot update oldest data, last time=${lastSeriesTime._internal_timestamp}, new time=${time._internal_timestamp}`);
             }
-            var pointDataAtTime = this._private__pointDataByTimePoint.get(time._internal_timestamp);
+            let pointDataAtTime = this._private__pointDataByTimePoint.get(time._internal_timestamp);
             // if no point data found for the new data item
             // that means that we need to update scale
-            var affectsTimeScale = pointDataAtTime === undefined;
+            const affectsTimeScale = pointDataAtTime === undefined;
             if (pointDataAtTime === undefined) {
                 // the indexes will be sync later
                 pointDataAtTime = createEmptyTimePointData(time);
                 this._private__pointDataByTimePoint.set(time._internal_timestamp, pointDataAtTime);
             }
-            var createPlotRow = getSeriesPlotRowCreator(series._internal_seriesType());
-            var plotRow = createPlotRow(time, pointDataAtTime._internal_index, data);
+            const createPlotRow = getSeriesPlotRowCreator(series._internal_seriesType());
+            const plotRow = createPlotRow(time, pointDataAtTime._internal_index, data, extendedData._internal_originalTime);
             pointDataAtTime._internal_mapping.set(series, plotRow);
             this._private__updateLastSeriesRow(series, plotRow);
-            var info = { _internal_lastBarUpdatedOrNewBarsAddedToTheRight: isSeriesPlotRow(plotRow) };
+            const info = { _internal_lastBarUpdatedOrNewBarsAddedToTheRight: isSeriesPlotRow(plotRow) };
             // if point already exist on the time scale - we don't need to make a full update and just make an incremental one
             if (!affectsTimeScale) {
                 return this._private__getUpdateResponse(series, -1, info);
             }
-            var newPoint = { _internal_timeWeight: 0, _internal_time: pointDataAtTime._internal_timePoint, pointData: pointDataAtTime };
-            var insertIndex = lowerbound(this._private__sortedTimePoints, newPoint._internal_time._internal_timestamp, function (a, b) { return a._internal_time._internal_timestamp < b; });
+            const newPoint = {
+                _internal_timeWeight: 0,
+                _internal_time: pointDataAtTime._internal_timePoint,
+                pointData: pointDataAtTime,
+                _internal_originalTime: timeScalePointTime(pointDataAtTime._internal_mapping),
+            };
+            const insertIndex = lowerbound(this._private__sortedTimePoints, newPoint._internal_time._internal_timestamp, (a, b) => a._internal_time._internal_timestamp < b);
             // yes, I know that this array is readonly and this change is intended to make it performative
             // we marked _sortedTimePoints array as readonly to avoid modifying this array anywhere else
             // but this place is exceptional case due performance reasons, sorry
             this._private__sortedTimePoints.splice(insertIndex, 0, newPoint);
-            for (var index = insertIndex; index < this._private__sortedTimePoints.length; ++index) {
+            for (let index = insertIndex; index < this._private__sortedTimePoints.length; ++index) {
                 assignIndexToPointData(this._private__sortedTimePoints[index].pointData, index);
             }
             fillWeightsForPoints(this._private__sortedTimePoints, insertIndex);
             return this._private__getUpdateResponse(series, insertIndex, info);
-        };
-        DataLayer.prototype._private__updateLastSeriesRow = function (series, plotRow) {
-            var seriesData = this._private__seriesRowsBySeries.get(series);
+        }
+        _private__updateLastSeriesRow(series, plotRow) {
+            let seriesData = this._private__seriesRowsBySeries.get(series);
             if (seriesData === undefined) {
                 seriesData = [];
                 this._private__seriesRowsBySeries.set(series, seriesData);
             }
-            var lastSeriesRow = seriesData.length !== 0 ? seriesData[seriesData.length - 1] : null;
+            const lastSeriesRow = seriesData.length !== 0 ? seriesData[seriesData.length - 1] : null;
             if (lastSeriesRow === null || plotRow._internal_time._internal_timestamp > lastSeriesRow._internal_time._internal_timestamp) {
                 if (isSeriesPlotRow(plotRow)) {
                     seriesData.push(plotRow);
@@ -11201,8 +11090,8 @@
                 }
             }
             this._private__seriesLastTimePoint.set(series, plotRow._internal_time);
-        };
-        DataLayer.prototype._private__setRowsToSeries = function (series, seriesRows) {
+        }
+        _private__setRowsToSeries(series, seriesRows) {
             if (seriesRows.length !== 0) {
                 this._private__seriesRowsBySeries.set(series, seriesRows.filter(isSeriesPlotRow));
                 this._private__seriesLastTimePoint.set(series, seriesRows[seriesRows.length - 1]._internal_time);
@@ -11211,30 +11100,29 @@
                 this._private__seriesRowsBySeries.delete(series);
                 this._private__seriesLastTimePoint.delete(series);
             }
-        };
-        DataLayer.prototype._private__cleanupPointsData = function () {
+        }
+        _private__cleanupPointsData() {
             // let's treat all current points as "potentially removed"
             // we could create an array with actually potentially removed points
             // but most likely this array will be similar to _sortedTimePoints so let's avoid using additional memory
             // note that we can use _sortedTimePoints here since a point might be removed only it was here previously
-            for (var _i = 0, _a = this._private__sortedTimePoints; _i < _a.length; _i++) {
-                var point = _a[_i];
+            for (const point of this._private__sortedTimePoints) {
                 if (point.pointData._internal_mapping.size === 0) {
                     this._private__pointDataByTimePoint.delete(point._internal_time._internal_timestamp);
                 }
             }
-        };
+        }
         /**
          * Sets new time scale and make indexes valid for all series
          *
          * @returns The index of the first changed point or `-1` if there is no change.
          */
-        DataLayer.prototype._private__replaceTimeScalePoints = function (newTimePoints) {
-            var firstChangedPointIndex = -1;
+        _private__replaceTimeScalePoints(newTimePoints) {
+            let firstChangedPointIndex = -1;
             // search the first different point and "syncing" time weight by the way
-            for (var index = 0; index < this._private__sortedTimePoints.length && index < newTimePoints.length; ++index) {
-                var oldPoint = this._private__sortedTimePoints[index];
-                var newPoint = newTimePoints[index];
+            for (let index = 0; index < this._private__sortedTimePoints.length && index < newTimePoints.length; ++index) {
+                const oldPoint = this._private__sortedTimePoints[index];
+                const newPoint = newTimePoints[index];
                 if (oldPoint._internal_time._internal_timestamp !== newPoint._internal_time._internal_timestamp) {
                     firstChangedPointIndex = index;
                     break;
@@ -11254,29 +11142,29 @@
             }
             // if time scale points are changed that means that we need to make full update to all series (with clearing points)
             // but first we need to synchronize indexes and re-fill time weights
-            for (var index = firstChangedPointIndex; index < newTimePoints.length; ++index) {
+            for (let index = firstChangedPointIndex; index < newTimePoints.length; ++index) {
                 assignIndexToPointData(newTimePoints[index].pointData, index);
             }
             // re-fill time weights for point after the first changed one
             fillWeightsForPoints(newTimePoints, firstChangedPointIndex);
             this._private__sortedTimePoints = newTimePoints;
             return firstChangedPointIndex;
-        };
-        DataLayer.prototype._private__getBaseIndex = function () {
+        }
+        _private__getBaseIndex() {
             if (this._private__seriesRowsBySeries.size === 0) {
                 // if we have no data then 'reset' the base index to null
                 return null;
             }
-            var baseIndex = 0;
-            this._private__seriesRowsBySeries.forEach(function (data) {
+            let baseIndex = 0;
+            this._private__seriesRowsBySeries.forEach((data) => {
                 if (data.length !== 0) {
                     baseIndex = Math.max(baseIndex, data[data.length - 1]._internal_index);
                 }
             });
             return baseIndex;
-        };
-        DataLayer.prototype._private__getUpdateResponse = function (updatedSeries, firstChangedPointIndex, info) {
-            var dataUpdateResponse = {
+        }
+        _private__getUpdateResponse(updatedSeries, firstChangedPointIndex, info) {
+            const dataUpdateResponse = {
                 _internal_series: new Map(),
                 _internal_timeScale: {
                     _internal_baseIndex: this._private__getBaseIndex(),
@@ -11285,7 +11173,7 @@
             if (firstChangedPointIndex !== -1) {
                 // TODO: it's possible to make perf improvements by checking what series has data after firstChangedPointIndex
                 // but let's skip for now
-                this._private__seriesRowsBySeries.forEach(function (data, s) {
+                this._private__seriesRowsBySeries.forEach((data, s) => {
                     dataUpdateResponse._internal_series.set(s, {
                         _internal_data: data,
                         _internal_info: s === updatedSeries ? info : undefined,
@@ -11301,288 +11189,172 @@
                 dataUpdateResponse._internal_timeScale._internal_firstChangedPointIndex = firstChangedPointIndex;
             }
             else {
-                var seriesData = this._private__seriesRowsBySeries.get(updatedSeries);
+                const seriesData = this._private__seriesRowsBySeries.get(updatedSeries);
                 // if no seriesData found that means that we just removed the series
                 dataUpdateResponse._internal_series.set(updatedSeries, { _internal_data: seriesData || [], _internal_info: info });
             }
             return dataUpdateResponse;
-        };
-        return DataLayer;
-    }());
+        }
+    }
     function assignIndexToPointData(pointData, index) {
         // first, nevertheless update index of point data ("make it valid")
         pointData._internal_index = index;
         // and then we need to sync indexes for all series
-        pointData._internal_mapping.forEach(function (seriesRow) {
+        pointData._internal_mapping.forEach((seriesRow) => {
             seriesRow._internal_index = index;
         });
     }
 
-    function checkPriceLineOptions(options) {
-        // eslint-disable-next-line @typescript-eslint/tslint/config
-        assert(typeof options.price === 'number', "the type of 'price' price line's property must be a number, got '".concat(typeof options.price, "'"));
+    function singleValueData(plotRow) {
+        return {
+            value: plotRow._internal_value[3 /* PlotRowValueIndex.Close */],
+            time: plotRow._internal_originalTime,
+        };
     }
-    function checkItemsAreOrdered(data, allowDuplicates) {
-        if (allowDuplicates === void 0) { allowDuplicates = false; }
-        if (data.length === 0) {
-            return;
-        }
-        var prevTime = convertTime(data[0].time)._internal_timestamp;
-        for (var i = 1; i < data.length; ++i) {
-            var currentTime = convertTime(data[i].time)._internal_timestamp;
-            var checkResult = allowDuplicates ? prevTime <= currentTime : prevTime < currentTime;
-            assert(checkResult, "data must be asc ordered by time, index=".concat(i, ", time=").concat(currentTime, ", prev time=").concat(prevTime));
-            prevTime = currentTime;
+    function lineData(plotRow) {
+        const result = singleValueData(plotRow);
+        if (plotRow._internal_color !== undefined) {
+            result.color = plotRow._internal_color;
         }
+        return result;
     }
-    function checkSeriesValuesType(type, data) {
-        data.forEach(getChecker(type));
+    function areaData(plotRow) {
+        const result = singleValueData(plotRow);
+        if (plotRow._internal_lineColor !== undefined) {
+            result.lineColor = plotRow._internal_lineColor;
+        }
+        if (plotRow._internal_topColor !== undefined) {
+            result.topColor = plotRow._internal_topColor;
+        }
+        if (plotRow._internal_bottomColor !== undefined) {
+            result.bottomColor = plotRow._internal_bottomColor;
+        }
+        return result;
     }
-    function getChecker(type) {
-        switch (type) {
-            case 'Bar':
-            case 'Candlestick':
-                return checkBarItem.bind(null, type);
-            case 'Area':
-            case 'Baseline':
-            case 'Line':
-            case 'Histogram':
-                return checkLineItem.bind(null, type);
+    function baselineData(plotRow) {
+        const result = singleValueData(plotRow);
+        if (plotRow._internal_topLineColor !== undefined) {
+            result.topLineColor = plotRow._internal_topLineColor;
+        }
+        if (plotRow._internal_bottomLineColor !== undefined) {
+            result.bottomLineColor = plotRow._internal_bottomLineColor;
+        }
+        if (plotRow._internal_topFillColor1 !== undefined) {
+            result.topFillColor1 = plotRow._internal_topFillColor1;
+        }
+        if (plotRow._internal_topFillColor2 !== undefined) {
+            result.topFillColor2 = plotRow._internal_topFillColor2;
+        }
+        if (plotRow._internal_bottomFillColor1 !== undefined) {
+            result.bottomFillColor1 = plotRow._internal_bottomFillColor1;
         }
+        if (plotRow._internal_bottomFillColor2 !== undefined) {
+            result.bottomFillColor2 = plotRow._internal_bottomFillColor2;
+        }
+        return result;
     }
-    function checkBarItem(type, barItem) {
-        if (!isFulfilledData(barItem)) {
-            return;
+    function ohlcData(plotRow) {
+        return {
+            open: plotRow._internal_value[0 /* PlotRowValueIndex.Open */],
+            high: plotRow._internal_value[1 /* PlotRowValueIndex.High */],
+            low: plotRow._internal_value[2 /* PlotRowValueIndex.Low */],
+            close: plotRow._internal_value[3 /* PlotRowValueIndex.Close */],
+            time: plotRow._internal_originalTime,
+        };
+    }
+    function barData(plotRow) {
+        const result = ohlcData(plotRow);
+        if (plotRow._internal_color !== undefined) {
+            result.color = plotRow._internal_color;
         }
-        assert(
-        // eslint-disable-next-line @typescript-eslint/tslint/config
-        typeof barItem.open === 'number', "".concat(type, " series item data value of open must be a number, got=").concat(typeof barItem.open, ", value=").concat(barItem.open));
-        assert(
-        // eslint-disable-next-line @typescript-eslint/tslint/config
-        typeof barItem.high === 'number', "".concat(type, " series item data value of high must be a number, got=").concat(typeof barItem.high, ", value=").concat(barItem.high));
-        assert(
-        // eslint-disable-next-line @typescript-eslint/tslint/config
-        typeof barItem.low === 'number', "".concat(type, " series item data value of low must be a number, got=").concat(typeof barItem.low, ", value=").concat(barItem.low));
-        assert(
-        // eslint-disable-next-line @typescript-eslint/tslint/config
-        typeof barItem.close === 'number', "".concat(type, " series item data value of close must be a number, got=").concat(typeof barItem.close, ", value=").concat(barItem.close));
+        return result;
     }
-    function checkLineItem(type, lineItem) {
-        if (!isFulfilledData(lineItem)) {
-            return;
+    function candlestickData(plotRow) {
+        const result = ohlcData(plotRow);
+        const { _internal_color: color, _internal_borderColor: borderColor, _internal_wickColor: wickColor } = plotRow;
+        if (color !== undefined) {
+            result.color = color;
         }
-        assert(
-        // eslint-disable-next-line @typescript-eslint/tslint/config
-        typeof lineItem.value === 'number', "".concat(type, " series item data value must be a number, got=").concat(typeof lineItem.value, ", value=").concat(lineItem.value));
+        if (borderColor !== undefined) {
+            result.borderColor = borderColor;
+        }
+        if (wickColor !== undefined) {
+            result.wickColor = wickColor;
+        }
+        return result;
+    }
+    const seriesPlotRowToDataMap = {
+        Area: areaData,
+        Line: lineData,
+        Baseline: baselineData,
+        Histogram: lineData,
+        Bar: barData,
+        Candlestick: candlestickData,
+    };
+    function getSeriesDataCreator(seriesType) {
+        return seriesPlotRowToDataMap[seriesType];
     }
 
-    var priceLineOptionsDefaults = {
-        color: '#FF0000',
-        price: 0,
-        lineStyle: 2 /* Dashed */,
-        lineWidth: 1,
-        lineVisible: true,
-        axisLabelVisible: true,
-        title: '',
+    const crosshairOptionsDefaults = {
+        vertLine: {
+            color: '#9598A1',
+            width: 1,
+            style: 3 /* LineStyle.LargeDashed */,
+            visible: true,
+            labelVisible: true,
+            labelBackgroundColor: '#131722',
+        },
+        horzLine: {
+            color: '#9598A1',
+            width: 1,
+            style: 3 /* LineStyle.LargeDashed */,
+            visible: true,
+            labelVisible: true,
+            labelBackgroundColor: '#131722',
+        },
+        mode: 1 /* CrosshairMode.Magnet */,
     };
 
-    var PriceLine = /** @class */ (function () {
-        function PriceLine(priceLine) {
-            this._private__priceLine = priceLine;
-        }
-        PriceLine.prototype.applyOptions = function (options) {
-            this._private__priceLine._internal_applyOptions(options);
-        };
-        PriceLine.prototype.options = function () {
-            return this._private__priceLine._internal_options();
-        };
-        PriceLine.prototype._internal_priceLine = function () {
-            return this._private__priceLine;
-        };
-        return PriceLine;
-    }());
+    const gridOptionsDefaults = {
+        vertLines: {
+            color: '#D6DCDE',
+            style: 0 /* LineStyle.Solid */,
+            visible: true,
+        },
+        horzLines: {
+            color: '#D6DCDE',
+            style: 0 /* LineStyle.Solid */,
+            visible: true,
+        },
+    };
 
-    function migrateOptions(options) {
-        // eslint-disable-next-line deprecation/deprecation
-        var overlay = options.overlay, res = __rest(options, ["overlay"]);
-        if (overlay) {
-            res.priceScaleId = '';
-        }
-        return res;
-    }
-    var SeriesApi = /** @class */ (function () {
-        function SeriesApi(series, dataUpdatesConsumer, priceScaleApiProvider) {
-            this._internal__series = series;
-            this._internal__dataUpdatesConsumer = dataUpdatesConsumer;
-            this._private__priceScaleApiProvider = priceScaleApiProvider;
-        }
-        SeriesApi.prototype.priceFormatter = function () {
-            return this._internal__series._internal_formatter();
-        };
-        SeriesApi.prototype.priceToCoordinate = function (price) {
-            var firstValue = this._internal__series._internal_firstValue();
-            if (firstValue === null) {
-                return null;
-            }
-            return this._internal__series._internal_priceScale()._internal_priceToCoordinate(price, firstValue._internal_value);
-        };
-        SeriesApi.prototype.coordinateToPrice = function (coordinate) {
-            var firstValue = this._internal__series._internal_firstValue();
-            if (firstValue === null) {
-                return null;
-            }
-            return this._internal__series._internal_priceScale()._internal_coordinateToPrice(coordinate, firstValue._internal_value);
-        };
-        // eslint-disable-next-line complexity
-        SeriesApi.prototype.barsInLogicalRange = function (range) {
-            if (range === null) {
-                return null;
-            }
-            // we use TimeScaleVisibleRange here to convert LogicalRange to strict range properly
-            var correctedRange = new TimeScaleVisibleRange(new RangeImpl(range.from, range.to))._internal_strictRange();
-            var bars = this._internal__series._internal_bars();
-            if (bars._internal_isEmpty()) {
-                return null;
-            }
-            var dataFirstBarInRange = bars._internal_search(correctedRange._internal_left(), 1 /* NearestRight */);
-            var dataLastBarInRange = bars._internal_search(correctedRange._internal_right(), -1 /* NearestLeft */);
-            var dataFirstIndex = ensureNotNull(bars._internal_firstIndex());
-            var dataLastIndex = ensureNotNull(bars._internal_lastIndex());
-            // this means that we request data in the data gap
-            // e.g. let's say we have series with data [0..10, 30..60]
-            // and we request bars info in range [15, 25]
-            // thus, dataFirstBarInRange will be with index 30 and dataLastBarInRange with 10
-            if (dataFirstBarInRange !== null && dataLastBarInRange !== null && dataFirstBarInRange._internal_index > dataLastBarInRange._internal_index) {
-                return {
-                    barsBefore: range.from - dataFirstIndex,
-                    barsAfter: dataLastIndex - range.to,
-                };
-            }
-            var barsBefore = (dataFirstBarInRange === null || dataFirstBarInRange._internal_index === dataFirstIndex)
-                ? range.from - dataFirstIndex
-                : dataFirstBarInRange._internal_index - dataFirstIndex;
-            var barsAfter = (dataLastBarInRange === null || dataLastBarInRange._internal_index === dataLastIndex)
-                ? dataLastIndex - range.to
-                : dataLastIndex - dataLastBarInRange._internal_index;
-            var result = { barsBefore: barsBefore, barsAfter: barsAfter };
-            // actually they can't exist separately
-            if (dataFirstBarInRange !== null && dataLastBarInRange !== null) {
-                result.from = dataFirstBarInRange._internal_time._internal_businessDay || dataFirstBarInRange._internal_time._internal_timestamp;
-                result.to = dataLastBarInRange._internal_time._internal_businessDay || dataLastBarInRange._internal_time._internal_timestamp;
-            }
-            return result;
-        };
-        SeriesApi.prototype.setData = function (data) {
-            checkItemsAreOrdered(data);
-            checkSeriesValuesType(this._internal__series._internal_seriesType(), data);
-            this._internal__dataUpdatesConsumer._internal_applyNewData(this._internal__series, data);
-        };
-        SeriesApi.prototype.update = function (bar) {
-            checkSeriesValuesType(this._internal__series._internal_seriesType(), [bar]);
-            this._internal__dataUpdatesConsumer._internal_updateData(this._internal__series, bar);
-        };
-        SeriesApi.prototype.setMarkers = function (data) {
-            checkItemsAreOrdered(data, true);
-            var convertedMarkers = data.map(function (marker) { return (__assign(__assign({}, marker), { time: convertTime(marker.time) })); });
-            this._internal__series._internal_setMarkers(convertedMarkers);
-        };
-        SeriesApi.prototype.applyOptions = function (options) {
-            var migratedOptions = migrateOptions(options);
-            this._internal__series._internal_applyOptions(migratedOptions);
-        };
-        SeriesApi.prototype.options = function () {
-            return clone(this._internal__series._internal_options());
-        };
-        SeriesApi.prototype.priceScale = function () {
-            return this._private__priceScaleApiProvider.priceScale(this._internal__series._internal_priceScale()._internal_id());
-        };
-        SeriesApi.prototype.createPriceLine = function (options) {
-            checkPriceLineOptions(options);
-            var strictOptions = merge(clone(priceLineOptionsDefaults), options);
-            var priceLine = this._internal__series._internal_createPriceLine(strictOptions);
-            return new PriceLine(priceLine);
-        };
-        SeriesApi.prototype.removePriceLine = function (line) {
-            this._internal__series._internal_removePriceLine(line._internal_priceLine());
-        };
-        SeriesApi.prototype.seriesType = function () {
-            return this._internal__series._internal_seriesType();
-        };
-        return SeriesApi;
-    }());
-
-    var CandlestickSeriesApi = /** @class */ (function (_super) {
-        __extends(CandlestickSeriesApi, _super);
-        function CandlestickSeriesApi() {
-            return _super !== null && _super.apply(this, arguments) || this;
-        }
-        CandlestickSeriesApi.prototype.applyOptions = function (options) {
-            fillUpDownCandlesticksColors(options);
-            _super.prototype.applyOptions.call(this, options);
-        };
-        return CandlestickSeriesApi;
-    }(SeriesApi));
-
-    var crosshairOptionsDefaults = {
-        vertLine: {
-            color: '#758696',
-            width: 1,
-            style: 3 /* LargeDashed */,
-            visible: true,
-            labelVisible: true,
-            labelBackgroundColor: '#4c525e',
-        },
-        horzLine: {
-            color: '#758696',
-            width: 1,
-            style: 3 /* LargeDashed */,
-            visible: true,
-            labelVisible: true,
-            labelBackgroundColor: '#4c525e',
-        },
-        mode: 1 /* Magnet */,
-    };
-
-    var gridOptionsDefaults = {
-        vertLines: {
-            color: '#D6DCDE',
-            style: 0 /* Solid */,
-            visible: true,
-        },
-        horzLines: {
-            color: '#D6DCDE',
-            style: 0 /* Solid */,
-            visible: true,
-        },
-    };
-
-    var layoutOptionsDefaults = {
+    const layoutOptionsDefaults = {
         background: {
-            type: "solid" /* Solid */,
+            type: "solid" /* ColorType.Solid */,
             color: '#FFFFFF',
         },
         textColor: '#191919',
-        fontSize: 11,
+        fontSize: 12,
         fontFamily: defaultFontFamily,
     };
 
-    var priceScaleOptionsDefaults = {
+    const priceScaleOptionsDefaults = {
         autoScale: true,
-        mode: 0 /* Normal */,
+        mode: 0 /* PriceScaleMode.Normal */,
         invertScale: false,
         alignLabels: true,
         borderVisible: true,
         borderColor: '#2B2B43',
         entireTextOnly: false,
         visible: false,
-        drawTicks: true,
+        ticksVisible: false,
         scaleMargins: {
             bottom: 0.1,
             top: 0.2,
         },
     };
 
-    var timeScaleOptionsDefaults = {
+    const timeScaleOptionsDefaults = {
         rightOffset: 0,
         barSpacing: 6,
         minBarSpacing: 0.5,
@@ -11596,9 +11368,10 @@
         timeVisible: false,
         secondsVisible: true,
         shiftVisibleRangeOnNewBar: true,
+        ticksVisible: false,
     };
 
-    var watermarkOptionsDefaults = {
+    const watermarkOptionsDefaults = {
         color: 'rgba(0, 0, 0, 0)',
         visible: false,
         fontSize: 48,
@@ -11609,15 +11382,15 @@
         vertAlign: 'center',
     };
 
-    var chartOptionsDefaults = {
+    const chartOptionsDefaults = {
         width: 0,
         height: 0,
         layout: layoutOptionsDefaults,
         crosshair: crosshairOptionsDefaults,
         grid: gridOptionsDefaults,
-        overlayPriceScales: __assign({}, priceScaleOptionsDefaults),
-        leftPriceScale: __assign(__assign({}, priceScaleOptionsDefaults), { visible: false }),
-        rightPriceScale: __assign(__assign({}, priceScaleOptionsDefaults), { visible: true }),
+        overlayPriceScales: Object.assign({}, priceScaleOptionsDefaults),
+        leftPriceScale: Object.assign(Object.assign({}, priceScaleOptionsDefaults), { visible: false }),
+        rightPriceScale: Object.assign(Object.assign({}, priceScaleOptionsDefaults), { visible: true }),
         timeScale: timeScaleOptionsDefaults,
         watermark: watermarkOptionsDefaults,
         localization: {
@@ -11635,7 +11408,10 @@
                 time: true,
                 price: true,
             },
-            axisDoubleClickReset: true,
+            axisDoubleClickReset: {
+                time: true,
+                price: true,
+            },
             mouseWheel: true,
             pinch: true,
         },
@@ -11644,11 +11420,11 @@
             touch: true,
         },
         trackingMode: {
-            exitMode: 1 /* OnNextTap */,
+            exitMode: 1 /* TrackingModeExitMode.OnNextTap */,
         },
     };
 
-    var candlestickStyleDefaults = {
+    const candlestickStyleDefaults = {
         upColor: '#26a69a',
         downColor: '#ef5350',
         wickVisible: true,
@@ -11660,37 +11436,40 @@
         wickUpColor: '#26a69a',
         wickDownColor: '#ef5350',
     };
-    var barStyleDefaults = {
+    const barStyleDefaults = {
         upColor: '#26a69a',
         downColor: '#ef5350',
         openVisible: true,
         thinBars: true,
     };
-    var lineStyleDefaults = {
+    const lineStyleDefaults = {
         color: '#2196f3',
-        lineStyle: 0 /* Solid */,
+        lineStyle: 0 /* LineStyle.Solid */,
         lineWidth: 3,
-        lineType: 0 /* Simple */,
+        lineType: 0 /* LineType.Simple */,
         crosshairMarkerVisible: true,
         crosshairMarkerRadius: 4,
         crosshairMarkerBorderColor: '',
+        crosshairMarkerBorderWidth: 2,
         crosshairMarkerBackgroundColor: '',
-        lastPriceAnimation: 0 /* Disabled */,
+        lastPriceAnimation: 0 /* LastPriceAnimationMode.Disabled */,
     };
-    var areaStyleDefaults = {
+    const areaStyleDefaults = {
         topColor: 'rgba( 46, 220, 135, 0.4)',
         bottomColor: 'rgba( 40, 221, 100, 0)',
+        invertFilledArea: false,
         lineColor: '#33D778',
-        lineStyle: 0 /* Solid */,
+        lineStyle: 0 /* LineStyle.Solid */,
         lineWidth: 3,
-        lineType: 0 /* Simple */,
+        lineType: 0 /* LineType.Simple */,
         crosshairMarkerVisible: true,
         crosshairMarkerRadius: 4,
         crosshairMarkerBorderColor: '',
+        crosshairMarkerBorderWidth: 2,
         crosshairMarkerBackgroundColor: '',
-        lastPriceAnimation: 0 /* Disabled */,
+        lastPriceAnimation: 0 /* LastPriceAnimationMode.Disabled */,
     };
-    var baselineStyleDefaults = {
+    const baselineStyleDefaults = {
         baseValue: {
             type: 'price',
             price: 0,
@@ -11702,30 +11481,32 @@
         bottomFillColor2: 'rgba(239, 83, 80, 0.28)',
         bottomLineColor: 'rgba(239, 83, 80, 1)',
         lineWidth: 3,
-        lineStyle: 0 /* Solid */,
+        lineStyle: 0 /* LineStyle.Solid */,
+        lineType: 0 /* LineType.Simple */,
         crosshairMarkerVisible: true,
         crosshairMarkerRadius: 4,
         crosshairMarkerBorderColor: '',
+        crosshairMarkerBorderWidth: 2,
         crosshairMarkerBackgroundColor: '',
-        lastPriceAnimation: 0 /* Disabled */,
+        lastPriceAnimation: 0 /* LastPriceAnimationMode.Disabled */,
     };
-    var histogramStyleDefaults = {
+    const histogramStyleDefaults = {
         color: '#26a69a',
         base: 0,
     };
-    var seriesOptionsDefaults = {
+    const seriesOptionsDefaults = {
         title: '',
         visible: true,
         lastValueVisible: true,
         priceLineVisible: true,
-        priceLineSource: 0 /* LastBar */,
+        priceLineSource: 0 /* PriceLineSource.LastBar */,
         priceLineWidth: 1,
         priceLineColor: '',
-        priceLineStyle: 2 /* Dashed */,
+        priceLineStyle: 2 /* LineStyle.Dashed */,
         baseLineVisible: true,
         baseLineWidth: 1,
         baseLineColor: '#B2B5BE',
-        baseLineStyle: 0 /* Solid */,
+        baseLineStyle: 0 /* LineStyle.Solid */,
         priceFormat: {
             type: 'price',
             precision: 2,
@@ -11733,31 +11514,252 @@
         },
     };
 
-    var PriceScaleApi = /** @class */ (function () {
-        function PriceScaleApi(chartWidget, priceScaleId) {
+    class PriceScaleApi {
+        constructor(chartWidget, priceScaleId) {
             this._private__chartWidget = chartWidget;
             this._private__priceScaleId = priceScaleId;
         }
-        PriceScaleApi.prototype.applyOptions = function (options) {
+        applyOptions(options) {
             this._private__chartWidget._internal_model()._internal_applyPriceScaleOptions(this._private__priceScaleId, options);
-        };
-        PriceScaleApi.prototype.options = function () {
+        }
+        options() {
             return this._private__priceScale()._internal_options();
-        };
-        PriceScaleApi.prototype.width = function () {
+        }
+        width() {
             if (!isDefaultPriceScale(this._private__priceScaleId)) {
                 return 0;
             }
-            return this._private__chartWidget._internal_getPriceAxisWidth(this._private__priceScaleId === "left" /* Left */ ? 'left' : 'right');
-        };
-        PriceScaleApi.prototype._private__priceScale = function () {
+            return this._private__chartWidget._internal_getPriceAxisWidth(this._private__priceScaleId);
+        }
+        _private__priceScale() {
             return ensureNotNull(this._private__chartWidget._internal_model()._internal_findPriceScale(this._private__priceScaleId))._internal_priceScale;
-        };
-        return PriceScaleApi;
-    }());
+        }
+    }
+
+    /******************************************************************************
+    Copyright (c) Microsoft Corporation.
+
+    Permission to use, copy, modify, and/or distribute this software for any
+    purpose with or without fee is hereby granted.
+
+    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
+    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
+    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
+    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
+    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
+    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
+    PERFORMANCE OF THIS SOFTWARE.
+    ***************************************************************************** */
+
+    function __rest(s, e) {
+        var t = {};
+        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
+            t[p] = s[p];
+        if (s != null && typeof Object.getOwnPropertySymbols === "function")
+            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
+                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
+                    t[p[i]] = s[p[i]];
+            }
+        return t;
+    }
 
-    var TimeScaleApi = /** @class */ (function () {
-        function TimeScaleApi(model, timeAxisWidget) {
+    function checkPriceLineOptions(options) {
+        // eslint-disable-next-line @typescript-eslint/tslint/config
+        assert(typeof options.price === 'number', `the type of 'price' price line's property must be a number, got '${typeof options.price}'`);
+    }
+    function checkItemsAreOrdered(data, allowDuplicates = false) {
+        if (data.length === 0) {
+            return;
+        }
+        let prevTime = convertTime(data[0].time)._internal_timestamp;
+        for (let i = 1; i < data.length; ++i) {
+            const currentTime = convertTime(data[i].time)._internal_timestamp;
+            const checkResult = allowDuplicates ? prevTime <= currentTime : prevTime < currentTime;
+            assert(checkResult, `data must be asc ordered by time, index=${i}, time=${currentTime}, prev time=${prevTime}`);
+            prevTime = currentTime;
+        }
+    }
+    function checkSeriesValuesType(type, data) {
+        data.forEach(getChecker(type));
+    }
+    function getChecker(type) {
+        switch (type) {
+            case 'Bar':
+            case 'Candlestick':
+                return checkBarItem.bind(null, type);
+            case 'Area':
+            case 'Baseline':
+            case 'Line':
+            case 'Histogram':
+                return checkLineItem.bind(null, type);
+        }
+    }
+    function checkBarItem(type, barItem) {
+        if (!isFulfilledData(barItem)) {
+            return;
+        }
+        assert(
+        // eslint-disable-next-line @typescript-eslint/tslint/config
+        typeof barItem.open === 'number', `${type} series item data value of open must be a number, got=${typeof barItem.open}, value=${barItem.open}`);
+        assert(
+        // eslint-disable-next-line @typescript-eslint/tslint/config
+        typeof barItem.high === 'number', `${type} series item data value of high must be a number, got=${typeof barItem.high}, value=${barItem.high}`);
+        assert(
+        // eslint-disable-next-line @typescript-eslint/tslint/config
+        typeof barItem.low === 'number', `${type} series item data value of low must be a number, got=${typeof barItem.low}, value=${barItem.low}`);
+        assert(
+        // eslint-disable-next-line @typescript-eslint/tslint/config
+        typeof barItem.close === 'number', `${type} series item data value of close must be a number, got=${typeof barItem.close}, value=${barItem.close}`);
+    }
+    function checkLineItem(type, lineItem) {
+        if (!isFulfilledData(lineItem)) {
+            return;
+        }
+        assert(
+        // eslint-disable-next-line @typescript-eslint/tslint/config
+        typeof lineItem.value === 'number', `${type} series item data value must be a number, got=${typeof lineItem.value}, value=${lineItem.value}`);
+    }
+
+    const priceLineOptionsDefaults = {
+        color: '#FF0000',
+        price: 0,
+        lineStyle: 2 /* LineStyle.Dashed */,
+        lineWidth: 1,
+        lineVisible: true,
+        axisLabelVisible: true,
+        title: '',
+    };
+
+    class PriceLine {
+        constructor(priceLine) {
+            this._private__priceLine = priceLine;
+        }
+        applyOptions(options) {
+            this._private__priceLine._internal_applyOptions(options);
+        }
+        options() {
+            return this._private__priceLine._internal_options();
+        }
+        _internal_priceLine() {
+            return this._private__priceLine;
+        }
+    }
+
+    class SeriesApi {
+        constructor(series, dataUpdatesConsumer, priceScaleApiProvider) {
+            this._internal__series = series;
+            this._internal__dataUpdatesConsumer = dataUpdatesConsumer;
+            this._private__priceScaleApiProvider = priceScaleApiProvider;
+        }
+        priceFormatter() {
+            return this._internal__series._internal_formatter();
+        }
+        priceToCoordinate(price) {
+            const firstValue = this._internal__series._internal_firstValue();
+            if (firstValue === null) {
+                return null;
+            }
+            return this._internal__series._internal_priceScale()._internal_priceToCoordinate(price, firstValue._internal_value);
+        }
+        coordinateToPrice(coordinate) {
+            const firstValue = this._internal__series._internal_firstValue();
+            if (firstValue === null) {
+                return null;
+            }
+            return this._internal__series._internal_priceScale()._internal_coordinateToPrice(coordinate, firstValue._internal_value);
+        }
+        // eslint-disable-next-line complexity
+        barsInLogicalRange(range) {
+            if (range === null) {
+                return null;
+            }
+            // we use TimeScaleVisibleRange here to convert LogicalRange to strict range properly
+            const correctedRange = new TimeScaleVisibleRange(new RangeImpl(range.from, range.to))._internal_strictRange();
+            const bars = this._internal__series._internal_bars();
+            if (bars._internal_isEmpty()) {
+                return null;
+            }
+            const dataFirstBarInRange = bars._internal_search(correctedRange._internal_left(), 1 /* MismatchDirection.NearestRight */);
+            const dataLastBarInRange = bars._internal_search(correctedRange._internal_right(), -1 /* MismatchDirection.NearestLeft */);
+            const dataFirstIndex = ensureNotNull(bars._internal_firstIndex());
+            const dataLastIndex = ensureNotNull(bars._internal_lastIndex());
+            // this means that we request data in the data gap
+            // e.g. let's say we have series with data [0..10, 30..60]
+            // and we request bars info in range [15, 25]
+            // thus, dataFirstBarInRange will be with index 30 and dataLastBarInRange with 10
+            if (dataFirstBarInRange !== null && dataLastBarInRange !== null && dataFirstBarInRange._internal_index > dataLastBarInRange._internal_index) {
+                return {
+                    barsBefore: range.from - dataFirstIndex,
+                    barsAfter: dataLastIndex - range.to,
+                };
+            }
+            const barsBefore = (dataFirstBarInRange === null || dataFirstBarInRange._internal_index === dataFirstIndex)
+                ? range.from - dataFirstIndex
+                : dataFirstBarInRange._internal_index - dataFirstIndex;
+            const barsAfter = (dataLastBarInRange === null || dataLastBarInRange._internal_index === dataLastIndex)
+                ? dataLastIndex - range.to
+                : dataLastIndex - dataLastBarInRange._internal_index;
+            const result = { barsBefore, barsAfter };
+            // actually they can't exist separately
+            if (dataFirstBarInRange !== null && dataLastBarInRange !== null) {
+                result.from = dataFirstBarInRange._internal_time._internal_businessDay || dataFirstBarInRange._internal_time._internal_timestamp;
+                result.to = dataLastBarInRange._internal_time._internal_businessDay || dataLastBarInRange._internal_time._internal_timestamp;
+            }
+            return result;
+        }
+        setData(data) {
+            checkItemsAreOrdered(data);
+            checkSeriesValuesType(this._internal__series._internal_seriesType(), data);
+            this._internal__dataUpdatesConsumer._internal_applyNewData(this._internal__series, data);
+        }
+        update(bar) {
+            checkSeriesValuesType(this._internal__series._internal_seriesType(), [bar]);
+            this._internal__dataUpdatesConsumer._internal_updateData(this._internal__series, bar);
+        }
+        dataByIndex(logicalIndex, mismatchDirection) {
+            const data = this._internal__series._internal_bars()._internal_search(logicalIndex, mismatchDirection);
+            if (data === null) {
+                // actually it can be a whitespace
+                return null;
+            }
+            return getSeriesDataCreator(this.seriesType())(data);
+        }
+        setMarkers(data) {
+            checkItemsAreOrdered(data, true);
+            const convertedMarkers = data.map((marker) => (Object.assign(Object.assign({}, marker), { originalTime: marker.time, time: convertTime(marker.time) })));
+            this._internal__series._internal_setMarkers(convertedMarkers);
+        }
+        markers() {
+            return this._internal__series._internal_markers().map((internalItem) => {
+                const { originalTime, time } = internalItem, item = __rest(internalItem, ["originalTime", "time"]);
+                return Object.assign({ time: originalTime }, item);
+            });
+        }
+        applyOptions(options) {
+            this._internal__series._internal_applyOptions(options);
+        }
+        options() {
+            return clone(this._internal__series._internal_options());
+        }
+        priceScale() {
+            return this._private__priceScaleApiProvider.priceScale(this._internal__series._internal_priceScale()._internal_id());
+        }
+        createPriceLine(options) {
+            checkPriceLineOptions(options);
+            const strictOptions = merge(clone(priceLineOptionsDefaults), options);
+            const priceLine = this._internal__series._internal_createPriceLine(strictOptions);
+            return new PriceLine(priceLine);
+        }
+        removePriceLine(line) {
+            this._internal__series._internal_removePriceLine(line._internal_priceLine());
+        }
+        seriesType() {
+            return this._internal__series._internal_seriesType();
+        }
+    }
+
+    class TimeScaleApi {
+        constructor(model, timeAxisWidget) {
             this._private__timeRangeChanged = new Delegate();
             this._private__logicalRangeChanged = new Delegate();
             this._private__sizeChanged = new Delegate();
@@ -11768,30 +11770,30 @@
             this._private__timeScale._internal_logicalRangeChanged()._internal_subscribe(this._private__onVisibleLogicalRangeChanged.bind(this));
             this._private__timeAxisWidget._internal_sizeChanged()._internal_subscribe(this._private__onSizeChanged.bind(this));
         }
-        TimeScaleApi.prototype._internal_destroy = function () {
+        _internal_destroy() {
             this._private__timeScale._internal_visibleBarsChanged()._internal_unsubscribeAll(this);
             this._private__timeScale._internal_logicalRangeChanged()._internal_unsubscribeAll(this);
             this._private__timeAxisWidget._internal_sizeChanged()._internal_unsubscribeAll(this);
             this._private__timeRangeChanged._internal_destroy();
             this._private__logicalRangeChanged._internal_destroy();
             this._private__sizeChanged._internal_destroy();
-        };
-        TimeScaleApi.prototype.scrollPosition = function () {
+        }
+        scrollPosition() {
             return this._private__timeScale._internal_rightOffset();
-        };
-        TimeScaleApi.prototype.scrollToPosition = function (position, animated) {
+        }
+        scrollToPosition(position, animated) {
             if (!animated) {
                 this._private__model._internal_setRightOffset(position);
                 return;
             }
-            this._private__timeScale._internal_scrollToOffsetAnimated(position, 1000 /* AnimationDurationMs */);
-        };
-        TimeScaleApi.prototype.scrollToRealTime = function () {
+            this._private__timeScale._internal_scrollToOffsetAnimated(position, 1000 /* Constants.AnimationDurationMs */);
+        }
+        scrollToRealTime() {
             this._private__timeScale._internal_scrollToRealTime();
-        };
-        TimeScaleApi.prototype.getVisibleRange = function () {
+        }
+        getVisibleRange() {
             var _a, _b;
-            var timeRange = this._private__timeScale._internal_visibleTimeRange();
+            const timeRange = this._private__timeScale._internal_visibleTimeRange();
             if (timeRange === null) {
                 return null;
             }
@@ -11799,17 +11801,17 @@
                 from: (_a = timeRange.from._internal_businessDay) !== null && _a !== void 0 ? _a : timeRange.from._internal_timestamp,
                 to: (_b = timeRange.to._internal_businessDay) !== null && _b !== void 0 ? _b : timeRange.to._internal_timestamp,
             };
-        };
-        TimeScaleApi.prototype.setVisibleRange = function (range) {
-            var convertedRange = {
+        }
+        setVisibleRange(range) {
+            const convertedRange = {
                 from: convertTime(range.from),
                 to: convertTime(range.to),
             };
-            var logicalRange = this._private__timeScale._internal_logicalRangeForTimeRange(convertedRange);
+            const logicalRange = this._private__timeScale._internal_logicalRangeForTimeRange(convertedRange);
             this._private__model._internal_setTargetLogicalRange(logicalRange);
-        };
-        TimeScaleApi.prototype.getVisibleLogicalRange = function () {
-            var logicalRange = this._private__timeScale._internal_visibleLogicalRange();
+        }
+        getVisibleLogicalRange() {
+            const logicalRange = this._private__timeScale._internal_visibleLogicalRange();
             if (logicalRange === null) {
                 return null;
             }
@@ -11817,112 +11819,114 @@
                 from: logicalRange._internal_left(),
                 to: logicalRange._internal_right(),
             };
-        };
-        TimeScaleApi.prototype.setVisibleLogicalRange = function (range) {
+        }
+        setVisibleLogicalRange(range) {
             assert(range.from <= range.to, 'The from index cannot be after the to index.');
             this._private__model._internal_setTargetLogicalRange(range);
-        };
-        TimeScaleApi.prototype.resetTimeScale = function () {
+        }
+        resetTimeScale() {
             this._private__model._internal_resetTimeScale();
-        };
-        TimeScaleApi.prototype.fitContent = function () {
+        }
+        fitContent() {
             this._private__model._internal_fitContent();
-        };
-        TimeScaleApi.prototype.logicalToCoordinate = function (logical) {
-            var timeScale = this._private__model._internal_timeScale();
+        }
+        logicalToCoordinate(logical) {
+            const timeScale = this._private__model._internal_timeScale();
             if (timeScale._internal_isEmpty()) {
                 return null;
             }
             else {
                 return timeScale._internal_indexToCoordinate(logical);
             }
-        };
-        TimeScaleApi.prototype.coordinateToLogical = function (x) {
+        }
+        coordinateToLogical(x) {
             if (this._private__timeScale._internal_isEmpty()) {
                 return null;
             }
             else {
                 return this._private__timeScale._internal_coordinateToIndex(x);
             }
-        };
-        TimeScaleApi.prototype.timeToCoordinate = function (time) {
-            var timePoint = convertTime(time);
-            var timePointIndex = this._private__timeScale._internal_timeToIndex(timePoint, false);
+        }
+        timeToCoordinate(time) {
+            const timePoint = convertTime(time);
+            const timePointIndex = this._private__timeScale._internal_timeToIndex(timePoint, false);
             if (timePointIndex === null) {
                 return null;
             }
             return this._private__timeScale._internal_indexToCoordinate(timePointIndex);
-        };
-        TimeScaleApi.prototype.coordinateToTime = function (x) {
+        }
+        coordinateToTime(x) {
             var _a;
-            var timeScale = this._private__model._internal_timeScale();
-            var timePointIndex = timeScale._internal_coordinateToIndex(x);
-            var timePoint = timeScale._internal_indexToTime(timePointIndex);
+            const timeScale = this._private__model._internal_timeScale();
+            const timePointIndex = timeScale._internal_coordinateToIndex(x);
+            const timePoint = timeScale._internal_indexToTime(timePointIndex);
             if (timePoint === null) {
                 return null;
             }
             return (_a = timePoint._internal_businessDay) !== null && _a !== void 0 ? _a : timePoint._internal_timestamp;
-        };
-        TimeScaleApi.prototype.width = function () {
+        }
+        width() {
             return this._private__timeAxisWidget._internal_getSize()._internal_w;
-        };
-        TimeScaleApi.prototype.height = function () {
+        }
+        height() {
             return this._private__timeAxisWidget._internal_getSize()._internal_h;
-        };
-        TimeScaleApi.prototype.subscribeVisibleTimeRangeChange = function (handler) {
+        }
+        subscribeVisibleTimeRangeChange(handler) {
             this._private__timeRangeChanged._internal_subscribe(handler);
-        };
-        TimeScaleApi.prototype.unsubscribeVisibleTimeRangeChange = function (handler) {
+        }
+        unsubscribeVisibleTimeRangeChange(handler) {
             this._private__timeRangeChanged._internal_unsubscribe(handler);
-        };
-        TimeScaleApi.prototype.subscribeVisibleLogicalRangeChange = function (handler) {
+        }
+        subscribeVisibleLogicalRangeChange(handler) {
             this._private__logicalRangeChanged._internal_subscribe(handler);
-        };
-        TimeScaleApi.prototype.unsubscribeVisibleLogicalRangeChange = function (handler) {
+        }
+        unsubscribeVisibleLogicalRangeChange(handler) {
             this._private__logicalRangeChanged._internal_unsubscribe(handler);
-        };
-        TimeScaleApi.prototype.subscribeSizeChange = function (handler) {
+        }
+        subscribeSizeChange(handler) {
             this._private__sizeChanged._internal_subscribe(handler);
-        };
-        TimeScaleApi.prototype.unsubscribeSizeChange = function (handler) {
+        }
+        unsubscribeSizeChange(handler) {
             this._private__sizeChanged._internal_unsubscribe(handler);
-        };
-        TimeScaleApi.prototype.applyOptions = function (options) {
+        }
+        applyOptions(options) {
             this._private__timeScale._internal_applyOptions(options);
-        };
-        TimeScaleApi.prototype.options = function () {
+        }
+        options() {
             return clone(this._private__timeScale._internal_options());
-        };
-        TimeScaleApi.prototype._private__onVisibleBarsChanged = function () {
+        }
+        _private__onVisibleBarsChanged() {
             if (this._private__timeRangeChanged._internal_hasListeners()) {
                 this._private__timeRangeChanged._internal_fire(this.getVisibleRange());
             }
-        };
-        TimeScaleApi.prototype._private__onVisibleLogicalRangeChanged = function () {
+        }
+        _private__onVisibleLogicalRangeChanged() {
             if (this._private__logicalRangeChanged._internal_hasListeners()) {
                 this._private__logicalRangeChanged._internal_fire(this.getVisibleLogicalRange());
             }
-        };
-        TimeScaleApi.prototype._private__onSizeChanged = function (size) {
+        }
+        _private__onSizeChanged(size) {
             this._private__sizeChanged._internal_fire(size._internal_w, size._internal_h);
-        };
-        return TimeScaleApi;
-    }());
+        }
+    }
 
     function patchPriceFormat(priceFormat) {
         if (priceFormat === undefined || priceFormat.type === 'custom') {
             return;
         }
-        var priceFormatBuiltIn = priceFormat;
+        const priceFormatBuiltIn = priceFormat;
         if (priceFormatBuiltIn.minMove !== undefined && priceFormatBuiltIn.precision === undefined) {
             priceFormatBuiltIn.precision = precisionByMinMove(priceFormatBuiltIn.minMove);
         }
     }
     function migrateHandleScaleScrollOptions(options) {
         if (isBoolean(options.handleScale)) {
-            var handleScale = options.handleScale;
+            const handleScale = options.handleScale;
             options.handleScale = {
-                axisDoubleClickReset: handleScale,
+                axisDoubleClickReset: {
+                    time: handleScale,
+                    price: handleScale,
+                },
                 axisPressedMouseMove: {
                     time: handleScale,
                     price: handleScale,
@@ -11931,14 +11935,22 @@
                 pinch: handleScale,
             };
         }
-        else if (options.handleScale !== undefined && isBoolean(options.handleScale.axisPressedMouseMove)) {
-            var axisPressedMouseMove = options.handleScale.axisPressedMouseMove;
-            options.handleScale.axisPressedMouseMove = {
-                time: axisPressedMouseMove,
-                price: axisPressedMouseMove,
-            };
+        else if (options.handleScale !== undefined) {
+            const { axisPressedMouseMove, axisDoubleClickReset } = options.handleScale;
+            if (isBoolean(axisPressedMouseMove)) {
+                options.handleScale.axisPressedMouseMove = {
+                    time: axisPressedMouseMove,
+                    price: axisPressedMouseMove,
+                };
+            }
+            if (isBoolean(axisDoubleClickReset)) {
+                options.handleScale.axisDoubleClickReset = {
+                    time: axisDoubleClickReset,
+                    price: axisDoubleClickReset,
+                };
+            }
         }
-        var handleScroll = options.handleScroll;
+        const handleScroll = options.handleScroll;
         if (isBoolean(handleScroll)) {
             options.handleScroll = {
                 horzTouchDrag: handleScroll,
@@ -11948,82 +11960,35 @@
             };
         }
     }
-    function migratePriceScaleOptions(options) {
-        /* eslint-disable deprecation/deprecation */
-        if (options.priceScale) {
-            warn('"priceScale" option has been deprecated, use "leftPriceScale", "rightPriceScale" and "overlayPriceScales" instead');
-            options.leftPriceScale = options.leftPriceScale || {};
-            options.rightPriceScale = options.rightPriceScale || {};
-            var position = options.priceScale.position;
-            delete options.priceScale.position;
-            options.leftPriceScale = merge(options.leftPriceScale, options.priceScale);
-            options.rightPriceScale = merge(options.rightPriceScale, options.priceScale);
-            if (position === 'left') {
-                options.leftPriceScale.visible = true;
-                options.rightPriceScale.visible = false;
-            }
-            if (position === 'right') {
-                options.leftPriceScale.visible = false;
-                options.rightPriceScale.visible = true;
-            }
-            if (position === 'none') {
-                options.leftPriceScale.visible = false;
-                options.rightPriceScale.visible = false;
-            }
-            // copy defaults for overlays
-            options.overlayPriceScales = options.overlayPriceScales || {};
-            if (options.priceScale.invertScale !== undefined) {
-                options.overlayPriceScales.invertScale = options.priceScale.invertScale;
-            }
-            // do not migrate mode for backward compatibility
-            if (options.priceScale.scaleMargins !== undefined) {
-                options.overlayPriceScales.scaleMargins = options.priceScale.scaleMargins;
-            }
-        }
-        /* eslint-enable deprecation/deprecation */
-    }
-    function migrateLayoutOptions(options) {
-        /* eslint-disable deprecation/deprecation */
-        if (!options.layout) {
-            return;
-        }
-        if (options.layout.backgroundColor && !options.layout.background) {
-            options.layout.background = { type: "solid" /* Solid */, color: options.layout.backgroundColor };
-        }
-        /* eslint-enable deprecation/deprecation */
-    }
     function toInternalOptions(options) {
         migrateHandleScaleScrollOptions(options);
-        migratePriceScaleOptions(options);
-        migrateLayoutOptions(options);
         return options;
     }
-    var ChartApi = /** @class */ (function () {
-        function ChartApi(container, options) {
-            var _this = this;
+    class ChartApi {
+        constructor(container, options) {
             this._private__dataLayer = new DataLayer();
             this._private__seriesMap = new Map();
             this._private__seriesMapReversed = new Map();
             this._private__clickedDelegate = new Delegate();
             this._private__crosshairMovedDelegate = new Delegate();
-            var internalOptions = (options === undefined) ?
+            const internalOptions = (options === undefined) ?
                 clone(chartOptionsDefaults) :
                 merge(clone(chartOptionsDefaults), toInternalOptions(options));
             this._private__chartWidget = new ChartWidget(container, internalOptions);
-            this._private__chartWidget._internal_clicked()._internal_subscribe(function (paramSupplier) {
-                if (_this._private__clickedDelegate._internal_hasListeners()) {
-                    _this._private__clickedDelegate._internal_fire(_this._private__convertMouseParams(paramSupplier()));
+            this._private__chartWidget._internal_clicked()._internal_subscribe((paramSupplier) => {
+                if (this._private__clickedDelegate._internal_hasListeners()) {
+                    this._private__clickedDelegate._internal_fire(this._private__convertMouseParams(paramSupplier()));
                 }
             }, this);
-            this._private__chartWidget._internal_crosshairMoved()._internal_subscribe(function (paramSupplier) {
-                if (_this._private__crosshairMovedDelegate._internal_hasListeners()) {
-                    _this._private__crosshairMovedDelegate._internal_fire(_this._private__convertMouseParams(paramSupplier()));
+            this._private__chartWidget._internal_crosshairMoved()._internal_subscribe((paramSupplier) => {
+                if (this._private__crosshairMovedDelegate._internal_hasListeners()) {
+                    this._private__crosshairMovedDelegate._internal_fire(this._private__convertMouseParams(paramSupplier()));
                 }
             }, this);
-            var model = this._private__chartWidget._internal_model();
+            const model = this._private__chartWidget._internal_model();
             this._private__timeScaleApi = new TimeScaleApi(model, this._private__chartWidget._internal_timeAxisWidget());
         }
-        ChartApi.prototype.remove = function () {
+        remove() {
             this._private__chartWidget._internal_clicked()._internal_unsubscribeAll(this);
             this._private__chartWidget._internal_crosshairMoved()._internal_unsubscribeAll(this);
             this._private__timeScaleApi._internal_destroy();
@@ -12033,150 +11998,107 @@
             this._private__clickedDelegate._internal_destroy();
             this._private__crosshairMovedDelegate._internal_destroy();
             this._private__dataLayer._internal_destroy();
-        };
-        ChartApi.prototype.resize = function (width, height, forceRepaint) {
+        }
+        resize(width, height, forceRepaint) {
             this._private__chartWidget._internal_resize(width, height, forceRepaint);
-        };
-        ChartApi.prototype.addAreaSeries = function (options) {
-            if (options === void 0) { options = {}; }
-            options = migrateOptions(options);
-            patchPriceFormat(options.priceFormat);
-            var strictOptions = merge(clone(seriesOptionsDefaults), areaStyleDefaults, options);
-            var series = this._private__chartWidget._internal_model()._internal_createSeries('Area', strictOptions);
-            var res = new SeriesApi(series, this, this);
-            this._private__seriesMap.set(res, series);
-            this._private__seriesMapReversed.set(series, res);
-            return res;
-        };
-        ChartApi.prototype.addBaselineSeries = function (options) {
-            if (options === void 0) { options = {}; }
-            options = migrateOptions(options);
-            patchPriceFormat(options.priceFormat);
-            // to avoid assigning fields to defaults we have to clone them
-            var strictOptions = merge(clone(seriesOptionsDefaults), clone(baselineStyleDefaults), options);
-            var series = this._private__chartWidget._internal_model()._internal_createSeries('Baseline', strictOptions);
-            var res = new SeriesApi(series, this, this);
-            this._private__seriesMap.set(res, series);
-            this._private__seriesMapReversed.set(series, res);
-            return res;
-        };
-        ChartApi.prototype.addBarSeries = function (options) {
-            if (options === void 0) { options = {}; }
-            options = migrateOptions(options);
-            patchPriceFormat(options.priceFormat);
-            var strictOptions = merge(clone(seriesOptionsDefaults), barStyleDefaults, options);
-            var series = this._private__chartWidget._internal_model()._internal_createSeries('Bar', strictOptions);
-            var res = new SeriesApi(series, this, this);
-            this._private__seriesMap.set(res, series);
-            this._private__seriesMapReversed.set(series, res);
-            return res;
-        };
-        ChartApi.prototype.addCandlestickSeries = function (options) {
-            if (options === void 0) { options = {}; }
-            options = migrateOptions(options);
+        }
+        addAreaSeries(options) {
+            return this._private__addSeriesImpl('Area', areaStyleDefaults, options);
+        }
+        addBaselineSeries(options) {
+            return this._private__addSeriesImpl('Baseline', baselineStyleDefaults, options);
+        }
+        addBarSeries(options) {
+            return this._private__addSeriesImpl('Bar', barStyleDefaults, options);
+        }
+        addCandlestickSeries(options = {}) {
             fillUpDownCandlesticksColors(options);
-            patchPriceFormat(options.priceFormat);
-            var strictOptions = merge(clone(seriesOptionsDefaults), candlestickStyleDefaults, options);
-            var series = this._private__chartWidget._internal_model()._internal_createSeries('Candlestick', strictOptions);
-            var res = new CandlestickSeriesApi(series, this, this);
-            this._private__seriesMap.set(res, series);
-            this._private__seriesMapReversed.set(series, res);
-            return res;
-        };
-        ChartApi.prototype.addHistogramSeries = function (options) {
-            if (options === void 0) { options = {}; }
-            options = migrateOptions(options);
-            patchPriceFormat(options.priceFormat);
-            var strictOptions = merge(clone(seriesOptionsDefaults), histogramStyleDefaults, options);
-            var series = this._private__chartWidget._internal_model()._internal_createSeries('Histogram', strictOptions);
-            var res = new SeriesApi(series, this, this);
-            this._private__seriesMap.set(res, series);
-            this._private__seriesMapReversed.set(series, res);
-            return res;
-        };
-        ChartApi.prototype.addLineSeries = function (options) {
-            if (options === void 0) { options = {}; }
-            options = migrateOptions(options);
-            patchPriceFormat(options.priceFormat);
-            var strictOptions = merge(clone(seriesOptionsDefaults), lineStyleDefaults, options);
-            var series = this._private__chartWidget._internal_model()._internal_createSeries('Line', strictOptions);
-            var res = new SeriesApi(series, this, this);
-            this._private__seriesMap.set(res, series);
-            this._private__seriesMapReversed.set(series, res);
-            return res;
-        };
-        ChartApi.prototype.removeSeries = function (seriesApi) {
-            var series = ensureDefined(this._private__seriesMap.get(seriesApi));
-            var update = this._private__dataLayer._internal_removeSeries(series);
-            var model = this._private__chartWidget._internal_model();
+            return this._private__addSeriesImpl('Candlestick', candlestickStyleDefaults, options);
+        }
+        addHistogramSeries(options) {
+            return this._private__addSeriesImpl('Histogram', histogramStyleDefaults, options);
+        }
+        addLineSeries(options) {
+            return this._private__addSeriesImpl('Line', lineStyleDefaults, options);
+        }
+        removeSeries(seriesApi) {
+            const series = ensureDefined(this._private__seriesMap.get(seriesApi));
+            const update = this._private__dataLayer._internal_removeSeries(series);
+            const model = this._private__chartWidget._internal_model();
             model._internal_removeSeries(series);
             this._private__sendUpdateToChart(update);
             this._private__seriesMap.delete(seriesApi);
             this._private__seriesMapReversed.delete(series);
-        };
-        ChartApi.prototype._internal_applyNewData = function (series, data) {
+        }
+        _internal_applyNewData(series, data) {
             this._private__sendUpdateToChart(this._private__dataLayer._internal_setSeriesData(series, data));
-        };
-        ChartApi.prototype._internal_updateData = function (series, data) {
+        }
+        _internal_updateData(series, data) {
             this._private__sendUpdateToChart(this._private__dataLayer._internal_updateSeriesData(series, data));
-        };
-        ChartApi.prototype.subscribeClick = function (handler) {
+        }
+        subscribeClick(handler) {
             this._private__clickedDelegate._internal_subscribe(handler);
-        };
-        ChartApi.prototype.unsubscribeClick = function (handler) {
+        }
+        unsubscribeClick(handler) {
             this._private__clickedDelegate._internal_unsubscribe(handler);
-        };
-        ChartApi.prototype.subscribeCrosshairMove = function (handler) {
+        }
+        subscribeCrosshairMove(handler) {
             this._private__crosshairMovedDelegate._internal_subscribe(handler);
-        };
-        ChartApi.prototype.unsubscribeCrosshairMove = function (handler) {
+        }
+        unsubscribeCrosshairMove(handler) {
             this._private__crosshairMovedDelegate._internal_unsubscribe(handler);
-        };
-        ChartApi.prototype.priceScale = function (priceScaleId) {
-            if (priceScaleId === undefined) {
-                warn('Using ChartApi.priceScale() method without arguments has been deprecated, pass valid price scale id instead');
-                priceScaleId = this._private__chartWidget._internal_model()._internal_defaultVisiblePriceScaleId();
-            }
+        }
+        priceScale(priceScaleId) {
             return new PriceScaleApi(this._private__chartWidget, priceScaleId);
-        };
-        ChartApi.prototype.timeScale = function () {
+        }
+        timeScale() {
             return this._private__timeScaleApi;
-        };
-        ChartApi.prototype.applyOptions = function (options) {
+        }
+        applyOptions(options) {
             this._private__chartWidget._internal_applyOptions(toInternalOptions(options));
-        };
-        ChartApi.prototype.options = function () {
+        }
+        options() {
             return this._private__chartWidget._internal_options();
-        };
-        ChartApi.prototype.takeScreenshot = function () {
+        }
+        takeScreenshot() {
             return this._private__chartWidget._internal_takeScreenshot();
-        };
-        ChartApi.prototype._private__sendUpdateToChart = function (update) {
-            var model = this._private__chartWidget._internal_model();
+        }
+        _private__addSeriesImpl(type, styleDefaults, options = {}) {
+            patchPriceFormat(options.priceFormat);
+            const strictOptions = merge(clone(seriesOptionsDefaults), clone(styleDefaults), options);
+            const series = this._private__chartWidget._internal_model()._internal_createSeries(type, strictOptions);
+            const res = new SeriesApi(series, this, this);
+            this._private__seriesMap.set(res, series);
+            this._private__seriesMapReversed.set(series, res);
+            return res;
+        }
+        _private__sendUpdateToChart(update) {
+            const model = this._private__chartWidget._internal_model();
             model._internal_updateTimeScale(update._internal_timeScale._internal_baseIndex, update._internal_timeScale._internal_points, update._internal_timeScale._internal_firstChangedPointIndex);
-            update._internal_series.forEach(function (value, series) { return series._internal_setData(value._internal_data, value._internal_info); });
+            update._internal_series.forEach((value, series) => series._internal_setData(value._internal_data, value._internal_info));
             model._internal_recalculateAllPanes();
-        };
-        ChartApi.prototype._private__mapSeriesToApi = function (series) {
+        }
+        _private__mapSeriesToApi(series) {
             return ensureDefined(this._private__seriesMapReversed.get(series));
-        };
-        ChartApi.prototype._private__convertMouseParams = function (param) {
-            var _this = this;
-            var seriesPrices = new Map();
-            param._internal_seriesPrices.forEach(function (price, series) {
-                seriesPrices.set(_this._private__mapSeriesToApi(series), price);
+        }
+        _private__convertMouseParams(param) {
+            const seriesData = new Map();
+            param._internal_seriesData.forEach((plotRow, series) => {
+                const data = getSeriesDataCreator(series._internal_seriesType())(plotRow);
+                assert(isFulfilledData(data));
+                seriesData.set(this._private__mapSeriesToApi(series), data);
             });
-            var hoveredSeries = param._internal_hoveredSeries === undefined ? undefined : this._private__mapSeriesToApi(param._internal_hoveredSeries);
+            const hoveredSeries = param._internal_hoveredSeries === undefined ? undefined : this._private__mapSeriesToApi(param._internal_hoveredSeries);
             return {
-                time: param._internal_time && (param._internal_time._internal_businessDay || param._internal_time._internal_timestamp),
+                time: param._internal_time,
+                logical: param._internal_index,
                 point: param._internal_point,
-                hoveredSeries: hoveredSeries,
+                hoveredSeries,
                 hoveredMarkerId: param._internal_hoveredObject,
-                seriesPrices: seriesPrices,
+                seriesData,
             };
-        };
-        return ChartApi;
-    }());
+        }
+    }
 
     /**
      * This function is the main entry point of the Lightweight Charting Library.
@@ -12186,10 +12108,10 @@
      * @returns An interface to the created chart
      */
     function createChart(container, options) {
-        var htmlElement;
+        let htmlElement;
         if (isString(container)) {
-            var element = document.getElementById(container);
-            assert(element !== null, "Cannot find element in DOM with id=".concat(container));
+            const element = document.getElementById(container);
+            assert(element !== null, `Cannot find element in DOM with id=${container}`);
             htmlElement = element;
         }
         else {
@@ -12203,7 +12125,7 @@
      * Returns the current version as a string. For example `'3.3.0'`.
      */
     function version() {
-        return "3.8.0";
+        return "4.0.0";
     }
 
     var LightweightChartsModule = /*#__PURE__*/Object.freeze({
@@ -12213,10 +12135,10 @@
         get LineType () { return LineType; },
         get TrackingModeExitMode () { return TrackingModeExitMode; },
         get CrosshairMode () { return CrosshairMode; },
+        get MismatchDirection () { return MismatchDirection; },
         get PriceScaleMode () { return PriceScaleMode; },
         get PriceLineSource () { return PriceLineSource; },
         get LastPriceAnimationMode () { return LastPriceAnimationMode; },
-        get LasPriceAnimationMode () { return LastPriceAnimationMode; },
         get TickMarkType () { return TickMarkType; },
         get ColorType () { return ColorType; },
         isBusinessDay: isBusinessDay,
diff --git a/node_modules/lightweight-charts/dist/lightweight-charts.standalone.production.js b/node_modules/lightweight-charts/dist/lightweight-charts.standalone.production.js
index 36a7fe8..3cf2114 100644
--- a/node_modules/lightweight-charts/dist/lightweight-charts.standalone.production.js
+++ b/node_modules/lightweight-charts/dist/lightweight-charts.standalone.production.js
@@ -1,7 +1,7 @@
 /*!
  * @license
- * TradingView Lightweight Charts v3.8.0
- * Copyright (c) 2020 TradingView, Inc.
+ * TradingView Lightweight Charts v4.0.0
+ * Copyright (c) 2022 TradingView, Inc.
  * Licensed under Apache License 2.0 https://www.apache.org/licenses/LICENSE-2.0
  */
-!function(){"use strict";var t,i;function n(t,i){var n,s=((n={})[0]=[],n[1]=[t.lineWidth,t.lineWidth],n[2]=[2*t.lineWidth,2*t.lineWidth],n[3]=[6*t.lineWidth,6*t.lineWidth],n[4]=[t.lineWidth,4*t.lineWidth],n)[i];t.setLineDash(s)}function s(t,i,n,s){t.beginPath();var h=t.lineWidth%2?.5:0;t.moveTo(n,i+h),t.lineTo(s,i+h),t.stroke()}function h(t,i){if(!t)throw new Error("Assertion failed"+(i?": "+i:""))}function r(t){if(void 0===t)throw new Error("Value is undefined");return t}function e(t){if(null===t)throw new Error("Value is null");return t}function u(t){return e(r(t))}!function(t){t[t.Simple=0]="Simple",t[t.WithSteps=1]="WithSteps"}(t||(t={})),function(t){t[t.Solid=0]="Solid",t[t.Dotted=1]="Dotted",t[t.Dashed=2]="Dashed",t[t.LargeDashed=3]="LargeDashed",t[t.SparseDotted=4]="SparseDotted"}(i||(i={}));var a={khaki:"#f0e68c",azure:"#f0ffff",aliceblue:"#f0f8ff",ghostwhite:"#f8f8ff",gold:"#ffd700",goldenrod:"#daa520",gainsboro:"#dcdcdc",gray:"#808080",green:"#008000",honeydew:"#f0fff0",floralwhite:"#fffaf0",lightblue:"#add8e6",lightcoral:"#f08080",lemonchiffon:"#fffacd",hotpink:"#ff69b4",lightyellow:"#ffffe0",greenyellow:"#adff2f",lightgoldenrodyellow:"#fafad2",limegreen:"#32cd32",linen:"#faf0e6",lightcyan:"#e0ffff",magenta:"#f0f",maroon:"#800000",olive:"#808000",orange:"#ffa500",oldlace:"#fdf5e6",mediumblue:"#0000cd",transparent:"#0000",lime:"#0f0",lightpink:"#ffb6c1",mistyrose:"#ffe4e1",moccasin:"#ffe4b5",midnightblue:"#191970",orchid:"#da70d6",mediumorchid:"#ba55d3",mediumturquoise:"#48d1cc",orangered:"#ff4500",royalblue:"#4169e1",powderblue:"#b0e0e6",red:"#f00",coral:"#ff7f50",turquoise:"#40e0d0",white:"#fff",whitesmoke:"#f5f5f5",wheat:"#f5deb3",teal:"#008080",steelblue:"#4682b4",bisque:"#ffe4c4",aquamarine:"#7fffd4",aqua:"#0ff",sienna:"#a0522d",silver:"#c0c0c0",springgreen:"#00ff7f",antiquewhite:"#faebd7",burlywood:"#deb887",brown:"#a52a2a",beige:"#f5f5dc",chocolate:"#d2691e",chartreuse:"#7fff00",cornflowerblue:"#6495ed",cornsilk:"#fff8dc",crimson:"#dc143c",cadetblue:"#5f9ea0",tomato:"#ff6347",fuchsia:"#f0f",blue:"#00f",salmon:"#fa8072",blanchedalmond:"#ffebcd",slateblue:"#6a5acd",slategray:"#708090",thistle:"#d8bfd8",tan:"#d2b48c",cyan:"#0ff",darkblue:"#00008b",darkcyan:"#008b8b",darkgoldenrod:"#b8860b",darkgray:"#a9a9a9",blueviolet:"#8a2be2",black:"#000",darkmagenta:"#8b008b",darkslateblue:"#483d8b",darkkhaki:"#bdb76b",darkorchid:"#9932cc",darkorange:"#ff8c00",darkgreen:"#006400",darkred:"#8b0000",dodgerblue:"#1e90ff",darkslategray:"#2f4f4f",dimgray:"#696969",deepskyblue:"#00bfff",firebrick:"#b22222",forestgreen:"#228b22",indigo:"#4b0082",ivory:"#fffff0",lavenderblush:"#fff0f5",feldspar:"#d19275",indianred:"#cd5c5c",lightgreen:"#90ee90",lightgrey:"#d3d3d3",lightskyblue:"#87cefa",lightslategray:"#789",lightslateblue:"#8470ff",snow:"#fffafa",lightseagreen:"#20b2aa",lightsalmon:"#ffa07a",darksalmon:"#e9967a",darkviolet:"#9400d3",mediumpurple:"#9370d8",mediumaquamarine:"#66cdaa",skyblue:"#87ceeb",lavender:"#e6e6fa",lightsteelblue:"#b0c4de",mediumvioletred:"#c71585",mintcream:"#f5fffa",navajowhite:"#ffdead",navy:"#000080",olivedrab:"#6b8e23",palevioletred:"#d87093",violetred:"#d02090",yellow:"#ff0",yellowgreen:"#9acd32",lawngreen:"#7cfc00",pink:"#ffc0cb",paleturquoise:"#afeeee",palegoldenrod:"#eee8aa",darkolivegreen:"#556b2f",darkseagreen:"#8fbc8f",darkturquoise:"#00ced1",peachpuff:"#ffdab9",deeppink:"#ff1493",violet:"#ee82ee",palegreen:"#98fb98",mediumseagreen:"#3cb371",peru:"#cd853f",saddlebrown:"#8b4513",sandybrown:"#f4a460",rosybrown:"#bc8f8f",purple:"#800080",seagreen:"#2e8b57",seashell:"#fff5ee",papayawhip:"#ffefd5",mediumslateblue:"#7b68ee",plum:"#dda0dd",mediumspringgreen:"#00fa9a"};function o(t){return t<0?0:t>255?255:Math.round(t)||0}function l(t){return t<=0||t>0?t<0?0:t>1?1:Math.round(1e4*t)/1e4:0}var f=/^#([0-9a-f])([0-9a-f])([0-9a-f])([0-9a-f])?$/i,c=/^#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})?$/i,v=/^rgb\(\s*(-?\d{1,10})\s*,\s*(-?\d{1,10})\s*,\s*(-?\d{1,10})\s*\)$/,_=/^rgba\(\s*(-?\d{1,10})\s*,\s*(-?\d{1,10})\s*,\s*(-?\d{1,10})\s*,\s*(-?[\d]{0,10}(?:\.\d+)?)\s*\)$/;function d(t){var i;if((t=t.toLowerCase())in a&&(t=a[t]),i=_.exec(t)||v.exec(t))return[o(parseInt(i[1],10)),o(parseInt(i[2],10)),o(parseInt(i[3],10)),l(i.length<5?1:parseFloat(i[4]))];if(i=c.exec(t))return[o(parseInt(i[1],16)),o(parseInt(i[2],16)),o(parseInt(i[3],16)),1];if(i=f.exec(t))return[o(17*parseInt(i[1],16)),o(17*parseInt(i[2],16)),o(17*parseInt(i[3],16)),1];throw new Error("Cannot parse color: ".concat(t))}function w(t){var i,n=d(t);return{t:"rgb(".concat(n[0],", ").concat(n[1],", ").concat(n[2],")"),i:(i=n,.199*i[0]+.687*i[1]+.114*i[2]>160?"black":"white")}}var M=function(t,i){return M=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,i){t.__proto__=i}||function(t,i){for(var n in i)Object.prototype.hasOwnProperty.call(i,n)&&(t[n]=i[n])},M(t,i)};function b(t,i){if("function"!=typeof i&&null!==i)throw new TypeError("Class extends value "+String(i)+" is not a constructor or null");function n(){this.constructor=t}M(t,i),t.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}var m=function(){return m=Object.assign||function(t){for(var i,n=1,s=arguments.length;n<s;n++)for(var h in i=arguments[n])Object.prototype.hasOwnProperty.call(i,h)&&(t[h]=i[h]);return t},m.apply(this,arguments)};function g(t,i,n){if(n||2===arguments.length)for(var s,h=0,r=i.length;h<r;h++)!s&&h in i||(s||(s=Array.prototype.slice.call(i,0,h)),s[h]=i[h]);return t.concat(s||Array.prototype.slice.call(i))}var p=function(){function t(){this.h=[]}return t.prototype.u=function(t,i,n){var s={o:t,l:i,v:!0===n};this.h.push(s)},t.prototype._=function(t){var i=this.h.findIndex((function(i){return t===i.o}));i>-1&&this.h.splice(i,1)},t.prototype.M=function(t){this.h=this.h.filter((function(i){return i.l!==t}))},t.prototype.m=function(t,i){var n=g([],this.h,!0);this.h=this.h.filter((function(t){return!t.v})),n.forEach((function(n){return n.o(t,i)}))},t.prototype.g=function(){return this.h.length>0},t.prototype.p=function(){this.h=[]},t}();function y(t){for(var i=[],n=1;n<arguments.length;n++)i[n-1]=arguments[n];for(var s=0,h=i;s<h.length;s++){var r=h[s];for(var e in r)void 0!==r[e]&&("object"!=typeof r[e]||void 0===t[e]?t[e]=r[e]:y(t[e],r[e]))}return t}function k(t){return"number"==typeof t&&isFinite(t)}function x(t){return"number"==typeof t&&t%1==0}function N(t){return"string"==typeof t}function C(t){return"boolean"==typeof t}function S(t){var i,n,s,h=t;if(!h||"object"!=typeof h)return h;for(n in i=Array.isArray(h)?[]:{},h)h.hasOwnProperty(n)&&(s=h[n],i[n]=s&&"object"==typeof s?S(s):s);return i}function T(t){return null!==t}function D(t){return null===t?void 0:t}var A="'Trebuchet MS', Roboto, Ubuntu, sans-serif";function B(t,i,n){return n=void 0!==n?"".concat(n," "):"",void 0===i&&(i=A),"".concat(n).concat(t,"px ").concat(i)}var L=function(){function t(t){this.k={N:1,C:4,S:NaN,T:"",D:"",A:"",B:0,L:0,O:0,F:0,V:0},this.P=t}return t.prototype.R=function(){var t=this.k,i=this.W(),n=this.I();return t.S===i&&t.D===n||(t.S=i,t.D=n,t.T=B(i,n),t.F=Math.floor(i/3.5),t.B=t.F,t.L=Math.max(Math.ceil(i/2-t.C/2),0),t.O=Math.ceil(i/2+t.C/2),t.V=Math.round(i/10)),t.A=this.j(),this.k},t.prototype.j=function(){return this.P.R().layout.textColor},t.prototype.W=function(){return this.P.R().layout.fontSize},t.prototype.I=function(){return this.P.R().layout.fontFamily},t}(),E=function(){function t(){this.q=[]}return t.prototype.U=function(t){this.q=t},t.prototype.H=function(t,i,n,s){this.q.forEach((function(h){t.save(),h.H(t,i,n,s),t.restore()}))},t}(),O=function(){function t(){}return t.prototype.H=function(t,i,n,s){t.save(),t.scale(i,i),this.Y(t,n,s),t.restore()},t.prototype.$=function(t,i,n,s){t.save(),t.scale(i,i),this.K(t,n,s),t.restore()},t.prototype.K=function(t,i,n){},t}(),F=function(t){function i(){var i=null!==t&&t.apply(this,arguments)||this;return i.X=null,i}return b(i,t),i.prototype.Z=function(t){this.X=t},i.prototype.Y=function(t){if(null!==this.X&&null!==this.X.J){var i=this.X.J,n=this.X,s=function(s){t.beginPath();for(var h=i.to-1;h>=i.from;--h){var r=n.G[h];t.moveTo(r.tt,r.it),t.arc(r.tt,r.it,s,0,2*Math.PI)}t.fill()};t.fillStyle=n.nt,s(n.st+2),t.fillStyle=n.ht,s(n.st)}},i}(O);function V(){return{G:[{tt:0,it:0,rt:0,et:0}],ht:"",nt:"",st:0,J:null}}var P={from:0,to:1},R=function(){function t(t,i){this.ut=new E,this.ot=[],this.lt=[],this.ft=!0,this.P=t,this.ct=i,this.ut.U(this.ot)}return t.prototype.vt=function(t){var i=this.P._t();i.length!==this.ot.length&&(this.lt=i.map(V),this.ot=this.lt.map((function(t){var i=new F;return i.Z(t),i})),this.ut.U(this.ot)),this.ft=!0},t.prototype.dt=function(t,i,n){return this.ft&&(this.wt(t),this.ft=!1),this.ut},t.prototype.wt=function(t){var i=this,n=this.P._t(),s=this.ct.Mt(),h=this.P.bt();n.forEach((function(n,r){var u,a=i.lt[r],o=n.gt(s);if(null!==o&&n.yt()){var l=e(n.kt());a.ht=o.xt,a.st=o.st,a.G[0].et=o.et,a.G[0].it=n.Ct().Nt(o.et,l.St),a.nt=null!==(u=o.Tt)&&void 0!==u?u:i.P.Dt(a.G[0].it/t),a.G[0].rt=s,a.G[0].tt=h.At(s),a.J=P}else a.J=null}))},t}(),z=function(){function t(t){this.Bt=t}return t.prototype.H=function(t,i,h,r){if(null!==this.Bt){var e=this.Bt.Lt.yt,u=this.Bt.Et.yt;if(e||u){t.save();var a=Math.round(this.Bt.tt*i),o=Math.round(this.Bt.it*i),l=Math.ceil(this.Bt.Ot*i),f=Math.ceil(this.Bt.Ft*i);t.lineCap="butt",e&&a>=0&&(t.lineWidth=Math.floor(this.Bt.Lt.Vt*i),t.strokeStyle=this.Bt.Lt.A,t.fillStyle=this.Bt.Lt.A,n(t,this.Bt.Lt.Pt),function(t,i,n,s){t.beginPath();var h=t.lineWidth%2?.5:0;t.moveTo(i+h,n),t.lineTo(i+h,s),t.stroke()}(t,a,0,f)),u&&o>=0&&(t.lineWidth=Math.floor(this.Bt.Et.Vt*i),t.strokeStyle=this.Bt.Et.A,t.fillStyle=this.Bt.Et.A,n(t,this.Bt.Et.Pt),s(t,o,0,l)),t.restore()}}},t}(),W=function(){function t(t){this.ft=!0,this.Rt={Lt:{Vt:1,Pt:0,A:"",yt:!1},Et:{Vt:1,Pt:0,A:"",yt:!1},Ot:0,Ft:0,tt:0,it:0},this.zt=new z(this.Rt),this.Wt=t}return t.prototype.vt=function(){this.ft=!0},t.prototype.dt=function(t,i){return this.ft&&(this.wt(),this.ft=!1),this.zt},t.prototype.wt=function(){var t=this.Wt.yt(),i=e(this.Wt.It()),n=i.jt().R().crosshair,s=this.Rt;s.Et.yt=t&&this.Wt.qt(i),s.Lt.yt=t&&this.Wt.Ut(),s.Et.Vt=n.horzLine.width,s.Et.Pt=n.horzLine.style,s.Et.A=n.horzLine.color,s.Lt.Vt=n.vertLine.width,s.Lt.Pt=n.vertLine.style,s.Lt.A=n.vertLine.color,s.Ot=i.Ht(),s.Ft=i.Yt(),s.tt=this.Wt.$t(),s.it=this.Wt.Kt()},t}();function I(t,i,n,s,h,r){t.fillRect(i+r,n,s-2*r,r),t.fillRect(i+r,n+h-r,s-2*r,r),t.fillRect(i,n,r,h),t.fillRect(i+s-r,n,r,h)}function j(t,i,n){t.save(),t.scale(i,i),n(),t.restore()}function q(t,i,n,s,h,r){t.save(),t.globalCompositeOperation="copy",t.fillStyle=r,t.fillRect(i,n,s,h),t.restore()}function U(t,i,n,s,h,r,e){t.save(),t.globalCompositeOperation="copy";var u=t.createLinearGradient(0,0,0,h);u.addColorStop(0,r),u.addColorStop(1,e),t.fillStyle=u,t.fillRect(i,n,s,h),t.restore()}var H,Y=function(){function t(t,i){this.Z(t,i)}return t.prototype.Z=function(t,i){this.Bt=t,this.Xt=i},t.prototype.H=function(t,i,n,s,h,r){if(this.Bt.yt){t.font=i.T;var e=this.Bt.Zt||!this.Bt.Jt?i.C:0,u=i.N,a=i.F,o=i.B,l=i.L,f=i.O,c=this.Bt.Gt,v=Math.ceil(n.Qt(t,c)),_=i.V,d=i.S+a+o,w=Math.ceil(.5*d),M=u+v+l+f+e,b=this.Xt.ti;this.Xt.ii&&(b=this.Xt.ii);var m,g,p=(b=Math.round(b))-w,y=p+d,k="right"===h,x=k?s:0,N=Math.ceil(s*r),C=x;if(t.fillStyle=this.Xt.t,t.lineWidth=1,t.lineCap="butt",c){k?(m=x-e,g=(C=x-M)+f):(C=x+M,m=x+e,g=x+u+e+l);var S=Math.max(1,Math.floor(r)),T=Math.max(1,Math.floor(u*r)),D=k?N:0,A=Math.round(p*r),B=Math.round(C*r),L=Math.round(b*r)-Math.floor(.5*r),E=L+S+(L-A),O=Math.round(m*r);t.save(),t.beginPath(),t.moveTo(D,A),t.lineTo(B,A),t.lineTo(B,E),t.lineTo(D,E),t.fill(),t.fillStyle=this.Bt.Tt,t.fillRect(k?N-T:0,A,T,E-A),this.Bt.Zt&&(t.fillStyle=this.Xt.A,t.fillRect(D,L,O-D,S)),t.textAlign="left",t.fillStyle=this.Xt.A,j(t,r,(function(){t.fillText(c,g,y-o-_)})),t.restore()}}},t.prototype.Yt=function(t,i){return this.Bt.yt?t.S+t.F+t.B:0},t}(),$=function(){function t(t){this.ni={ti:0,A:"#FFF",t:"#000"},this.si={Gt:"",yt:!1,Zt:!0,Jt:!1,Tt:""},this.hi={Gt:"",yt:!1,Zt:!1,Jt:!0,Tt:""},this.ft=!0,this.ri=new(t||Y)(this.si,this.ni),this.ei=new(t||Y)(this.hi,this.ni)}return t.prototype.Gt=function(){return this.ui(),this.si.Gt},t.prototype.ti=function(){return this.ui(),this.ni.ti},t.prototype.vt=function(){this.ft=!0},t.prototype.Yt=function(t,i){return void 0===i&&(i=!1),Math.max(this.ri.Yt(t,i),this.ei.Yt(t,i))},t.prototype.ai=function(){return this.ni.ii||0},t.prototype.oi=function(t){this.ni.ii=t},t.prototype.li=function(){return this.ui(),this.si.yt||this.hi.yt},t.prototype.fi=function(){return this.ui(),this.si.yt},t.prototype.dt=function(t){return this.ui(),this.si.Zt=this.si.Zt&&t.R().drawTicks,this.hi.Zt=this.hi.Zt&&t.R().drawTicks,this.ri.Z(this.si,this.ni),this.ei.Z(this.hi,this.ni),this.ri},t.prototype.ci=function(){return this.ui(),this.ri.Z(this.si,this.ni),this.ei.Z(this.hi,this.ni),this.ei},t.prototype.ui=function(){this.ft&&(this.si.Zt=!0,this.hi.Zt=!1,this.vi(this.si,this.hi,this.ni))},t}(),K=function(t){function i(i,n,s){var h=t.call(this)||this;return h.Wt=i,h._i=n,h.di=s,h}return b(i,t),i.prototype.vi=function(t,i,n){t.yt=!1;var s=this.Wt.R().horzLine;if(s.labelVisible){var h=this._i.kt();if(this.Wt.yt()&&!this._i.wi()&&null!==h){var r=w(s.labelBackgroundColor);n.t=r.t,n.A=r.i;var e=this.di(this._i);n.ti=e.ti,t.Gt=this._i.Mi(e.et,h),t.yt=!0}}},i}($),X=/[1-9]/g,Z=function(){function t(){this.Bt=null}return t.prototype.Z=function(t){this.Bt=t},t.prototype.H=function(t,i,n){var s=this;if(null!==this.Bt&&!1!==this.Bt.yt&&0!==this.Bt.Gt.length){t.font=i.T;var h=Math.round(i.bi.Qt(t,this.Bt.Gt,X));if(!(h<=0)){t.save();var r=i.mi,u=h+2*r,a=u/2,o=this.Bt.Ht,l=this.Bt.ti,f=Math.floor(l-a)+.5;f<0?(l+=Math.abs(0-f),f=Math.floor(l-a)+.5):f+u>o&&(l-=Math.abs(o-(f+u)),f=Math.floor(l-a)+.5);var c=f+u,v=0+i.N+i.F+i.S+i.B;t.fillStyle=this.Bt.t;var _=Math.round(f*n),d=Math.round(0*n),w=Math.round(c*n),M=Math.round(v*n);t.fillRect(_,d,w-_,M-d);var b=Math.round(this.Bt.ti*n),m=d,g=Math.round((m+i.N+i.C)*n);t.fillStyle=this.Bt.A;var p=Math.max(1,Math.floor(n)),y=Math.floor(.5*n);t.fillRect(b-y,m,p,g-m);var k=v-i.V-i.B;t.textAlign="left",t.fillStyle=this.Bt.A,j(t,n,(function(){t.fillText(e(s.Bt).Gt,f+r,k)})),t.restore()}}},t}(),J=function(){function t(t,i,n){this.ft=!0,this.zt=new Z,this.Rt={yt:!1,t:"#4c525e",A:"white",Gt:"",Ht:0,ti:NaN},this.ct=t,this.gi=i,this.di=n}return t.prototype.vt=function(){this.ft=!0},t.prototype.dt=function(){return this.ft&&(this.wt(),this.ft=!1),this.zt.Z(this.Rt),this.zt},t.prototype.wt=function(){var t=this.Rt;t.yt=!1;var i=this.ct.R().vertLine;if(i.labelVisible){var n=this.gi.bt();if(!n.wi()){var s=n.pi(this.ct.Mt());t.Ht=n.Ht();var h=this.di();if(h.rt){t.ti=h.ti,t.Gt=n.yi(e(s)),t.yt=!0;var r=w(i.labelBackgroundColor);t.t=r.t,t.A=r.i}}}},t}(),G=function(){function t(){this.ki=null,this.xi=0}return t.prototype.Ni=function(){return this.xi},t.prototype.Ci=function(t){this.xi=t},t.prototype.Ct=function(){return this.ki},t.prototype.Si=function(t){this.ki=t},t.prototype.Ti=function(){return[]},t.prototype.yt=function(){return!0},t}();!function(t){t[t.Normal=0]="Normal",t[t.Magnet=1]="Magnet"}(H||(H={}));var Q=function(t){function i(i,n){var s=t.call(this)||this;s.Di=null,s.Ai=NaN,s.Bi=0,s.Li=!0,s.Ei=new Map,s.Oi=!1,s.Fi=NaN,s.Vi=NaN,s.Pi=NaN,s.Ri=NaN,s.gi=i,s.zi=n,s.Wi=new R(i,s);var h,r;s.Ii=(h=function(){return s.Ai},r=function(){return s.Vi},function(t){var i=r(),n=h();if(t===e(s.Di).ji())return{et:n,ti:i};var u=e(t.kt());return{et:t.qi(i,u),ti:i}});var u=function(t,i){return function(){return{rt:s.gi.bt().pi(t()),ti:i()}}}((function(){return s.Bi}),(function(){return s.$t()}));return s.Ui=new J(s,i,u),s.Hi=new W(s),s}return b(i,t),i.prototype.R=function(){return this.zi},i.prototype.Yi=function(t,i){this.Pi=t,this.Ri=i},i.prototype.$i=function(){this.Pi=NaN,this.Ri=NaN},i.prototype.Ki=function(){return this.Pi},i.prototype.Xi=function(){return this.Ri},i.prototype.Zi=function(t,i,n){this.Oi||(this.Oi=!0),this.Li=!0,this.Ji(t,i,n)},i.prototype.Mt=function(){return this.Bi},i.prototype.$t=function(){return this.Fi},i.prototype.Kt=function(){return this.Vi},i.prototype.yt=function(){return this.Li},i.prototype.Gi=function(){this.Li=!1,this.Qi(),this.Ai=NaN,this.Fi=NaN,this.Vi=NaN,this.Di=null,this.$i()},i.prototype.tn=function(t){return null!==this.Di?[this.Hi,this.Wi]:[]},i.prototype.qt=function(t){return t===this.Di&&this.zi.horzLine.visible},i.prototype.Ut=function(){return this.zi.vertLine.visible},i.prototype.nn=function(t,i){this.Li&&this.Di===t||this.Ei.clear();var n=[];return this.Di===t&&n.push(this.sn(this.Ei,i,this.Ii)),n},i.prototype.Ti=function(){return this.Li?[this.Ui]:[]},i.prototype.It=function(){return this.Di},i.prototype.hn=function(){this.Hi.vt(),this.Ei.forEach((function(t){return t.vt()})),this.Ui.vt(),this.Wi.vt()},i.prototype.rn=function(t){return t&&!t.ji().wi()?t.ji():null},i.prototype.Ji=function(t,i,n){this.en(t,i,n)&&this.hn()},i.prototype.en=function(t,i,n){var s=this.Fi,h=this.Vi,r=this.Ai,e=this.Bi,u=this.Di,a=this.rn(n);this.Bi=t,this.Fi=isNaN(t)?NaN:this.gi.bt().At(t),this.Di=n;var o=null!==a?a.kt():null;return null!==a&&null!==o?(this.Ai=i,this.Vi=a.Nt(i,o)):(this.Ai=NaN,this.Vi=NaN),s!==this.Fi||h!==this.Vi||e!==this.Bi||r!==this.Ai||u!==this.Di},i.prototype.Qi=function(){var t=this.gi._t().map((function(t){return t.an().un()})).filter(T),i=0===t.length?null:Math.max.apply(Math,t);this.Bi=null!==i?i:NaN},i.prototype.sn=function(t,i,n){var s=t.get(i);return void 0===s&&(s=new K(this,i,n),t.set(i,s)),s},i}(G);function tt(t){return"left"===t||"right"===t}var it=function(){function t(t){this.on=new Map,this.ln=[],this.fn=t}return t.prototype.cn=function(t,i){var n=function(t,i){return void 0===t?i:{vn:Math.max(t.vn,i.vn),_n:t._n||i._n}}(this.on.get(t),i);this.on.set(t,n)},t.prototype.dn=function(){return this.fn},t.prototype.wn=function(t){var i=this.on.get(t);return void 0===i?{vn:this.fn}:{vn:Math.max(this.fn,i.vn),_n:i._n}},t.prototype.Mn=function(){this.ln=[{bn:0}]},t.prototype.mn=function(t){this.ln=[{bn:1,St:t}]},t.prototype.gn=function(){this.ln=[{bn:4}]},t.prototype.pn=function(t){this.ln.push({bn:2,St:t})},t.prototype.yn=function(t){this.ln.push({bn:3,St:t})},t.prototype.kn=function(){return this.ln},t.prototype.xn=function(t){for(var i=this,n=0,s=t.ln;n<s.length;n++){var h=s[n];this.Nn(h)}this.fn=Math.max(this.fn,t.fn),t.on.forEach((function(t,n){i.cn(n,t)}))},t.prototype.Nn=function(t){switch(t.bn){case 0:this.Mn();break;case 1:this.mn(t.St);break;case 2:this.pn(t.St);break;case 3:this.yn(t.St);break;case 4:this.gn()}},t}(),nt=".";function st(t,i){if(!k(t))return"n/a";if(!x(i))throw new TypeError("invalid length");if(i<0||i>16)throw new TypeError("invalid length");if(0===i)return t.toString();return("0000000000000000"+t.toString()).slice(-i)}var ht=function(){function t(t,i){if(i||(i=1),k(t)&&x(t)||(t=100),t<0)throw new TypeError("invalid base");this._i=t,this.Cn=i,this.Sn()}return t.prototype.format=function(t){var i=t<0?"−":"";return t=Math.abs(t),i+this.Tn(t)},t.prototype.Sn=function(){if(this.Dn=0,this._i>0&&this.Cn>0)for(var t=this._i;t>1;)t/=10,this.Dn++},t.prototype.Tn=function(t){var i=this._i/this.Cn,n=Math.floor(t),s="",h=void 0!==this.Dn?this.Dn:NaN;if(i>1){var r=+(Math.round(t*i)-n*i).toFixed(this.Dn);r>=i&&(r-=i,n+=1),s=nt+st(+r.toFixed(this.Dn)*this.Cn,h)}else n=Math.round(n*i)/i,h>0&&(s=nt+st(0,h));return n.toFixed(0)+s},t}(),rt=function(t){function i(i){return void 0===i&&(i=100),t.call(this,i)||this}return b(i,t),i.prototype.format=function(i){return"".concat(t.prototype.format.call(this,i),"%")},i}(ht),et=function(){function t(t){this.An=t}return t.prototype.format=function(t){var i="";return t<0&&(i="-",t=-t),t<995?i+this.Bn(t):t<999995?i+this.Bn(t/1e3)+"K":t<999999995?(t=1e3*Math.round(t/1e3),i+this.Bn(t/1e6)+"M"):(t=1e6*Math.round(t/1e6),i+this.Bn(t/1e9)+"B")},t.prototype.Bn=function(t){var i=Math.pow(10,this.An);return((t=Math.round(t*i)/i)>=1e-15&&t<1?t.toFixed(this.An).replace(/\.?0+$/,""):String(t)).replace(/(\.[1-9]*)0+$/,(function(t,i){return i}))},t}();function ut(t,i,n,s){if(0!==i.length){var h=i[s.from].tt,r=i[s.from].it;t.moveTo(h,r);for(var e=s.from+1;e<s.to;++e){var u=i[e];if(1===n){var a=i[e-1].it,o=u.tt;t.lineTo(o,a)}t.lineTo(u.tt,u.it)}}}var at=function(t){function i(){var i=null!==t&&t.apply(this,arguments)||this;return i.X=null,i}return b(i,t),i.prototype.Z=function(t){this.X=t},i.prototype.Y=function(t){if(null!==this.X&&0!==this.X.G.length&&null!==this.X.J){if(t.lineCap="butt",t.lineJoin="round",t.lineWidth=this.X.Vt,n(t,this.X.Pt),t.lineWidth=1,t.beginPath(),1===this.X.G.length){var i=this.X.G[0],s=this.X.Ln/2;t.moveTo(i.tt-s,this.X.En),t.lineTo(i.tt-s,i.it),t.lineTo(i.tt+s,i.it),t.lineTo(i.tt+s,this.X.En)}else t.moveTo(this.X.G[this.X.J.from].tt,this.X.En),t.lineTo(this.X.G[this.X.J.from].tt,this.X.G[this.X.J.from].it),ut(t,this.X.G,this.X.On,this.X.J),this.X.J.to>this.X.J.from&&(t.lineTo(this.X.G[this.X.J.to-1].tt,this.X.En),t.lineTo(this.X.G[this.X.J.from].tt,this.X.En));t.closePath(),t.fillStyle=this.Fn(t),t.fill()}},i}(O),ot=function(t){function i(){return null!==t&&t.apply(this,arguments)||this}return b(i,t),i.prototype.Fn=function(t){var i=this.X,n=t.createLinearGradient(0,0,0,i.Vn);return n.addColorStop(0,i.Pn),n.addColorStop(1,i.Rn),n},i}(at),lt=function(t){function i(){var i=null!==t&&t.apply(this,arguments)||this;return i.X=null,i}return b(i,t),i.prototype.Z=function(t){this.X=t},i.prototype.Y=function(t){if(null!==this.X&&0!==this.X.G.length&&null!==this.X.J)if(t.lineCap="butt",t.lineWidth=this.X.Vt,n(t,this.X.Pt),t.strokeStyle=this.zn(t),t.lineJoin="round",1===this.X.G.length){t.beginPath();var i=this.X.G[0];t.moveTo(i.tt-this.X.Ln/2,i.it),t.lineTo(i.tt+this.X.Ln/2,i.it),void 0!==i.A&&(t.strokeStyle=i.A),t.stroke()}else this.Wn(t,this.X)},i.prototype.Wn=function(t,i){t.beginPath(),ut(t,i.G,i.On,i.J),t.stroke()},i}(O),ft=function(t){function i(){return null!==t&&t.apply(this,arguments)||this}return b(i,t),i.prototype.Wn=function(t,i){var n,s,h=i.G,r=i.J,e=i.On,u=i.ht;if(0!==h.length&&null!==r){t.beginPath();var a=h[r.from];t.moveTo(a.tt,a.it);var o=null!==(n=a.A)&&void 0!==n?n:u;t.strokeStyle=o;for(var l=function(i){t.stroke(),t.beginPath(),t.strokeStyle=i,o=i},f=r.from+1;f<r.to;++f){var c=h[f],v=h[f-1],_=null!==(s=c.A)&&void 0!==s?s:u;1===e&&(t.lineTo(c.tt,v.it),_!==o&&(l(_),t.moveTo(c.tt,v.it))),t.lineTo(c.tt,c.it),1!==e&&_!==o&&(l(_),t.moveTo(c.tt,c.it))}t.stroke()}},i.prototype.zn=function(){return this.X.ht},i}(lt);function ct(t,i,n,s,h){void 0===s&&(s=0),void 0===h&&(h=t.length);for(var r=h-s;0<r;){var e=r>>1,u=s+e;n(t[u],i)?(s=u+1,r-=e+1):r=e}return s}function vt(t,i,n,s,h){void 0===s&&(s=0),void 0===h&&(h=t.length);for(var r=h-s;0<r;){var e=r>>1,u=s+e;n(i,t[u])?r=e:(s=u+1,r-=e+1)}return s}function _t(t,i){return t.rt<i}function dt(t,i){return t<i.rt}function wt(t,i,n){var s=i.In(),h=i.jn(),r=ct(t,s,_t),e=vt(t,h,dt);if(!n)return{from:r,to:e};var u=r,a=e;return r>0&&r<t.length&&t[r].rt>=s&&(u=r-1),e>0&&e<t.length&&t[e-1].rt<=h&&(a=e+1),{from:u,to:a}}var Mt=function(){function t(t,i,n){this.qn=!0,this.Un=!0,this.Hn=!0,this.Yn=[],this.$n=null,this.Kn=t,this.Xn=i,this.Zn=n}return t.prototype.vt=function(t){this.qn=!0,"data"===t&&(this.Un=!0),"options"===t&&(this.Hn=!0)},t.prototype.Jn=function(){this.Un&&(this.Gn(),this.Un=!1),this.qn&&(this.Qn(),this.qn=!1),this.Hn&&(this.ts(),this.Hn=!1)},t.prototype.ns=function(){this.$n=null},t.prototype.Qn=function(){var t=this.Kn.Ct(),i=this.Xn.bt();if(this.ns(),!i.wi()&&!t.wi()){var n=i.ss();if(null!==n&&0!==this.Kn.an().hs()){var s=this.Kn.kt();null!==s&&(this.$n=wt(this.Yn,n,this.Zn),this.rs(t,i,s.St))}}},t}(),bt=function(t){function i(i,n){return t.call(this,i,n,!0)||this}return b(i,t),i.prototype.rs=function(t,i,n){i.es(this.Yn,D(this.$n)),t.us(this.Yn,n,D(this.$n))},i.prototype.os=function(t,i){return{rt:t,et:i,tt:NaN,it:NaN}},i.prototype.ts=function(){},i.prototype.Gn=function(){var t=this,i=this.Kn.ls();this.Yn=this.Kn.an().fs().map((function(n){var s=n.St[3];return t.cs(n.vs,s,i)}))},i}(Mt),mt=function(t){function i(i,n){var s=t.call(this,i,n)||this;return s.zt=new E,s._s=new ot,s.ds=new ft,s.zt.U([s._s,s.ds]),s}return b(i,t),i.prototype.dt=function(t,i){if(!this.Kn.yt())return null;var n=this.Kn.R();return this.Jn(),this._s.Z({On:n.lineType,G:this.Yn,Pt:n.lineStyle,Vt:n.lineWidth,Pn:n.topColor,Rn:n.bottomColor,En:t,Vn:t,J:this.$n,Ln:this.Xn.bt().ws()}),this.ds.Z({On:n.lineType,G:this.Yn,ht:n.lineColor,Pt:n.lineStyle,Vt:n.lineWidth,J:this.$n,Ln:this.Xn.bt().ws()}),this.zt},i.prototype.cs=function(t,i){return this.os(t,i)},i}(bt);var gt=function(){function t(){this.Bt=null,this.Ms=0,this.bs=0}return t.prototype.Z=function(t){this.Bt=t},t.prototype.H=function(t,i,n,s){if(null!==this.Bt&&0!==this.Bt.an.length&&null!==this.Bt.J){if(this.Ms=this.gs(i),this.Ms>=2)Math.max(1,Math.floor(i))%2!=this.Ms%2&&this.Ms--;this.bs=this.Bt.ps?Math.min(this.Ms,Math.floor(i)):this.Ms;for(var h=null,r=this.bs<=this.Ms&&this.Bt.ws>=Math.floor(1.5*i),e=this.Bt.J.from;e<this.Bt.J.to;++e){var u=this.Bt.an[e];h!==u.A&&(t.fillStyle=u.A,h=u.A);var a=Math.floor(.5*this.bs),o=Math.round(u.tt*i),l=o-a,f=this.bs,c=l+f-1,v=Math.min(u.ys,u.ks),_=Math.max(u.ys,u.ks),d=Math.round(v*i)-a,w=Math.round(_*i)+a,M=Math.max(w-d,this.bs);t.fillRect(l,d,f,M);var b=Math.ceil(1.5*this.Ms);if(r){if(this.Bt.xs){var m=o-b,g=Math.max(d,Math.round(u.Ns*i)-a),p=g+f-1;p>d+M-1&&(g=(p=d+M-1)-f+1),t.fillRect(m,g,l-m,p-g+1)}var y=o+b,k=Math.max(d,Math.round(u.Cs*i)-a),x=k+f-1;x>d+M-1&&(k=(x=d+M-1)-f+1),t.fillRect(c+1,k,y-c,x-k+1)}}}},t.prototype.gs=function(t){var i=Math.floor(t);return Math.max(i,Math.floor(function(t,i){return Math.floor(.3*t*i)}(e(this.Bt).ws,t)))},t}(),pt=function(t){function i(i,n){return t.call(this,i,n,!1)||this}return b(i,t),i.prototype.rs=function(t,i,n){i.es(this.Yn,D(this.$n)),t.Ss(this.Yn,n,D(this.$n))},i.prototype.Ts=function(t,i,n){return{rt:t,open:i.St[0],high:i.St[1],low:i.St[2],close:i.St[3],tt:NaN,Ns:NaN,ys:NaN,ks:NaN,Cs:NaN}},i.prototype.Gn=function(){var t=this,i=this.Kn.ls();this.Yn=this.Kn.an().fs().map((function(n){return t.cs(n.vs,n,i)}))},i}(Mt),yt=function(t){function i(){var i=null!==t&&t.apply(this,arguments)||this;return i.zt=new gt,i}return b(i,t),i.prototype.dt=function(t,i){if(!this.Kn.yt())return null;var n=this.Kn.R();this.Jn();var s={an:this.Yn,ws:this.Xn.bt().ws(),xs:n.openVisible,ps:n.thinBars,J:this.$n};return this.zt.Z(s),this.zt},i.prototype.ts=function(){var t=this;this.Yn.forEach((function(i){i.A=t.Kn.ls().As(i.rt).Ds}))},i.prototype.cs=function(t,i,n){return m(m({},this.Ts(t,i,n)),{A:n.As(t).Ds})},i}(pt);function kt(t,i,n){return Math.min(Math.max(t,i),n)}function xt(t,i,n){return i-t<=n}function Nt(t){return t<=0?NaN:Math.log(t)/Math.log(10)}function Ct(t){var i=Math.ceil(t);return i%2!=0?i-1:i}function St(t){var i=Math.ceil(t);return i%2==0?i-1:i}var Tt=function(t){function i(){return null!==t&&t.apply(this,arguments)||this}return b(i,t),i.prototype.Fn=function(t){var i=this.X,n=t.createLinearGradient(0,0,0,i.Vn),s=kt(i.En/i.Vn,0,1);return n.addColorStop(0,i.Bs),n.addColorStop(s,i.Ls),n.addColorStop(s,i.Es),n.addColorStop(1,i.Os),n},i}(at),Dt=function(t){function i(){return null!==t&&t.apply(this,arguments)||this}return b(i,t),i.prototype.zn=function(t){var i=this.X,n=t.createLinearGradient(0,0,0,i.Vn),s=kt(i.En/i.Vn,0,1);return n.addColorStop(0,i.Pn),n.addColorStop(s,i.Pn),n.addColorStop(s,i.Rn),n.addColorStop(1,i.Rn),n},i}(lt),At=function(t){function i(i,n){var s=t.call(this,i,n)||this;return s.Fs=new Tt,s.Vs=new Dt,s.ut=new E,s.ut.U([s.Fs,s.Vs]),s}return b(i,t),i.prototype.dt=function(t,i){if(!this.Kn.yt())return null;var n=this.Kn.kt();if(null===n)return null;var s=this.Kn.R();this.Jn();var h=this.Kn.Ct().Nt(s.baseValue.price,n.St),r=this.Xn.bt().ws();return this.Fs.Z({G:this.Yn,Bs:s.topFillColor1,Ls:s.topFillColor2,Es:s.bottomFillColor1,Os:s.bottomFillColor2,Vt:s.lineWidth,Pt:s.lineStyle,On:0,En:h,Vn:t,J:this.$n,Ln:r}),this.Vs.Z({G:this.Yn,Pn:s.topLineColor,Rn:s.bottomLineColor,Vt:s.lineWidth,Pt:s.lineStyle,On:0,En:h,Vn:t,J:this.$n,Ln:r}),this.ut},i.prototype.cs=function(t,i){return this.os(t,i)},i}(bt),Bt=function(){function t(){this.Bt=null,this.Ms=0}return t.prototype.Z=function(t){this.Bt=t},t.prototype.H=function(t,i,n,s){if(null!==this.Bt&&0!==this.Bt.an.length&&null!==this.Bt.J){if(this.Ms=function(t,i){if(t>=2.5&&t<=4)return Math.floor(3*i);var n=1-.2*Math.atan(Math.max(4,t)-4)/(.5*Math.PI),s=Math.floor(t*n*i),h=Math.floor(t*i),r=Math.min(s,h);return Math.max(Math.floor(i),r)}(this.Bt.ws,i),this.Ms>=2)Math.floor(i)%2!=this.Ms%2&&this.Ms--;var h=this.Bt.an;this.Bt.Ps&&this.Rs(t,h,this.Bt.J,i),this.Bt.zs&&this.Ws(t,h,this.Bt.J,this.Bt.ws,i);var r=this.Is(i);(!this.Bt.zs||this.Ms>2*r)&&this.js(t,h,this.Bt.J,i)}},t.prototype.Rs=function(t,i,n,s){if(null!==this.Bt){var h="",r=Math.min(Math.floor(s),Math.floor(this.Bt.ws*s));r=Math.max(Math.floor(s),Math.min(r,this.Ms));for(var e=Math.floor(.5*r),u=null,a=n.from;a<n.to;a++){var o=i[a];o.qs!==h&&(t.fillStyle=o.qs,h=o.qs);var l=Math.round(Math.min(o.Ns,o.Cs)*s),f=Math.round(Math.max(o.Ns,o.Cs)*s),c=Math.round(o.ys*s),v=Math.round(o.ks*s),_=Math.round(s*o.tt)-e,d=_+r-1;null!==u&&(_=Math.max(u+1,_),_=Math.min(_,d));var w=d-_+1;t.fillRect(_,c,w,l-c),t.fillRect(_,f+1,w,v-f),u=d}}},t.prototype.Is=function(t){var i=Math.floor(1*t);this.Ms<=2*i&&(i=Math.floor(.5*(this.Ms-1)));var n=Math.max(Math.floor(t),i);return this.Ms<=2*n?Math.max(Math.floor(t),Math.floor(1*t)):n},t.prototype.Ws=function(t,i,n,s,h){if(null!==this.Bt)for(var r="",e=this.Is(h),u=null,a=n.from;a<n.to;a++){var o=i[a];o.Tt!==r&&(t.fillStyle=o.Tt,r=o.Tt);var l=Math.round(o.tt*h)-Math.floor(.5*this.Ms),f=l+this.Ms-1,c=Math.round(Math.min(o.Ns,o.Cs)*h),v=Math.round(Math.max(o.Ns,o.Cs)*h);if(null!==u&&(l=Math.max(u+1,l),l=Math.min(l,f)),this.Bt.ws*h>2*e)I(t,l,c,f-l+1,v-c+1,e);else{var _=f-l+1;t.fillRect(l,c,_,v-c+1)}u=f}},t.prototype.js=function(t,i,n,s){if(null!==this.Bt)for(var h="",r=this.Is(s),e=n.from;e<n.to;e++){var u=i[e],a=Math.round(Math.min(u.Ns,u.Cs)*s),o=Math.round(Math.max(u.Ns,u.Cs)*s),l=Math.round(u.tt*s)-Math.floor(.5*this.Ms),f=l+this.Ms-1;if(u.A!==h){var c=u.A;t.fillStyle=c,h=c}this.Bt.zs&&(l+=r,a+=r,f-=r,o-=r),a>o||t.fillRect(l,a,f-l+1,o-a+1)}},t}(),Lt=function(t){function i(){var i=null!==t&&t.apply(this,arguments)||this;return i.zt=new Bt,i}return b(i,t),i.prototype.dt=function(t,i){if(!this.Kn.yt())return null;var n=this.Kn.R();this.Jn();var s={an:this.Yn,ws:this.Xn.bt().ws(),Ps:n.wickVisible,zs:n.borderVisible,J:this.$n};return this.zt.Z(s),this.zt},i.prototype.ts=function(){var t=this;this.Yn.forEach((function(i){var n=t.Kn.ls().As(i.rt);i.A=n.Ds,i.qs=n.Us,i.Tt=n.Hs}))},i.prototype.cs=function(t,i,n){var s=n.As(t);return m(m({},this.Ts(t,i,n)),{A:s.Ds,qs:s.Us,Tt:s.Hs})},i}(pt),Et=function(){function t(){this.Bt=null,this.Ys=[]}return t.prototype.Z=function(t){this.Bt=t,this.Ys=[]},t.prototype.H=function(t,i,n,s){if(null!==this.Bt&&0!==this.Bt.G.length&&null!==this.Bt.J){this.Ys.length||this.$s(i);for(var h=Math.max(1,Math.floor(i)),r=Math.round(this.Bt.Ks*i)-Math.floor(h/2),e=r+h,u=this.Bt.J.from;u<this.Bt.J.to;u++){var a=this.Bt.G[u],o=this.Ys[u-this.Bt.J.from],l=Math.round(a.it*i);t.fillStyle=a.A;var f=void 0,c=void 0;l<=r?(f=l,c=e):(f=r,c=l-Math.floor(h/2)+h),t.fillRect(o.In,f,o.jn-o.In+1,c-f)}}},t.prototype.$s=function(t){if(null!==this.Bt&&0!==this.Bt.G.length&&null!==this.Bt.J){var i=Math.ceil(this.Bt.ws*t)<=1?0:Math.max(1,Math.floor(t)),n=Math.round(this.Bt.ws*t)-i;this.Ys=new Array(this.Bt.J.to-this.Bt.J.from);for(var s=this.Bt.J.from;s<this.Bt.J.to;s++){var h,r=this.Bt.G[s],e=Math.round(r.tt*t),u=void 0,a=void 0;if(n%2)u=e-(h=(n-1)/2),a=e+h;else u=e-(h=n/2),a=e+h-1;this.Ys[s-this.Bt.J.from]={In:u,jn:a,Xs:e,Zs:r.tt*t,rt:r.rt}}for(s=this.Bt.J.from+1;s<this.Bt.J.to;s++){var o=this.Ys[s-this.Bt.J.from],l=this.Ys[s-this.Bt.J.from-1];o.rt===l.rt+1&&(o.In-l.jn!==i+1&&(l.Xs>l.Zs?l.jn=o.In-i-1:o.In=l.jn+i+1))}var f=Math.ceil(this.Bt.ws*t);for(s=this.Bt.J.from;s<this.Bt.J.to;s++){(o=this.Ys[s-this.Bt.J.from]).jn<o.In&&(o.jn=o.In);var c=o.jn-o.In+1;f=Math.min(c,f)}if(i>0&&f<4)for(s=this.Bt.J.from;s<this.Bt.J.to;s++){(c=(o=this.Ys[s-this.Bt.J.from]).jn-o.In+1)>f&&(o.Xs>o.Zs?o.jn-=1:o.In+=1)}}else this.Ys=[]},t}();function Ot(t){return{G:[],ws:t,Ks:NaN,J:null}}function Ft(t,i,n){return{rt:t,et:i,tt:NaN,it:NaN,A:n}}var Vt=function(t){function i(i,n){var s=t.call(this,i,n,!1)||this;return s.ut=new E,s.Js=Ot(0),s.zt=new Et,s}return b(i,t),i.prototype.dt=function(t,i){return this.Kn.yt()?(this.Jn(),this.ut):null},i.prototype.Gn=function(){var t=this.Xn.bt().ws();this.Js=Ot(t);for(var i=0,n=0,s=this.Kn.R().color,h=0,r=this.Kn.an().fs();h<r.length;h++){var e=r[h],u=e.St[3],a=void 0!==e.A?e.A:s,o=Ft(e.vs,u,a);++i<this.Js.G.length?this.Js.G[i]=o:this.Js.G.push(o),this.Yn[n++]={rt:e.vs,tt:0}}this.zt.Z(this.Js),this.ut.U([this.zt])},i.prototype.ts=function(){},i.prototype.ns=function(){t.prototype.ns.call(this),this.Js.J=null},i.prototype.rs=function(t,i,n){if(null!==this.$n){var s=i.ws(),h=e(i.ss()),r=t.Nt(this.Kn.R().base,n);i.es(this.Js.G),t.us(this.Js.G,n),this.Js.Ks=r,this.Js.J=wt(this.Js.G,h,!1),this.Js.ws=s,this.zt.Z(this.Js)}},i}(Mt),Pt=function(t){function i(i,n){var s=t.call(this,i,n)||this;return s.ds=new ft,s}return b(i,t),i.prototype.dt=function(t,i){if(!this.Kn.yt())return null;var n=this.Kn.R();this.Jn();var s={G:this.Yn,ht:n.color,Pt:n.lineStyle,On:n.lineType,Vt:n.lineWidth,J:this.$n,Ln:this.Xn.bt().ws()};return this.ds.Z(s),this.ds},i.prototype.ts=function(){var t=this;this.Yn.forEach((function(i){i.A=t.Kn.ls().As(i.rt).Ds}))},i.prototype.cs=function(t,i,n){var s=this.os(t,i);return s.A=n.As(t).Ds,s},i}(bt),Rt=/[2-9]/g,zt=function(){function t(t){void 0===t&&(t=50),this.Gs=new Map,this.Qs=0,this.th=Array.from(new Array(t))}return t.prototype.ih=function(){this.Gs.clear(),this.th.fill(void 0)},t.prototype.Qt=function(t,i,n){var s=n||Rt,h=String(i).replace(s,"0"),r=this.Gs.get(h);if(void 0===r){if(0===(r=t.measureText(h).width)&&0!==i.length)return 0;var e=this.th[this.Qs];void 0!==e&&this.Gs.delete(e),this.th[this.Qs]=h,this.Qs=(this.Qs+1)%this.th.length,this.Gs.set(h,r)}return r},t}(),Wt=function(){function t(t){this.nh=null,this.k=null,this.sh="right",this.hh=0,this.rh=t}return t.prototype.eh=function(t,i,n,s){this.nh=t,this.k=i,this.hh=n,this.sh=s},t.prototype.H=function(t,i){null!==this.k&&null!==this.nh&&this.nh.H(t,this.k,this.rh,this.hh,this.sh,i)},t}(),It=function(){function t(t,i,n){this.uh=t,this.rh=new zt(50),this.ah=i,this.P=n,this.W=-1,this.zt=new Wt(this.rh)}return t.prototype.dt=function(t,i){var n=this.P.oh(this.ah);if(null===n)return null;var s=n.lh(this.ah)?n.fh():this.ah.Ct();if(null===s)return null;var h=n._h(s);if("overlay"===h)return null;var r=this.P.dh();return r.S!==this.W&&(this.W=r.S,this.rh.ih()),this.zt.eh(this.uh.ci(),r,i,h),this.zt},t}(),jt=function(){function t(){this.Bt=null}return t.prototype.Z=function(t){this.Bt=t},t.prototype.H=function(t,i,h,r){if(null!==this.Bt&&!1!==this.Bt.yt){var e=Math.round(this.Bt.it*i);if(!(e<0||e>Math.ceil(this.Bt.Yt*i))){var u=Math.ceil(this.Bt.Ht*i);t.lineCap="butt",t.strokeStyle=this.Bt.A,t.lineWidth=Math.floor(this.Bt.Vt*i),n(t,this.Bt.Pt),s(t,e,0,u)}}},t}(),qt=function(){function t(t){this.wh={Ht:0,Yt:0,it:0,A:"rgba(0, 0, 0, 0)",Vt:1,Pt:0,yt:!1},this.Mh=new jt,this.ft=!0,this.Kn=t,this.Xn=t.jt(),this.Mh.Z(this.wh)}return t.prototype.vt=function(){this.ft=!0},t.prototype.dt=function(t,i){return this.Kn.yt()?(this.ft&&(this.bh(t,i),this.ft=!1),this.Mh):null},t}(),Ut=function(t){function i(i){return t.call(this,i)||this}return b(i,t),i.prototype.bh=function(t,i){this.wh.yt=!1;var n=this.Kn.Ct(),s=n.mh().mh;if(2===s||3===s){var h=this.Kn.R();if(h.baseLineVisible&&this.Kn.yt()){var r=this.Kn.kt();null!==r&&(this.wh.yt=!0,this.wh.it=n.Nt(r.St,r.St),this.wh.Ht=i,this.wh.Yt=t,this.wh.A=h.baseLineColor,this.wh.Vt=h.baseLineWidth,this.wh.Pt=h.baseLineStyle)}}},i}(qt),Ht=function(){function t(){this.Bt=null}return t.prototype.Z=function(t){this.Bt=t},t.prototype.gh=function(){return this.Bt},t.prototype.H=function(t,i,n,s){var h=this.Bt;if(null!==h){t.save();var r=Math.max(1,Math.floor(i)),e=r%2/2,u=Math.round(h.Zs.x*i)+e,a=h.Zs.y*i;t.fillStyle=h.ph,t.beginPath();var o=Math.max(2,1.5*h.yh)*i;t.arc(u,a,o,0,2*Math.PI,!1),t.fill(),t.fillStyle=h.kh,t.beginPath(),t.arc(u,a,h.st*i,0,2*Math.PI,!1),t.fill(),t.lineWidth=r,t.strokeStyle=h.xh,t.beginPath(),t.arc(u,a,h.st*i+r/2,0,2*Math.PI,!1),t.stroke(),t.restore()}},t}(),Yt=[{Nh:0,Ch:.25,Sh:4,Th:10,Dh:.25,Ah:0,Bh:.4,Lh:.8},{Nh:.25,Ch:.525,Sh:10,Th:14,Dh:0,Ah:0,Bh:.8,Lh:0},{Nh:.525,Ch:1,Sh:14,Th:14,Dh:0,Ah:0,Bh:0,Lh:0}];function $t(t,i,n,s){return function(t,i){if("transparent"===t)return t;var n=d(t),s=n[3];return"rgba(".concat(n[0],", ").concat(n[1],", ").concat(n[2],", ").concat(i*s,")")}(t,n+(s-n)*i)}function Kt(t,i){for(var n,s=t%2600/2600,r=0,e=Yt;r<e.length;r++){var u=e[r];if(s>=u.Nh&&s<=u.Ch){n=u;break}}h(void 0!==n,"Last price animation internal logic error");var a,o,l,f=(s-n.Nh)/(n.Ch-n.Nh);return{kh:$t(i,f,n.Dh,n.Ah),xh:$t(i,f,n.Bh,n.Lh),st:(a=f,o=n.Sh,l=n.Th,o+(l-o)*a)}}var Xt=function(){function t(t){this.zt=new Ht,this.ft=!0,this.Eh=!0,this.Oh=performance.now(),this.Fh=this.Oh-1,this.Vh=t}return t.prototype.Ph=function(){this.Fh=this.Oh-1,this.vt()},t.prototype.Rh=function(){if(this.vt(),2===this.Vh.R().lastPriceAnimation){var t=performance.now(),i=this.Fh-t;if(i>0)return void(i<650&&(this.Fh+=2600));this.Oh=t,this.Fh=t+2600}},t.prototype.vt=function(){this.ft=!0},t.prototype.zh=function(){this.Eh=!0},t.prototype.yt=function(){return 0!==this.Vh.R().lastPriceAnimation},t.prototype.Wh=function(){switch(this.Vh.R().lastPriceAnimation){case 0:return!1;case 1:return!0;case 2:return performance.now()<=this.Fh}},t.prototype.dt=function(t,i){return this.ft?(this.wt(t,i),this.ft=!1,this.Eh=!1):this.Eh&&(this.Ih(),this.Eh=!1),this.zt},t.prototype.wt=function(t,i){this.zt.Z(null);var n=this.Vh.jt().bt(),s=n.ss(),h=this.Vh.kt();if(null!==s&&null!==h){var r=this.Vh.jh(!0);if(!r.qh&&s.Uh(r.vs)){var e={x:n.At(r.vs),y:this.Vh.Ct().Nt(r.et,h.St)},u=r.A,a=this.Vh.R().lineWidth,o=Kt(this.Hh(),u);this.zt.Z({ph:u,yh:a,kh:o.kh,xh:o.xh,st:o.st,Zs:e})}}},t.prototype.Ih=function(){var t=this.zt.gh();if(null!==t){var i=Kt(this.Hh(),t.ph);t.kh=i.kh,t.xh=i.xh,t.st=i.st}},t.prototype.Hh=function(){return this.Wh()?performance.now()-this.Oh:2599},t}();function Zt(t,i){return St(Math.min(Math.max(t,12),30)*i)}function Jt(t,i){switch(t){case"arrowDown":case"arrowUp":return Zt(i,1);case"circle":return Zt(i,.8);case"square":return Zt(i,.7)}}function Gt(t){return Ct(Zt(t,1))}function Qt(t){return Math.max(Zt(t,.1),3)}function ti(t,i,n,s,h){var r=Jt("square",n),e=(r-1)/2,u=t-e,a=i-e;return s>=u&&s<=u+r&&h>=a&&h<=a+r}function ii(t,i,n,s,h){var r=(Jt("arrowUp",h)-1)/2,e=(St(h/2)-1)/2;i.beginPath(),t?(i.moveTo(n-r,s),i.lineTo(n,s-r),i.lineTo(n+r,s),i.lineTo(n+e,s),i.lineTo(n+e,s+r),i.lineTo(n-e,s+r),i.lineTo(n-e,s)):(i.moveTo(n-r,s),i.lineTo(n,s+r),i.lineTo(n+r,s),i.lineTo(n+e,s),i.lineTo(n+e,s-r),i.lineTo(n-e,s-r),i.lineTo(n-e,s)),i.fill()}function ni(t,i,n,s,h,r){return ti(i,n,s,h,r)}var si=function(t){function i(){var i=null!==t&&t.apply(this,arguments)||this;return i.Bt=null,i.rh=new zt,i.W=-1,i.I="",i.Yh="",i}return b(i,t),i.prototype.Z=function(t){this.Bt=t},i.prototype.eh=function(t,i){this.W===t&&this.I===i||(this.W=t,this.I=i,this.Yh=B(t,i),this.rh.ih())},i.prototype.$h=function(t,i){if(null===this.Bt||null===this.Bt.J)return null;for(var n=this.Bt.J.from;n<this.Bt.J.to;n++){var s=this.Bt.G[n];if(ri(s,t,i))return{Kh:s.Xh,Zh:s.Zh}}return null},i.prototype.Y=function(t,i,n){if(null!==this.Bt&&null!==this.Bt.J){t.textBaseline="middle",t.font=this.Yh;for(var s=this.Bt.J.from;s<this.Bt.J.to;s++){var h=this.Bt.G[s];void 0!==h.Gt&&(h.Gt.Ht=this.rh.Qt(t,h.Gt.Jh),h.Gt.Yt=this.W),hi(h,t)}}},i}(O);function hi(t,i){i.fillStyle=t.A,void 0!==t.Gt&&function(t,i,n,s){t.fillText(i,n,s)}(i,t.Gt.Jh,t.tt-t.Gt.Ht/2,t.Gt.it),function(t,i){if(0===t.hs)return;switch(t.Gh){case"arrowDown":return void ii(!1,i,t.tt,t.it,t.hs);case"arrowUp":return void ii(!0,i,t.tt,t.it,t.hs);case"circle":return void function(t,i,n,s){var h=(Jt("circle",s)-1)/2;t.beginPath(),t.arc(i,n,h,0,2*Math.PI,!1),t.fill()}(i,t.tt,t.it,t.hs);case"square":return void function(t,i,n,s){var h=Jt("square",s),r=(h-1)/2,e=i-r,u=n-r;t.fillRect(e,u,h,h)}(i,t.tt,t.it,t.hs)}t.Gh}(t,i)}function ri(t,i,n){return!(void 0===t.Gt||!function(t,i,n,s,h,r){var e=s/2;return h>=t&&h<=t+n&&r>=i-e&&r<=i+e}(t.tt,t.Gt.it,t.Gt.Ht,t.Gt.Yt,i,n))||function(t,i,n){if(0===t.hs)return!1;switch(t.Gh){case"arrowDown":case"arrowUp":return ni(0,t.tt,t.it,t.hs,i,n);case"circle":return function(t,i,n,s,h){var r=2+Jt("circle",n)/2,e=t-s,u=i-h;return Math.sqrt(e*e+u*u)<=r}(t.tt,t.it,t.hs,i,n);case"square":return ti(t.tt,t.it,t.hs,i,n)}}(t,i,n)}function ei(t,i,n,s,h,r,e,u,a){var o=k(n)?n:n.close,l=k(n)?n:n.high,f=k(n)?n:n.low,c=k(i.size)?Math.max(i.size,0):1,v=Gt(u.ws())*c,_=v/2;switch(t.hs=v,i.position){case"inBar":return t.it=e.Nt(o,a),void(void 0!==t.Gt&&(t.Gt.it=t.it+_+r+.6*h));case"aboveBar":return t.it=e.Nt(l,a)-_-s.Qh,void 0!==t.Gt&&(t.Gt.it=t.it-_-.6*h,s.Qh+=1.2*h),void(s.Qh+=v+r);case"belowBar":return t.it=e.Nt(f,a)+_+s.tr,void 0!==t.Gt&&(t.Gt.it=t.it+_+r+.6*h,s.tr+=1.2*h),void(s.tr+=v+r)}i.position}var ui=function(){function t(t,i){this.ft=!0,this.ir=!0,this.nr=!0,this.sr=null,this.zt=new si,this.Vh=t,this.gi=i,this.Bt={G:[],J:null}}return t.prototype.vt=function(t){this.ft=!0,this.nr=!0,"data"===t&&(this.ir=!0)},t.prototype.dt=function(t,i,n){if(!this.Vh.yt())return null;this.ft&&this.Jn();var s=this.gi.R().layout;return this.zt.eh(s.fontSize,s.fontFamily),this.zt.Z(this.Bt),this.zt},t.prototype.hr=function(){if(this.nr){if(this.Vh.rr().length>0){var t=this.gi.bt().ws(),i=Qt(t),n=1.5*Gt(t)+2*i;this.sr={above:n,below:n}}else this.sr=null;this.nr=!1}return this.sr},t.prototype.Jn=function(){var t=this.Vh.Ct(),i=this.gi.bt(),n=this.Vh.rr();this.ir&&(this.Bt.G=n.map((function(t){return{rt:t.time,tt:0,it:0,hs:0,Gh:t.shape,A:t.color,Xh:t.Xh,Zh:t.id,Gt:void 0}})),this.ir=!1);var s=this.gi.R().layout;this.Bt.J=null;var h=i.ss();if(null!==h){var r=this.Vh.kt();if(null!==r&&0!==this.Bt.G.length){var e=NaN,u=Qt(i.ws()),a={Qh:u,tr:u};this.Bt.J=wt(this.Bt.G,h,!0);for(var o=this.Bt.J.from;o<this.Bt.J.to;o++){var l=n[o];l.time!==e&&(a.Qh=u,a.tr=u,e=l.time);var f=this.Bt.G[o];f.tt=i.At(l.time),void 0!==l.text&&l.text.length>0&&(f.Gt={Jh:l.text,it:0,Ht:0,Yt:0});var c=this.Vh.er(l.time);null!==c&&ei(f,l,c,a,s.fontSize,u,t,i,r.St)}this.ft=!1}}},t}(),ai=function(t){function i(i){return t.call(this,i)||this}return b(i,t),i.prototype.bh=function(t,i){var n=this.wh;n.yt=!1;var s=this.Kn.R();if(s.priceLineVisible&&this.Kn.yt()){var h=this.Kn.jh(0===s.priceLineSource);h.qh||(n.yt=!0,n.it=h.ti,n.A=this.Kn.ur(h.A),n.Ht=i,n.Yt=t,n.Vt=s.priceLineWidth,n.Pt=s.priceLineStyle)}},i}(qt),oi=function(t){function i(i){var n=t.call(this)||this;return n.Wt=i,n}return b(i,t),i.prototype.vi=function(t,i,n){t.yt=!1,i.yt=!1;var s=this.Wt;if(s.yt()){var h=s.R(),r=h.lastValueVisible,e=""!==s.ar(),u=0===h.seriesLastValueMode,a=s.jh(!1);if(!a.qh){r&&(t.Gt=this.lr(a,r,u),t.yt=0!==t.Gt.length),(e||u)&&(i.Gt=this.cr(a,r,e,u),i.yt=i.Gt.length>0);var o=s.ur(a.A),l=w(o);n.t=l.t,n.A=l.i,n.ti=a.ti,i.Tt=s.jt().Dt(a.ti/s.Ct().Yt()),t.Tt=o}}},i.prototype.cr=function(t,i,n,s){var h="",r=this.Wt.ar();return n&&0!==r.length&&(h+="".concat(r," ")),i&&s&&(h+=this.Wt.Ct().vr()?t._r:t.dr),h.trim()},i.prototype.lr=function(t,i,n){return i?n?this.Wt.Ct().vr()?t.dr:t._r:t.Gt:""},i}($),li=function(){function t(t,i){this.wr=t,this.Mr=i}return t.prototype.br=function(t){return null!==t&&(this.wr===t.wr&&this.Mr===t.Mr)},t.prototype.mr=function(){return new t(this.wr,this.Mr)},t.prototype.gr=function(){return this.wr},t.prototype.pr=function(){return this.Mr},t.prototype.yr=function(){return this.Mr-this.wr},t.prototype.wi=function(){return this.Mr===this.wr||Number.isNaN(this.Mr)||Number.isNaN(this.wr)},t.prototype.xn=function(i){return null===i?this:new t(Math.min(this.gr(),i.gr()),Math.max(this.pr(),i.pr()))},t.prototype.kr=function(t){if(k(t)&&0!==this.Mr-this.wr){var i=.5*(this.Mr+this.wr),n=this.Mr-i,s=this.wr-i;n*=t,s*=t,this.Mr=i+n,this.wr=i+s}},t.prototype.Nr=function(t){k(t)&&(this.Mr+=t,this.wr+=t)},t.prototype.Cr=function(){return{minValue:this.wr,maxValue:this.Mr}},t.Sr=function(i){return null===i?null:new t(i.minValue,i.maxValue)},t}(),fi=function(){function t(t,i){this.Tr=t,this.Dr=i||null}return t.prototype.Ar=function(){return this.Tr},t.prototype.Br=function(){return this.Dr},t.prototype.Cr=function(){return null===this.Tr?null:{priceRange:this.Tr.Cr(),margins:this.Dr||void 0}},t.Sr=function(i){return null===i?null:new t(li.Sr(i.priceRange),i.margins)},t}(),ci=function(t){function i(i,n){var s=t.call(this,i)||this;return s.Lr=n,s}return b(i,t),i.prototype.bh=function(t,i){var n=this.wh;n.yt=!1;var s=this.Lr.R();if(this.Kn.yt()&&s.lineVisible){var h=this.Lr.Er();null!==h&&(n.yt=!0,n.it=h,n.A=s.color,n.Ht=i,n.Yt=t,n.Vt=s.lineWidth,n.Pt=s.lineStyle)}},i}(qt),vi=function(t){function i(i,n){var s=t.call(this)||this;return s.Vh=i,s.Lr=n,s}return b(i,t),i.prototype.vi=function(t,i,n){t.yt=!1,i.yt=!1;var s=this.Lr.R(),h=s.axisLabelVisible,r=""!==s.title,e=this.Vh;if(h&&e.yt()){var u=this.Lr.Er();if(null!==u){r&&(i.Gt=s.title,i.yt=!0),i.Tt=e.jt().Dt(u/e.Ct().Yt()),t.Gt=e.Ct().Or(s.price),t.yt=!0;var a=w(s.color);n.t=a.t,n.A=a.i,n.ti=u}}},i}($),_i=function(){function t(t,i){this.Vh=t,this.zi=i,this.Fr=new ci(t,this),this.uh=new vi(t,this),this.Vr=new It(this.uh,t,t.jt())}return t.prototype.Pr=function(t){y(this.zi,t),this.vt(),this.Vh.jt().Rr()},t.prototype.R=function(){return this.zi},t.prototype.tn=function(){return[this.Fr,this.Vr]},t.prototype.zr=function(){return this.uh},t.prototype.vt=function(){this.Fr.vt(),this.uh.vt()},t.prototype.Er=function(){var t=this.Vh,i=t.Ct();if(t.jt().bt().wi()||i.wi())return null;var n=t.kt();return null===n?null:i.Nt(this.zi.price,n.St)},t}(),di=function(t){function i(i){var n=t.call(this)||this;return n.gi=i,n}return b(i,t),i.prototype.jt=function(){return this.gi},i}(G),wi={Ds:"",Hs:"",Us:""},Mi=function(){function t(t){this.Vh=t}return t.prototype.As=function(t,i){var n=this.Vh.Wr(),s=this.Vh.R();switch(n){case"Line":return this.Ir(s,t,i);case"Area":return this.jr(s);case"Baseline":return this.qr(s,t,i);case"Bar":return this.Ur(s,t,i);case"Candlestick":return this.Hr(s,t,i);case"Histogram":return this.Yr(s,t,i)}throw new Error("Unknown chart style")},t.prototype.Ur=function(t,i,n){var s=m({},wi),h=t.upColor,r=t.downColor,a=h,o=r,l=e(this.$r(i,n)),f=u(l.St[0])<=u(l.St[3]);return void 0!==l.A?(s.Ds=l.A,s.Hs=l.A):(s.Ds=f?h:r,s.Hs=f?a:o),s},t.prototype.Hr=function(t,i,n){var s,h,r,a=m({},wi),o=t.upColor,l=t.downColor,f=t.borderUpColor,c=t.borderDownColor,v=t.wickUpColor,_=t.wickDownColor,d=e(this.$r(i,n)),w=u(d.St[0])<=u(d.St[3]);return a.Ds=null!==(s=d.A)&&void 0!==s?s:w?o:l,a.Hs=null!==(h=d.Tt)&&void 0!==h?h:w?f:c,a.Us=null!==(r=d.qs)&&void 0!==r?r:w?v:_,a},t.prototype.jr=function(t){return m(m({},wi),{Ds:t.lineColor})},t.prototype.qr=function(t,i,n){var s=e(this.$r(i,n)).St[3]>=t.baseValue.price;return m(m({},wi),{Ds:s?t.topLineColor:t.bottomLineColor})},t.prototype.Ir=function(t,i,n){var s,h=e(this.$r(i,n));return m(m({},wi),{Ds:null!==(s=h.A)&&void 0!==s?s:t.color})},t.prototype.Yr=function(t,i,n){var s=m({},wi),h=e(this.$r(i,n));return s.Ds=void 0!==h.A?h.A:t.color,s},t.prototype.$r=function(t,i){return void 0!==i?i.St:this.Vh.an().Kr(t)},t}(),bi=30,mi=function(){function t(){this.Xr=[],this.Zr=new Map,this.Jr=new Map}return t.prototype.Gr=function(){return this.hs()>0?this.Xr[this.Xr.length-1]:null},t.prototype.Qr=function(){return this.hs()>0?this.te(0):null},t.prototype.un=function(){return this.hs()>0?this.te(this.Xr.length-1):null},t.prototype.hs=function(){return this.Xr.length},t.prototype.wi=function(){return 0===this.hs()},t.prototype.Uh=function(t){return null!==this.ie(t,0)},t.prototype.Kr=function(t){return this.ne(t)},t.prototype.ne=function(t,i){void 0===i&&(i=0);var n=this.ie(t,i);return null===n?null:m(m({},this.se(n)),{vs:this.te(n)})},t.prototype.fs=function(){return this.Xr},t.prototype.he=function(t,i,n){if(this.wi())return null;for(var s=null,h=0,r=n;h<r.length;h++){var e=r[h];s=gi(s,this.re(t,i,e))}return s},t.prototype.Z=function(t){this.Jr.clear(),this.Zr.clear(),this.Xr=t},t.prototype.te=function(t){return this.Xr[t].vs},t.prototype.se=function(t){return this.Xr[t]},t.prototype.ie=function(t,i){var n=this.ee(t);if(null===n&&0!==i)switch(i){case-1:return this.ue(t);case 1:return this.ae(t);default:throw new TypeError("Unknown search mode")}return n},t.prototype.ue=function(t){var i=this.oe(t);return i>0&&(i-=1),i!==this.Xr.length&&this.te(i)<t?i:null},t.prototype.ae=function(t){var i=this.le(t);return i!==this.Xr.length&&t<this.te(i)?i:null},t.prototype.ee=function(t){var i=this.oe(t);return i===this.Xr.length||t<this.Xr[i].vs?null:i},t.prototype.oe=function(t){return ct(this.Xr,t,(function(t,i){return t.vs<i}))},t.prototype.le=function(t){return vt(this.Xr,t,(function(t,i){return i.vs>t}))},t.prototype.fe=function(t,i,n){for(var s=null,h=t;h<i;h++){var r=this.Xr[h].St[n];Number.isNaN(r)||(null===s?s={ce:r,ve:r}:(r<s.ce&&(s.ce=r),r>s.ve&&(s.ve=r)))}return s},t.prototype.re=function(t,i,n){if(this.wi())return null;var s=null,h=e(this.Qr()),r=e(this.un()),u=Math.max(t,h),a=Math.min(i,r),o=Math.ceil(u/bi)*bi,l=Math.max(o,Math.floor(a/bi)*bi),f=this.oe(u),c=this.le(Math.min(a,o,i));s=gi(s,this.fe(f,c,n));var v=this.Zr.get(n);void 0===v&&(v=new Map,this.Zr.set(n,v));for(var _=Math.max(o+1,u);_<l;_+=bi){var d=Math.floor(_/bi),w=v.get(d);if(void 0===w){var M=this.oe(d*bi),b=this.le((d+1)*bi-1);w=this.fe(M,b,n),v.set(d,w)}s=gi(s,w)}f=this.oe(l),c=this.le(a);return s=gi(s,this.fe(f,c,n))},t}();function gi(t,i){return null===t?i:null===i?t:{ce:Math.min(t.ce,i.ce),ve:Math.max(t.ve,i.ve)}}var pi=function(t){function i(i,n,s){var h=t.call(this,i)||this;h.Bt=new mi,h.Fr=new ai(h),h._e=[],h.de=new Ut(h),h.we=null,h.Me=null,h.be=[],h.me=[],h.ge=null,h.zi=n,h.pe=s;var r=new oi(h);return h.Ei=[r],h.Vr=new It(r,h,i),"Area"!==s&&"Line"!==s&&"Baseline"!==s||(h.we=new Xt(h)),h.ye(),h.ke(),h}return b(i,t),i.prototype.p=function(){null!==this.ge&&clearTimeout(this.ge)},i.prototype.ur=function(t){return this.zi.priceLineColor||t},i.prototype.jh=function(t){var i={qh:!0},n=this.Ct();if(this.jt().bt().wi()||n.wi()||this.Bt.wi())return i;var s,h,r=this.jt().bt().ss(),e=this.kt();if(null===r||null===e)return i;if(t){var u=this.Bt.Gr();if(null===u)return i;s=u,h=u.vs}else{var a=this.Bt.ne(r.jn(),-1);if(null===a)return i;if(null===(s=this.Bt.Kr(a.vs)))return i;h=a.vs}var o=s.St[3],l=this.ls().As(h,{St:s}),f=n.Nt(o,e.St);return{qh:!1,et:o,Gt:n.Mi(o,e.St),_r:n.Or(o),dr:n.xe(o,e.St),A:l.Ds,ti:f,vs:h}},i.prototype.ls=function(){return null!==this.Me||(this.Me=new Mi(this)),this.Me},i.prototype.R=function(){return this.zi},i.prototype.Pr=function(t){var i=t.priceScaleId;void 0!==i&&i!==this.zi.priceScaleId&&this.jt().Ne(this,i),y(this.zi,t),null!==this.ki&&void 0!==t.scaleMargins&&this.ki.Pr({scaleMargins:t.scaleMargins}),void 0!==t.priceFormat&&(this.ye(),this.jt().Ce()),this.jt().Se(this),this.jt().Te(),this.Hi.vt("options")},i.prototype.Z=function(t,i){this.Bt.Z(t),this.De(),this.Hi.vt("data"),this.Wi.vt("data"),null!==this.we&&(i&&i.Ae?this.we.Rh():0===t.length&&this.we.Ph());var n=this.jt().oh(this);this.jt().Be(n),this.jt().Se(this),this.jt().Te(),this.jt().Rr()},i.prototype.Le=function(t){this.be=t.map((function(t){return m({},t)})),this.De();var i=this.jt().oh(this);this.Wi.vt("data"),this.jt().Be(i),this.jt().Se(this),this.jt().Te(),this.jt().Rr()},i.prototype.rr=function(){return this.me},i.prototype.Ee=function(t){var i=new _i(this,t);return this._e.push(i),this.jt().Se(this),i},i.prototype.Oe=function(t){var i=this._e.indexOf(t);-1!==i&&this._e.splice(i,1),this.jt().Se(this)},i.prototype.Wr=function(){return this.pe},i.prototype.kt=function(){var t=this.Fe();return null===t?null:{St:t.St[3],Ve:t.rt}},i.prototype.Fe=function(){var t=this.jt().bt().ss();if(null===t)return null;var i=t.In();return this.Bt.ne(i,1)},i.prototype.an=function(){return this.Bt},i.prototype.er=function(t){var i=this.Bt.Kr(t);return null===i?null:"Bar"===this.pe||"Candlestick"===this.pe?{open:i.St[0],high:i.St[1],low:i.St[2],close:i.St[3]}:i.St[3]},i.prototype.Pe=function(t){var i=this,n=this.we;return null!==n&&n.yt()?(null===this.ge&&n.Wh()&&(this.ge=setTimeout((function(){i.ge=null,i.jt().Re()}),0)),n.zh(),[n]):[]},i.prototype.tn=function(){var t=[];this.ze()||t.push(this.de);for(var i=0,n=this._e;i<n.length;i++){var s=n[i];t.push.apply(t,s.tn())}return t.push(this.Hi,this.Fr,this.Vr,this.Wi),t},i.prototype.nn=function(t,i){if(i!==this.ki&&!this.ze())return[];for(var n=g([],this.Ei,!0),s=0,h=this._e;s<h.length;s++){var r=h[s];n.push(r.zr())}return n},i.prototype.We=function(t,i){var n=this;if(void 0!==this.zi.autoscaleInfoProvider){var s=this.zi.autoscaleInfoProvider((function(){var s=n.Ie(t,i);return null===s?null:s.Cr()}));return fi.Sr(s)}return this.Ie(t,i)},i.prototype.je=function(){return this.zi.priceFormat.minMove},i.prototype.qe=function(){return this.Ue},i.prototype.hn=function(){var t;this.Hi.vt(),this.Wi.vt();for(var i=0,n=this.Ei;i<n.length;i++){n[i].vt()}for(var s=0,h=this._e;s<h.length;s++){h[s].vt()}this.Fr.vt(),this.de.vt(),null===(t=this.we)||void 0===t||t.vt()},i.prototype.Ct=function(){return e(t.prototype.Ct.call(this))},i.prototype.gt=function(t){if(!(("Line"===this.pe||"Area"===this.pe||"Baseline"===this.pe)&&this.zi.crosshairMarkerVisible))return null;var i=this.Bt.Kr(t);return null===i?null:{et:i.St[3],st:this.He(),Tt:this.Ye(),xt:this.$e(t)}},i.prototype.ar=function(){return this.zi.title},i.prototype.yt=function(){return this.zi.visible},i.prototype.ze=function(){return!tt(this.Ct().Ke())},i.prototype.Ie=function(t,i){if(!x(t)||!x(i)||this.Bt.wi())return null;var n="Line"===this.pe||"Area"===this.pe||"Baseline"===this.pe||"Histogram"===this.pe?[3]:[2,1],s=this.Bt.he(t,i,n),h=null!==s?new li(s.ce,s.ve):null;if("Histogram"===this.Wr()){var r=this.zi.base,e=new li(r,r);h=null!==h?h.xn(e):e}return new fi(h,this.Wi.hr())},i.prototype.He=function(){switch(this.pe){case"Line":case"Area":case"Baseline":return this.zi.crosshairMarkerRadius}return 0},i.prototype.Ye=function(){switch(this.pe){case"Line":case"Area":case"Baseline":var t=this.zi.crosshairMarkerBorderColor;if(0!==t.length)return t}return null},i.prototype.$e=function(t){switch(this.pe){case"Line":case"Area":case"Baseline":var i=this.zi.crosshairMarkerBackgroundColor;if(0!==i.length)return i}return this.ls().As(t).Ds},i.prototype.ye=function(){switch(this.zi.priceFormat.type){case"custom":this.Ue={format:this.zi.priceFormat.formatter};break;case"volume":this.Ue=new et(this.zi.priceFormat.precision);break;case"percent":this.Ue=new rt(this.zi.priceFormat.precision);break;default:var t=Math.pow(10,this.zi.priceFormat.precision);this.Ue=new ht(t,this.zi.priceFormat.minMove*t)}null!==this.ki&&this.ki.Xe()},i.prototype.De=function(){var t=this,i=this.jt().bt();if(i.wi()||0===this.Bt.hs())this.me=[];else{var n=e(this.Bt.Qr());this.me=this.be.map((function(s,h){var r=e(i.Ze(s.time,!0)),u=r<n?1:-1;return{time:e(t.Bt.ne(r,u)).vs,position:s.position,shape:s.shape,color:s.color,id:s.id,Xh:h,text:s.text,size:s.size}}))}},i.prototype.ke=function(){switch(this.Wi=new ui(this,this.jt()),this.pe){case"Bar":this.Hi=new yt(this,this.jt());break;case"Candlestick":this.Hi=new Lt(this,this.jt());break;case"Line":this.Hi=new Pt(this,this.jt());break;case"Area":this.Hi=new mt(this,this.jt());break;case"Baseline":this.Hi=new At(this,this.jt());break;case"Histogram":this.Hi=new Vt(this,this.jt());break;default:throw Error("Unknown chart style assigned: "+this.pe)}},i}(di),yi=function(){function t(t){this.zi=t}return t.prototype.Je=function(t,i,n){var s=t;if(0===this.zi.mode)return s;var h=n.ji(),r=h.kt();if(null===r)return s;var e=h.Nt(t,r),a=n.Ge().filter((function(t){return t instanceof pi})).reduce((function(t,s){if(n.lh(s)||!s.yt())return t;var h=s.Ct(),r=s.an();if(h.wi()||!r.Uh(i))return t;var e=r.Kr(i);if(null===e)return t;var a=u(s.kt());return t.concat([h.Nt(e.St[3],a.St)])}),[]);if(0===a.length)return s;a.sort((function(t,i){return Math.abs(t-e)-Math.abs(i-e)}));var o=a[0];return s=h.qi(o,r)},t}(),ki=function(){function t(){this.Bt=null}return t.prototype.Z=function(t){this.Bt=t},t.prototype.H=function(t,i,s,h){var r=this;if(null!==this.Bt){var u=Math.max(1,Math.floor(i));t.lineWidth=u;var a=Math.ceil(this.Bt.Ft*i),o=Math.ceil(this.Bt.Ot*i);!function(t,i){t.save(),t.lineWidth%2&&t.translate(.5,.5),i(),t.restore()}(t,(function(){var s=e(r.Bt);if(s.Qe){t.strokeStyle=s.tu,n(t,s.iu),t.beginPath();for(var h=0,l=s.nu;h<l.length;h++){var f=l[h],c=Math.round(f.su*i);t.moveTo(c,-u),t.lineTo(c,a+u)}t.stroke()}if(s.hu){t.strokeStyle=s.ru,n(t,s.eu),t.beginPath();for(var v=0,_=s.uu;v<_.length;v++){var d=_[v],w=Math.round(d.su*i);t.moveTo(-u,w),t.lineTo(o+u,w)}t.stroke()}}))}},t}(),xi=function(){function t(t){this.zt=new ki,this.ft=!0,this.Di=t}return t.prototype.vt=function(){this.ft=!0},t.prototype.dt=function(t,i){if(this.ft){var n=this.Di.jt().R().grid,s={Ft:t,Ot:i,hu:n.horzLines.visible,Qe:n.vertLines.visible,ru:n.horzLines.color,tu:n.vertLines.color,eu:n.horzLines.style,iu:n.vertLines.style,uu:this.Di.ji().au(),nu:this.Di.jt().bt().au()||[]};this.zt.Z(s),this.ft=!1}return this.zt},t}(),Ni=function(){function t(t){this.Hi=new xi(t)}return t.prototype.ou=function(){return this.Hi},t}(),Ci={lu:4,fu:1e-4};function Si(t,i){var n=100*(t-i)/i;return i<0?-n:n}function Ti(t,i){var n=Si(t.gr(),i),s=Si(t.pr(),i);return new li(n,s)}function Di(t,i){var n=100*(t-i)/i+100;return i<0?-n:n}function Ai(t,i){var n=Di(t.gr(),i),s=Di(t.pr(),i);return new li(n,s)}function Bi(t,i){var n=Math.abs(t);if(n<1e-15)return 0;var s=Nt(n+i.fu)+i.lu;return t<0?-s:s}function Li(t,i){var n=Math.abs(t);if(n<1e-15)return 0;var s=Math.pow(10,n-i.lu)-i.fu;return t<0?-s:s}function Ei(t,i){if(null===t)return null;var n=Bi(t.gr(),i),s=Bi(t.pr(),i);return new li(n,s)}function Oi(t,i){if(null===t)return null;var n=Li(t.gr(),i),s=Li(t.pr(),i);return new li(n,s)}function Fi(t){if(null===t)return Ci;var i=Math.abs(t.pr()-t.gr());if(i>=1||i<1e-15)return Ci;var n=Math.ceil(Math.abs(Math.log10(i))),s=Ci.lu+n;return{lu:s,fu:1/Math.pow(10,s)}}var Vi,Pi=function(){function t(t,i){if(this.cu=t,this.vu=i,function(t){if(t<0)return!1;for(var i=t;i>1;i/=10)if(i%10!=0)return!1;return!0}(this.cu))this._u=[2,2.5,2];else{this._u=[];for(var n=this.cu;1!==n;){if(n%2==0)this._u.push(2),n/=2;else{if(n%5!=0)throw new Error("unexpected base");this._u.push(2,2.5),n/=5}if(this._u.length>100)throw new Error("something wrong with base")}}}return t.prototype.du=function(t,i,n){for(var s,h,r,e=0===this.cu?0:1/this.cu,u=Math.pow(10,Math.max(0,Math.ceil(Nt(t-i)))),a=0,o=this.vu[0];;){var l=xt(u,e,1e-14)&&u>e+1e-14,f=xt(u,n*o,1e-14),c=xt(u,1,1e-14);if(!(l&&f&&c))break;u/=o,o=this.vu[++a%this.vu.length]}if(u<=e+1e-14&&(u=e),u=Math.max(1,u),this._u.length>0&&(s=u,h=1,r=1e-14,Math.abs(s-h)<r))for(a=0,o=this._u[0];xt(u,n*o,1e-14)&&u>e+1e-14;)u/=o,o=this._u[++a%this._u.length];return u},t}(),Ri=function(){function t(t,i,n,s){this.wu=[],this._i=t,this.cu=i,this.Mu=n,this.bu=s}return t.prototype.du=function(t,i){if(t<i)throw new Error("high < low");var n=this._i.Yt(),s=(t-i)*this.mu()/n,h=new Pi(this.cu,[2,2.5,2]),r=new Pi(this.cu,[2,2,2.5]),e=new Pi(this.cu,[2.5,2,2]),u=[];return u.push(h.du(t,i,s),r.du(t,i,s),e.du(t,i,s)),function(t){if(t.length<1)throw Error("array is empty");for(var i=t[0],n=1;n<t.length;++n)t[n]<i&&(i=t[n]);return i}(u)},t.prototype.gu=function(){var t=this._i,i=t.kt();if(null!==i){var n=t.Yt(),s=this.Mu(n-1,i),h=this.Mu(0,i),r=this._i.R().entireTextOnly?this.pu()/2:0,e=r,u=n-1-r,a=Math.max(s,h),o=Math.min(s,h);if(a!==o){for(var l=this.du(a,o),f=a%l,c=a>=o?1:-1,v=null,_=0,d=a-(f+=f<0?l:0);d>o;d-=l){var w=this.bu(d,i,!0);null!==v&&Math.abs(w-v)<this.mu()||(w<e||w>u||(_<this.wu.length?(this.wu[_].su=w,this.wu[_].yu=t.ku(d)):this.wu.push({su:w,yu:t.ku(d)}),_++,v=w,t.xu()&&(l=this.du(d*c,o))))}this.wu.length=_}else this.wu=[]}else this.wu=[]},t.prototype.au=function(){return this.wu},t.prototype.pu=function(){return this._i.S()},t.prototype.mu=function(){return Math.ceil(2.5*this.pu())},t}();function zi(t){return t.slice().sort((function(t,i){return e(t.Ni())-e(i.Ni())}))}!function(t){t[t.Normal=0]="Normal",t[t.Logarithmic=1]="Logarithmic",t[t.Percentage=2]="Percentage",t[t.IndexedTo100=3]="IndexedTo100"}(Vi||(Vi={}));var Wi=new rt,Ii=new ht(100,1),ji=function(){function t(t,i,n,s){this.Nu=0,this.Cu=null,this.Tr=null,this.Su=null,this.Tu={Du:!1,Au:null},this.Bu=0,this.Lu=0,this.Eu=new p,this.Ou=new p,this.Fu=[],this.Vu=null,this.Pu=null,this.Ru=null,this.zu=null,this.Ue=Ii,this.Wu=Fi(null),this.Iu=t,this.zi=i,this.ju=n,this.qu=s,this.Uu=new Ri(this,100,this.Hu.bind(this),this.Yu.bind(this))}return t.prototype.Ke=function(){return this.Iu},t.prototype.R=function(){return this.zi},t.prototype.Pr=function(t){if(y(this.zi,t),this.Xe(),void 0!==t.mode&&this.$u({mh:t.mode}),void 0!==t.scaleMargins){var i=r(t.scaleMargins.top),n=r(t.scaleMargins.bottom);if(i<0||i>1)throw new Error("Invalid top margin - expect value between 0 and 1, given=".concat(i));if(n<0||n>1||i+n>1)throw new Error("Invalid bottom margin - expect value between 0 and 1, given=".concat(n));if(i+n>1)throw new Error("Invalid margins - sum of margins must be less than 1, given=".concat(i+n));this.Ku(),this.Pu=null}},t.prototype.Xu=function(){return this.zi.autoScale},t.prototype.xu=function(){return 1===this.zi.mode},t.prototype.vr=function(){return 2===this.zi.mode},t.prototype.Zu=function(){return 3===this.zi.mode},t.prototype.mh=function(){return{_n:this.zi.autoScale,Ju:this.zi.invertScale,mh:this.zi.mode}},t.prototype.$u=function(t){var i=this.mh(),n=null;void 0!==t._n&&(this.zi.autoScale=t._n),void 0!==t.mh&&(this.zi.mode=t.mh,2!==t.mh&&3!==t.mh||(this.zi.autoScale=!0),this.Tu.Du=!1),1===i.mh&&t.mh!==i.mh&&(!function(t,i){if(null===t)return!1;var n=Li(t.gr(),i),s=Li(t.pr(),i);return isFinite(n)&&isFinite(s)}(this.Tr,this.Wu)?this.zi.autoScale=!0:null!==(n=Oi(this.Tr,this.Wu))&&this.Gu(n)),1===t.mh&&t.mh!==i.mh&&null!==(n=Ei(this.Tr,this.Wu))&&this.Gu(n);var s=i.mh!==this.zi.mode;s&&(2===i.mh||this.vr())&&this.Xe(),s&&(3===i.mh||this.Zu())&&this.Xe(),void 0!==t.Ju&&i.Ju!==t.Ju&&(this.zi.invertScale=t.Ju,this.Qu()),this.Ou.m(i,this.mh())},t.prototype.ta=function(){return this.Ou},t.prototype.S=function(){return this.ju.fontSize},t.prototype.Yt=function(){return this.Nu},t.prototype.ia=function(t){this.Nu!==t&&(this.Nu=t,this.Ku(),this.Pu=null)},t.prototype.na=function(){if(this.Cu)return this.Cu;var t=this.Yt()-this.sa()-this.ha();return this.Cu=t,t},t.prototype.Ar=function(){return this.ra(),this.Tr},t.prototype.Gu=function(t,i){var n=this.Tr;(i||null===n&&null!==t||null!==n&&!n.br(t))&&(this.Pu=null,this.Tr=t)},t.prototype.wi=function(){return this.ra(),0===this.Nu||!this.Tr||this.Tr.wi()},t.prototype.ea=function(t){return this.Ju()?t:this.Yt()-1-t},t.prototype.Nt=function(t,i){return this.vr()?t=Si(t,i):this.Zu()&&(t=Di(t,i)),this.Yu(t,i)},t.prototype.us=function(t,i,n){this.ra();for(var s=this.ha(),h=e(this.Ar()),r=h.gr(),u=h.pr(),a=this.na()-1,o=this.Ju(),l=a/(u-r),f=void 0===n?0:n.from,c=void 0===n?t.length:n.to,v=this.ua(),_=f;_<c;_++){var d=t[_],w=d.et;if(!isNaN(w)){var M=w;null!==v&&(M=v(d.et,i));var b=s+l*(M-r),m=o?b:this.Nu-1-b;d.it=m}}},t.prototype.Ss=function(t,i,n){this.ra();for(var s=this.ha(),h=e(this.Ar()),r=h.gr(),u=h.pr(),a=this.na()-1,o=this.Ju(),l=a/(u-r),f=void 0===n?0:n.from,c=void 0===n?t.length:n.to,v=this.ua(),_=f;_<c;_++){var d=t[_],w=d.open,M=d.high,b=d.low,m=d.close;null!==v&&(w=v(d.open,i),M=v(d.high,i),b=v(d.low,i),m=v(d.close,i));var g=s+l*(w-r),p=o?g:this.Nu-1-g;d.Ns=p,g=s+l*(M-r),p=o?g:this.Nu-1-g,d.ys=p,g=s+l*(b-r),p=o?g:this.Nu-1-g,d.ks=p,g=s+l*(m-r),p=o?g:this.Nu-1-g,d.Cs=p}},t.prototype.qi=function(t,i){var n=this.Hu(t,i);return this.aa(n,i)},t.prototype.aa=function(t,i){var n=t;return this.vr()?n=function(t,i){return i<0&&(t=-t),t/100*i+i}(n,i):this.Zu()&&(n=function(t,i){return t-=100,i<0&&(t=-t),t/100*i+i}(n,i)),n},t.prototype.Ge=function(){return this.Fu},t.prototype.oa=function(){if(this.Vu)return this.Vu;for(var t=[],i=0;i<this.Fu.length;i++){var n=this.Fu[i];null===n.Ni()&&n.Ci(i+1),t.push(n)}return t=zi(t),this.Vu=t,this.Vu},t.prototype.la=function(t){-1===this.Fu.indexOf(t)&&(this.Fu.push(t),this.Xe(),this.fa())},t.prototype.ca=function(t){var i=this.Fu.indexOf(t);if(-1===i)throw new Error("source is not attached to scale");this.Fu.splice(i,1),0===this.Fu.length&&(this.$u({_n:!0}),this.Gu(null)),this.Xe(),this.fa()},t.prototype.kt=function(){for(var t=null,i=0,n=this.Fu;i<n.length;i++){var s=n[i].kt();null!==s&&((null===t||s.Ve<t.Ve)&&(t=s))}return null===t?null:t.St},t.prototype.Ju=function(){return this.zi.invertScale},t.prototype.au=function(){var t=null===this.kt();if(null!==this.Pu&&(t||this.Pu.va===t))return this.Pu.au;this.Uu.gu();var i=this.Uu.au();return this.Pu={au:i,va:t},this.Eu.m(),i},t.prototype._a=function(){return this.Eu},t.prototype.da=function(t){this.vr()||this.Zu()||null===this.Ru&&null===this.Su&&(this.wi()||(this.Ru=this.Nu-t,this.Su=e(this.Ar()).mr()))},t.prototype.wa=function(t){if(!this.vr()&&!this.Zu()&&null!==this.Ru){this.$u({_n:!1}),(t=this.Nu-t)<0&&(t=0);var i=(this.Ru+.2*(this.Nu-1))/(t+.2*(this.Nu-1)),n=e(this.Su).mr();i=Math.max(i,.1),n.kr(i),this.Gu(n)}},t.prototype.Ma=function(){this.vr()||this.Zu()||(this.Ru=null,this.Su=null)},t.prototype.ba=function(t){this.Xu()||null===this.zu&&null===this.Su&&(this.wi()||(this.zu=t,this.Su=e(this.Ar()).mr()))},t.prototype.ma=function(t){if(!this.Xu()&&null!==this.zu){var i=e(this.Ar()).yr()/(this.na()-1),n=t-this.zu;this.Ju()&&(n*=-1);var s=n*i,h=e(this.Su).mr();h.Nr(s),this.Gu(h,!0),this.Pu=null}},t.prototype.ga=function(){this.Xu()||null!==this.zu&&(this.zu=null,this.Su=null)},t.prototype.qe=function(){return this.Ue||this.Xe(),this.Ue},t.prototype.Mi=function(t,i){switch(this.zi.mode){case 2:return this.qe().format(Si(t,i));case 3:return this.qe().format(Di(t,i));default:return this.pa(t)}},t.prototype.ku=function(t){switch(this.zi.mode){case 2:case 3:return this.qe().format(t);default:return this.pa(t)}},t.prototype.Or=function(t){return this.pa(t,e(this.ya()).qe())},t.prototype.xe=function(t,i){return t=Si(t,i),Wi.format(t)},t.prototype.ka=function(){return this.Fu},t.prototype.xa=function(t){this.Tu={Au:t,Du:!1}},t.prototype.hn=function(){this.Fu.forEach((function(t){return t.hn()}))},t.prototype.Xe=function(){this.Pu=null;var t=this.ya(),i=100;null!==t&&(i=Math.round(1/t.je())),this.Ue=Ii,this.vr()?(this.Ue=Wi,i=100):this.Zu()?(this.Ue=new ht(100,1),i=100):null!==t&&(this.Ue=t.qe()),this.Uu=new Ri(this,i,this.Hu.bind(this),this.Yu.bind(this)),this.Uu.gu()},t.prototype.fa=function(){this.Vu=null},t.prototype.ya=function(){return this.Fu[0]||null},t.prototype.sa=function(){return this.Ju()?this.zi.scaleMargins.bottom*this.Yt()+this.Lu:this.zi.scaleMargins.top*this.Yt()+this.Bu},t.prototype.ha=function(){return this.Ju()?this.zi.scaleMargins.top*this.Yt()+this.Bu:this.zi.scaleMargins.bottom*this.Yt()+this.Lu},t.prototype.ra=function(){this.Tu.Du||(this.Tu.Du=!0,this.Na())},t.prototype.Ku=function(){this.Cu=null},t.prototype.Yu=function(t,i){if(this.ra(),this.wi())return 0;t=this.xu()&&t?Bi(t,this.Wu):t;var n=e(this.Ar()),s=this.ha()+(this.na()-1)*(t-n.gr())/n.yr();return this.ea(s)},t.prototype.Hu=function(t,i){if(this.ra(),this.wi())return 0;var n=this.ea(t),s=e(this.Ar()),h=s.gr()+s.yr()*((n-this.ha())/(this.na()-1));return this.xu()?Li(h,this.Wu):h},t.prototype.Qu=function(){this.Pu=null,this.Uu.gu()},t.prototype.Na=function(){var t=this.Tu.Au;if(null!==t){for(var i,n,s=null,h=0,r=0,u=0,a=this.ka();u<a.length;u++){var o=a[u];if(o.yt()){var l=o.kt();if(null!==l){var f=o.We(t.In(),t.jn()),c=f&&f.Ar();if(null!==c){switch(this.zi.mode){case 1:c=Ei(c,this.Wu);break;case 2:c=Ti(c,l.St);break;case 3:c=Ai(c,l.St)}if(s=null===s?c:s.xn(e(c)),null!==f){var v=f.Br();null!==v&&(h=Math.max(h,v.above),r=Math.max(h,v.below))}}}}}if(h===this.Bu&&r===this.Lu||(this.Bu=h,this.Lu=r,this.Pu=null,this.Ku()),null!==s){if(s.gr()===s.pr()){var _=this.ya(),d=5*(null===_||this.vr()||this.Zu()?1:_.je());this.xu()&&(s=Oi(s,this.Wu)),s=new li(s.gr()-d,s.pr()+d),this.xu()&&(s=Ei(s,this.Wu))}if(this.xu()){var w=Oi(s,this.Wu),M=Fi(w);if(i=M,n=this.Wu,i.lu!==n.lu||i.fu!==n.fu){var b=null!==this.Su?Oi(this.Su,this.Wu):null;this.Wu=M,s=Ei(w,M),null!==b&&(this.Su=Ei(b,M))}}this.Gu(s)}else null===this.Tr&&(this.Gu(new li(-.5,.5)),this.Wu=Fi(null));this.Tu.Du=!0}},t.prototype.ua=function(){var t=this;return this.vr()?Si:this.Zu()?Di:this.xu()?function(i){return Bi(i,t.Wu)}:null},t.prototype.pa=function(t,i){return void 0===this.qu.priceFormatter?(void 0===i&&(i=this.qe()),i.format(t)):this.qu.priceFormatter(t)},t}(),qi=function(){function t(t,i){this.Fu=[],this.Ca=new Map,this.Nu=0,this.hh=0,this.Sa=1e3,this.Vu=null,this.Ta=new p,this.Da=t,this.gi=i,this.Aa=new Ni(this);var n=i.R();this.Ba=this.La("left",n.leftPriceScale),this.Ea=this.La("right",n.rightPriceScale),this.Ba.ta().u(this.Oa.bind(this,this.Ba),this),this.Ea.ta().u(this.Oa.bind(this,this.Ba),this),this.Fa(n)}return t.prototype.Fa=function(t){if(t.leftPriceScale&&this.Ba.Pr(t.leftPriceScale),t.rightPriceScale&&this.Ea.Pr(t.rightPriceScale),t.localization&&(this.Ba.Xe(),this.Ea.Xe()),t.overlayPriceScales)for(var i=0,n=Array.from(this.Ca.values());i<n.length;i++){var s=e(n[i][0].Ct());s.Pr(t.overlayPriceScales),t.localization&&s.Xe()}},t.prototype.Va=function(t){switch(t){case"left":return this.Ba;case"right":return this.Ea}return this.Ca.has(t)?r(this.Ca.get(t))[0].Ct():null},t.prototype.p=function(){this.jt().Pa().M(this),this.Ba.ta().M(this),this.Ea.ta().M(this),this.Fu.forEach((function(t){t.p&&t.p()})),this.Ta.m()},t.prototype.Ra=function(){return this.Sa},t.prototype.za=function(t){this.Sa=t},t.prototype.jt=function(){return this.gi},t.prototype.Ht=function(){return this.hh},t.prototype.Yt=function(){return this.Nu},t.prototype.Wa=function(t){this.hh=t,this.Ia()},t.prototype.ia=function(t){var i=this;this.Nu=t,this.Ba.ia(t),this.Ea.ia(t),this.Fu.forEach((function(n){if(i.lh(n)){var s=n.Ct();null!==s&&s.ia(t)}})),this.Ia()},t.prototype.Ge=function(){return this.Fu},t.prototype.lh=function(t){var i=t.Ct();return null===i||this.Ba!==i&&this.Ea!==i},t.prototype.la=function(t,i,n){var s=void 0!==n?n:this.qa().ja+1;this.Ua(t,i,s)},t.prototype.ca=function(t){var i=this.Fu.indexOf(t);h(-1!==i,"removeDataSource: invalid data source"),this.Fu.splice(i,1);var n=e(t.Ct()).Ke();if(this.Ca.has(n)){var s=r(this.Ca.get(n)),u=s.indexOf(t);-1!==u&&(s.splice(u,1),0===s.length&&this.Ca.delete(n))}var a=t.Ct();a&&a.Ge().indexOf(t)>=0&&a.ca(t),null!==a&&(a.fa(),this.Ha(a)),this.Vu=null},t.prototype._h=function(t){return t===this.Ba?"left":t===this.Ea?"right":"overlay"},t.prototype.Ya=function(){return this.Ba},t.prototype.$a=function(){return this.Ea},t.prototype.Ka=function(t,i){t.da(i)},t.prototype.Xa=function(t,i){t.wa(i),this.Ia()},t.prototype.Za=function(t){t.Ma()},t.prototype.Ja=function(t,i){t.ba(i)},t.prototype.Ga=function(t,i){t.ma(i),this.Ia()},t.prototype.Qa=function(t){t.ga()},t.prototype.Ia=function(){this.Fu.forEach((function(t){t.hn()}))},t.prototype.ji=function(){var t=null;return this.gi.R().rightPriceScale.visible&&0!==this.Ea.Ge().length?t=this.Ea:this.gi.R().leftPriceScale.visible&&0!==this.Ba.Ge().length?t=this.Ba:0!==this.Fu.length&&(t=this.Fu[0].Ct()),null===t&&(t=this.Ea),t},t.prototype.fh=function(){var t=null;return this.gi.R().rightPriceScale.visible?t=this.Ea:this.gi.R().leftPriceScale.visible&&(t=this.Ba),t},t.prototype.Ha=function(t){null!==t&&t.Xu()&&this.io(t)},t.prototype.no=function(t){var i=this.Da.ss();t.$u({_n:!0}),null!==i&&t.xa(i),this.Ia()},t.prototype.so=function(){this.io(this.Ba),this.io(this.Ea)},t.prototype.ho=function(){var t=this;this.Ha(this.Ba),this.Ha(this.Ea),this.Fu.forEach((function(i){t.lh(i)&&t.Ha(i.Ct())})),this.Ia(),this.gi.Rr()},t.prototype.oa=function(){return null===this.Vu&&(this.Vu=zi(this.Fu)),this.Vu},t.prototype.ro=function(){return this.Ta},t.prototype.eo=function(){return this.Aa},t.prototype.io=function(t){var i=t.ka();if(i&&i.length>0&&!this.Da.wi()){var n=this.Da.ss();null!==n&&t.xa(n)}t.hn()},t.prototype.qa=function(){var t=this.oa();if(0===t.length)return{uo:0,ja:0};for(var i=0,n=0,s=0;s<t.length;s++){var h=t[s].Ni();null!==h&&(h<i&&(i=h),h>n&&(n=h))}return{uo:i,ja:n}},t.prototype.Ua=function(t,i,n){var s=this.Va(i);if(null===s&&(s=this.La(i,this.gi.R().overlayPriceScales)),this.Fu.push(t),!tt(i)){var h=this.Ca.get(i)||[];h.push(t),this.Ca.set(i,h)}s.la(t),t.Si(s),t.Ci(n),this.Ha(s),this.Vu=null},t.prototype.Oa=function(t,i,n){i.mh!==n.mh&&this.io(t)},t.prototype.La=function(t,i){var n=m({visible:!0,autoScale:!0},S(i)),s=new ji(t,n,this.gi.R().layout,this.gi.R().localization);return s.ia(this.Yt()),s},t}(),Ui=function(t){return t.getUTCFullYear()};function Hi(t,i,n){return i.replace(/yyyy/g,function(t){return st(Ui(t),4)}(t)).replace(/yy/g,function(t){return st(Ui(t)%100,2)}(t)).replace(/MMMM/g,function(t,i){return new Date(t.getUTCFullYear(),t.getUTCMonth(),1).toLocaleString(i,{month:"long"})}(t,n)).replace(/MMM/g,function(t,i){return new Date(t.getUTCFullYear(),t.getUTCMonth(),1).toLocaleString(i,{month:"short"})}(t,n)).replace(/MM/g,function(t){return st(function(t){return t.getUTCMonth()+1}(t),2)}(t)).replace(/dd/g,function(t){return st(function(t){return t.getUTCDate()}(t),2)}(t))}var Yi=function(){function t(t,i){void 0===t&&(t="yyyy-MM-dd"),void 0===i&&(i="default"),this.ao=t,this.oo=i}return t.prototype.lo=function(t){return Hi(t,this.ao,this.oo)},t}(),$i=function(){function t(t){this.fo=t||"%h:%m:%s"}return t.prototype.lo=function(t){return this.fo.replace("%h",st(t.getUTCHours(),2)).replace("%m",st(t.getUTCMinutes(),2)).replace("%s",st(t.getUTCSeconds(),2))},t}(),Ki={co:"yyyy-MM-dd",vo:"%h:%m:%s",_o:" ",do:"default"},Xi=function(){function t(t){void 0===t&&(t={});var i=m(m({},Ki),t);this.wo=new Yi(i.co,i.do),this.Mo=new $i(i.vo),this.bo=i._o}return t.prototype.lo=function(t){return"".concat(this.wo.lo(t)).concat(this.bo).concat(this.Mo.lo(t))},t}();var Zi=function(){function t(t,i){void 0===i&&(i=50),this.mo=0,this.po=1,this.yo=1,this.Gs=new Map,this.ko=new Map,this.xo=t,this.No=i}return t.prototype.lo=function(t){var i=void 0===t.Co?new Date(1e3*t.So).getTime():new Date(Date.UTC(t.Co.year,t.Co.month-1,t.Co.day)).getTime(),n=this.Gs.get(i);if(void 0!==n)return n.To;if(this.mo===this.No){var s=this.ko.get(this.yo);this.ko.delete(this.yo),this.Gs.delete(r(s)),this.yo++,this.mo--}var h=this.xo(t);return this.Gs.set(i,{To:h,Do:this.po}),this.ko.set(this.po,i),this.mo++,this.po++,h},t}(),Ji=function(){function t(t,i){h(t<=i,"right should be >= left"),this.Ao=t,this.Bo=i}return t.prototype.In=function(){return this.Ao},t.prototype.jn=function(){return this.Bo},t.prototype.Lo=function(){return this.Bo-this.Ao+1},t.prototype.Uh=function(t){return this.Ao<=t&&t<=this.Bo},t.prototype.br=function(t){return this.Ao===t.In()&&this.Bo===t.jn()},t}();function Gi(t,i){return null===t||null===i?t===i:t.br(i)}var Qi,tn=function(){function t(){this.Eo=new Map,this.Gs=null}return t.prototype.Oo=function(t,i){this.Fo(i),this.Gs=null;for(var n=i;n<t.length;++n){var s=t[n],h=this.Eo.get(s.Vo);void 0===h&&(h=[],this.Eo.set(s.Vo,h)),h.push({vs:n,rt:s.rt,Po:s.Vo})}},t.prototype.Ro=function(t,i){var n=Math.ceil(i/t);return null!==this.Gs&&this.Gs.zo===n||(this.Gs={au:this.Wo(n),zo:n}),this.Gs.au},t.prototype.Fo=function(t){if(0!==t){var i=[];this.Eo.forEach((function(n,s){t<=n[0].vs?i.push(s):n.splice(ct(n,t,(function(i){return i.vs<t})),1/0)}));for(var n=0,s=i;n<s.length;n++){var h=s[n];this.Eo.delete(h)}}else this.Eo.clear()},t.prototype.Wo=function(t){for(var i=[],n=0,s=Array.from(this.Eo.keys()).sort((function(t,i){return i-t}));n<s.length;n++){var h=s[n];if(this.Eo.get(h)){var e=i;i=[];for(var u=e.length,a=0,o=r(this.Eo.get(h)),l=o.length,f=1/0,c=-1/0,v=0;v<l;v++){for(var _=o[v],d=_.vs;a<u;){var w=e[a],M=w.vs;if(!(M<d)){f=M;break}a++,i.push(w),c=M,f=1/0}f-d>=t&&d-c>=t&&(i.push(_),c=d)}for(;a<u;a++)i.push(e[a])}}return i},t}(),nn=function(){function t(t){this.Io=t}return t.prototype.jo=function(){return null===this.Io?null:new Ji(Math.floor(this.Io.In()),Math.ceil(this.Io.jn()))},t.prototype.qo=function(){return this.Io},t.Uo=function(){return new t(null)},t}();!function(t){t[t.Year=0]="Year",t[t.Month=1]="Month",t[t.DayOfMonth=2]="DayOfMonth",t[t.Time=3]="Time",t[t.TimeWithSeconds=4]="TimeWithSeconds"}(Qi||(Qi={}));var sn=function(){function t(t,i,n){this.hh=0,this.Ho=null,this.Yo=[],this.zu=null,this.Ru=null,this.$o=new tn,this.Ko=new Map,this.Xo=nn.Uo(),this.Zo=!0,this.Jo=new p,this.Go=new p,this.Qo=new p,this.tl=null,this.il=null,this.nl=[],this.zi=i,this.qu=n,this.sl=i.rightOffset,this.hl=i.barSpacing,this.gi=t,this.rl()}return t.prototype.R=function(){return this.zi},t.prototype.el=function(t){y(this.qu,t),this.ul(),this.rl()},t.prototype.Pr=function(t,i){var n;y(this.zi,t),this.zi.fixLeftEdge&&this.al(),this.zi.fixRightEdge&&this.ol(),void 0!==t.barSpacing&&this.gi.pn(t.barSpacing),void 0!==t.rightOffset&&this.gi.yn(t.rightOffset),void 0!==t.minBarSpacing&&this.gi.pn(null!==(n=t.barSpacing)&&void 0!==n?n:this.hl),this.ul(),this.rl(),this.Qo.m()},t.prototype.pi=function(t){var i;return(null===(i=this.Yo[t])||void 0===i?void 0:i.rt)||null},t.prototype.Ze=function(t,i){if(this.Yo.length<1)return null;if(t.So>this.Yo[this.Yo.length-1].rt.So)return i?this.Yo.length-1:null;var n=ct(this.Yo,t.So,(function(t,i){return t.rt.So<i}));return t.So<this.Yo[n].rt.So?i?n:null:n},t.prototype.wi=function(){return 0===this.hh||0===this.Yo.length||null===this.Ho},t.prototype.ss=function(){return this.ll(),this.Xo.jo()},t.prototype.fl=function(){return this.ll(),this.Xo.qo()},t.prototype.cl=function(){var t=this.ss();if(null===t)return null;var i={from:t.In(),to:t.jn()};return this.vl(i)},t.prototype.vl=function(t){var i=Math.round(t.from),n=Math.round(t.to),s=e(this._l()),h=e(this.dl());return{from:e(this.pi(Math.max(s,i))),to:e(this.pi(Math.min(h,n)))}},t.prototype.wl=function(t){return{from:e(this.Ze(t.from,!0)),to:e(this.Ze(t.to,!0))}},t.prototype.Ht=function(){return this.hh},t.prototype.Wa=function(t){if(isFinite(t)&&!(t<=0)&&this.hh!==t){if(this.zi.lockVisibleTimeRangeOnResize&&this.hh){var i=this.hl*t/this.hh;this.hl=i}if(this.zi.fixLeftEdge){var n=this.ss();if(null!==n)if(n.In()<=0){var s=this.hh-t;this.sl-=Math.round(s/this.hl)+1}}this.hh=t,this.Zo=!0,this.Ml(),this.bl()}},t.prototype.At=function(t){if(this.wi()||!x(t))return 0;var i=this.ml()+this.sl-t;return this.hh-(i+.5)*this.hl-1},t.prototype.es=function(t,i){for(var n=this.ml(),s=void 0===i?0:i.from,h=void 0===i?t.length:i.to,r=s;r<h;r++){var e=t[r].rt,u=n+this.sl-e,a=this.hh-(u+.5)*this.hl-1;t[r].tt=a}},t.prototype.gl=function(t){return Math.ceil(this.pl(t))},t.prototype.yn=function(t){this.Zo=!0,this.sl=t,this.bl(),this.gi.yl(),this.gi.Rr()},t.prototype.ws=function(){return this.hl},t.prototype.pn=function(t){this.kl(t),this.bl(),this.gi.yl(),this.gi.Rr()},t.prototype.xl=function(){return this.sl},t.prototype.au=function(){if(this.wi())return null;if(null!==this.il)return this.il;for(var t=this.hl,i=5*(this.gi.R().layout.fontSize+4),n=Math.round(i/t),s=e(this.ss()),h=Math.max(s.In(),s.In()-n),r=Math.max(s.jn(),s.jn()-n),u=this.$o.Ro(t,i),a=this._l()+n,o=this.dl()-n,l=this.Nl(),f=this.zi.fixLeftEdge||l,c=this.zi.fixRightEdge||l,v=0,_=0,d=u;_<d.length;_++){var w=d[_];if(h<=w.vs&&w.vs<=r){var M=void 0;v<this.nl.length?((M=this.nl[v]).su=this.At(w.vs),M.yu=this.Cl(w.rt,w.Po),M.Po=w.Po):(M={Sl:!1,su:this.At(w.vs),yu:this.Cl(w.rt,w.Po),Po:w.Po},this.nl.push(M)),this.hl>i/2&&!l?M.Sl=!1:M.Sl=f&&w.vs<=a||c&&w.vs>=o,v++}}return this.nl.length=v,this.il=this.nl,this.nl},t.prototype.Tl=function(){this.Zo=!0,this.pn(this.zi.barSpacing),this.yn(this.zi.rightOffset)},t.prototype.Dl=function(t){this.Zo=!0,this.Ho=t,this.bl(),this.al()},t.prototype.Al=function(t,i){var n=this.pl(t),s=this.ws(),h=s+i*(s/10);this.pn(h),this.zi.rightBarStaysOnScroll||this.yn(this.xl()+(n-this.pl(t)))},t.prototype.da=function(t){this.zu&&this.ga(),null===this.Ru&&null===this.tl&&(this.wi()||(this.Ru=t,this.Bl()))},t.prototype.wa=function(t){if(null!==this.tl){var i=kt(this.hh-t,0,this.hh),n=kt(this.hh-e(this.Ru),0,this.hh);0!==i&&0!==n&&this.pn(this.tl.ws*i/n)}},t.prototype.Ma=function(){null!==this.Ru&&(this.Ru=null,this.Ll())},t.prototype.ba=function(t){null===this.zu&&null===this.tl&&(this.wi()||(this.zu=t,this.Bl()))},t.prototype.ma=function(t){if(null!==this.zu){var i=(this.zu-t)/this.ws();this.sl=e(this.tl).xl+i,this.Zo=!0,this.bl()}},t.prototype.ga=function(){null!==this.zu&&(this.zu=null,this.Ll())},t.prototype.El=function(){this.Ol(this.zi.rightOffset)},t.prototype.Ol=function(t,i){var n=this;if(void 0===i&&(i=400),!isFinite(t))throw new RangeError("offset is required and must be finite number");if(!isFinite(i)||i<=0)throw new RangeError("animationDuration (optional) must be finite positive number");var s=this.sl,h=performance.now(),r=function(){var e=(performance.now()-h)/i,u=e>=1,a=u?t:s+(t-s)*e;n.yn(a),u||setTimeout(r,20)};r()},t.prototype.vt=function(t,i){this.Zo=!0,this.Yo=t,this.$o.Oo(t,i),this.bl()},t.prototype.Fl=function(){return this.Jo},t.prototype.Vl=function(){return this.Go},t.prototype.Pl=function(){return this.Qo},t.prototype.ml=function(){return this.Ho||0},t.prototype.Rl=function(t){var i=t.Lo();this.kl(this.hh/i),this.sl=t.jn()-this.ml(),this.bl(),this.Zo=!0,this.gi.yl(),this.gi.Rr()},t.prototype.zl=function(){var t=this._l(),i=this.dl();null!==t&&null!==i&&this.Rl(new Ji(t,i+this.zi.rightOffset))},t.prototype.Wl=function(t){var i=new Ji(t.from,t.to);this.Rl(i)},t.prototype.yi=function(t){return void 0!==this.qu.timeFormatter?this.qu.timeFormatter(t.Co||t.So):this.Il.lo(new Date(1e3*t.So))},t.prototype.Nl=function(){var t=this.gi.R(),i=t.handleScroll,n=t.handleScale;return!(i.horzTouchDrag||i.mouseWheel||i.pressedMouseMove||i.vertTouchDrag||n.axisDoubleClickReset||n.axisPressedMouseMove.time||n.mouseWheel||n.pinch)},t.prototype._l=function(){return 0===this.Yo.length?null:0},t.prototype.dl=function(){return 0===this.Yo.length?null:this.Yo.length-1},t.prototype.jl=function(t){return(this.hh-1-t)/this.hl},t.prototype.pl=function(t){var i=this.jl(t),n=this.ml()+this.sl-i;return Math.round(1e6*n)/1e6},t.prototype.kl=function(t){var i=this.hl;this.hl=t,this.Ml(),i!==this.hl&&(this.Zo=!0,this.ql())},t.prototype.ll=function(){if(this.Zo)if(this.Zo=!1,this.wi())this.Ul(nn.Uo());else{var t=this.ml(),i=this.hh/this.hl,n=this.sl+t,s=new Ji(n-i+1,n);this.Ul(new nn(s))}},t.prototype.Ml=function(){var t=this.Hl();if(this.hl<t&&(this.hl=t,this.Zo=!0),0!==this.hh){var i=.5*this.hh;this.hl>i&&(this.hl=i,this.Zo=!0)}},t.prototype.Hl=function(){return this.zi.fixLeftEdge&&this.zi.fixRightEdge&&0!==this.Yo.length?this.hh/this.Yo.length:this.zi.minBarSpacing},t.prototype.bl=function(){var t=this.Yl();this.sl>t&&(this.sl=t,this.Zo=!0);var i=this.$l();null!==i&&this.sl<i&&(this.sl=i,this.Zo=!0)},t.prototype.$l=function(){var t=this._l(),i=this.Ho;return null===t||null===i?null:t-i-1+(this.zi.fixLeftEdge?this.hh/this.hl:Math.min(2,this.Yo.length))},t.prototype.Yl=function(){return this.zi.fixRightEdge?0:this.hh/this.hl-Math.min(2,this.Yo.length)},t.prototype.Bl=function(){this.tl={ws:this.ws(),xl:this.xl()}},t.prototype.Ll=function(){this.tl=null},t.prototype.Cl=function(t,i){var n=this,s=this.Ko.get(i);return void 0===s&&(s=new Zi((function(t){return n.Kl(t,i)})),this.Ko.set(i,s)),s.lo(t)},t.prototype.Kl=function(t,i){var n,s=function(t,i,n){switch(t){case 0:case 10:return i?n?4:3:2;case 20:case 21:case 22:case 30:case 31:case 32:case 33:return i?3:2;case 50:return 2;case 60:return 1;case 70:return 0}}(i,this.zi.timeVisible,this.zi.secondsVisible);return void 0!==this.zi.tickMarkFormatter?this.zi.tickMarkFormatter(null!==(n=t.Co)&&void 0!==n?n:t.So,s,this.qu.locale):function(t,i,n){var s={};switch(i){case 0:s.year="numeric";break;case 1:s.month="short";break;case 2:s.day="numeric";break;case 3:s.hour12=!1,s.hour="2-digit",s.minute="2-digit";break;case 4:s.hour12=!1,s.hour="2-digit",s.minute="2-digit",s.second="2-digit"}var h=void 0===t.Co?new Date(1e3*t.So):new Date(Date.UTC(t.Co.year,t.Co.month-1,t.Co.day));return new Date(h.getUTCFullYear(),h.getUTCMonth(),h.getUTCDate(),h.getUTCHours(),h.getUTCMinutes(),h.getUTCSeconds(),h.getUTCMilliseconds()).toLocaleString(n,s)}(t,s,this.qu.locale)},t.prototype.Ul=function(t){var i=this.Xo;this.Xo=t,Gi(i.jo(),this.Xo.jo())||this.Jo.m(),Gi(i.qo(),this.Xo.qo())||this.Go.m(),this.ql()},t.prototype.ql=function(){this.il=null},t.prototype.ul=function(){this.ql(),this.Ko.clear()},t.prototype.rl=function(){var t=this.qu.dateFormat;this.zi.timeVisible?this.Il=new Xi({co:t,vo:this.zi.secondsVisible?"%h:%m:%s":"%h:%m",_o:"   ",do:this.qu.locale}):this.Il=new Yi(t,this.qu.locale)},t.prototype.al=function(){if(this.zi.fixLeftEdge){var t=this._l();if(null!==t){var i=this.ss();if(null!==i){var n=i.In()-t;if(n<0){var s=this.sl-n-1;this.yn(s)}this.Ml()}}}},t.prototype.ol=function(){this.bl(),this.Ml()},t}();var hn,rn=function(t){function i(i){var n=t.call(this)||this;return n.Xl=new Map,n.Bt=i,n}return b(i,t),i.prototype.Y=function(t){},i.prototype.K=function(t){if(this.Bt.yt){t.save();for(var i=0,n=0,s=this.Bt.Zl;n<s.length;n++){if(0!==(a=s[n]).Gt.length){t.font=a.T;var h=this.Jl(t,a.Gt);h>this.Bt.Ht?a.Al=this.Bt.Ht/h:a.Al=1,i+=a.Gl*a.Al}}var r=0;switch(this.Bt.Ql){case"top":r=0;break;case"center":r=Math.max((this.Bt.Yt-i)/2,0);break;case"bottom":r=Math.max(this.Bt.Yt-i,0)}t.fillStyle=this.Bt.A;for(var e=0,u=this.Bt.Zl;e<u.length;e++){var a=u[e];t.save();var o=0;switch(this.Bt.tf){case"left":t.textAlign="left",o=a.Gl/2;break;case"center":t.textAlign="center",o=this.Bt.Ht/2;break;case"right":t.textAlign="right",o=this.Bt.Ht-1-a.Gl/2}t.translate(o,r),t.textBaseline="top",t.font=a.T,t.scale(a.Al,a.Al),t.fillText(a.Gt,0,a.if),t.restore(),r+=a.Gl*a.Al}t.restore()}},i.prototype.Jl=function(t,i){var n=this.nf(t.font),s=n.get(i);return void 0===s&&(s=t.measureText(i).width,n.set(i,s)),s},i.prototype.nf=function(t){var i=this.Xl.get(t);return void 0===i&&(i=new Map,this.Xl.set(t,i)),i},i}(O),en=function(){function t(t){this.ft=!0,this.Rt={yt:!1,A:"",Yt:0,Ht:0,Zl:[],Ql:"center",tf:"center"},this.zt=new rn(this.Rt),this.Wt=t}return t.prototype.vt=function(){this.ft=!0},t.prototype.dt=function(t,i){return this.ft&&(this.wt(t,i),this.ft=!1),this.zt},t.prototype.wt=function(t,i){var n=this.Wt.R(),s=this.Rt;s.yt=n.visible,s.yt&&(s.A=n.color,s.Ht=i,s.Yt=t,s.tf=n.horzAlign,s.Ql=n.vertAlign,s.Zl=[{Gt:n.text,T:B(n.fontSize,n.fontFamily,n.fontStyle),Gl:1.2*n.fontSize,if:0,Al:0}])},t}(),un=function(t){function i(i,n){var s=t.call(this)||this;return s.zi=n,s.Hi=new en(s),s}return b(i,t),i.prototype.nn=function(){return[]},i.prototype.tn=function(){return[this.Hi]},i.prototype.R=function(){return this.zi},i.prototype.hn=function(){this.Hi.vt()},i}(G);!function(t){t[t.OnTouchEnd=0]="OnTouchEnd",t[t.OnNextTap=1]="OnNextTap"}(hn||(hn={}));var an,on,ln,fn=function(){function t(t,i){this.sf=[],this.hf=[],this.hh=0,this.rf=null,this.ef=null,this.uf=new p,this.af=new p,this.lf=null,this.ff=t,this.zi=i,this.cf=new L(this),this.Da=new sn(this,i.timeScale,this.zi.localization),this.ct=new Q(this,i.crosshair),this.vf=new yi(i.crosshair),this._f=new un(this,i.watermark),this.df(),this.sf[0].za(2e3),this.wf=this.Mf(0),this.bf=this.Mf(1)}return t.prototype.Ce=function(){this.mf(new it(3))},t.prototype.Rr=function(){this.mf(new it(2))},t.prototype.Re=function(){this.mf(new it(1))},t.prototype.Se=function(t){var i=this.gf(t);this.mf(i)},t.prototype.pf=function(){return this.ef},t.prototype.yf=function(t){var i=this.ef;this.ef=t,null!==i&&this.Se(i.kf),null!==t&&this.Se(t.kf)},t.prototype.R=function(){return this.zi},t.prototype.Pr=function(t){y(this.zi,t),this.sf.forEach((function(i){return i.Fa(t)})),void 0!==t.timeScale&&this.Da.Pr(t.timeScale),void 0!==t.localization&&this.Da.el(t.localization),(t.leftPriceScale||t.rightPriceScale)&&this.uf.m(),this.wf=this.Mf(0),this.bf=this.Mf(1),this.Ce()},t.prototype.xf=function(t,i){if("left"!==t)if("right"!==t){var n=this.Nf(t);null!==n&&(n.Ct.Pr(i),this.uf.m())}else this.Pr({rightPriceScale:i});else this.Pr({leftPriceScale:i})},t.prototype.Nf=function(t){for(var i=0,n=this.sf;i<n.length;i++){var s=n[i],h=s.Va(t);if(null!==h)return{It:s,Ct:h}}return null},t.prototype.bt=function(){return this.Da},t.prototype.Cf=function(){return this.sf},t.prototype.Sf=function(){return this._f},t.prototype.Tf=function(){return this.ct},t.prototype.Df=function(){return this.af},t.prototype.Af=function(t,i){t.ia(i),this.yl()},t.prototype.Wa=function(t){this.hh=t,this.Da.Wa(this.hh),this.sf.forEach((function(i){return i.Wa(t)})),this.yl()},t.prototype.df=function(t){var i=new qi(this.Da,this);void 0!==t?this.sf.splice(t,0,i):this.sf.push(i);var n=void 0===t?this.sf.length-1:t,s=new it(3);return s.cn(n,{vn:0,_n:!0}),this.mf(s),i},t.prototype.Ka=function(t,i,n){t.Ka(i,n)},t.prototype.Xa=function(t,i,n){t.Xa(i,n),this.Te(),this.mf(this.Bf(t,2))},t.prototype.Za=function(t,i){t.Za(i),this.mf(this.Bf(t,2))},t.prototype.Ja=function(t,i,n){i.Xu()||t.Ja(i,n)},t.prototype.Ga=function(t,i,n){i.Xu()||(t.Ga(i,n),this.Te(),this.mf(this.Bf(t,2)))},t.prototype.Qa=function(t,i){i.Xu()||(t.Qa(i),this.mf(this.Bf(t,2)))},t.prototype.no=function(t,i){t.no(i),this.mf(this.Bf(t,2))},t.prototype.Lf=function(t){this.Da.da(t)},t.prototype.Ef=function(t,i){var n=this.bt();if(!n.wi()&&0!==i){var s=n.Ht();t=Math.max(1,Math.min(t,s)),n.Al(t,i),this.yl()}},t.prototype.Of=function(t){this.Ff(0),this.Vf(t),this.Pf()},t.prototype.Rf=function(t){this.Da.wa(t),this.yl()},t.prototype.zf=function(){this.Da.Ma(),this.Rr()},t.prototype.Ff=function(t){this.rf=t,this.Da.ba(t)},t.prototype.Vf=function(t){var i=!1;return null!==this.rf&&Math.abs(t-this.rf)>20&&(this.rf=null,i=!0),this.Da.ma(t),this.yl(),i},t.prototype.Pf=function(){this.Da.ga(),this.Rr(),this.rf=null},t.prototype._t=function(){return this.hf},t.prototype.Wf=function(t,i,n){this.ct.Yi(t,i);var s=NaN,h=this.Da.gl(t),r=this.Da.ss();null!==r&&(h=Math.min(Math.max(r.In(),h),r.jn()));var e=n.ji(),u=e.kt();null!==u&&(s=e.qi(i,u)),s=this.vf.Je(s,h,n),this.ct.Zi(h,s,n),this.Re(),this.af.m(this.ct.Mt(),{x:t,y:i})},t.prototype.If=function(){this.Tf().Gi(),this.Re(),this.af.m(null,null)},t.prototype.Te=function(){var t=this.ct.It();if(null!==t){var i=this.ct.Ki(),n=this.ct.Xi();this.Wf(i,n,t)}this.ct.hn()},t.prototype.jf=function(t,i,n){var s=this.Da.pi(0);void 0!==i&&void 0!==n&&this.Da.vt(i,n);var h=this.Da.pi(0),r=this.Da.ml(),e=this.Da.ss();if(null!==e&&null!==s&&null!==h){var u=e.Uh(r),a=s.So>h.So,o=null!==t&&t>r&&!a,l=u&&this.Da.R().shiftVisibleRangeOnNewBar;if(o&&!l){var f=t-r;this.Da.yn(this.Da.xl()-f)}}this.Da.Dl(t)},t.prototype.Be=function(t){null!==t&&t.ho()},t.prototype.oh=function(t){var i=this.sf.find((function(i){return i.oa().includes(t)}));return void 0===i?null:i},t.prototype.yl=function(){this._f.hn(),this.sf.forEach((function(t){return t.ho()})),this.Te()},t.prototype.p=function(){this.sf.forEach((function(t){return t.p()})),this.sf.length=0,this.zi.localization.priceFormatter=void 0,this.zi.localization.timeFormatter=void 0},t.prototype.qf=function(){return this.cf},t.prototype.dh=function(){return this.cf.R()},t.prototype.Pa=function(){return this.uf},t.prototype.Uf=function(t,i){var n=this.sf[0],s=this.Hf(i,t,n);return this.hf.push(s),1===this.hf.length?this.Ce():this.Rr(),s},t.prototype.Yf=function(t){var i=this.oh(t),n=this.hf.indexOf(t);h(-1!==n,"Series not found"),this.hf.splice(n,1),e(i).ca(t),t.p&&t.p()},t.prototype.Ne=function(t,i){var n=e(this.oh(t));n.ca(t);var s=this.Nf(i);if(null===s){var h=t.Ni();n.la(t,i,h)}else{h=s.It===n?t.Ni():void 0;s.It.la(t,i,h)}},t.prototype.zl=function(){var t=new it(2);t.Mn(),this.mf(t)},t.prototype.$f=function(t){var i=new it(2);i.mn(t),this.mf(i)},t.prototype.gn=function(){var t=new it(2);t.gn(),this.mf(t)},t.prototype.pn=function(t){var i=new it(2);i.pn(t),this.mf(i)},t.prototype.yn=function(t){var i=new it(2);i.yn(t),this.mf(i)},t.prototype.Kf=function(){return this.zi.rightPriceScale.visible?"right":"left"},t.prototype.Xf=function(){return this.bf},t.prototype.Zf=function(){return this.wf},t.prototype.Dt=function(t){var i=this.bf,n=this.wf;if(i===n)return i;if(t=Math.max(0,Math.min(100,Math.round(100*t))),null===this.lf||this.lf.Pn!==n||this.lf.Rn!==i)this.lf={Pn:n,Rn:i,Jf:new Map};else{var s=this.lf.Jf.get(t);if(void 0!==s)return s}var h=function(t,i,n){var s=d(t),h=s[0],r=s[1],e=s[2],u=s[3],a=d(i),f=a[0],c=a[1],v=a[2],_=a[3],w=[o(h+n*(f-h)),o(r+n*(c-r)),o(e+n*(v-e)),l(u+n*(_-u))];return"rgba(".concat(w[0],", ").concat(w[1],", ").concat(w[2],", ").concat(w[3],")")}(n,i,t/100);return this.lf.Jf.set(t,h),h},t.prototype.Bf=function(t,i){var n=new it(i);if(null!==t){var s=this.sf.indexOf(t);n.cn(s,{vn:i})}return n},t.prototype.gf=function(t,i){return void 0===i&&(i=2),this.Bf(this.oh(t),i)},t.prototype.mf=function(t){this.ff&&this.ff(t),this.sf.forEach((function(t){return t.eo().ou().vt()}))},t.prototype.Hf=function(t,i,n){var s=new pi(this,t,i),h=void 0!==t.priceScaleId?t.priceScaleId:this.Kf();return n.la(s,h),tt(h)||s.Pr(t),s},t.prototype.Mf=function(t){var i=this.zi.layout;return"gradient"===i.background.type?0===t?i.background.topColor:i.background.bottomColor:i.background.color},t}();function cn(t){void 0!==t.borderColor&&(t.borderUpColor=t.borderColor,t.borderDownColor=t.borderColor),void 0!==t.wickColor&&(t.wickUpColor=t.wickColor,t.wickDownColor=t.wickColor)}function vn(t){return!k(t)&&!N(t)}function _n(t){return k(t)}!function(t){t[t.Disabled=0]="Disabled",t[t.Continuous=1]="Continuous",t[t.OnDataUpdate=2]="OnDataUpdate"}(an||(an={})),function(t){t[t.LastBar=0]="LastBar",t[t.LastVisible=1]="LastVisible"}(on||(on={})),function(t){t.Solid="solid",t.VerticalGradient="gradient"}(ln||(ln={}));var dn={allowDownsampling:!0};var wn=function(){function t(t,i){var n=this;this._resolutionMediaQueryList=null,this._resolutionListener=function(t){return n._onResolutionChanged()},this._canvasConfiguredListeners=[],this.canvas=t,this._canvasSize={width:this.canvas.clientWidth,height:this.canvas.clientHeight},this._options=i,this._configureCanvas(),this._installResolutionListener()}return t.prototype.destroy=function(){this._canvasConfiguredListeners.length=0,this._uninstallResolutionListener(),this.canvas=null},Object.defineProperty(t.prototype,"canvasSize",{get:function(){return{width:this._canvasSize.width,height:this._canvasSize.height}},enumerable:!0,configurable:!0}),t.prototype.resizeCanvas=function(t){this._canvasSize={width:t.width,height:t.height},this._configureCanvas()},Object.defineProperty(t.prototype,"pixelRatio",{get:function(){var t=this.canvas.ownerDocument.defaultView;if(null==t)throw new Error("No window is associated with the canvas");return t.devicePixelRatio>1||this._options.allowDownsampling?t.devicePixelRatio:1},enumerable:!0,configurable:!0}),t.prototype.subscribeCanvasConfigured=function(t){this._canvasConfiguredListeners.push(t)},t.prototype.unsubscribeCanvasConfigured=function(t){this._canvasConfiguredListeners=this._canvasConfiguredListeners.filter((function(i){return i!=t}))},t.prototype._configureCanvas=function(){var t=this.pixelRatio;this.canvas.style.width=this._canvasSize.width+"px",this.canvas.style.height=this._canvasSize.height+"px",this.canvas.width=this._canvasSize.width*t,this.canvas.height=this._canvasSize.height*t,this._emitCanvasConfigured()},t.prototype._emitCanvasConfigured=function(){var t=this;this._canvasConfiguredListeners.forEach((function(i){return i.call(t)}))},t.prototype._installResolutionListener=function(){if(null!==this._resolutionMediaQueryList)throw new Error("Resolution listener is already installed");var t=this.canvas.ownerDocument.defaultView;if(null==t)throw new Error("No window is associated with the canvas");var i=t.devicePixelRatio;this._resolutionMediaQueryList=t.matchMedia("all and (resolution: "+i+"dppx)"),this._resolutionMediaQueryList.addListener(this._resolutionListener)},t.prototype._uninstallResolutionListener=function(){null!==this._resolutionMediaQueryList&&(this._resolutionMediaQueryList.removeListener(this._resolutionListener),this._resolutionMediaQueryList=null)},t.prototype._reinstallResolutionListener=function(){this._uninstallResolutionListener(),this._installResolutionListener()},t.prototype._onResolutionChanged=function(){this._configureCanvas(),this._reinstallResolutionListener()},t}(),Mn=function(){function t(t,i){this.Ot=t,this.Ft=i}return t.prototype.br=function(t){return this.Ot===t.Ot&&this.Ft===t.Ft},t}();function bn(t){return t.ownerDocument&&t.ownerDocument.defaultView&&t.ownerDocument.defaultView.devicePixelRatio||1}function mn(t){var i=e(t.getContext("2d"));return i.setTransform(1,0,0,1,0,0),i}function gn(t,i){var n=t.createElement("canvas"),s=bn(n);return n.style.width="".concat(i.Ot,"px"),n.style.height="".concat(i.Ft,"px"),n.width=i.Ot*s,n.height=i.Ft*s,n}function pn(t,i){var n=e(t.ownerDocument).createElement("canvas");t.appendChild(n);var s=function(t,i){return void 0===i&&(i=dn),new wn(t,i)}(n,{allowDownsampling:!1});return s.resizeCanvas({width:i.Ot,height:i.Ft}),s}function yn(t,i){return t.Gf-i.Gf}function kn(t,i,n){var s=(t.Gf-i.Gf)/(t.rt-i.rt);return Math.sign(s)*Math.min(Math.abs(s),n)}var xn=function(){function t(t,i,n,s){this.Qf=null,this.tc=null,this.ic=null,this.nc=null,this.sc=null,this.hc=0,this.rc=0,this.ec=!1,this.uc=t,this.ac=i,this.oc=n,this.Cn=s}return t.prototype.lc=function(t,i){if(null!==this.Qf){if(this.Qf.rt===i)return void(this.Qf.Gf=t);if(Math.abs(this.Qf.Gf-t)<this.Cn)return}this.nc=this.ic,this.ic=this.tc,this.tc=this.Qf,this.Qf={rt:i,Gf:t}},t.prototype.Nh=function(t,i){if(null!==this.Qf&&null!==this.tc&&!(i-this.Qf.rt>50)){var n=0,s=kn(this.Qf,this.tc,this.ac),h=yn(this.Qf,this.tc),r=[s],e=[h];if(n+=h,null!==this.ic){var u=kn(this.tc,this.ic,this.ac);if(Math.sign(u)===Math.sign(s)){var a=yn(this.tc,this.ic);if(r.push(u),e.push(a),n+=a,null!==this.nc){var o=kn(this.ic,this.nc,this.ac);if(Math.sign(o)===Math.sign(s)){var l=yn(this.ic,this.nc);r.push(o),e.push(l),n+=l}}}}for(var f,c,v,_=0,d=0;d<r.length;++d)_+=e[d]/n*r[d];if(!(Math.abs(_)<this.uc))this.sc={Gf:t,rt:i},this.rc=_,this.hc=(f=Math.abs(_),c=this.oc,v=Math.log(c),Math.log(1*v/-f)/v)}},t.prototype.fc=function(t){var i=e(this.sc),n=t-i.rt;return i.Gf+this.rc*(Math.pow(this.oc,n)-1)/Math.log(this.oc)},t.prototype.cc=function(t){return null===this.sc||this.vc(t)===this.hc},t.prototype._c=function(){return this.ec},t.prototype.dc=function(){this.ec=!0},t.prototype.vc=function(t){var i=t-e(this.sc).rt;return Math.min(i,this.hc)},t}(),Nn="undefined"!=typeof window;function Cn(){return!!Nn&&window.navigator.userAgent.toLowerCase().indexOf("firefox")>-1}function Sn(){return!!Nn&&/iPhone|iPad|iPod/.test(window.navigator.platform)}function Tn(t){Nn&&void 0!==window.chrome&&t.addEventListener("mousedown",(function(t){if(1===t.button)return t.preventDefault(),!1}))}var Dn=function(){function t(t,i,n){var s=this;this.wc=0,this.Mc=null,this.bc={tt:Number.NEGATIVE_INFINITY,it:Number.POSITIVE_INFINITY},this.mc=0,this.gc=null,this.yc={tt:Number.NEGATIVE_INFINITY,it:Number.POSITIVE_INFINITY},this.kc=null,this.xc=!1,this.Nc=null,this.Cc=null,this.Sc=!1,this.Tc=!1,this.Dc=!1,this.Ac=null,this.Bc=null,this.Lc=null,this.Ec=null,this.Oc=null,this.Fc=null,this.Vc=null,this.Pc=0,this.Rc=!1,this.zc=!1,this.Wc=!1,this.Ic=0,this.jc=null,this.qc=!Sn(),this.Uc=function(t){s.Hc(t)},this.Yc=function(t){if(s.$c(t)){var i=s.Kc(t);if(++s.mc,s.gc&&s.mc>1)s.Zc(Ln(t),s.yc).Xc<30&&!s.Dc&&s.Jc(i,s.Qc.Gc),s.tv()}else{i=s.Kc(t);if(++s.wc,s.Mc&&s.wc>1)s.Zc(Ln(t),s.bc).Xc<5&&!s.Tc&&s.iv(i,s.Qc.nv),s.sv()}},this.hv=t,this.Qc=i,this.zi=n,this.rv()}return t.prototype.p=function(){null!==this.Ac&&(this.Ac(),this.Ac=null),null!==this.Bc&&(this.Bc(),this.Bc=null),null!==this.Ec&&(this.Ec(),this.Ec=null),null!==this.Oc&&(this.Oc(),this.Oc=null),null!==this.Fc&&(this.Fc(),this.Fc=null),null!==this.Lc&&(this.Lc(),this.Lc=null),this.ev(),this.sv()},t.prototype.uv=function(t){var i=this;this.Ec&&this.Ec();var n=this.av.bind(this);if(this.Ec=function(){i.hv.removeEventListener("mousemove",n)},this.hv.addEventListener("mousemove",n),!this.$c(t)){var s=this.Kc(t);this.iv(s,this.Qc.ov),this.qc=!0}},t.prototype.sv=function(){null!==this.Mc&&clearTimeout(this.Mc),this.wc=0,this.Mc=null,this.bc={tt:Number.NEGATIVE_INFINITY,it:Number.POSITIVE_INFINITY}},t.prototype.tv=function(){null!==this.gc&&clearTimeout(this.gc),this.mc=0,this.gc=null,this.yc={tt:Number.NEGATIVE_INFINITY,it:Number.POSITIVE_INFINITY}},t.prototype.av=function(t){if(!this.Wc&&null===this.Cc&&!this.$c(t)){var i=this.Kc(t);this.iv(i,this.Qc.lv),this.qc=!0}},t.prototype.fv=function(t){var i=On(t.changedTouches,e(this.jc));if(null!==i&&(this.Ic=En(t),null===this.Vc&&!this.zc)){this.Rc=!0;var n=this.Zc(Ln(i),e(this.Cc)),s=n.cv,h=n.vv,r=n.Xc;if(this.Sc||!(r<5)){if(!this.Sc){var u=.5*s,a=h>=u&&!this.zi._v(),o=u>h&&!this.zi.dv();a||o||(this.zc=!0),this.Sc=!0,this.Dc=!0,this.ev(),this.tv()}if(!this.zc){var l=this.Kc(t,i);this.Jc(l,this.Qc.wv),Bn(t)}}}},t.prototype.Mv=function(t){if(0===t.button&&(this.Zc(Ln(t),e(this.Nc)).Xc>=5&&(this.Tc=!0,this.sv()),this.Tc)){var i=this.Kc(t);this.iv(i,this.Qc.bv)}},t.prototype.Zc=function(t,i){var n=Math.abs(i.tt-t.tt),s=Math.abs(i.it-t.it);return{cv:n,vv:s,Xc:n+s}},t.prototype.mv=function(t){var i=On(t.changedTouches,e(this.jc));if(null===i&&0===t.touches.length&&(i=t.changedTouches[0]),null!==i){this.jc=null,this.Ic=En(t),this.ev(),this.Cc=null,this.Fc&&(this.Fc(),this.Fc=null);var n=this.Kc(t,i);if(this.Jc(n,this.Qc.gv),++this.mc,this.gc&&this.mc>1)this.Zc(Ln(i),this.yc).Xc<30&&!this.Dc&&this.Jc(n,this.Qc.Gc),this.tv();else this.Dc||(this.Jc(n,this.Qc.pv),this.Qc.pv&&Bn(t));0===this.mc&&Bn(t),0===t.touches.length&&this.xc&&(this.xc=!1,Bn(t))}},t.prototype.Hc=function(t){if(0===t.button){var i=this.Kc(t);if(this.Nc=null,this.Wc=!1,this.Oc&&(this.Oc(),this.Oc=null),Cn())this.hv.ownerDocument.documentElement.removeEventListener("mouseleave",this.Uc);if(!this.$c(t))if(this.iv(i,this.Qc.yv),++this.wc,this.Mc&&this.wc>1)this.Zc(Ln(t),this.bc).Xc<5&&!this.Tc&&this.iv(i,this.Qc.nv),this.sv();else this.Tc||this.iv(i,this.Qc.kv)}},t.prototype.ev=function(){null!==this.kc&&(clearTimeout(this.kc),this.kc=null)},t.prototype.xv=function(t){if(null===this.jc){var i=t.changedTouches[0];this.jc=i.identifier,this.Ic=En(t);var n=this.hv.ownerDocument.documentElement;this.Dc=!1,this.Sc=!1,this.zc=!1,this.Cc=Ln(i),this.Fc&&(this.Fc(),this.Fc=null);var s=this.fv.bind(this),h=this.mv.bind(this);this.Fc=function(){n.removeEventListener("touchmove",s),n.removeEventListener("touchend",h)},n.addEventListener("touchmove",s,{passive:!1}),n.addEventListener("touchend",h,{passive:!1}),this.ev(),this.kc=setTimeout(this.Nv.bind(this,t),240);var r=this.Kc(t,i);this.Jc(r,this.Qc.Cv),this.gc||(this.mc=0,this.gc=setTimeout(this.tv.bind(this),500),this.yc=Ln(i))}},t.prototype.Sv=function(t){if(0===t.button){var i=this.hv.ownerDocument.documentElement;Cn()&&i.addEventListener("mouseleave",this.Uc),this.Tc=!1,this.Nc=Ln(t),this.Oc&&(this.Oc(),this.Oc=null);var n=this.Mv.bind(this),s=this.Hc.bind(this);if(this.Oc=function(){i.removeEventListener("mousemove",n),i.removeEventListener("mouseup",s)},i.addEventListener("mousemove",n),i.addEventListener("mouseup",s),this.Wc=!0,!this.$c(t)){var h=this.Kc(t);this.iv(h,this.Qc.Tv),this.Mc||(this.wc=0,this.Mc=setTimeout(this.sv.bind(this),500),this.bc=Ln(t))}}},t.prototype.rv=function(){var t=this;this.hv.addEventListener("mouseenter",this.uv.bind(this)),this.hv.addEventListener("touchcancel",this.ev.bind(this));var i=this.hv.ownerDocument,n=function(i){t.Qc.Dv&&(i.target&&t.hv.contains(i.target)||t.Qc.Dv())};this.Bc=function(){i.removeEventListener("touchstart",n)},this.Ac=function(){i.removeEventListener("mousedown",n)},i.addEventListener("mousedown",n),i.addEventListener("touchstart",n,{passive:!0}),Sn()&&(this.Lc=function(){t.hv.removeEventListener("dblclick",t.Yc)},this.hv.addEventListener("dblclick",this.Yc)),this.hv.addEventListener("mouseleave",this.Av.bind(this)),this.hv.addEventListener("touchstart",this.xv.bind(this),{passive:!0}),Tn(this.hv),this.hv.addEventListener("mousedown",this.Sv.bind(this)),this.Bv(),this.hv.addEventListener("touchmove",(function(){}),{passive:!1})},t.prototype.Bv=function(){var t=this;void 0===this.Qc.Lv&&void 0===this.Qc.Ev&&void 0===this.Qc.Ov||(this.hv.addEventListener("touchstart",(function(i){return t.Fv(i.touches)}),{passive:!0}),this.hv.addEventListener("touchmove",(function(i){if(2===i.touches.length&&null!==t.Vc&&void 0!==t.Qc.Ev){var n=An(i.touches[0],i.touches[1])/t.Pc;t.Qc.Ev(t.Vc,n),Bn(i)}}),{passive:!1}),this.hv.addEventListener("touchend",(function(i){t.Fv(i.touches)})))},t.prototype.Fv=function(t){1===t.length&&(this.Rc=!1),2!==t.length||this.Rc||this.xc?this.Vv():this.Pv(t)},t.prototype.Pv=function(t){var i=this.hv.getBoundingClientRect()||{left:0,top:0};this.Vc={tt:(t[0].clientX-i.left+(t[1].clientX-i.left))/2,it:(t[0].clientY-i.top+(t[1].clientY-i.top))/2},this.Pc=An(t[0],t[1]),void 0!==this.Qc.Lv&&this.Qc.Lv(),this.ev()},t.prototype.Vv=function(){null!==this.Vc&&(this.Vc=null,void 0!==this.Qc.Ov&&this.Qc.Ov())},t.prototype.Av=function(t){if(this.Ec&&this.Ec(),!this.$c(t)&&this.qc){var i=this.Kc(t);this.iv(i,this.Qc.Rv),this.qc=!Sn()}},t.prototype.Nv=function(t){var i=On(t.touches,e(this.jc));if(null!==i){var n=this.Kc(t,i);this.Jc(n,this.Qc.zv),this.Dc=!0,this.xc=!0}},t.prototype.$c=function(t){return t.sourceCapabilities&&void 0!==t.sourceCapabilities.firesTouchEvents?t.sourceCapabilities.firesTouchEvents:En(t)<this.Ic+500},t.prototype.Jc=function(t,i){i&&i.call(this.Qc,t)},t.prototype.iv=function(t,i){i&&i.call(this.Qc,t)},t.prototype.Kc=function(t,i){var n=i||t,s=this.hv.getBoundingClientRect()||{left:0,top:0};return{Wv:n.clientX,Iv:n.clientY,jv:n.pageX,qv:n.pageY,Uv:n.screenX,Hv:n.screenY,Yv:n.clientX-s.left,$v:n.clientY-s.top,Kv:t.ctrlKey,Xv:t.altKey,Zv:t.shiftKey,Jv:t.metaKey,Gv:!t.type.startsWith("mouse")&&"contextmenu"!==t.type&&"click"!==t.type,Qv:t.type,t_:n.target,i_:t.view,n_:function(){"touchstart"!==t.type&&Bn(t)}}},t}();function An(t,i){var n=t.clientX-i.clientX,s=t.clientY-i.clientY;return Math.sqrt(n*n+s*s)}function Bn(t){t.cancelable&&t.preventDefault()}function Ln(t){return{tt:t.pageX,it:t.pageY}}function En(t){return t.timeStamp||performance.now()}function On(t,i){for(var n=0;n<t.length;++n)if(t[n].identifier===i)return t[n];return null}var Fn=function(){function t(t,i,n,s){this.rh=new zt(200),this.W=0,this.s_="",this.Yh="",this.th=[],this.h_=new Map,this.W=t,this.s_=i,this.Yh=B(t,n,s)}return t.prototype.p=function(){this.rh.ih(),this.th=[],this.h_.clear()},t.prototype.r_=function(t,i,n,s,h){var r=this.e_(t,i);if("left"!==h){var e=bn(t.canvas);n-=Math.floor(r.u_*e)}s-=Math.floor(r.Yt/2),t.drawImage(r.a_,n,s,r.Ht,r.Yt)},t.prototype.e_=function(t,i){var n,s=this;if(this.h_.has(i))n=r(this.h_.get(i));else{if(this.th.length>=200){var h=r(this.th.shift());this.h_.delete(h)}var e=bn(t.canvas),u=Math.ceil(this.W/4.5),a=Math.round(this.W/10),o=Math.ceil(this.rh.Qt(t,i)),l=Ct(Math.round(o+2*u)),f=Ct(this.W+2*u),c=gn(document,new Mn(l,f));n={Gt:i,u_:Math.round(Math.max(1,o)),Ht:Math.ceil(l*e),Yt:Math.ceil(f*e),a_:c},0!==o&&(this.th.push(n.Gt),this.h_.set(n.Gt,n)),j(t=mn(n.a_),e,(function(){t.font=s.Yh,t.fillStyle=s.s_,t.fillText(i,0,f-u-a)}))}return n},t}(),Vn=function(){function t(t,i,n,s){var h=this;this._i=null,this.o_=null,this.l_=!1,this.f_=new zt(50),this.c_=new Fn(11,"#000"),this.s_=null,this.Yh=null,this.v_=0,this.__=!1,this.d_=function(){h.w_(h.cf.R()),h.__||h.Di.M_().jt().Rr()},this.b_=function(){h.__||h.Di.M_().jt().Rr()},this.Di=t,this.zi=i,this.cf=n,this.m_="left"===s,this.g_=document.createElement("div"),this.g_.style.height="100%",this.g_.style.overflow="hidden",this.g_.style.width="25px",this.g_.style.left="0",this.g_.style.position="relative",this.p_=pn(this.g_,new Mn(16,16)),this.p_.subscribeCanvasConfigured(this.d_);var r=this.p_.canvas;r.style.position="absolute",r.style.zIndex="1",r.style.left="0",r.style.top="0",this.y_=pn(this.g_,new Mn(16,16)),this.y_.subscribeCanvasConfigured(this.b_);var e=this.y_.canvas;e.style.position="absolute",e.style.zIndex="2",e.style.left="0",e.style.top="0";var u={Tv:this.k_.bind(this),Cv:this.k_.bind(this),bv:this.x_.bind(this),wv:this.x_.bind(this),Dv:this.N_.bind(this),yv:this.C_.bind(this),gv:this.C_.bind(this),nv:this.S_.bind(this),Gc:this.S_.bind(this),ov:this.T_.bind(this),Rv:this.D_.bind(this)};this.A_=new Dn(this.y_.canvas,u,{_v:function(){return!1},dv:function(){return!0}})}return t.prototype.p=function(){this.A_.p(),this.y_.unsubscribeCanvasConfigured(this.b_),this.y_.destroy(),this.p_.unsubscribeCanvasConfigured(this.d_),this.p_.destroy(),null!==this._i&&this._i._a().M(this),this._i=null,this.c_.p()},t.prototype.B_=function(){return this.g_},t.prototype.ht=function(){return e(this._i).R().borderColor},t.prototype.L_=function(){return this.zi.textColor},t.prototype.S=function(){return this.zi.fontSize},t.prototype.E_=function(){return B(this.S(),this.zi.fontFamily)},t.prototype.O_=function(){var t=this.cf.R(),i=this.s_!==t.A,n=this.Yh!==t.T;return(i||n)&&(this.w_(t),this.s_=t.A),n&&(this.f_.ih(),this.Yh=t.T),t},t.prototype.F_=function(){if(null===this._i)return 0;var t=0,i=this.O_(),n=mn(this.p_.canvas),s=this._i.au();n.font=this.E_(),s.length>0&&(t=Math.max(this.f_.Qt(n,s[0].yu),this.f_.Qt(n,s[s.length-1].yu)));for(var h=this.V_(),r=h.length;r--;){var e=this.f_.Qt(n,h[r].Gt());e>t&&(t=e)}var u=this._i.kt();if(null!==u&&null!==this.o_){var a=this._i.qi(1,u),o=this._i.qi(this.o_.Ft-2,u);t=Math.max(t,this.f_.Qt(n,this._i.Mi(Math.floor(Math.min(a,o))+.11111111111111,u)),this.f_.Qt(n,this._i.Mi(Math.ceil(Math.max(a,o))-.11111111111111,u)))}var l=t||34,f=Math.ceil(i.N+i.C+i.L+i.O+l);return f+=f%2},t.prototype.P_=function(t){if(t.Ot<0||t.Ft<0)throw new Error("Try to set invalid size to PriceAxisWidget "+JSON.stringify(t));null!==this.o_&&this.o_.br(t)||(this.o_=t,this.__=!0,this.p_.resizeCanvas({width:t.Ot,height:t.Ft}),this.y_.resizeCanvas({width:t.Ot,height:t.Ft}),this.__=!1,this.g_.style.width=t.Ot+"px",this.g_.style.height=t.Ft+"px",this.g_.style.minWidth=t.Ot+"px")},t.prototype.R_=function(){return e(this.o_).Ot},t.prototype.Si=function(t){this._i!==t&&(null!==this._i&&this._i._a().M(this),this._i=t,t._a().u(this.Eu.bind(this),this))},t.prototype.Ct=function(){return this._i},t.prototype.ih=function(){var t=this.Di.z_();this.Di.M_().jt().no(t,e(this.Ct()))},t.prototype.W_=function(t){if(null!==this.o_){if(1!==t){var i=mn(this.p_.canvas);this.I_(),this.j_(i,this.p_.pixelRatio),this.Ws(i,this.p_.pixelRatio),this.q_(i,this.p_.pixelRatio),this.U_(i,this.p_.pixelRatio)}var n=mn(this.y_.canvas),s=this.o_.Ot,h=this.o_.Ft;j(n,this.y_.pixelRatio,(function(){n.clearRect(0,0,s,h)})),this.H_(n,this.y_.pixelRatio)}},t.prototype.Y_=function(){return this.p_.canvas},t.prototype.vt=function(){var t;null===(t=this._i)||void 0===t||t.au()},t.prototype.k_=function(t){if(null!==this._i&&!this._i.wi()&&this.Di.M_().R().handleScale.axisPressedMouseMove.price){var i=this.Di.M_().jt(),n=this.Di.z_();this.l_=!0,i.Ka(n,this._i,t.$v)}},t.prototype.x_=function(t){if(null!==this._i&&this.Di.M_().R().handleScale.axisPressedMouseMove.price){var i=this.Di.M_().jt(),n=this.Di.z_(),s=this._i;i.Xa(n,s,t.$v)}},t.prototype.N_=function(){if(null!==this._i&&this.Di.M_().R().handleScale.axisPressedMouseMove.price){var t=this.Di.M_().jt(),i=this.Di.z_(),n=this._i;this.l_&&(this.l_=!1,t.Za(i,n))}},t.prototype.C_=function(t){if(null!==this._i&&this.Di.M_().R().handleScale.axisPressedMouseMove.price){var i=this.Di.M_().jt(),n=this.Di.z_();this.l_=!1,i.Za(n,this._i)}},t.prototype.S_=function(t){this.Di.M_().R().handleScale.axisDoubleClickReset&&this.ih()},t.prototype.T_=function(t){null!==this._i&&(!this.Di.M_().jt().R().handleScale.axisPressedMouseMove.price||this._i.vr()||this._i.Zu()||this.K_(1))},t.prototype.D_=function(t){this.K_(0)},t.prototype.V_=function(){var t=this,i=[],n=null===this._i?void 0:this._i;return function(s){for(var h=0;h<s.length;++h)for(var r=s[h].nn(t.Di.z_(),n),e=0;e<r.length;e++)i.push(r[e])}(this.Di.z_().oa()),i},t.prototype.j_=function(t,i){var n=this;if(null!==this.o_){var s=this.o_.Ot,h=this.o_.Ft;j(t,i,(function(){var i=n.Di.z_().jt(),r=i.Zf(),e=i.Xf();r===e?q(t,0,0,s,h,r):U(t,0,0,s,h,r,e)}))}},t.prototype.Ws=function(t,i){if(null!==this.o_&&null!==this._i&&this._i.R().borderVisible){t.save(),t.fillStyle=this.ht();var n,s=Math.max(1,Math.floor(this.O_().N*i));n=this.m_?Math.floor(this.o_.Ot*i)-s:0,t.fillRect(n,0,s,Math.ceil(this.o_.Ft*i)),t.restore()}},t.prototype.q_=function(t,i){if(null!==this.o_&&null!==this._i){var n=this._i.au();t.save(),t.strokeStyle=this.ht(),t.font=this.E_(),t.fillStyle=this.ht();var s=this.O_(),h=this._i.R().borderVisible&&this._i.R().drawTicks,r=this.m_?Math.floor((this.o_.Ot-s.C)*i-s.N*i):Math.floor(s.N*i),e=this.m_?Math.round(r-s.L*i):Math.round(r+s.C*i+s.L*i),u=this.m_?"right":"left",a=Math.max(1,Math.floor(i)),o=Math.floor(.5*i);if(h){var l=Math.round(s.C*i);t.beginPath();for(var f=0,c=n;f<c.length;f++){var v=c[f];t.rect(r,Math.round(v.su*i)-o,l,a)}t.fill()}t.fillStyle=this.L_();for(var _=0,d=n;_<d.length;_++){v=d[_];this.c_.r_(t,v.yu,e,Math.round(v.su*i),u)}t.restore()}},t.prototype.I_=function(){if(null!==this.o_&&null!==this._i){var t=this.o_.Ft/2,i=[],n=this._i.oa().slice(),s=this.Di.z_(),h=this.O_();this._i===s.fh()&&this.Di.z_().oa().forEach((function(t){s.lh(t)&&n.push(t)}));var r=this._i.Ge()[0],e=this._i;n.forEach((function(n){var h=n.nn(s,e);h.forEach((function(t){t.oi(null),t.li()&&i.push(t)})),r===n&&h.length>0&&(t=h[0].ti())}));var u=i.filter((function(i){return i.ti()<=t})),a=i.filter((function(i){return i.ti()>t}));if(u.sort((function(t,i){return i.ti()-t.ti()})),u.length&&a.length&&a.push(u[0]),a.sort((function(t,i){return t.ti()-i.ti()})),i.forEach((function(t){return t.oi(t.ti())})),this._i.R().alignLabels){for(var o=1;o<u.length;o++){var l=u[o],f=(v=u[o-1]).Yt(h,!1);l.ti()>(_=v.ai())-f&&l.oi(_-f)}for(var c=1;c<a.length;c++){var v,_;l=a[c],f=(v=a[c-1]).Yt(h,!0);l.ti()<(_=v.ai())+f&&l.oi(_+f)}}}},t.prototype.U_=function(t,i){var n=this;if(null!==this.o_){t.save();var s=this.o_,h=this.V_(),r=this.O_(),u=this.m_?"right":"left";h.forEach((function(h){if(h.fi()){var a=h.dt(e(n._i));t.save(),a.H(t,r,n.f_,s.Ot,u,i),t.restore()}})),t.restore()}},t.prototype.H_=function(t,i){var n=this;if(null!==this.o_&&null!==this._i){t.save();var s=this.o_,h=this.Di.M_().jt(),r=[],u=this.Di.z_(),a=h.Tf().nn(u,this._i);a.length&&r.push(a);var o=this.O_(),l=this.m_?"right":"left";r.forEach((function(h){h.forEach((function(h){t.save(),h.dt(e(n._i)).H(t,o,n.f_,s.Ot,l,i),t.restore()}))})),t.restore()}},t.prototype.K_=function(t){this.g_.style.cursor=1===t?"ns-resize":"default"},t.prototype.Eu=function(){var t=this.F_();this.v_<t&&this.Di.M_().jt().Ce(),this.v_=t},t.prototype.w_=function(t){this.c_.p(),this.c_=new Fn(t.S,t.A,t.D)},t}();function Pn(t,i,n,s,h){t.$&&t.$(i,n,s,h)}function Rn(t,i,n,s,h){t.H(i,n,s,h)}function zn(t,i){return t.tn(i)}function Wn(t,i){return void 0!==t.Pe?t.Pe(i):[]}var In=function(){function t(t,i){var n=this;this.o_=new Mn(0,0),this.X_=null,this.Z_=null,this.J_=null,this.G_=!1,this.Q_=new p,this.td=0,this.nd=!1,this.sd=null,this.hd=!1,this.rd=null,this.ed=null,this.__=!1,this.d_=function(){n.__||null===n.ud||n.gi().Rr()},this.b_=function(){n.__||null===n.ud||n.gi().Rr()},this.ad=t,this.ud=i,this.ud.ro().u(this.od.bind(this),this,!0),this.ld=document.createElement("td"),this.ld.style.padding="0",this.ld.style.position="relative";var s=document.createElement("div");s.style.width="100%",s.style.height="100%",s.style.position="relative",s.style.overflow="hidden",this.fd=document.createElement("td"),this.fd.style.padding="0",this.vd=document.createElement("td"),this.vd.style.padding="0",this.ld.appendChild(s),this.p_=pn(s,new Mn(16,16)),this.p_.subscribeCanvasConfigured(this.d_);var h=this.p_.canvas;h.style.position="absolute",h.style.zIndex="1",h.style.left="0",h.style.top="0",this.y_=pn(s,new Mn(16,16)),this.y_.subscribeCanvasConfigured(this.b_);var r=this.y_.canvas;r.style.position="absolute",r.style.zIndex="2",r.style.left="0",r.style.top="0",this._d=document.createElement("tr"),this._d.appendChild(this.fd),this._d.appendChild(this.ld),this._d.appendChild(this.vd),this.dd(),this.A_=new Dn(this.y_.canvas,this,{_v:function(){return null===n.sd&&!n.ad.R().handleScroll.vertTouchDrag},dv:function(){return null===n.sd&&!n.ad.R().handleScroll.horzTouchDrag}})}return t.prototype.p=function(){null!==this.X_&&this.X_.p(),null!==this.Z_&&this.Z_.p(),this.y_.unsubscribeCanvasConfigured(this.b_),this.y_.destroy(),this.p_.unsubscribeCanvasConfigured(this.d_),this.p_.destroy(),null!==this.ud&&this.ud.ro().M(this),this.A_.p()},t.prototype.z_=function(){return e(this.ud)},t.prototype.wd=function(i){null!==this.ud&&this.ud.ro().M(this),this.ud=i,null!==this.ud&&this.ud.ro().u(t.prototype.od.bind(this),this,!0),this.dd()},t.prototype.M_=function(){return this.ad},t.prototype.B_=function(){return this._d},t.prototype.dd=function(){if(null!==this.ud&&(this.Md(),0!==this.gi()._t().length)){if(null!==this.X_){var t=this.ud.Ya();this.X_.Si(e(t))}if(null!==this.Z_){var i=this.ud.$a();this.Z_.Si(e(i))}}},t.prototype.bd=function(){null!==this.X_&&this.X_.vt(),null!==this.Z_&&this.Z_.vt()},t.prototype.Ra=function(){return null!==this.ud?this.ud.Ra():0},t.prototype.za=function(t){this.ud&&this.ud.za(t)},t.prototype.ov=function(t){if(this.ud){this.md();var i=t.Yv,n=t.$v;this.gd(i,n)}},t.prototype.Tv=function(t){this.md(),this.pd(),this.gd(t.Yv,t.$v)},t.prototype.lv=function(t){if(this.ud){this.md();var i=t.Yv,n=t.$v;this.gd(i,n);var s=this.$h(i,n);this.gi().yf(s&&{kf:s.kf,yd:s.yd})}},t.prototype.kv=function(t){if(null!==this.ud){this.md();var i=t.Yv,n=t.$v;if(this.Q_.g()){var s=this.gi().Tf().Mt();this.Q_.m(s,{x:i,y:n})}}},t.prototype.bv=function(t){this.md(),this.kd(t),this.gd(t.Yv,t.$v)},t.prototype.yv=function(t){null!==this.ud&&(this.md(),this.nd=!1,this.xd(t))},t.prototype.zv=function(t){if(this.nd=!0,null===this.sd){var i={x:t.Yv,y:t.$v};this.Nd(i,i)}},t.prototype.Rv=function(t){null!==this.ud&&(this.md(),this.ud.jt().yf(null),this.Cd())},t.prototype.Sd=function(){return this.Q_},t.prototype.Lv=function(){this.td=1,this.Td()},t.prototype.Ev=function(t,i){if(this.ad.R().handleScale.pinch){var n=5*(i-this.td);this.td=i,this.gi().Ef(t.tt,n)}},t.prototype.Cv=function(t){if(this.nd=!1,this.hd=null!==this.sd,this.pd(),null!==this.sd){var i=this.gi().Tf();this.rd={x:i.$t(),y:i.Kt()},this.sd={x:t.Yv,y:t.$v}}},t.prototype.wv=function(t){if(null!==this.ud){var i=t.Yv,n=t.$v;if(null===this.sd)this.kd(t);else{this.hd=!1;var s=e(this.rd),h=s.x+(i-this.sd.x),r=s.y+(n-this.sd.y);this.gd(h,r)}}},t.prototype.gv=function(t){0===this.M_().R().trackingMode.exitMode&&(this.hd=!0),this.Dd(),this.xd(t)},t.prototype.$h=function(t,i){var n=this.ud;if(null===n)return null;for(var s=0,h=n.oa();s<h.length;s++){var r=h[s],e=this.Ad(r.tn(n),t,i);if(null!==e)return{kf:r,i_:e.i_,yd:e.yd}}return null},t.prototype.Bd=function(t,i){e("left"===i?this.X_:this.Z_).P_(new Mn(t,this.o_.Ft))},t.prototype.Ld=function(){return this.o_},t.prototype.P_=function(t){if(t.Ot<0||t.Ft<0)throw new Error("Try to set invalid size to PaneWidget "+JSON.stringify(t));this.o_.br(t)||(this.o_=t,this.__=!0,this.p_.resizeCanvas({width:t.Ot,height:t.Ft}),this.y_.resizeCanvas({width:t.Ot,height:t.Ft}),this.__=!1,this.ld.style.width=t.Ot+"px",this.ld.style.height=t.Ft+"px")},t.prototype.Ed=function(){var t=e(this.ud);t.Ha(t.Ya()),t.Ha(t.$a());for(var i=0,n=t.Ge();i<n.length;i++){var s=n[i];if(t.lh(s)){var h=s.Ct();null!==h&&t.Ha(h),s.hn()}}},t.prototype.Y_=function(){return this.p_.canvas},t.prototype.W_=function(t){if(0!==t&&null!==this.ud){if(t>1&&this.Ed(),null!==this.X_&&this.X_.W_(t),null!==this.Z_&&this.Z_.W_(t),1!==t){var i=mn(this.p_.canvas);i.save(),this.j_(i,this.p_.pixelRatio),this.ud&&(this.Od(i,this.p_.pixelRatio),this.Fd(i,this.p_.pixelRatio),this.Vd(i,this.p_.pixelRatio,zn)),i.restore()}var n=mn(this.y_.canvas);n.clearRect(0,0,Math.ceil(this.o_.Ot*this.y_.pixelRatio),Math.ceil(this.o_.Ft*this.y_.pixelRatio)),this.Vd(n,this.p_.pixelRatio,Wn),this.Pd(n,this.y_.pixelRatio)}},t.prototype.Rd=function(){return this.X_},t.prototype.zd=function(){return this.Z_},t.prototype.od=function(){null!==this.ud&&this.ud.ro().M(this),this.ud=null},t.prototype.j_=function(t,i){var n=this;j(t,i,(function(){var i=n.gi(),s=i.Zf(),h=i.Xf();s===h?q(t,0,0,n.o_.Ot,n.o_.Ft,h):U(t,0,0,n.o_.Ot,n.o_.Ft,s,h)}))},t.prototype.Od=function(t,i){var n=e(this.ud),s=n.eo().ou().dt(n.Yt(),n.Ht());null!==s&&(t.save(),s.H(t,i,!1),t.restore())},t.prototype.Fd=function(t,i){var n=this.gi().Sf();this.Wd(t,i,zn,Pn,n),this.Wd(t,i,zn,Rn,n)},t.prototype.Pd=function(t,i){this.Wd(t,i,zn,Rn,this.gi().Tf())},t.prototype.Vd=function(t,i,n){for(var s=e(this.ud).oa(),h=0,r=s;h<r.length;h++){var u=r[h];this.Wd(t,i,n,Pn,u)}for(var a=0,o=s;a<o.length;a++){u=o[a];this.Wd(t,i,n,Rn,u)}},t.prototype.Wd=function(t,i,n,s,h){for(var r=e(this.ud),u=n(h,r),a=r.Yt(),o=r.Ht(),l=r.jt().pf(),f=null!==l&&l.kf===h,c=null!==l&&f&&void 0!==l.yd?l.yd.Kh:void 0,v=0,_=u;v<_.length;v++){var d=_[v].dt(a,o);null!==d&&(t.save(),s(d,t,i,f,c),t.restore())}},t.prototype.Ad=function(t,i,n){for(var s=0,h=t;s<h.length;s++){var r=h[s],e=r.dt(this.o_.Ft,this.o_.Ot);if(null!==e&&e.$h){var u=e.$h(i,n);if(null!==u)return{i_:r,yd:u}}}return null},t.prototype.Md=function(){if(null!==this.ud){var t=this.ad,i=this.ud.Ya().R().visible,n=this.ud.$a().R().visible;i||null===this.X_||(this.fd.removeChild(this.X_.B_()),this.X_.p(),this.X_=null),n||null===this.Z_||(this.vd.removeChild(this.Z_.B_()),this.Z_.p(),this.Z_=null);var s=t.jt().qf();i&&null===this.X_&&(this.X_=new Vn(this,t.R().layout,s,"left"),this.fd.appendChild(this.X_.B_())),n&&null===this.Z_&&(this.Z_=new Vn(this,t.R().layout,s,"right"),this.vd.appendChild(this.Z_.B_()))}},t.prototype.Id=function(t){return t.Gv&&this.nd||null!==this.sd},t.prototype.jd=function(t){return Math.max(0,Math.min(t,this.o_.Ot-1))},t.prototype.qd=function(t){return Math.max(0,Math.min(t,this.o_.Ft-1))},t.prototype.gd=function(t,i){this.gi().Wf(this.jd(t),this.qd(i),e(this.ud))},t.prototype.Cd=function(){this.gi().If()},t.prototype.Dd=function(){this.hd&&(this.sd=null,this.Cd())},t.prototype.Nd=function(t,i){this.sd=t,this.hd=!1,this.gd(i.x,i.y);var n=this.gi().Tf();this.rd={x:n.$t(),y:n.Kt()}},t.prototype.gi=function(){return this.ad.jt()},t.prototype.Ud=function(){var t=this.gi(),i=this.z_(),n=i.ji();t.Qa(i,n),t.Pf(),this.J_=null,this.G_=!1},t.prototype.xd=function(t){var i=this;if(this.G_){var n=performance.now();if(null!==this.ed&&this.ed.Nh(t.Yv,n),null===this.ed||this.ed.cc(n))this.Ud();else{var s=this.gi(),h=s.bt(),r=this.ed,e=function(){if(!r._c()){var t=performance.now(),n=r.cc(t);if(!r._c()){var u=h.xl();s.Vf(r.fc(t)),u===h.xl()&&(n=!0,i.ed=null)}n?i.Ud():requestAnimationFrame(e)}};requestAnimationFrame(e)}}},t.prototype.md=function(){this.sd=null},t.prototype.pd=function(){if(this.ud){if(this.Td(),document.activeElement!==document.body&&document.activeElement!==document.documentElement)e(document.activeElement).blur();else{var t=document.getSelection();null!==t&&t.removeAllRanges()}!this.ud.ji().wi()&&this.gi().bt().wi()}},t.prototype.kd=function(t){if(null!==this.ud){var i=this.gi();if(!i.bt().wi()){var n=this.ad.R(),s=n.handleScroll,h=n.kineticScroll;if(s.pressedMouseMove&&!t.Gv||(s.horzTouchDrag||s.vertTouchDrag)&&t.Gv){var r=this.ud.ji(),e=performance.now();null!==this.J_||this.Id(t)||(this.J_={x:t.Wv,y:t.Iv,So:e,Yv:t.Yv,$v:t.$v}),null!==this.ed&&this.ed.lc(t.Yv,e),null===this.J_||this.G_||this.J_.x===t.Wv&&this.J_.y===t.Iv||(null===this.ed&&(t.Gv&&h.touch||!t.Gv&&h.mouse)&&(this.ed=new xn(.2,7,.997,15),this.ed.lc(this.J_.Yv,this.J_.So),this.ed.lc(t.Yv,e)),r.wi()||i.Ja(this.ud,r,t.$v),i.Ff(t.Yv),this.G_=!0),this.G_&&(r.wi()||i.Ga(this.ud,r,t.$v),i.Vf(t.Yv))}}}},t.prototype.Td=function(){var t=performance.now(),i=null===this.ed||this.ed.cc(t);null!==this.ed&&(i||this.Ud()),null!==this.ed&&(this.ed.dc(),this.ed=null)},t}(),jn=function(){function t(t,i,n,s,h){var r=this;this.ft=!0,this.o_=new Mn(0,0),this.d_=function(){return r.W_(3)},this.m_="left"===t,this.cf=n.qf,this.zi=i,this.Hd=s,this.Yd=h,this.g_=document.createElement("div"),this.g_.style.width="25px",this.g_.style.height="100%",this.g_.style.overflow="hidden",this.p_=pn(this.g_,new Mn(16,16)),this.p_.subscribeCanvasConfigured(this.d_)}return t.prototype.p=function(){this.p_.unsubscribeCanvasConfigured(this.d_),this.p_.destroy()},t.prototype.B_=function(){return this.g_},t.prototype.Ld=function(){return this.o_},t.prototype.P_=function(t){if(t.Ot<0||t.Ft<0)throw new Error("Try to set invalid size to PriceAxisStub "+JSON.stringify(t));this.o_.br(t)||(this.o_=t,this.p_.resizeCanvas({width:t.Ot,height:t.Ft}),this.g_.style.width="".concat(t.Ot,"px"),this.g_.style.minWidth="".concat(t.Ot,"px"),this.g_.style.height="".concat(t.Ft,"px"),this.ft=!0)},t.prototype.W_=function(t){if((!(t<3)||this.ft)&&0!==this.o_.Ot&&0!==this.o_.Ft){this.ft=!1;var i=mn(this.p_.canvas);this.j_(i,this.p_.pixelRatio),this.Ws(i,this.p_.pixelRatio)}},t.prototype.Y_=function(){return this.p_.canvas},t.prototype.Ws=function(t,i){if(this.Hd()){var n=this.o_.Ot;t.save(),t.fillStyle=this.zi.timeScale.borderColor;var s=Math.floor(this.cf.R().N*i),h=this.m_?Math.round(n*i)-s:0;t.fillRect(h,0,s,s),t.restore()}},t.prototype.j_=function(t,i){var n=this;j(t,i,(function(){q(t,0,0,n.o_.Ot,n.o_.Ft,n.Yd())}))},t}();function qn(t,i){return t.Po>i.Po?t:i}var Un=function(){function t(t){var i=this;this.$d=null,this.Kd=null,this.k=null,this.Xd=!1,this.o_=new Mn(0,0),this.Zd=new p,this.f_=new zt(5),this.__=!1,this.d_=function(){i.__||i.ad.jt().Rr()},this.b_=function(){i.__||i.ad.jt().Rr()},this.ad=t,this.zi=t.R().layout,this.Jd=document.createElement("tr"),this.Gd=document.createElement("td"),this.Gd.style.padding="0",this.Qd=document.createElement("td"),this.Qd.style.padding="0",this.g_=document.createElement("td"),this.g_.style.height="25px",this.g_.style.padding="0",this.tw=document.createElement("div"),this.tw.style.width="100%",this.tw.style.height="100%",this.tw.style.position="relative",this.tw.style.overflow="hidden",this.g_.appendChild(this.tw),this.p_=pn(this.tw,new Mn(16,16)),this.p_.subscribeCanvasConfigured(this.d_);var n=this.p_.canvas;n.style.position="absolute",n.style.zIndex="1",n.style.left="0",n.style.top="0",this.y_=pn(this.tw,new Mn(16,16)),this.y_.subscribeCanvasConfigured(this.b_);var s=this.y_.canvas;s.style.position="absolute",s.style.zIndex="2",s.style.left="0",s.style.top="0",this.Jd.appendChild(this.Gd),this.Jd.appendChild(this.g_),this.Jd.appendChild(this.Qd),this.iw(),this.ad.jt().Pa().u(this.iw.bind(this),this),this.A_=new Dn(this.y_.canvas,this,{_v:function(){return!0},dv:function(){return!1}})}return t.prototype.p=function(){this.A_.p(),null!==this.$d&&this.$d.p(),null!==this.Kd&&this.Kd.p(),this.y_.unsubscribeCanvasConfigured(this.b_),this.y_.destroy(),this.p_.unsubscribeCanvasConfigured(this.d_),this.p_.destroy()},t.prototype.B_=function(){return this.Jd},t.prototype.nw=function(){return this.$d},t.prototype.sw=function(){return this.Kd},t.prototype.Tv=function(t){if(!this.Xd){this.Xd=!0;var i=this.ad.jt();!i.bt().wi()&&this.ad.R().handleScale.axisPressedMouseMove.time&&i.Lf(t.Yv)}},t.prototype.Cv=function(t){this.Tv(t)},t.prototype.Dv=function(){var t=this.ad.jt();!t.bt().wi()&&this.Xd&&(this.Xd=!1,this.ad.R().handleScale.axisPressedMouseMove.time&&t.zf())},t.prototype.bv=function(t){var i=this.ad.jt();!i.bt().wi()&&this.ad.R().handleScale.axisPressedMouseMove.time&&i.Rf(t.Yv)},t.prototype.wv=function(t){this.bv(t)},t.prototype.yv=function(){this.Xd=!1;var t=this.ad.jt();t.bt().wi()&&!this.ad.R().handleScale.axisPressedMouseMove.time||t.zf()},t.prototype.gv=function(){this.yv()},t.prototype.nv=function(){this.ad.R().handleScale.axisDoubleClickReset&&this.ad.jt().gn()},t.prototype.Gc=function(){this.nv()},t.prototype.ov=function(){this.ad.jt().R().handleScale.axisPressedMouseMove.time&&this.K_(1)},t.prototype.Rv=function(){this.K_(0)},t.prototype.Ld=function(){return this.o_},t.prototype.hw=function(){return this.Zd},t.prototype.rw=function(t,i,n){this.o_&&this.o_.br(t)||(this.o_=t,this.__=!0,this.p_.resizeCanvas({width:t.Ot,height:t.Ft}),this.y_.resizeCanvas({width:t.Ot,height:t.Ft}),this.__=!1,this.g_.style.width=t.Ot+"px",this.g_.style.height=t.Ft+"px",this.Zd.m(t)),null!==this.$d&&this.$d.P_(new Mn(i,t.Ft)),null!==this.Kd&&this.Kd.P_(new Mn(n,t.Ft))},t.prototype.ew=function(){var t=this.uw();return Math.ceil(t.N+t.C+t.S+t.F+t.B)},t.prototype.vt=function(){this.ad.jt().bt().au()},t.prototype.Y_=function(){return this.p_.canvas},t.prototype.W_=function(t){if(0!==t){if(1!==t){var i=mn(this.p_.canvas);this.j_(i,this.p_.pixelRatio),this.Ws(i,this.p_.pixelRatio),this.q_(i,this.p_.pixelRatio),null!==this.$d&&this.$d.W_(t),null!==this.Kd&&this.Kd.W_(t)}var n=mn(this.y_.canvas),s=this.y_.pixelRatio;n.clearRect(0,0,Math.ceil(this.o_.Ot*s),Math.ceil(this.o_.Ft*s)),this.aw([this.ad.jt().Tf()],n,s)}},t.prototype.j_=function(t,i){var n=this;j(t,i,(function(){q(t,0,0,n.o_.Ot,n.o_.Ft,n.ad.jt().Xf())}))},t.prototype.Ws=function(t,i){if(this.ad.R().timeScale.borderVisible){t.save(),t.fillStyle=this.ow();var n=Math.max(1,Math.floor(this.uw().N*i));t.fillRect(0,0,Math.ceil(this.o_.Ot*i),n),t.restore()}},t.prototype.q_=function(t,i){var n=this,s=this.ad.jt().bt().au();if(s&&0!==s.length){var h=s.reduce(qn,s[0]).Po;h>30&&h<50&&(h=30),t.save(),t.strokeStyle=this.ow();var r=this.uw(),e=r.N+r.C+r.F+r.S-r.V;t.textAlign="center",t.fillStyle=this.ow();var u=Math.floor(this.uw().N*i),a=Math.max(1,Math.floor(i)),o=Math.floor(.5*i);if(this.ad.jt().bt().R().borderVisible){t.beginPath();for(var l=Math.round(r.C*i),f=s.length;f--;){var c=Math.round(s[f].su*i);t.rect(c-o,u,a,l)}t.fill()}t.fillStyle=this.j(),j(t,i,(function(){t.font=n.lw();for(var i=0,r=s;i<r.length;i++){if((l=r[i]).Po<h){var u=l.Sl?n.fw(t,l.su,l.yu):l.su;t.fillText(l.yu,u,e)}}t.font=n.cw();for(var a=0,o=s;a<o.length;a++){var l;if((l=o[a]).Po>=h){u=l.Sl?n.fw(t,l.su,l.yu):l.su;t.fillText(l.yu,u,e)}}})),t.restore()}},t.prototype.fw=function(t,i,n){var s=this.f_.Qt(t,n),h=s/2,r=Math.floor(i-h)+.5;return r<0?i+=Math.abs(0-r):r+s>this.o_.Ot&&(i-=Math.abs(this.o_.Ot-(r+s))),i},t.prototype.aw=function(t,i,n){for(var s=this.uw(),h=0,r=t;h<r.length;h++)for(var e=0,u=r[h].Ti();e<u.length;e++){var a=u[e];i.save(),a.dt().H(i,s,n),i.restore()}},t.prototype.ow=function(){return this.ad.R().timeScale.borderColor},t.prototype.j=function(){return this.zi.textColor},t.prototype.W=function(){return this.zi.fontSize},t.prototype.lw=function(){return B(this.W(),this.zi.fontFamily)},t.prototype.cw=function(){return B(this.W(),this.zi.fontFamily,"bold")},t.prototype.uw=function(){null===this.k&&(this.k={N:1,V:NaN,F:NaN,B:NaN,mi:NaN,C:3,S:NaN,T:"",bi:new zt});var t=this.k,i=this.lw();if(t.T!==i){var n=this.W();t.S=n,t.T=i,t.F=Math.ceil(n/2.5),t.B=t.F,t.mi=Math.ceil(n/2),t.V=Math.round(this.W()/5),t.bi.ih()}return this.k},t.prototype.K_=function(t){this.g_.style.cursor=1===t?"ew-resize":"default"},t.prototype.iw=function(){var t=this.ad.jt(),i=t.R();i.leftPriceScale.visible||null===this.$d||(this.Gd.removeChild(this.$d.B_()),this.$d.p(),this.$d=null),i.rightPriceScale.visible||null===this.Kd||(this.Qd.removeChild(this.Kd.B_()),this.Kd.p(),this.Kd=null);var n={qf:this.ad.jt().qf()},s=function(){return i.leftPriceScale.borderVisible&&t.bt().R().borderVisible},h=function(){return t.Xf()};i.leftPriceScale.visible&&null===this.$d&&(this.$d=new jn("left",i,n,s,h),this.Gd.appendChild(this.$d.B_())),i.rightPriceScale.visible&&null===this.Kd&&(this.Kd=new jn("right",i,n,s,h),this.Qd.appendChild(this.Kd.B_()))},t}(),Hn=function(){function t(t,i){var n;this._w=[],this.dw=0,this.Nu=0,this.hh=0,this.ww=0,this.Mw=0,this.bw=null,this.mw=!1,this.Q_=new p,this.af=new p,this.zi=i,this.Jd=document.createElement("div"),this.Jd.classList.add("tv-lightweight-charts"),this.Jd.style.overflow="hidden",this.Jd.style.width="100%",this.Jd.style.height="100%",(n=this.Jd).style.userSelect="none",n.style.webkitUserSelect="none",n.style.msUserSelect="none",n.style.MozUserSelect="none",n.style.webkitTapHighlightColor="transparent",this.gw=document.createElement("table"),this.gw.setAttribute("cellspacing","0"),this.Jd.appendChild(this.gw),this.pw=this.yw.bind(this),this.Jd.addEventListener("wheel",this.pw,{passive:!1}),this.gi=new fn(this.ff.bind(this),this.zi),this.jt().Df().u(this.kw.bind(this),this),this.xw=new Un(this),this.gw.appendChild(this.xw.B_());var s=this.zi.width,h=this.zi.height;if(0===s||0===h){var r=t.getBoundingClientRect();0===s&&(s=Math.floor(r.width),s-=s%2),0===h&&(h=Math.floor(r.height),h-=h%2)}this.Nw(s,h),this.Cw(),t.appendChild(this.Jd),this.Sw(),this.gi.bt().Pl().u(this.gi.Ce.bind(this.gi),this),this.gi.Pa().u(this.gi.Ce.bind(this.gi),this)}return t.prototype.jt=function(){return this.gi},t.prototype.R=function(){return this.zi},t.prototype.Tw=function(){return this._w},t.prototype.Dw=function(){return this.xw},t.prototype.p=function(){this.Jd.removeEventListener("wheel",this.pw),0!==this.dw&&window.cancelAnimationFrame(this.dw),this.gi.Df().M(this),this.gi.bt().Pl().M(this),this.gi.Pa().M(this),this.gi.p();for(var t=0,i=this._w;t<i.length;t++){var n=i[t];this.gw.removeChild(n.B_()),n.Sd().M(this),n.p()}this._w=[],e(this.xw).p(),null!==this.Jd.parentElement&&this.Jd.parentElement.removeChild(this.Jd),this.af.p(),this.Q_.p()},t.prototype.Nw=function(t,i,n){if(void 0===n&&(n=!1),this.Nu!==i||this.hh!==t){this.Nu=i,this.hh=t;var s=i+"px",h=t+"px";e(this.Jd).style.height=s,e(this.Jd).style.width=h,this.gw.style.height=s,this.gw.style.width=h,n?this.Aw(new it(3)):this.gi.Ce()}},t.prototype.W_=function(t){void 0===t&&(t=new it(3));for(var i=0;i<this._w.length;i++)this._w[i].W_(t.wn(i).vn);this.zi.timeScale.visible&&this.xw.W_(t.dn())},t.prototype.Pr=function(t){this.gi.Pr(t),this.Sw();var i=t.width||this.hh,n=t.height||this.Nu;this.Nw(i,n)},t.prototype.Sd=function(){return this.Q_},t.prototype.Df=function(){return this.af},t.prototype.Bw=function(){var t=this;null!==this.bw&&(this.Aw(this.bw),this.bw=null);var i=this._w[0],n=gn(document,new Mn(this.hh,this.Nu)),s=mn(n),h=bn(n);return j(s,h,(function(){var n=0,h=0,r=function(i){for(var r=0;r<t._w.length;r++){var u=t._w[r],a=u.Ld().Ft,o=e("left"===i?u.Rd():u.zd()),l=o.Y_();s.drawImage(l,n,h,o.R_(),a),h+=a}};t.Lw()&&(r("left"),n=e(i.Rd()).R_()),h=0;for(var u=0;u<t._w.length;u++){var a=t._w[u],o=a.Ld(),l=a.Y_();s.drawImage(l,n,h,o.Ot,o.Ft),h+=o.Ft}n+=i.Ld().Ot,t.Ew()&&(h=0,r("right"));var f=function(i){var r=e("left"===i?t.xw.nw():t.xw.sw()),u=r.Ld(),a=r.Y_();s.drawImage(a,n,h,u.Ot,u.Ft)};if(t.zi.timeScale.visible){n=0,t.Lw()&&(f("left"),n=e(i.Rd()).R_());var c=t.xw.Ld();l=t.xw.Y_();s.drawImage(l,n,h,c.Ot,c.Ft),t.Ew()&&(n+=i.Ld().Ot,f("right"),s.restore())}})),n},t.prototype.Ow=function(t){return"none"===t?0:("left"!==t||this.Lw())&&("right"!==t||this.Ew())?0===this._w.length?0:e("left"===t?this._w[0].Rd():this._w[0].zd()).R_():0},t.prototype.Fw=function(){for(var t=0,i=0,n=0,s=0,h=this._w;s<h.length;s++){var r=h[s];this.Lw()&&(i=Math.max(i,e(r.Rd()).F_())),this.Ew()&&(n=Math.max(n,e(r.zd()).F_())),t+=r.Ra()}var u=this.hh,a=this.Nu,o=Math.max(u-i-n,0),l=this.zi.timeScale.visible,f=l?this.xw.ew():0;f%2&&(f+=1);for(var c=0+f,v=a<c?0:a-c,_=v/t,d=0,w=0;w<this._w.length;++w){(r=this._w[w]).wd(this.gi.Cf()[w]);var M,b=0;b=w===this._w.length-1?v-d:Math.round(r.Ra()*_),d+=M=Math.max(b,2),r.P_(new Mn(o,M)),this.Lw()&&r.Bd(i,"left"),this.Ew()&&r.Bd(n,"right"),r.z_()&&this.gi.Af(r.z_(),M)}this.xw.rw(new Mn(l?o:0,f),l?i:0,l?n:0),this.gi.Wa(o),this.ww!==i&&(this.ww=i),this.Mw!==n&&(this.Mw=n)},t.prototype.yw=function(t){var i=t.deltaX/100,n=-t.deltaY/100;if(0!==i&&this.zi.handleScroll.mouseWheel||0!==n&&this.zi.handleScale.mouseWheel){switch(t.cancelable&&t.preventDefault(),t.deltaMode){case t.DOM_DELTA_PAGE:i*=120,n*=120;break;case t.DOM_DELTA_LINE:i*=32,n*=32}if(0!==n&&this.zi.handleScale.mouseWheel){var s=Math.sign(n)*Math.min(1,Math.abs(n)),h=t.clientX-this.Jd.getBoundingClientRect().left;this.jt().Ef(h,s)}0!==i&&this.zi.handleScroll.mouseWheel&&this.jt().Of(-80*i)}},t.prototype.Aw=function(t){var i,n=t.dn();3===n&&this.Vw(),3!==n&&2!==n||(this.Pw(t),this.Rw(t),this.xw.vt(),this._w.forEach((function(t){t.bd()})),3===(null===(i=this.bw)||void 0===i?void 0:i.dn())&&(this.bw.xn(t),this.Vw(),this.Pw(this.bw),this.Rw(this.bw),t=this.bw,this.bw=null)),this.W_(t)},t.prototype.Rw=function(t){for(var i=0,n=t.kn();i<n.length;i++){var s=n[i];this.Nn(s)}},t.prototype.Pw=function(t){for(var i=this.gi.Cf(),n=0;n<i.length;n++)t.wn(n)._n&&i[n].so()},t.prototype.Nn=function(t){var i=this.gi.bt();switch(t.bn){case 0:i.zl();break;case 1:i.Wl(t.St);break;case 2:i.pn(t.St);break;case 3:i.yn(t.St);break;case 4:i.Tl()}},t.prototype.ff=function(t){var i=this;null!==this.bw?this.bw.xn(t):this.bw=t,this.mw||(this.mw=!0,this.dw=window.requestAnimationFrame((function(){if(i.mw=!1,i.dw=0,null!==i.bw){var t=i.bw;i.bw=null,i.Aw(t)}})))},t.prototype.Vw=function(){this.Cw()},t.prototype.Cw=function(){for(var t=this.gi.Cf(),i=t.length,n=this._w.length,s=i;s<n;s++){var h=r(this._w.pop());this.gw.removeChild(h.B_()),h.Sd().M(this),h.p()}for(s=n;s<i;s++){(h=new In(this,t[s])).Sd().u(this.zw.bind(this),this),this._w.push(h),this.gw.insertBefore(h.B_(),this.xw.B_())}for(s=0;s<i;s++){var e=t[s];(h=this._w[s]).z_()!==e?h.wd(e):h.dd()}this.Sw(),this.Fw()},t.prototype.Ww=function(t,i){var n,s=new Map;null!==t&&this.gi._t().forEach((function(i){var n=i.er(t);null!==n&&s.set(i,n)}));if(null!==t){var h=this.gi.bt().pi(t);null!==h&&(n=h)}var r=this.jt().pf(),e=null!==r&&r.kf instanceof pi?r.kf:void 0,u=null!==r&&void 0!==r.yd?r.yd.Zh:void 0;return{rt:n,Iw:i||void 0,jw:e,qw:s,Uw:u}},t.prototype.zw=function(t,i){var n=this;this.Q_.m((function(){return n.Ww(t,i)}))},t.prototype.kw=function(t,i){var n=this;this.af.m((function(){return n.Ww(t,i)}))},t.prototype.Sw=function(){var t=this.zi.timeScale.visible?"":"none";this.xw.B_().style.display=t},t.prototype.Lw=function(){return this._w[0].z_().Ya().R().visible},t.prototype.Ew=function(){return this._w[0].z_().$a().R().visible},t}();function Yn(t,i,n){var s=n.value;return{vs:i,rt:t,St:[s,s,s,s]}}function $n(t,i,n){var s=n.value,h={vs:i,rt:t,St:[s,s,s,s]};return"color"in n&&void 0!==n.color&&(h.A=n.color),h}function Kn(t){return void 0!==t.St}function Xn(t){return function(i,n,s){return void 0===(h=s).open&&void 0===h.value?{rt:i,vs:n}:t(i,n,s);var h}}var Zn={Candlestick:Xn((function(t,i,n){var s={vs:i,rt:t,St:[n.open,n.high,n.low,n.close]};return"color"in n&&void 0!==n.color&&(s.A=n.color),"borderColor"in n&&void 0!==n.borderColor&&(s.Tt=n.borderColor),"wickColor"in n&&void 0!==n.wickColor&&(s.qs=n.wickColor),s})),Bar:Xn((function(t,i,n){var s={vs:i,rt:t,St:[n.open,n.high,n.low,n.close]};return"color"in n&&void 0!==n.color&&(s.A=n.color),s})),Area:Xn(Yn),Baseline:Xn(Yn),Histogram:Xn($n),Line:Xn($n)};function Jn(t){return Zn[t]}function Gn(t){return 60*t*60*1e3}function Qn(t){return 60*t*1e3}var ts,is=[{Hw:(ts=1,1e3*ts),Po:10},{Hw:Qn(1),Po:20},{Hw:Qn(5),Po:21},{Hw:Qn(30),Po:22},{Hw:Gn(1),Po:30},{Hw:Gn(3),Po:31},{Hw:Gn(6),Po:32},{Hw:Gn(12),Po:33}];function ns(t,i){if(t.getUTCFullYear()!==i.getUTCFullYear())return 70;if(t.getUTCMonth()!==i.getUTCMonth())return 60;if(t.getUTCDate()!==i.getUTCDate())return 50;for(var n=is.length-1;n>=0;--n)if(Math.floor(i.getTime()/is[n].Hw)!==Math.floor(t.getTime()/is[n].Hw))return is[n].Po;return 0}function ss(t,i){if(void 0===i&&(i=0),0!==t.length){for(var n=0===i?null:t[i-1].rt.So,s=null!==n?new Date(1e3*n):null,h=0,r=i;r<t.length;++r){var e=t[r],u=new Date(1e3*e.rt.So);null!==s&&(e.Vo=ns(u,s)),h+=e.rt.So-(n||e.rt.So),n=e.rt.So,s=u}if(0===i&&t.length>1){var a=Math.ceil(h/(t.length-1)),o=new Date(1e3*(t[0].rt.So-a));t[0].Vo=ns(new Date(1e3*t[0].rt.So),o)}}}function hs(t){if(!vn(t))throw new Error("time must be of type BusinessDay");var i=new Date(Date.UTC(t.year,t.month-1,t.day,0,0,0,0));return{So:Math.round(i.getTime()/1e3),Co:t}}function rs(t){if(!_n(t))throw new Error("time must be of type isUTCTimestamp");return{So:t}}function es(t){return 0===t.length?null:vn(t[0].time)?hs:rs}function us(t){return _n(t)?rs(t):vn(t)?hs(t):hs(as(t))}function as(t){var i=new Date(t);if(isNaN(i.getTime()))throw new Error("Invalid date string=".concat(t,", expected format=yyyy-mm-dd"));return{day:i.getUTCDate(),month:i.getUTCMonth()+1,year:i.getUTCFullYear()}}function os(t){N(t.time)&&(t.time=as(t.time))}function ls(t){return{vs:0,Yw:new Map,Ve:t}}function fs(t){if(void 0!==t&&0!==t.length)return{$w:t[0].rt.So,Kw:t[t.length-1].rt.So}}var cs=function(){function t(){this.Xw=new Map,this.Zw=new Map,this.Jw=new Map,this.Gw=[]}return t.prototype.p=function(){this.Xw.clear(),this.Zw.clear(),this.Jw.clear(),this.Gw=[]},t.prototype.Qw=function(t,i){var n=this,s=0!==this.Xw.size,h=!1,r=this.Zw.get(t);if(void 0!==r)if(1===this.Zw.size)s=!1,h=!0,this.Xw.clear();else for(var u=0,a=this.Gw;u<a.length;u++){a[u].pointData.Yw.delete(t)&&(h=!0)}var o=[];if(0!==i.length){!function(t){t.forEach(os)}(i);var l=e(es(i)),f=Jn(t.Wr());o=i.map((function(i){var s=l(i.time),r=n.Xw.get(s.So);void 0===r&&(r=ls(s),n.Xw.set(s.So,r),h=!0);var e=f(s,r.vs,i);return r.Yw.set(t,e),e}))}s&&this.tM(),this.iM(t,o);var c=-1;if(h){var v=[];this.Xw.forEach((function(t){v.push({Vo:0,rt:t.Ve,pointData:t})})),v.sort((function(t,i){return t.rt.So-i.rt.So})),c=this.nM(v)}return this.sM(t,c,function(t,i){var n=fs(t),s=fs(i);if(void 0!==n&&void 0!==s)return{Ae:n.Kw>=s.Kw&&n.$w>=s.$w}}(this.Zw.get(t),r))},t.prototype.Yf=function(t){return this.Qw(t,[])},t.prototype.hM=function(t,i){os(i);var n=e(es([i]))(i.time),s=this.Jw.get(t);if(void 0!==s&&n.So<s.So)throw new Error("Cannot update oldest data, last time=".concat(s.So,", new time=").concat(n.So));var h=this.Xw.get(n.So),r=void 0===h;void 0===h&&(h=ls(n),this.Xw.set(n.So,h));var u=Jn(t.Wr())(n,h.vs,i);h.Yw.set(t,u),this.rM(t,u);var a={Ae:Kn(u)};if(!r)return this.sM(t,-1,a);var o={Vo:0,rt:h.Ve,pointData:h},l=ct(this.Gw,o.rt.So,(function(t,i){return t.rt.So<i}));this.Gw.splice(l,0,o);for(var f=l;f<this.Gw.length;++f)vs(this.Gw[f].pointData,f);return ss(this.Gw,l),this.sM(t,l,a)},t.prototype.rM=function(t,i){var n=this.Zw.get(t);void 0===n&&(n=[],this.Zw.set(t,n));var s=0!==n.length?n[n.length-1]:null;null===s||i.rt.So>s.rt.So?Kn(i)&&n.push(i):Kn(i)?n[n.length-1]=i:n.splice(-1,1),this.Jw.set(t,i.rt)},t.prototype.iM=function(t,i){0!==i.length?(this.Zw.set(t,i.filter(Kn)),this.Jw.set(t,i[i.length-1].rt)):(this.Zw.delete(t),this.Jw.delete(t))},t.prototype.tM=function(){for(var t=0,i=this.Gw;t<i.length;t++){var n=i[t];0===n.pointData.Yw.size&&this.Xw.delete(n.rt.So)}},t.prototype.nM=function(t){for(var i=-1,n=0;n<this.Gw.length&&n<t.length;++n){var s=this.Gw[n],h=t[n];if(s.rt.So!==h.rt.So){i=n;break}h.Vo=s.Vo,vs(h.pointData,n)}if(-1===i&&this.Gw.length!==t.length&&(i=Math.min(this.Gw.length,t.length)),-1===i)return-1;for(n=i;n<t.length;++n)vs(t[n].pointData,n);return ss(t,i),this.Gw=t,i},t.prototype.eM=function(){if(0===this.Zw.size)return null;var t=0;return this.Zw.forEach((function(i){0!==i.length&&(t=Math.max(t,i[i.length-1].vs))})),t},t.prototype.sM=function(t,i,n){var s={uM:new Map,bt:{ml:this.eM()}};if(-1!==i)this.Zw.forEach((function(i,h){s.uM.set(h,{gh:i,aM:h===t?n:void 0})})),this.Zw.has(t)||s.uM.set(t,{gh:[],aM:n}),s.bt.oM=this.Gw,s.bt.lM=i;else{var h=this.Zw.get(t);s.uM.set(t,{gh:h||[],aM:n})}return s},t}();function vs(t,i){t.vs=i,t.Yw.forEach((function(t){t.vs=i}))}var _s={color:"#FF0000",price:0,lineStyle:2,lineWidth:1,lineVisible:!0,axisLabelVisible:!0,title:""},ds=function(){function t(t){this.Lr=t}return t.prototype.applyOptions=function(t){this.Lr.Pr(t)},t.prototype.options=function(){return this.Lr.R()},t.prototype.fM=function(){return this.Lr},t}();function ws(t){var i=t.overlay,n=function(t,i){var n={};for(var s in t)Object.prototype.hasOwnProperty.call(t,s)&&i.indexOf(s)<0&&(n[s]=t[s]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var h=0;for(s=Object.getOwnPropertySymbols(t);h<s.length;h++)i.indexOf(s[h])<0&&Object.prototype.propertyIsEnumerable.call(t,s[h])&&(n[s[h]]=t[s[h]])}return n}(t,["overlay"]);return i&&(n.priceScaleId=""),n}var Ms=function(){function t(t,i,n){this.Kn=t,this.cM=i,this.vM=n}return t.prototype.priceFormatter=function(){return this.Kn.qe()},t.prototype.priceToCoordinate=function(t){var i=this.Kn.kt();return null===i?null:this.Kn.Ct().Nt(t,i.St)},t.prototype.coordinateToPrice=function(t){var i=this.Kn.kt();return null===i?null:this.Kn.Ct().qi(t,i.St)},t.prototype.barsInLogicalRange=function(t){if(null===t)return null;var i=new nn(new Ji(t.from,t.to)).jo(),n=this.Kn.an();if(n.wi())return null;var s=n.ne(i.In(),1),h=n.ne(i.jn(),-1),r=e(n.Qr()),u=e(n.un());if(null!==s&&null!==h&&s.vs>h.vs)return{barsBefore:t.from-r,barsAfter:u-t.to};var a={barsBefore:null===s||s.vs===r?t.from-r:s.vs-r,barsAfter:null===h||h.vs===u?u-t.to:u-h.vs};return null!==s&&null!==h&&(a.from=s.rt.Co||s.rt.So,a.to=h.rt.Co||h.rt.So),a},t.prototype.setData=function(t){this.Kn.Wr(),this.cM._M(this.Kn,t)},t.prototype.update=function(t){this.Kn.Wr(),this.cM.dM(this.Kn,t)},t.prototype.setMarkers=function(t){var i=t.map((function(t){return m(m({},t),{time:us(t.time)})}));this.Kn.Le(i)},t.prototype.applyOptions=function(t){var i=ws(t);this.Kn.Pr(i)},t.prototype.options=function(){return S(this.Kn.R())},t.prototype.priceScale=function(){return this.vM.priceScale(this.Kn.Ct().Ke())},t.prototype.createPriceLine=function(t){var i=y(S(_s),t),n=this.Kn.Ee(i);return new ds(n)},t.prototype.removePriceLine=function(t){this.Kn.Oe(t.fM())},t.prototype.seriesType=function(){return this.Kn.Wr()},t}(),bs=function(t){function i(){return null!==t&&t.apply(this,arguments)||this}return b(i,t),i.prototype.applyOptions=function(i){cn(i),t.prototype.applyOptions.call(this,i)},i}(Ms),ms={autoScale:!0,mode:0,invertScale:!1,alignLabels:!0,borderVisible:!0,borderColor:"#2B2B43",entireTextOnly:!1,visible:!1,drawTicks:!0,scaleMargins:{bottom:.1,top:.2}},gs={color:"rgba(0, 0, 0, 0)",visible:!1,fontSize:48,fontFamily:A,fontStyle:"",text:"",horzAlign:"center",vertAlign:"center"},ps={width:0,height:0,layout:{background:{type:"solid",color:"#FFFFFF"},textColor:"#191919",fontSize:11,fontFamily:A},crosshair:{vertLine:{color:"#758696",width:1,style:3,visible:!0,labelVisible:!0,labelBackgroundColor:"#4c525e"},horzLine:{color:"#758696",width:1,style:3,visible:!0,labelVisible:!0,labelBackgroundColor:"#4c525e"},mode:1},grid:{vertLines:{color:"#D6DCDE",style:0,visible:!0},horzLines:{color:"#D6DCDE",style:0,visible:!0}},overlayPriceScales:m({},ms),leftPriceScale:m(m({},ms),{visible:!1}),rightPriceScale:m(m({},ms),{visible:!0}),timeScale:{rightOffset:0,barSpacing:6,minBarSpacing:.5,fixLeftEdge:!1,fixRightEdge:!1,lockVisibleTimeRangeOnResize:!1,rightBarStaysOnScroll:!1,borderVisible:!0,borderColor:"#2B2B43",visible:!0,timeVisible:!1,secondsVisible:!0,shiftVisibleRangeOnNewBar:!0},watermark:gs,localization:{locale:Nn?navigator.language:"",dateFormat:"dd MMM 'yy"},handleScroll:{mouseWheel:!0,pressedMouseMove:!0,horzTouchDrag:!0,vertTouchDrag:!0},handleScale:{axisPressedMouseMove:{time:!0,price:!0},axisDoubleClickReset:!0,mouseWheel:!0,pinch:!0},kineticScroll:{mouse:!1,touch:!0},trackingMode:{exitMode:1}},ys={upColor:"#26a69a",downColor:"#ef5350",wickVisible:!0,borderVisible:!0,borderColor:"#378658",borderUpColor:"#26a69a",borderDownColor:"#ef5350",wickColor:"#737375",wickUpColor:"#26a69a",wickDownColor:"#ef5350"},ks={upColor:"#26a69a",downColor:"#ef5350",openVisible:!0,thinBars:!0},xs={color:"#2196f3",lineStyle:0,lineWidth:3,lineType:0,crosshairMarkerVisible:!0,crosshairMarkerRadius:4,crosshairMarkerBorderColor:"",crosshairMarkerBackgroundColor:"",lastPriceAnimation:0},Ns={topColor:"rgba( 46, 220, 135, 0.4)",bottomColor:"rgba( 40, 221, 100, 0)",lineColor:"#33D778",lineStyle:0,lineWidth:3,lineType:0,crosshairMarkerVisible:!0,crosshairMarkerRadius:4,crosshairMarkerBorderColor:"",crosshairMarkerBackgroundColor:"",lastPriceAnimation:0},Cs={baseValue:{type:"price",price:0},topFillColor1:"rgba(38, 166, 154, 0.28)",topFillColor2:"rgba(38, 166, 154, 0.05)",topLineColor:"rgba(38, 166, 154, 1)",bottomFillColor1:"rgba(239, 83, 80, 0.05)",bottomFillColor2:"rgba(239, 83, 80, 0.28)",bottomLineColor:"rgba(239, 83, 80, 1)",lineWidth:3,lineStyle:0,crosshairMarkerVisible:!0,crosshairMarkerRadius:4,crosshairMarkerBorderColor:"",crosshairMarkerBackgroundColor:"",lastPriceAnimation:0},Ss={color:"#26a69a",base:0},Ts={title:"",visible:!0,lastValueVisible:!0,priceLineVisible:!0,priceLineSource:0,priceLineWidth:1,priceLineColor:"",priceLineStyle:2,baseLineVisible:!0,baseLineWidth:1,baseLineColor:"#B2B5BE",baseLineStyle:0,priceFormat:{type:"price",precision:2,minMove:.01}},Ds=function(){function t(t,i){this.wM=t,this.MM=i}return t.prototype.applyOptions=function(t){this.wM.jt().xf(this.MM,t)},t.prototype.options=function(){return this._i().R()},t.prototype.width=function(){return tt(this.MM)?this.wM.Ow("left"===this.MM?"left":"right"):0},t.prototype._i=function(){return e(this.wM.jt().Nf(this.MM)).Ct},t}(),As=function(){function t(t,i){this.bM=new p,this.Go=new p,this.Zd=new p,this.gi=t,this.Da=t.bt(),this.xw=i,this.Da.Fl().u(this.mM.bind(this)),this.Da.Vl().u(this.gM.bind(this)),this.xw.hw().u(this.pM.bind(this))}return t.prototype.p=function(){this.Da.Fl().M(this),this.Da.Vl().M(this),this.xw.hw().M(this),this.bM.p(),this.Go.p(),this.Zd.p()},t.prototype.scrollPosition=function(){return this.Da.xl()},t.prototype.scrollToPosition=function(t,i){i?this.Da.Ol(t,1e3):this.gi.yn(t)},t.prototype.scrollToRealTime=function(){this.Da.El()},t.prototype.getVisibleRange=function(){var t,i,n=this.Da.cl();return null===n?null:{from:null!==(t=n.from.Co)&&void 0!==t?t:n.from.So,to:null!==(i=n.to.Co)&&void 0!==i?i:n.to.So}},t.prototype.setVisibleRange=function(t){var i={from:us(t.from),to:us(t.to)},n=this.Da.wl(i);this.gi.$f(n)},t.prototype.getVisibleLogicalRange=function(){var t=this.Da.fl();return null===t?null:{from:t.In(),to:t.jn()}},t.prototype.setVisibleLogicalRange=function(t){h(t.from<=t.to,"The from index cannot be after the to index."),this.gi.$f(t)},t.prototype.resetTimeScale=function(){this.gi.gn()},t.prototype.fitContent=function(){this.gi.zl()},t.prototype.logicalToCoordinate=function(t){var i=this.gi.bt();return i.wi()?null:i.At(t)},t.prototype.coordinateToLogical=function(t){return this.Da.wi()?null:this.Da.gl(t)},t.prototype.timeToCoordinate=function(t){var i=us(t),n=this.Da.Ze(i,!1);return null===n?null:this.Da.At(n)},t.prototype.coordinateToTime=function(t){var i,n=this.gi.bt(),s=n.gl(t),h=n.pi(s);return null===h?null:null!==(i=h.Co)&&void 0!==i?i:h.So},t.prototype.width=function(){return this.xw.Ld().Ot},t.prototype.height=function(){return this.xw.Ld().Ft},t.prototype.subscribeVisibleTimeRangeChange=function(t){this.bM.u(t)},t.prototype.unsubscribeVisibleTimeRangeChange=function(t){this.bM._(t)},t.prototype.subscribeVisibleLogicalRangeChange=function(t){this.Go.u(t)},t.prototype.unsubscribeVisibleLogicalRangeChange=function(t){this.Go._(t)},t.prototype.subscribeSizeChange=function(t){this.Zd.u(t)},t.prototype.unsubscribeSizeChange=function(t){this.Zd._(t)},t.prototype.applyOptions=function(t){this.Da.Pr(t)},t.prototype.options=function(){return S(this.Da.R())},t.prototype.mM=function(){this.bM.g()&&this.bM.m(this.getVisibleRange())},t.prototype.gM=function(){this.Go.g()&&this.Go.m(this.getVisibleLogicalRange())},t.prototype.pM=function(t){this.Zd.m(t.Ot,t.Ft)},t}();function Bs(t){if(void 0!==t&&"custom"!==t.type){var i=t;void 0!==i.minMove&&void 0===i.precision&&(i.precision=function(t){if(t>=1)return 0;for(var i=0;i<8;i++){var n=Math.round(t);if(Math.abs(n-t)<1e-8)return i;t*=10}return i}(i.minMove))}}function Ls(t){return function(t){if(C(t.handleScale)){var i=t.handleScale;t.handleScale={axisDoubleClickReset:i,axisPressedMouseMove:{time:i,price:i},mouseWheel:i,pinch:i}}else if(void 0!==t.handleScale&&C(t.handleScale.axisPressedMouseMove)){var n=t.handleScale.axisPressedMouseMove;t.handleScale.axisPressedMouseMove={time:n,price:n}}var s=t.handleScroll;C(s)&&(t.handleScroll={horzTouchDrag:s,vertTouchDrag:s,mouseWheel:s,pressedMouseMove:s})}(t),function(t){if(t.priceScale){t.leftPriceScale=t.leftPriceScale||{},t.rightPriceScale=t.rightPriceScale||{};var i=t.priceScale.position;delete t.priceScale.position,t.leftPriceScale=y(t.leftPriceScale,t.priceScale),t.rightPriceScale=y(t.rightPriceScale,t.priceScale),"left"===i&&(t.leftPriceScale.visible=!0,t.rightPriceScale.visible=!1),"right"===i&&(t.leftPriceScale.visible=!1,t.rightPriceScale.visible=!0),"none"===i&&(t.leftPriceScale.visible=!1,t.rightPriceScale.visible=!1),t.overlayPriceScales=t.overlayPriceScales||{},void 0!==t.priceScale.invertScale&&(t.overlayPriceScales.invertScale=t.priceScale.invertScale),void 0!==t.priceScale.scaleMargins&&(t.overlayPriceScales.scaleMargins=t.priceScale.scaleMargins)}}(t),function(t){t.layout&&t.layout.backgroundColor&&!t.layout.background&&(t.layout.background={type:"solid",color:t.layout.backgroundColor})}(t),t}var Es=function(){function t(t,i){var n=this;this.yM=new cs,this.kM=new Map,this.xM=new Map,this.NM=new p,this.CM=new p;var s=void 0===i?S(ps):y(S(ps),Ls(i));this.wM=new Hn(t,s),this.wM.Sd().u((function(t){n.NM.g()&&n.NM.m(n.SM(t()))}),this),this.wM.Df().u((function(t){n.CM.g()&&n.CM.m(n.SM(t()))}),this);var h=this.wM.jt();this.TM=new As(h,this.wM.Dw())}return t.prototype.remove=function(){this.wM.Sd().M(this),this.wM.Df().M(this),this.TM.p(),this.wM.p(),this.kM.clear(),this.xM.clear(),this.NM.p(),this.CM.p(),this.yM.p()},t.prototype.resize=function(t,i,n){this.wM.Nw(t,i,n)},t.prototype.addAreaSeries=function(t){void 0===t&&(t={}),Bs((t=ws(t)).priceFormat);var i=y(S(Ts),Ns,t),n=this.wM.jt().Uf("Area",i),s=new Ms(n,this,this);return this.kM.set(s,n),this.xM.set(n,s),s},t.prototype.addBaselineSeries=function(t){void 0===t&&(t={}),Bs((t=ws(t)).priceFormat);var i=y(S(Ts),S(Cs),t),n=this.wM.jt().Uf("Baseline",i),s=new Ms(n,this,this);return this.kM.set(s,n),this.xM.set(n,s),s},t.prototype.addBarSeries=function(t){void 0===t&&(t={}),Bs((t=ws(t)).priceFormat);var i=y(S(Ts),ks,t),n=this.wM.jt().Uf("Bar",i),s=new Ms(n,this,this);return this.kM.set(s,n),this.xM.set(n,s),s},t.prototype.addCandlestickSeries=function(t){void 0===t&&(t={}),cn(t=ws(t)),Bs(t.priceFormat);var i=y(S(Ts),ys,t),n=this.wM.jt().Uf("Candlestick",i),s=new bs(n,this,this);return this.kM.set(s,n),this.xM.set(n,s),s},t.prototype.addHistogramSeries=function(t){void 0===t&&(t={}),Bs((t=ws(t)).priceFormat);var i=y(S(Ts),Ss,t),n=this.wM.jt().Uf("Histogram",i),s=new Ms(n,this,this);return this.kM.set(s,n),this.xM.set(n,s),s},t.prototype.addLineSeries=function(t){void 0===t&&(t={}),Bs((t=ws(t)).priceFormat);var i=y(S(Ts),xs,t),n=this.wM.jt().Uf("Line",i),s=new Ms(n,this,this);return this.kM.set(s,n),this.xM.set(n,s),s},t.prototype.removeSeries=function(t){var i=r(this.kM.get(t)),n=this.yM.Yf(i);this.wM.jt().Yf(i),this.DM(n),this.kM.delete(t),this.xM.delete(i)},t.prototype._M=function(t,i){this.DM(this.yM.Qw(t,i))},t.prototype.dM=function(t,i){this.DM(this.yM.hM(t,i))},t.prototype.subscribeClick=function(t){this.NM.u(t)},t.prototype.unsubscribeClick=function(t){this.NM._(t)},t.prototype.subscribeCrosshairMove=function(t){this.CM.u(t)},t.prototype.unsubscribeCrosshairMove=function(t){this.CM._(t)},t.prototype.priceScale=function(t){return void 0===t&&(t=this.wM.jt().Kf()),new Ds(this.wM,t)},t.prototype.timeScale=function(){return this.TM},t.prototype.applyOptions=function(t){this.wM.Pr(Ls(t))},t.prototype.options=function(){return this.wM.R()},t.prototype.takeScreenshot=function(){return this.wM.Bw()},t.prototype.DM=function(t){var i=this.wM.jt();i.jf(t.bt.ml,t.bt.oM,t.bt.lM),t.uM.forEach((function(t,i){return i.Z(t.gh,t.aM)})),i.yl()},t.prototype.AM=function(t){return r(this.xM.get(t))},t.prototype.SM=function(t){var i=this,n=new Map;t.qw.forEach((function(t,s){n.set(i.AM(s),t)}));var s=void 0===t.jw?void 0:this.AM(t.jw);return{time:t.rt&&(t.rt.Co||t.rt.So),point:t.Iw,hoveredSeries:s,hoveredMarkerId:t.Uw,seriesPrices:n}},t}();var Os=Object.freeze({__proto__:null,version:function(){return"3.8.0"},get LineStyle(){return i},get LineType(){return t},get TrackingModeExitMode(){return hn},get CrosshairMode(){return H},get PriceScaleMode(){return Vi},get PriceLineSource(){return on},get LastPriceAnimationMode(){return an},get LasPriceAnimationMode(){return an},get TickMarkType(){return Qi},get ColorType(){return ln},isBusinessDay:vn,isUTCTimestamp:_n,createChart:function(t,i){var n;if(N(t)){var s=document.getElementById(t);h(null!==s,"Cannot find element in DOM with id=".concat(t)),n=s}else n=t;return new Es(n,i)}});window.LightweightCharts=Os}();
+!function(){"use strict";var t,i;function s(t,i){const s={0:[],1:[t.lineWidth,t.lineWidth],2:[2*t.lineWidth,2*t.lineWidth],3:[6*t.lineWidth,6*t.lineWidth],4:[t.lineWidth,4*t.lineWidth]}[i];t.setLineDash(s)}function n(t,i,s,n){t.beginPath();const e=t.lineWidth%2?.5:0;t.moveTo(s,i+e),t.lineTo(n,i+e),t.stroke()}function e(t,i){if(!t)throw new Error("Assertion failed"+(i?": "+i:""))}function r(t){if(void 0===t)throw new Error("Value is undefined");return t}function h(t){if(null===t)throw new Error("Value is null");return t}function l(t){return h(r(t))}!function(t){t[t.Simple=0]="Simple",t[t.WithSteps=1]="WithSteps",t[t.Curved=2]="Curved"}(t||(t={})),function(t){t[t.Solid=0]="Solid",t[t.Dotted=1]="Dotted",t[t.Dashed=2]="Dashed",t[t.LargeDashed=3]="LargeDashed",t[t.SparseDotted=4]="SparseDotted"}(i||(i={}));const a={khaki:"#f0e68c",azure:"#f0ffff",aliceblue:"#f0f8ff",ghostwhite:"#f8f8ff",gold:"#ffd700",goldenrod:"#daa520",gainsboro:"#dcdcdc",gray:"#808080",green:"#008000",honeydew:"#f0fff0",floralwhite:"#fffaf0",lightblue:"#add8e6",lightcoral:"#f08080",lemonchiffon:"#fffacd",hotpink:"#ff69b4",lightyellow:"#ffffe0",greenyellow:"#adff2f",lightgoldenrodyellow:"#fafad2",limegreen:"#32cd32",linen:"#faf0e6",lightcyan:"#e0ffff",magenta:"#f0f",maroon:"#800000",olive:"#808000",orange:"#ffa500",oldlace:"#fdf5e6",mediumblue:"#0000cd",transparent:"#0000",lime:"#0f0",lightpink:"#ffb6c1",mistyrose:"#ffe4e1",moccasin:"#ffe4b5",midnightblue:"#191970",orchid:"#da70d6",mediumorchid:"#ba55d3",mediumturquoise:"#48d1cc",orangered:"#ff4500",royalblue:"#4169e1",powderblue:"#b0e0e6",red:"#f00",coral:"#ff7f50",turquoise:"#40e0d0",white:"#fff",whitesmoke:"#f5f5f5",wheat:"#f5deb3",teal:"#008080",steelblue:"#4682b4",bisque:"#ffe4c4",aquamarine:"#7fffd4",aqua:"#0ff",sienna:"#a0522d",silver:"#c0c0c0",springgreen:"#00ff7f",antiquewhite:"#faebd7",burlywood:"#deb887",brown:"#a52a2a",beige:"#f5f5dc",chocolate:"#d2691e",chartreuse:"#7fff00",cornflowerblue:"#6495ed",cornsilk:"#fff8dc",crimson:"#dc143c",cadetblue:"#5f9ea0",tomato:"#ff6347",fuchsia:"#f0f",blue:"#00f",salmon:"#fa8072",blanchedalmond:"#ffebcd",slateblue:"#6a5acd",slategray:"#708090",thistle:"#d8bfd8",tan:"#d2b48c",cyan:"#0ff",darkblue:"#00008b",darkcyan:"#008b8b",darkgoldenrod:"#b8860b",darkgray:"#a9a9a9",blueviolet:"#8a2be2",black:"#000",darkmagenta:"#8b008b",darkslateblue:"#483d8b",darkkhaki:"#bdb76b",darkorchid:"#9932cc",darkorange:"#ff8c00",darkgreen:"#006400",darkred:"#8b0000",dodgerblue:"#1e90ff",darkslategray:"#2f4f4f",dimgray:"#696969",deepskyblue:"#00bfff",firebrick:"#b22222",forestgreen:"#228b22",indigo:"#4b0082",ivory:"#fffff0",lavenderblush:"#fff0f5",feldspar:"#d19275",indianred:"#cd5c5c",lightgreen:"#90ee90",lightgrey:"#d3d3d3",lightskyblue:"#87cefa",lightslategray:"#789",lightslateblue:"#8470ff",snow:"#fffafa",lightseagreen:"#20b2aa",lightsalmon:"#ffa07a",darksalmon:"#e9967a",darkviolet:"#9400d3",mediumpurple:"#9370d8",mediumaquamarine:"#66cdaa",skyblue:"#87ceeb",lavender:"#e6e6fa",lightsteelblue:"#b0c4de",mediumvioletred:"#c71585",mintcream:"#f5fffa",navajowhite:"#ffdead",navy:"#000080",olivedrab:"#6b8e23",palevioletred:"#d87093",violetred:"#d02090",yellow:"#ff0",yellowgreen:"#9acd32",lawngreen:"#7cfc00",pink:"#ffc0cb",paleturquoise:"#afeeee",palegoldenrod:"#eee8aa",darkolivegreen:"#556b2f",darkseagreen:"#8fbc8f",darkturquoise:"#00ced1",peachpuff:"#ffdab9",deeppink:"#ff1493",violet:"#ee82ee",palegreen:"#98fb98",mediumseagreen:"#3cb371",peru:"#cd853f",saddlebrown:"#8b4513",sandybrown:"#f4a460",rosybrown:"#bc8f8f",purple:"#800080",seagreen:"#2e8b57",seashell:"#fff5ee",papayawhip:"#ffefd5",mediumslateblue:"#7b68ee",plum:"#dda0dd",mediumspringgreen:"#00fa9a"};function o(t){return t<0?0:t>255?255:Math.round(t)||0}function _(t){return t<=0||t>0?t<0?0:t>1?1:Math.round(1e4*t)/1e4:0}const u=/^#([0-9a-f])([0-9a-f])([0-9a-f])([0-9a-f])?$/i,c=/^#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})?$/i,d=/^rgb\(\s*(-?\d{1,10})\s*,\s*(-?\d{1,10})\s*,\s*(-?\d{1,10})\s*\)$/,f=/^rgba\(\s*(-?\d{1,10})\s*,\s*(-?\d{1,10})\s*,\s*(-?\d{1,10})\s*,\s*(-?[\d]{0,10}(?:\.\d+)?)\s*\)$/;function p(t){(t=t.toLowerCase())in a&&(t=a[t]);{const i=f.exec(t)||d.exec(t);if(i)return[o(parseInt(i[1],10)),o(parseInt(i[2],10)),o(parseInt(i[3],10)),_(i.length<5?1:parseFloat(i[4]))]}{const i=c.exec(t);if(i)return[o(parseInt(i[1],16)),o(parseInt(i[2],16)),o(parseInt(i[3],16)),1]}{const i=u.exec(t);if(i)return[o(17*parseInt(i[1],16)),o(17*parseInt(i[2],16)),o(17*parseInt(i[3],16)),1]}throw new Error(`Cannot parse color: ${t}`)}function v(t){const i=p(t);return{t:`rgb(${i[0]}, ${i[1]}, ${i[2]})`,i:(s=i,.199*s[0]+.687*s[1]+.114*s[2]>160?"black":"white")};var s}class m{constructor(){this.h=[]}l(t,i,s){const n={o:t,_:i,u:!0===s};this.h.push(n)}p(t){const i=this.h.findIndex((i=>t===i.o));i>-1&&this.h.splice(i,1)}v(t){this.h=this.h.filter((i=>i._!==t))}m(t,i){const s=[...this.h];this.h=this.h.filter((t=>!t.u)),s.forEach((s=>s.o(t,i)))}g(){return this.h.length>0}M(){this.h=[]}}function b(t,...i){for(const s of i)for(const i in s)void 0!==s[i]&&("object"!=typeof s[i]||void 0===t[i]?t[i]=s[i]:b(t[i],s[i]));return t}function w(t){return"number"==typeof t&&isFinite(t)}function g(t){return"number"==typeof t&&t%1==0}function M(t){return"string"==typeof t}function S(t){return"boolean"==typeof t}function y(t){const i=t;if(!i||"object"!=typeof i)return i;let s,n,e;for(n in s=Array.isArray(i)?[]:{},i)i.hasOwnProperty(n)&&(e=i[n],s[n]=e&&"object"==typeof e?y(e):e);return s}function k(t){return null!==t}function C(t){return null===t?void 0:t}const x="'Trebuchet MS', Roboto, Ubuntu, sans-serif";function T(t,i,s){return void 0===i&&(i=x),`${s=void 0!==s?`${s} `:""}${t}px ${i}`}class D{constructor(t){this.S={k:1,C:5,T:NaN,D:"",P:"",R:"",L:"",A:0,O:0,B:0,I:0,N:0},this.V=t}F(){const t=this.S,i=this.W(),s=this.j();return t.T===i&&t.P===s||(t.T=i,t.P=s,t.D=T(i,s),t.I=2.5/12*i,t.A=t.I,t.O=i/12*t.C,t.B=i/12*t.C,t.N=0),t.R=this.$(),t.L=this.H(),this.S}$(){return this.V.F().layout.textColor}H(){return this.V.U()}W(){return this.V.F().layout.fontSize}j(){return this.V.F().layout.fontFamily}}class P{constructor(){this.q=[]}Y(t){this.q=t}X(t,i,s,n){this.q.forEach((e=>{t.save(),e.X(t,i,s,n),t.restore()}))}}class R{X(t,i,s,n){t.save(),t.scale(i,i),this.Z(t,s,n),t.restore()}K(t,i,s,n){t.save(),t.scale(i,i),this.G(t,s,n),t.restore()}G(t,i,s){}}class L extends R{constructor(){super(...arguments),this.J=null}tt(t){this.J=t}Z(t){if(null===this.J||null===this.J.it)return;const i=this.J.it,s=this.J,n=n=>{t.beginPath();for(let e=i.to-1;e>=i.from;--e){const i=s.st[e];t.moveTo(i.nt,i.et),t.arc(i.nt,i.et,n,0,2*Math.PI)}t.fill()};s.rt>0&&(t.fillStyle=s.ht,n(s.lt+s.rt)),t.fillStyle=s.ot,n(s.lt)}}function A(){return{st:[{nt:0,et:0,_t:0,ut:0}],ot:"",ht:"",lt:0,rt:0,it:null}}const O={from:0,to:1};class E{constructor(t,i){this.ct=new P,this.dt=[],this.ft=[],this.vt=!0,this.V=t,this.bt=i,this.ct.Y(this.dt)}wt(t){const i=this.V.gt();i.length!==this.dt.length&&(this.ft=i.map(A),this.dt=this.ft.map((t=>{const i=new L;return i.tt(t),i})),this.ct.Y(this.dt)),this.vt=!0}Mt(t,i,s){return this.vt&&(this.St(t),this.vt=!1),this.ct}St(t){const i=this.V.gt(),s=this.bt.yt(),n=this.V.kt();i.forEach(((i,e)=>{var r;const l=this.ft[e],a=i.Ct(s);if(null===a||!i.xt())return void(l.it=null);const o=h(i.Tt());l.ot=a.Dt,l.lt=a.lt,l.rt=a.Pt,l.st[0].ut=a.ut,l.st[0].et=i.Lt().Rt(a.ut,o.At),l.ht=null!==(r=a.Ot)&&void 0!==r?r:this.V.Et(l.st[0].et/t),l.st[0]._t=s,l.st[0].nt=n.Bt(s),l.it=O}))}}class B{constructor(t){this.It=t}X(t,i,e,r){if(null===this.It)return;const h=this.It.Nt.xt,l=this.It.Vt.xt;if(!h&&!l)return;t.save();const a=Math.round(this.It.nt*i),o=Math.round(this.It.et*i),_=Math.ceil(this.It.Ft*i),u=Math.ceil(this.It.Wt*i);t.lineCap="butt",h&&a>=0&&(t.lineWidth=Math.floor(this.It.Nt.rt*i),t.strokeStyle=this.It.Nt.R,t.fillStyle=this.It.Nt.R,s(t,this.It.Nt.zt),function(t,i,s,n){t.beginPath();const e=t.lineWidth%2?.5:0;t.moveTo(i+e,s),t.lineTo(i+e,n),t.stroke()}(t,a,0,u)),l&&o>=0&&(t.lineWidth=Math.floor(this.It.Vt.rt*i),t.strokeStyle=this.It.Vt.R,t.fillStyle=this.It.Vt.R,s(t,this.It.Vt.zt),n(t,o,0,_)),t.restore()}}class I{constructor(t){this.vt=!0,this.jt={Nt:{rt:1,zt:0,R:"",xt:!1},Vt:{rt:1,zt:0,R:"",xt:!1},Ft:0,Wt:0,nt:0,et:0},this.$t=new B(this.jt),this.Ht=t}wt(){this.vt=!0}Mt(t,i){return this.vt&&(this.St(),this.vt=!1),this.$t}St(){const t=this.Ht.xt(),i=h(this.Ht.Ut()),s=i.qt().F().crosshair,n=this.jt;n.Vt.xt=t&&this.Ht.Yt(i),n.Nt.xt=t&&this.Ht.Xt(),n.Vt.rt=s.horzLine.width,n.Vt.zt=s.horzLine.style,n.Vt.R=s.horzLine.color,n.Nt.rt=s.vertLine.width,n.Nt.zt=s.vertLine.style,n.Nt.R=s.vertLine.color,n.Ft=i.Zt(),n.Wt=i.Kt(),n.nt=this.Ht.Gt(),n.et=this.Ht.Jt()}}function N(t,i,s,n,e,r){t.fillRect(i+r,s,n-2*r,r),t.fillRect(i+r,s+e-r,n-2*r,r),t.fillRect(i,s,r,e),t.fillRect(i+n-r,s,r,e)}function V(t,i,s){t.save(),t.scale(i,i),s(),t.restore()}function F(t,i,s,n,e,r){t.save(),t.globalCompositeOperation="copy",t.fillStyle=r,t.fillRect(i,s,n,e),t.restore()}function W(t,i){return Array.isArray(t)?t.map((t=>0===t?t:t+i)):t+i}function z(t,i,s,n,e,r){let h,l,a,o;if(Array.isArray(r))if(2===r.length){const t=Math.max(0,r[0]),i=Math.max(0,r[1]);h=t,l=t,a=i,o=i}else{if(4!==r.length)throw new Error("Wrong border radius - it should be like css border radius");h=Math.max(0,r[0]),l=Math.max(0,r[1]),a=Math.max(0,r[2]),o=Math.max(0,r[3])}else{const t=Math.max(0,r);h=t,l=t,a=t,o=t}t.beginPath(),t.moveTo(i+h,s),t.lineTo(i+n-l,s),0!==l&&t.arcTo(i+n,s,i+n,s+l,l),t.lineTo(i+n,s+e-a),0!==a&&t.arcTo(i+n,s+e,i+n-a,s+e,a),t.lineTo(i+o,s+e),0!==o&&t.arcTo(i,s+e,i,s+e-o,o),t.lineTo(i,s+h),0!==h&&t.arcTo(i,s,i+h,s,h)}function j(t,i,s,n,e,r,h=0,l=0,a=""){if(t.save(),!h||!a||a===r)return z(t,i,s,n,e,l),t.fillStyle=r,t.fill(),void t.restore();const o=h/2;if("transparent"!==r){z(t,i+h,s+h,n-2*h,e-2*h,W(l,-h)),t.fillStyle=r,t.fill()}if("transparent"!==a){z(t,i+o,s+o,n-h,e-h,W(l,-o)),t.lineWidth=h,t.strokeStyle=a,t.closePath(),t.stroke()}}function $(t,i,s,n,e,r,h){t.save(),t.globalCompositeOperation="copy";const l=t.createLinearGradient(0,0,0,e);l.addColorStop(0,r),l.addColorStop(1,h),t.fillStyle=l,t.fillRect(i,s,n,e),t.restore()}class H{constructor(t,i){this.tt(t,i)}tt(t,i){this.It=t,this.Qt=i}X(t,i,s,n,e,r){if(!this.It.xt)return;t.font=i.D;const h=this.ti(t,i,s,n,e,r),l=this.It.R||this.Qt.R,a=this.Qt.t;if(t.fillStyle=this.Qt.t,this.It.ii){const s=(i,s)=>{h.si?j(t,h.ni,h.ei,h.ri,h.hi,i,h.li,[h.lt,0,0,h.lt],s):j(t,h.ai,h.ei,h.ri,h.hi,i,h.li,[0,h.lt,h.lt,0],s)};s(a,"transparent"),this.It.oi&&(t.fillStyle=l,t.fillRect(h.ai,h._i,h.ui-h.ai,h.ci)),s("transparent",a),this.It.di&&(t.fillStyle=i.L,t.fillRect(h.si?h.fi-h.li:0,h.ei,h.li,h.pi-h.ei)),t.save(),t.translate(h.vi,(h.ei+h.pi)/2+h.mi),V(t,r,(()=>{t.fillStyle=l,t.fillText(this.It.ii,0,0)})),t.restore()}}Kt(t,i){return this.It.xt?t.T+t.I+t.A:0}ti(t,i,s,n,e,r){const h=this.It.oi||!this.It.bi?i.C:0,l=i.k,a=i.I+this.Qt.wi,o=i.A+this.Qt.gi,_=i.O,u=i.B,c=this.It.ii,d=i.T,f=s.Mi(t,c)*r,p=d+a+o,v=l+_+u+Math.ceil(s.Si(t,c))+h,m=Math.max(1,Math.floor(r));let b=Math.round(p*r);b%2!=m%2&&(b+=1);const w=this.It.yi?Math.max(1,Math.floor(l*r)):0,g=Math.round(v*r),M=Math.round(h*r),S=Math.ceil(n*r),y=Math.ceil(_*r);let k=this.Qt.ki;this.Qt.Ci&&(k=this.Qt.Ci),k=Math.round(k*r)-Math.floor(.5*r);const C=Math.floor(k+m/2-b/2),x=C+b,T="right"===e,D=T?S-w:w,P=S;let R,L,A=D;const O=2*r;return t.textAlign=T?"right":"left",t.textBaseline="middle",T?(A=D-g,R=D-M,L=D-M-y-1):(A=D+g,R=D+M,L=D+M+y),{si:T,ei:C,_i:k,pi:x,ri:g,hi:b,lt:O,li:w,ni:A,ai:D,ui:R,vi:L,ci:m,fi:P,mi:f}}}class U{constructor(t){this.xi={ki:0,R:"#FFF",t:"#000",gi:0,wi:0},this.Ti={ii:"",xt:!1,oi:!0,bi:!1,Ot:"",R:"#FFF",di:!1,yi:!1},this.Di={ii:"",xt:!1,oi:!1,bi:!0,Ot:"",R:"#FFF",di:!0,yi:!0},this.vt=!0,this.Pi=new(t||H)(this.Ti,this.xi),this.Ri=new(t||H)(this.Di,this.xi)}ii(){return this.Li(),this.Ti.ii}ki(){return this.Li(),this.xi.ki}wt(){this.vt=!0}Kt(t,i=!1){return Math.max(this.Pi.Kt(t,i),this.Ri.Kt(t,i))}Ai(){return this.xi.Ci||0}Oi(t){this.xi.Ci=t}Ei(){return this.Li(),this.Ti.xt||this.Di.xt}Bi(){return this.Li(),this.Ti.xt}Mt(t){return this.Li(),this.Ti.oi=this.Ti.oi&&t.F().ticksVisible,this.Di.oi=this.Di.oi&&t.F().ticksVisible,this.Pi.tt(this.Ti,this.xi),this.Ri.tt(this.Di,this.xi),this.Pi}Ii(){return this.Li(),this.Pi.tt(this.Ti,this.xi),this.Ri.tt(this.Di,this.xi),this.Ri}Li(){this.vt&&(this.Ti.oi=!0,this.Di.oi=!1,this.Ni(this.Ti,this.Di,this.xi))}}class q extends U{constructor(t,i,s){super(),this.Ht=t,this.Vi=i,this.Fi=s}Ni(t,i,s){t.xt=!1;const n=this.Ht.F().horzLine;if(!n.labelVisible)return;const e=this.Vi.Tt();if(!this.Ht.xt()||this.Vi.Wi()||null===e)return;const r=v(n.labelBackgroundColor);s.t=r.t,s.R=r.i;const h=2/12*this.Vi.T();s.wi=h,s.gi=h;const l=this.Fi(this.Vi);s.ki=l.ki,t.ii=this.Vi.zi(l.ut,e),t.xt=!0}}const Y=/[1-9]/g;class X{constructor(){this.It=null}tt(t){this.It=t}X(t,i,s){if(null===this.It||!1===this.It.xt||0===this.It.ii.length)return;t.font=i.D;const n=Math.round(i.ji.Si(t,this.It.ii,Y));if(n<=0)return;t.save();const e=i.$i,r=n+2*e,l=r/2,a=this.It.Zt;let o=this.It.ki,_=Math.floor(o-l)+.5;_<0?(o+=Math.abs(0-_),_=Math.floor(o-l)+.5):_+r>a&&(o-=Math.abs(a-(_+r)),_=Math.floor(o-l)+.5);const u=_+r,c=Math.ceil(0+i.k+i.C+i.I+i.T+i.A);t.fillStyle=this.It.t;const d=Math.round(_*s),f=Math.round(0*s),p=Math.round(u*s),v=Math.round(c*s),m=Math.round(2*s);if(t.beginPath(),t.moveTo(d,f),t.lineTo(d,v-m),t.arcTo(d,v,d+m,v,m),t.lineTo(p-m,v),t.arcTo(p,v,p,v-m,m),t.lineTo(p,f),t.fill(),this.It.oi){const n=Math.round(this.It.ki*s),e=f,r=Math.round((e+i.C)*s);t.fillStyle=this.It.R;const h=Math.max(1,Math.floor(s)),l=Math.floor(.5*s);t.fillRect(n-l,e,h,r-e)}const b=0+i.k+i.C+i.I+i.T/2;t.textAlign="left",t.textBaseline="middle",t.fillStyle=this.It.R;const w=i.ji.Mi(t,"Apr0");t.translate((_+e)*s,(b+w)*s),V(t,s,(()=>t.fillText(h(this.It).ii,0,0))),t.restore()}}class Z{constructor(t,i,s){this.vt=!0,this.$t=new X,this.jt={xt:!1,t:"#4c525e",R:"white",ii:"",Zt:0,ki:NaN,oi:!0},this.bt=t,this.Hi=i,this.Fi=s}wt(){this.vt=!0}Mt(){return this.vt&&(this.St(),this.vt=!1),this.$t.tt(this.jt),this.$t}St(){const t=this.jt;t.xt=!1;const i=this.bt.F().vertLine;if(!i.labelVisible)return;const s=this.Hi.kt();if(s.Wi())return;t.Zt=s.Zt();const n=this.Fi();if(!n._t)return;t.ki=n.ki;const e=s.Ui(this.bt.yt());t.ii=s.qi(h(e)),t.xt=!0;const r=v(i.labelBackgroundColor);t.t=r.t,t.R=r.i,t.oi=s.F().ticksVisible}}class K{constructor(){this.Yi=null,this.Xi=0}Zi(){return this.Xi}Ki(t){this.Xi=t}Lt(){return this.Yi}Gi(t){this.Yi=t}Ji(t){return[]}Qi(){return[]}xt(){return!0}}var G;!function(t){t[t.Normal=0]="Normal",t[t.Magnet=1]="Magnet"}(G||(G={}));class J extends K{constructor(t,i){super(),this.ts=null,this.ss=NaN,this.ns=0,this.es=!0,this.rs=new Map,this.hs=!1,this.ls=NaN,this.os=NaN,this._s=NaN,this.us=NaN,this.Hi=t,this.cs=i,this.ds=new E(t,this);this.fs=((t,i)=>s=>{const n=i(),e=t();if(s===h(this.ts).ps())return{ut:e,ki:n};{const t=h(s.Tt());return{ut:s.vs(n,t),ki:n}}})((()=>this.ss),(()=>this.os));const s=((t,i)=>()=>({_t:this.Hi.kt().bs(t()),ki:i()}))((()=>this.ns),(()=>this.Gt()));this.ws=new Z(this,t,s),this.gs=new I(this)}F(){return this.cs}Ms(t,i){this._s=t,this.us=i}Ss(){this._s=NaN,this.us=NaN}ys(){return this._s}ks(){return this.us}Cs(t,i,s){this.hs||(this.hs=!0),this.es=!0,this.xs(t,i,s)}yt(){return this.ns}Gt(){return this.ls}Jt(){return this.os}xt(){return this.es}Ts(){this.es=!1,this.Ds(),this.ss=NaN,this.ls=NaN,this.os=NaN,this.ts=null,this.Ss()}Ps(t){return null!==this.ts?[this.gs,this.ds]:[]}Yt(t){return t===this.ts&&this.cs.horzLine.visible}Xt(){return this.cs.vertLine.visible}Rs(t,i){this.es&&this.ts===t||this.rs.clear();const s=[];return this.ts===t&&s.push(this.Ls(this.rs,i,this.fs)),s}Qi(){return this.es?[this.ws]:[]}Ut(){return this.ts}As(){this.gs.wt(),this.rs.forEach((t=>t.wt())),this.ws.wt(),this.ds.wt()}Os(t){return t&&!t.ps().Wi()?t.ps():null}xs(t,i,s){this.Es(t,i,s)&&this.As()}Es(t,i,s){const n=this.ls,e=this.os,r=this.ss,h=this.ns,l=this.ts,a=this.Os(s);this.ns=t,this.ls=isNaN(t)?NaN:this.Hi.kt().Bt(t),this.ts=s;const o=null!==a?a.Tt():null;return null!==a&&null!==o?(this.ss=i,this.os=a.Rt(i,o)):(this.ss=NaN,this.os=NaN),n!==this.ls||e!==this.os||h!==this.ns||r!==this.ss||l!==this.ts}Ds(){const t=this.Hi.gt().map((t=>t.Is().Bs())).filter(k),i=0===t.length?null:Math.max(...t);this.ns=null!==i?i:NaN}Ls(t,i,s){let n=t.get(i);return void 0===n&&(n=new q(this,i,s),t.set(i,n)),n}}function Q(t){return"left"===t||"right"===t}class tt{constructor(t){this.Ns=new Map,this.Vs=[],this.Fs=t}Ws(t,i){const s=function(t,i){return void 0===t?i:{zs:Math.max(t.zs,i.zs),js:t.js||i.js}}(this.Ns.get(t),i);this.Ns.set(t,s)}$s(){return this.Fs}Hs(t){const i=this.Ns.get(t);return void 0===i?{zs:this.Fs}:{zs:Math.max(this.Fs,i.zs),js:i.js}}Us(){this.qs(),this.Vs=[{Ys:0}]}Xs(t){this.qs(),this.Vs=[{Ys:1,At:t}]}Zs(t){this.Ks(),this.Vs.push({Ys:5,At:t})}qs(){this.Ks(),this.Vs.push({Ys:6})}Gs(){this.qs(),this.Vs=[{Ys:4}]}Js(t){this.qs(),this.Vs.push({Ys:2,At:t})}Qs(t){this.qs(),this.Vs.push({Ys:3,At:t})}tn(){return this.Vs}sn(t){for(const i of t.Vs)this.nn(i);this.Fs=Math.max(this.Fs,t.Fs),t.Ns.forEach(((t,i)=>{this.Ws(i,t)}))}static en(){return new tt(2)}static rn(){return new tt(3)}nn(t){switch(t.Ys){case 0:this.Us();break;case 1:this.Xs(t.At);break;case 2:this.Js(t.At);break;case 3:this.Qs(t.At);break;case 4:this.Gs();break;case 5:this.Zs(t.At);break;case 6:this.Ks()}}Ks(){const t=this.Vs.findIndex((t=>5===t.Ys));-1!==t&&this.Vs.splice(t,1)}}const it=".";function st(t,i){if(!w(t))return"n/a";if(!g(i))throw new TypeError("invalid length");if(i<0||i>16)throw new TypeError("invalid length");if(0===i)return t.toString();return("0000000000000000"+t.toString()).slice(-i)}class nt{constructor(t,i){if(i||(i=1),w(t)&&g(t)||(t=100),t<0)throw new TypeError("invalid base");this.Vi=t,this.hn=i,this.ln()}format(t){const i=t<0?"−":"";return t=Math.abs(t),i+this.an(t)}ln(){if(this.on=0,this.Vi>0&&this.hn>0){let t=this.Vi;for(;t>1;)t/=10,this.on++}}an(t){const i=this.Vi/this.hn;let s=Math.floor(t),n="";const e=void 0!==this.on?this.on:NaN;if(i>1){let r=+(Math.round(t*i)-s*i).toFixed(this.on);r>=i&&(r-=i,s+=1),n=it+st(+r.toFixed(this.on)*this.hn,e)}else s=Math.round(s*i)/i,e>0&&(n=it+st(0,e));return s.toFixed(0)+n}}class et extends nt{constructor(t=100){super(t)}format(t){return`${super.format(t)}%`}}class rt{constructor(t){this._n=t}format(t){let i="";return t<0&&(i="-",t=-t),t<995?i+this.un(t):t<999995?i+this.un(t/1e3)+"K":t<999999995?(t=1e3*Math.round(t/1e3),i+this.un(t/1e6)+"M"):(t=1e6*Math.round(t/1e6),i+this.un(t/1e9)+"B")}un(t){let i;const s=Math.pow(10,this._n);return i=(t=Math.round(t*s)/s)>=1e-15&&t<1?t.toFixed(this._n).replace(/\.?0+$/,""):String(t),i.replace(/(\.[1-9]*)0+$/,((t,i)=>i))}}function ht(t,i,s,n,e,r,h){if(0===i.length||n.from>=i.length)return;const l=i[n.from];let a=r(t,l),o=l;if(n.to-n.from<2){const i=e/2;t.beginPath();const s={nt:l.nt-i,et:l.et},n={nt:l.nt+i,et:l.et};return t.moveTo(s.nt,s.et),t.lineTo(n.nt,n.et),void h(t,a,s,n)}const _=(i,s)=>{h(t,a,o,s),t.beginPath(),a=i,o=s};let u=o;t.beginPath(),t.moveTo(l.nt,l.et);for(let e=n.from+1;e<n.to;++e){u=i[e];const n=r(t,u);switch(s){case 0:t.lineTo(u.nt,u.et);break;case 1:t.lineTo(u.nt,i[e-1].et),n!==a&&(_(n,u),t.lineTo(u.nt,i[e-1].et)),t.lineTo(u.nt,u.et);break;case 2:{const[s,n]=ot(i,e-1,e);t.bezierCurveTo(s.nt,s.et,n.nt,n.et,u.nt,u.et);break}}1!==s&&n!==a&&(_(n,u),t.moveTo(u.nt,u.et))}(o!==u||o===u&&1===s)&&h(t,a,o,u)}function lt(t,i){return{nt:t.nt-i.nt,et:t.et-i.et}}function at(t,i){return{nt:t.nt/i,et:t.et/i}}function ot(t,i,s){const n=Math.max(0,i-1),e=Math.min(t.length-1,s+1);var r,h;return[(r=t[i],h=at(lt(t[s],t[n]),6),{nt:r.nt+h.nt,et:r.et+h.et}),lt(t[s],at(lt(t[e],t[i]),6))]}function _t(t,i,s,n,e){i.lineTo(e.nt,t),i.lineTo(n.nt,t),i.closePath(),i.fillStyle=s,i.fill()}class ut extends R{constructor(){super(...arguments),this.J=null}tt(t){this.J=t}Z(t){if(null===this.J)return;const{st:i,it:n,cn:e,rt:r,zt:h,dn:l,fn:a}=this.J;null!==n&&(t.lineCap="butt",t.lineJoin="round",t.lineWidth=r,s(t,h),t.lineWidth=1,ht(t,i,l,n,e,this.pn.bind(this),_t.bind(null,a)))}}class ct extends ut{constructor(){super(...arguments),this.vn=null}pn(t,i){const s=this.J,{mn:n,bn:e}=i,r=s.wn;if(null!==this.vn&&this.vn.topColor===n&&this.vn.bottomColor===e&&this.vn.bottom===r)return this.vn.fillStyle;const h=t.createLinearGradient(0,0,0,r);return h.addColorStop(0,n),h.addColorStop(1,e),this.vn={topColor:n,bottomColor:e,fillStyle:h,bottom:r},h}}function dt(t,i){t.strokeStyle=i,t.stroke()}class ft extends R{constructor(){super(...arguments),this.J=null}tt(t){this.J=t}Z(t){if(null===this.J)return;const{st:i,it:n,cn:e,dn:r,rt:h,zt:l}=this.J;null!==n&&(t.lineCap="butt",t.lineWidth=h,s(t,l),t.lineJoin="round",ht(t,i,r,n,e,this.gn.bind(this),dt))}}class pt extends ft{gn(t,i){return i.ot}}function vt(t,i,s,n=0,e=t.length){let r=e-n;for(;0<r;){const e=r>>1,h=n+e;s(t[h],i)?(n=h+1,r-=e+1):r=e}return n}function mt(t,i,s,n=0,e=t.length){let r=e-n;for(;0<r;){const e=r>>1,h=n+e;s(i,t[h])?r=e:(n=h+1,r-=e+1)}return n}function bt(t,i){return t._t<i}function wt(t,i){return t<i._t}function gt(t,i,s){const n=i.Mn(),e=i.Sn(),r=vt(t,n,bt),h=mt(t,e,wt);if(!s)return{from:r,to:h};let l=r,a=h;return r>0&&r<t.length&&t[r]._t>=n&&(l=r-1),h>0&&h<t.length&&t[h-1]._t<=e&&(a=h+1),{from:l,to:a}}class Mt{constructor(t,i,s){this.yn=!0,this.kn=!0,this.Cn=!0,this.xn=[],this.Tn=null,this.Dn=t,this.Pn=i,this.Rn=s}wt(t){this.yn=!0,"data"===t&&(this.kn=!0),"options"===t&&(this.Cn=!0)}Mt(t,i){return this.Dn.xt()?(this.Ln(i,t),null===this.Tn?null:this.An):null}On(){this.xn=this.xn.map((t=>Object.assign(Object.assign({},t),this.Dn.Bn().En(t._t))))}In(){this.Tn=null}Ln(t,i){this.kn&&(this.Nn(),this.kn=!1),this.Cn&&(this.On(),this.Cn=!1),this.yn&&(this.Vn(t,i),this.yn=!1)}Vn(t,i){const s=this.Dn.Lt(),n=this.Pn.kt();if(this.In(),n.Wi()||s.Wi())return;const e=n.Fn();if(null===e)return;if(0===this.Dn.Is().Wn())return;const r=this.Dn.Tt();null!==r&&(this.Tn=gt(this.xn,e,this.Rn),this.zn(s,n,r.At),this.jn(t,i))}}class St extends Mt{constructor(t,i){super(t,i,!0)}zn(t,i,s){i.$n(this.xn,C(this.Tn)),t.Hn(this.xn,s,C(this.Tn))}Un(t,i){return{_t:t,ut:i,nt:NaN,et:NaN}}Nn(){const t=this.Dn.Bn();this.xn=this.Dn.Is().qn().map((i=>{const s=i.At[3];return this.Yn(i.Xn,s,t)}))}}class yt extends St{constructor(t,i){super(t,i),this.An=new P,this.Zn=new ct,this.Kn=new pt,this.An.Y([this.Zn,this.Kn])}Yn(t,i,s){return Object.assign(Object.assign({},this.Un(t,i)),s.En(t))}jn(t,i){const s=this.Dn.F(),n=s.invertFilledArea?0:i;this.Zn.tt({dn:s.lineType,st:this.xn,zt:s.lineStyle,rt:s.lineWidth,fn:n,wn:i,it:this.Tn,cn:this.Pn.kt().Gn()}),this.Kn.tt({dn:s.lineType,st:this.xn,zt:s.lineStyle,rt:s.lineWidth,it:this.Tn,cn:this.Pn.kt().Gn()})}}class kt{constructor(){this.It=null,this.Jn=0,this.Qn=0}tt(t){this.It=t}X(t,i,s,n){if(null===this.It||0===this.It.Is.length||null===this.It.it)return;if(this.Jn=this.te(i),this.Jn>=2){Math.max(1,Math.floor(i))%2!=this.Jn%2&&this.Jn--}this.Qn=this.It.ie?Math.min(this.Jn,Math.floor(i)):this.Jn;let e=null;const r=this.Qn<=this.Jn&&this.It.Gn>=Math.floor(1.5*i);for(let s=this.It.it.from;s<this.It.it.to;++s){const n=this.It.Is[s];e!==n.se&&(t.fillStyle=n.se,e=n.se);const h=Math.floor(.5*this.Qn),l=Math.round(n.nt*i),a=l-h,o=this.Qn,_=a+o-1,u=Math.min(n.ne,n.ee),c=Math.max(n.ne,n.ee),d=Math.round(u*i)-h,f=Math.round(c*i)+h,p=Math.max(f-d,this.Qn);t.fillRect(a,d,o,p);const v=Math.ceil(1.5*this.Jn);if(r){if(this.It.re){const s=l-v;let e=Math.max(d,Math.round(n.he*i)-h),r=e+o-1;r>d+p-1&&(r=d+p-1,e=r-o+1),t.fillRect(s,e,a-s,r-e+1)}const s=l+v;let e=Math.max(d,Math.round(n.le*i)-h),r=e+o-1;r>d+p-1&&(r=d+p-1,e=r-o+1),t.fillRect(_+1,e,s-_,r-e+1)}}}te(t){const i=Math.floor(t);return Math.max(i,Math.floor(function(t,i){return Math.floor(.3*t*i)}(h(this.It).Gn,t)))}}class Ct extends Mt{constructor(t,i){super(t,i,!1)}zn(t,i,s){i.$n(this.xn,C(this.Tn)),t.ae(this.xn,s,C(this.Tn))}oe(t,i,s){return{_t:t,_e:i.At[0],ue:i.At[1],ce:i.At[2],de:i.At[3],nt:NaN,he:NaN,ne:NaN,ee:NaN,le:NaN}}Nn(){const t=this.Dn.Bn();this.xn=this.Dn.Is().qn().map((i=>this.Yn(i.Xn,i,t)))}}class xt extends Ct{constructor(){super(...arguments),this.An=new kt}Yn(t,i,s){return Object.assign(Object.assign({},this.oe(t,i,s)),s.En(t))}jn(){const t=this.Dn.F();this.An.tt({Is:this.xn,Gn:this.Pn.kt().Gn(),re:t.openVisible,ie:t.thinBars,it:this.Tn})}}function Tt(t,i,s){return Math.min(Math.max(t,i),s)}function Dt(t,i,s){return i-t<=s}function Pt(t){return t<=0?NaN:Math.log(t)/Math.log(10)}function Rt(t){const i=Math.ceil(t);return i%2==0?i-1:i}class Lt extends ut{constructor(){super(...arguments),this.vn=null}pn(t,i){const s=this.J,{fe:n,pe:e,ve:r,me:h}=i,{fn:l,wn:a}=s;if(null!==this.vn&&this.vn.topFillColor1===n&&this.vn.topFillColor2===e&&this.vn.bottomFillColor1===r&&this.vn.bottomFillColor2===h&&this.vn.baseLevelCoordinate===l&&this.vn.bottom===a)return this.vn.fillStyle;const o=t.createLinearGradient(0,0,0,a),_=Tt(l/a,0,1);return o.addColorStop(0,n),o.addColorStop(_,e),o.addColorStop(_,r),o.addColorStop(1,h),this.vn={topFillColor1:n,topFillColor2:e,bottomFillColor1:r,bottomFillColor2:h,fillStyle:o,baseLevelCoordinate:l,bottom:a},o}}class At extends ft{constructor(){super(...arguments),this.be=null}gn(t,i){const s=this.J,{we:n,ge:e}=i,{fn:r,wn:h}=s;if(null!==this.be&&this.be.topLineColor===n&&this.be.bottomLineColor===e&&this.be.baseLevelCoordinate===r&&this.be.bottom===h)return this.be.strokeStyle;const l=t.createLinearGradient(0,0,0,h),a=Tt(r/h,0,1);return l.addColorStop(0,n),l.addColorStop(a,n),l.addColorStop(a,e),l.addColorStop(1,e),this.be={topLineColor:n,bottomLineColor:e,strokeStyle:l,baseLevelCoordinate:r,bottom:h},l}}class Ot extends St{constructor(t,i){super(t,i),this.An=new P,this.Me=new Lt,this.Se=new At,this.An.Y([this.Me,this.Se])}Yn(t,i,s){return Object.assign(Object.assign({},this.Un(t,i)),s.En(t))}jn(t,i){const s=this.Dn.Tt();if(null===s)return;const n=this.Dn.F(),e=this.Dn.Lt().Rt(n.baseValue.price,s.At),r=this.Pn.kt().Gn();this.Me.tt({st:this.xn,rt:n.lineWidth,zt:n.lineStyle,dn:n.lineType,fn:e,wn:i,it:this.Tn,cn:r}),this.Se.tt({st:this.xn,rt:n.lineWidth,zt:n.lineStyle,dn:n.lineType,fn:e,wn:i,it:this.Tn,cn:r})}}class Et{constructor(){this.It=null,this.Jn=0}tt(t){this.It=t}X(t,i,s,n){if(null===this.It||0===this.It.Is.length||null===this.It.it)return;if(this.Jn=function(t,i){if(t>=2.5&&t<=4)return Math.floor(3*i);const s=1-.2*Math.atan(Math.max(4,t)-4)/(.5*Math.PI),n=Math.floor(t*s*i),e=Math.floor(t*i),r=Math.min(n,e);return Math.max(Math.floor(i),r)}(this.It.Gn,i),this.Jn>=2){Math.floor(i)%2!=this.Jn%2&&this.Jn--}const e=this.It.Is;this.It.ye&&this.ke(t,e,this.It.it,i),this.It.di&&this.Ce(t,e,this.It.it,this.It.Gn,i);const r=this.xe(i);(!this.It.di||this.Jn>2*r)&&this.Te(t,e,this.It.it,i)}ke(t,i,s,n){if(null===this.It)return;let e="",r=Math.min(Math.floor(n),Math.floor(this.It.Gn*n));r=Math.max(Math.floor(n),Math.min(r,this.Jn));const h=Math.floor(.5*r);let l=null;for(let a=s.from;a<s.to;a++){const s=i[a];s.De!==e&&(t.fillStyle=s.De,e=s.De);const o=Math.round(Math.min(s.he,s.le)*n),_=Math.round(Math.max(s.he,s.le)*n),u=Math.round(s.ne*n),c=Math.round(s.ee*n);let d=Math.round(n*s.nt)-h;const f=d+r-1;null!==l&&(d=Math.max(l+1,d),d=Math.min(d,f));const p=f-d+1;t.fillRect(d,u,p,o-u),t.fillRect(d,_+1,p,c-_),l=f}}xe(t){let i=Math.floor(1*t);this.Jn<=2*i&&(i=Math.floor(.5*(this.Jn-1)));const s=Math.max(Math.floor(t),i);return this.Jn<=2*s?Math.max(Math.floor(t),Math.floor(1*t)):s}Ce(t,i,s,n,e){if(null===this.It)return;let r="";const h=this.xe(e);let l=null;for(let n=s.from;n<s.to;n++){const s=i[n];s.Pe!==r&&(t.fillStyle=s.Pe,r=s.Pe);let a=Math.round(s.nt*e)-Math.floor(.5*this.Jn);const o=a+this.Jn-1,_=Math.round(Math.min(s.he,s.le)*e),u=Math.round(Math.max(s.he,s.le)*e);if(null!==l&&(a=Math.max(l+1,a),a=Math.min(a,o)),this.It.Gn*e>2*h)N(t,a,_,o-a+1,u-_+1,h);else{const i=o-a+1;t.fillRect(a,_,i,u-_+1)}l=o}}Te(t,i,s,n){if(null===this.It)return;let e="";const r=this.xe(n);for(let h=s.from;h<s.to;h++){const s=i[h];let l=Math.round(Math.min(s.he,s.le)*n),a=Math.round(Math.max(s.he,s.le)*n),o=Math.round(s.nt*n)-Math.floor(.5*this.Jn),_=o+this.Jn-1;if(s.se!==e){const i=s.se;t.fillStyle=i,e=i}this.It.di&&(o+=r,l+=r,_-=r,a-=r),l>a||t.fillRect(o,l,_-o+1,a-l+1)}}}class Bt extends Ct{constructor(){super(...arguments),this.An=new Et}Yn(t,i,s){return Object.assign(Object.assign({},this.oe(t,i,s)),s.En(t))}jn(){const t=this.Dn.F();this.An.tt({Is:this.xn,Gn:this.Pn.kt().Gn(),ye:t.wickVisible,di:t.borderVisible,it:this.Tn})}}class It{constructor(){this.It=null,this.Re=[]}tt(t){this.It=t,this.Re=[]}X(t,i,s,n){if(null===this.It||0===this.It.st.length||null===this.It.it)return;this.Re.length||this.Le(i);const e=Math.max(1,Math.floor(i)),r=Math.round(this.It.Ae*i)-Math.floor(e/2),h=r+e;for(let s=this.It.it.from;s<this.It.it.to;s++){const n=this.It.st[s],l=this.Re[s-this.It.it.from],a=Math.round(n.et*i);let o,_;t.fillStyle=n.se,a<=r?(o=a,_=h):(o=r,_=a-Math.floor(e/2)+e),t.fillRect(l.Mn,o,l.Sn-l.Mn+1,_-o)}}Le(t){if(null===this.It||0===this.It.st.length||null===this.It.it)return void(this.Re=[]);const i=Math.ceil(this.It.Gn*t)<=1?0:Math.max(1,Math.floor(t)),s=Math.round(this.It.Gn*t)-i;this.Re=new Array(this.It.it.to-this.It.it.from);for(let i=this.It.it.from;i<this.It.it.to;i++){const n=this.It.st[i],e=Math.round(n.nt*t);let r,h;if(s%2){const t=(s-1)/2;r=e-t,h=e+t}else{const t=s/2;r=e-t,h=e+t-1}this.Re[i-this.It.it.from]={Mn:r,Sn:h,Oe:e,Ee:n.nt*t,_t:n._t}}for(let t=this.It.it.from+1;t<this.It.it.to;t++){const s=this.Re[t-this.It.it.from],n=this.Re[t-this.It.it.from-1];s._t===n._t+1&&(s.Mn-n.Sn!==i+1&&(n.Oe>n.Ee?n.Sn=s.Mn-i-1:s.Mn=n.Sn+i+1))}let n=Math.ceil(this.It.Gn*t);for(let t=this.It.it.from;t<this.It.it.to;t++){const i=this.Re[t-this.It.it.from];i.Sn<i.Mn&&(i.Sn=i.Mn);const s=i.Sn-i.Mn+1;n=Math.min(s,n)}if(i>0&&n<4)for(let t=this.It.it.from;t<this.It.it.to;t++){const i=this.Re[t-this.It.it.from];i.Sn-i.Mn+1>n&&(i.Oe>i.Ee?i.Sn-=1:i.Mn+=1)}}}class Nt extends St{constructor(){super(...arguments),this.An=new It}Yn(t,i,s){return Object.assign(Object.assign({},this.Un(t,i)),s.En(t))}jn(){const t={st:this.xn,Gn:this.Pn.kt().Gn(),it:this.Tn,Ae:this.Dn.Lt().Rt(this.Dn.F().base,h(this.Dn.Tt()).At)};this.An.tt(t)}}class Vt extends St{constructor(){super(...arguments),this.An=new pt}Yn(t,i,s){return Object.assign(Object.assign({},this.Un(t,i)),s.En(t))}jn(){const t=this.Dn.F(),i={st:this.xn,zt:t.lineStyle,dn:t.lineType,rt:t.lineWidth,it:this.Tn,cn:this.Pn.kt().Gn()};this.An.tt(i)}}const Ft=/[2-9]/g;class Wt{constructor(t=50){this.Be=0,this.Ie=1,this.Ne=1,this.Ve={},this.Fe=new Map,this.We=t}ze(){this.Be=0,this.Fe.clear(),this.Ie=1,this.Ne=1,this.Ve={}}Si(t,i,s){return this.je(t,i,s).width}Mi(t,i,s){const n=this.je(t,i,s);return((n.actualBoundingBoxAscent||0)-(n.actualBoundingBoxDescent||0))/2}je(t,i,s){const n=s||Ft,e=String(i).replace(n,"0");if(this.Fe.has(e))return r(this.Fe.get(e)).$e;if(this.Be===this.We){const t=this.Ve[this.Ne];delete this.Ve[this.Ne],this.Fe.delete(t),this.Ne++,this.Be--}t.save(),t.textBaseline="middle";const h=t.measureText(e);return t.restore(),0===h.width&&i.length||(this.Fe.set(e,{$e:h,He:this.Ie}),this.Ve[this.Ie]=e,this.Be++,this.Ie++),h}}class zt{constructor(t){this.Ue=null,this.S=null,this.qe="right",this.Ye=0,this.Xe=t}Ze(t,i,s,n){this.Ue=t,this.S=i,this.Ye=s,this.qe=n}X(t,i){null!==this.S&&null!==this.Ue&&this.Ue.X(t,this.S,this.Xe,this.Ye,this.qe,i)}}class jt{constructor(t,i,s){this.Ke=t,this.Xe=new Wt(50),this.Ge=i,this.V=s,this.W=-1,this.$t=new zt(this.Xe)}Mt(t,i){const s=this.V.Je(this.Ge);if(null===s)return null;const n=s.Qe(this.Ge)?s.tr():this.Ge.Lt();if(null===n)return null;const e=s.ir(n);if("overlay"===e)return null;const r=this.V.sr();return r.T!==this.W&&(this.W=r.T,this.Xe.ze()),this.$t.Ze(this.Ke.Ii(),r,i,e),this.$t}}class $t{constructor(){this.It=null}tt(t){this.It=t}X(t,i,e,r){if(null===this.It)return;if(!1===this.It.xt)return;const h=Math.round(this.It.et*i);if(h<0||h>Math.ceil(this.It.Kt*i))return;const l=Math.ceil(this.It.Zt*i);t.lineCap="butt",t.strokeStyle=this.It.R,t.lineWidth=Math.floor(this.It.rt*i),s(t,this.It.zt),n(t,h,0,l)}}class Ht{constructor(t){this.nr={Zt:0,Kt:0,et:0,R:"rgba(0, 0, 0, 0)",rt:1,zt:0,xt:!1},this.er=new $t,this.vt=!0,this.Dn=t,this.Pn=t.qt(),this.er.tt(this.nr)}wt(){this.vt=!0}Mt(t,i){return this.Dn.xt()?(this.vt&&(this.rr(t,i),this.vt=!1),this.er):null}}class Ut extends Ht{constructor(t){super(t)}rr(t,i){this.nr.xt=!1;const s=this.Dn.Lt(),n=s.hr().hr;if(2!==n&&3!==n)return;const e=this.Dn.F();if(!e.baseLineVisible||!this.Dn.xt())return;const r=this.Dn.Tt();null!==r&&(this.nr.xt=!0,this.nr.et=s.Rt(r.At,r.At),this.nr.Zt=i,this.nr.Kt=t,this.nr.R=e.baseLineColor,this.nr.rt=e.baseLineWidth,this.nr.zt=e.baseLineStyle)}}class qt{constructor(){this.It=null}tt(t){this.It=t}lr(){return this.It}X(t,i,s,n){const e=this.It;if(null===e)return;t.save();const r=Math.max(1,Math.floor(i)),h=r%2/2,l=Math.round(e.Ee.x*i)+h,a=e.Ee.y*i;t.fillStyle=e.ar,t.beginPath();const o=Math.max(2,1.5*e._r)*i;t.arc(l,a,o,0,2*Math.PI,!1),t.fill(),t.fillStyle=e.ur,t.beginPath(),t.arc(l,a,e.lt*i,0,2*Math.PI,!1),t.fill(),t.lineWidth=r,t.strokeStyle=e.cr,t.beginPath(),t.arc(l,a,e.lt*i+r/2,0,2*Math.PI,!1),t.stroke(),t.restore()}}const Yt=[{dr:0,pr:.25,vr:4,mr:10,br:.25,wr:0,gr:.4,Mr:.8},{dr:.25,pr:.525,vr:10,mr:14,br:0,wr:0,gr:.8,Mr:0},{dr:.525,pr:1,vr:14,mr:14,br:0,wr:0,gr:0,Mr:0}];function Xt(t,i,s,n){return function(t,i){if("transparent"===t)return t;const s=p(t),n=s[3];return`rgba(${s[0]}, ${s[1]}, ${s[2]}, ${i*n})`}(t,s+(n-s)*i)}function Zt(t,i){const s=t%2600/2600;let n;for(const t of Yt)if(s>=t.dr&&s<=t.pr){n=t;break}e(void 0!==n,"Last price animation internal logic error");const r=(s-n.dr)/(n.pr-n.dr);return{ur:Xt(i,r,n.br,n.wr),cr:Xt(i,r,n.gr,n.Mr),lt:(h=r,l=n.vr,a=n.mr,l+(a-l)*h)};var h,l,a}class Kt{constructor(t){this.$t=new qt,this.vt=!0,this.Sr=!0,this.yr=performance.now(),this.kr=this.yr-1,this.Cr=t}Tr(){this.kr=this.yr-1,this.wt()}Dr(){if(this.wt(),2===this.Cr.F().lastPriceAnimation){const t=performance.now(),i=this.kr-t;if(i>0)return void(i<650&&(this.kr+=2600));this.yr=t,this.kr=t+2600}}wt(){this.vt=!0}Pr(){this.Sr=!0}xt(){return 0!==this.Cr.F().lastPriceAnimation}Rr(){switch(this.Cr.F().lastPriceAnimation){case 0:return!1;case 1:return!0;case 2:return performance.now()<=this.kr}}Mt(t,i){return this.vt?(this.St(t,i),this.vt=!1,this.Sr=!1):this.Sr&&(this.Lr(),this.Sr=!1),this.$t}St(t,i){this.$t.tt(null);const s=this.Cr.qt().kt(),n=s.Fn(),e=this.Cr.Tt();if(null===n||null===e)return;const r=this.Cr.Ar(!0);if(r.Or||!n.Er(r.Xn))return;const h={x:s.Bt(r.Xn),y:this.Cr.Lt().Rt(r.ut,e.At)},l=r.R,a=this.Cr.F().lineWidth,o=Zt(this.Br(),l);this.$t.tt({ar:l,_r:a,ur:o.ur,cr:o.cr,lt:o.lt,Ee:h})}Lr(){const t=this.$t.lr();if(null!==t){const i=Zt(this.Br(),t.ar);t.ur=i.ur,t.cr=i.cr,t.lt=i.lt}}Br(){return this.Rr()?performance.now()-this.yr:2599}}function Gt(t,i){return Rt(Math.min(Math.max(t,12),30)*i)}function Jt(t,i){switch(t){case"arrowDown":case"arrowUp":return Gt(i,1);case"circle":return Gt(i,.8);case"square":return Gt(i,.7)}}function Qt(t){return function(t){const i=Math.ceil(t);return i%2!=0?i-1:i}(Gt(t,1))}function ti(t){return Math.max(Gt(t,.1),3)}function ii(t,i,s,n,e){const r=Jt("square",s),h=(r-1)/2,l=t-h,a=i-h;return n>=l&&n<=l+r&&e>=a&&e<=a+r}function si(t,i,s,n,e){const r=(Jt("arrowUp",e)-1)/2,h=(Rt(e/2)-1)/2;i.beginPath(),t?(i.moveTo(s-r,n),i.lineTo(s,n-r),i.lineTo(s+r,n),i.lineTo(s+h,n),i.lineTo(s+h,n+r),i.lineTo(s-h,n+r),i.lineTo(s-h,n)):(i.moveTo(s-r,n),i.lineTo(s,n+r),i.lineTo(s+r,n),i.lineTo(s+h,n),i.lineTo(s+h,n-r),i.lineTo(s-h,n-r),i.lineTo(s-h,n)),i.fill()}function ni(t,i,s,n,e,r){return ii(i,s,n,e,r)}class ei extends R{constructor(){super(...arguments),this.It=null,this.Xe=new Wt,this.W=-1,this.j="",this.Ir=""}tt(t){this.It=t}Ze(t,i){this.W===t&&this.j===i||(this.W=t,this.j=i,this.Ir=T(t,i),this.Xe.ze())}Nr(t,i){if(null===this.It||null===this.It.it)return null;for(let s=this.It.it.from;s<this.It.it.to;s++){const n=this.It.st[s];if(hi(n,t,i))return{Vr:n.Fr,Wr:n.Wr}}return null}Z(t,i,s){if(null!==this.It&&null!==this.It.it){t.textBaseline="middle",t.font=this.Ir;for(let i=this.It.it.from;i<this.It.it.to;i++){const s=this.It.st[i];void 0!==s.ii&&(s.ii.Zt=this.Xe.Si(t,s.ii.zr),s.ii.Kt=this.W),ri(s,t)}}}}function ri(t,i){i.fillStyle=t.R,void 0!==t.ii&&function(t,i,s,n){t.fillText(i,s,n)}(i,t.ii.zr,t.nt-t.ii.Zt/2,t.ii.et),function(t,i){if(0===t.Wn)return;switch(t.jr){case"arrowDown":return void si(!1,i,t.nt,t.et,t.Wn);case"arrowUp":return void si(!0,i,t.nt,t.et,t.Wn);case"circle":return void function(t,i,s,n){const e=(Jt("circle",n)-1)/2;t.beginPath(),t.arc(i,s,e,0,2*Math.PI,!1),t.fill()}(i,t.nt,t.et,t.Wn);case"square":return void function(t,i,s,n){const e=Jt("square",n),r=(e-1)/2,h=i-r,l=s-r;t.fillRect(h,l,e,e)}(i,t.nt,t.et,t.Wn)}t.jr}(t,i)}function hi(t,i,s){return!(void 0===t.ii||!function(t,i,s,n,e,r){const h=n/2;return e>=t&&e<=t+s&&r>=i-h&&r<=i+h}(t.nt,t.ii.et,t.ii.Zt,t.ii.Kt,i,s))||function(t,i,s){if(0===t.Wn)return!1;switch(t.jr){case"arrowDown":case"arrowUp":return ni(0,t.nt,t.et,t.Wn,i,s);case"circle":return function(t,i,s,n,e){const r=2+Jt("circle",s)/2,h=t-n,l=i-e;return Math.sqrt(h*h+l*l)<=r}(t.nt,t.et,t.Wn,i,s);case"square":return ii(t.nt,t.et,t.Wn,i,s)}}(t,i,s)}function li(t,i,s,n,e,r,h,l,a){const o=w(s)?s:s.de,_=w(s)?s:s.ue,u=w(s)?s:s.ce,c=w(i.size)?Math.max(i.size,0):1,d=Qt(l.Gn())*c,f=d/2;switch(t.Wn=d,i.position){case"inBar":return t.et=h.Rt(o,a),void(void 0!==t.ii&&(t.ii.et=t.et+f+r+.6*e));case"aboveBar":return t.et=h.Rt(_,a)-f-n.$r,void 0!==t.ii&&(t.ii.et=t.et-f-.6*e,n.$r+=1.2*e),void(n.$r+=d+r);case"belowBar":return t.et=h.Rt(u,a)+f+n.Hr,void 0!==t.ii&&(t.ii.et=t.et+f+r+.6*e,n.Hr+=1.2*e),void(n.Hr+=d+r)}i.position}class ai{constructor(t,i){this.vt=!0,this.Ur=!0,this.qr=!0,this.Yr=null,this.$t=new ei,this.Cr=t,this.Hi=i,this.It={st:[],it:null}}wt(t){this.vt=!0,this.qr=!0,"data"===t&&(this.Ur=!0)}Mt(t,i,s){if(!this.Cr.xt())return null;this.vt&&this.Xr();const n=this.Hi.F().layout;return this.$t.Ze(n.fontSize,n.fontFamily),this.$t.tt(this.It),this.$t}Zr(){if(this.qr){if(this.Cr.Kr().length>0){const t=this.Hi.kt().Gn(),i=ti(t),s=1.5*Qt(t)+2*i;this.Yr={above:s,below:s}}else this.Yr=null;this.qr=!1}return this.Yr}Xr(){const t=this.Cr.Lt(),i=this.Hi.kt(),s=this.Cr.Kr();this.Ur&&(this.It.st=s.map((t=>({_t:t.time,nt:0,et:0,Wn:0,jr:t.shape,R:t.color,Fr:t.internalId,Wr:t.id,ii:void 0}))),this.Ur=!1);const n=this.Hi.F().layout;this.It.it=null;const e=i.Fn();if(null===e)return;const r=this.Cr.Tt();if(null===r)return;if(0===this.It.st.length)return;let h=NaN;const l=ti(i.Gn()),a={$r:l,Hr:l};this.It.it=gt(this.It.st,e,!0);for(let e=this.It.it.from;e<this.It.it.to;e++){const o=s[e];o.time!==h&&(a.$r=l,a.Hr=l,h=o.time);const _=this.It.st[e];_.nt=i.Bt(o.time),void 0!==o.text&&o.text.length>0&&(_.ii={zr:o.text,et:0,Zt:0,Kt:0});const u=this.Cr.Gr(o.time);null!==u&&li(_,o,u,a,n.fontSize,l,t,i,r.At)}this.vt=!1}}class oi extends Ht{constructor(t){super(t)}rr(t,i){const s=this.nr;s.xt=!1;const n=this.Dn.F();if(!n.priceLineVisible||!this.Dn.xt())return;const e=this.Dn.Ar(0===n.priceLineSource);e.Or||(s.xt=!0,s.et=e.ki,s.R=this.Dn.Jr(e.R),s.Zt=i,s.Kt=t,s.rt=n.priceLineWidth,s.zt=n.priceLineStyle)}}class _i extends U{constructor(t){super(),this.Ht=t}Ni(t,i,s){t.xt=!1,i.xt=!1;const n=this.Ht;if(!n.xt())return;const e=n.F(),r=e.lastValueVisible,h=""!==n.Qr(),l=0===e.seriesLastValueMode,a=n.Ar(!1);if(a.Or)return;r&&(t.ii=this.th(a,r,l),t.xt=0!==t.ii.length),(h||l)&&(i.ii=this.ih(a,r,h,l),i.xt=i.ii.length>0);const o=n.Jr(a.R),_=v(o);s.t=_.t,s.R=_.i,s.ki=a.ki,i.Ot=n.qt().Et(a.ki/n.Lt().Kt()),t.Ot=o,t.R=s.R,i.R=s.R}ih(t,i,s,n){let e="";const r=this.Ht.Qr();return s&&0!==r.length&&(e+=`${r} `),i&&n&&(e+=this.Ht.Lt().sh()?t.nh:t.eh),e.trim()}th(t,i,s){return i?s?this.Ht.Lt().sh()?t.eh:t.nh:t.ii:""}}class ui{constructor(t,i){this.rh=t,this.hh=i}lh(t){return null!==t&&(this.rh===t.rh&&this.hh===t.hh)}ah(){return new ui(this.rh,this.hh)}oh(){return this.rh}_h(){return this.hh}uh(){return this.hh-this.rh}Wi(){return this.hh===this.rh||Number.isNaN(this.hh)||Number.isNaN(this.rh)}sn(t){return null===t?this:new ui(Math.min(this.oh(),t.oh()),Math.max(this._h(),t._h()))}dh(t){if(!w(t))return;if(0===this.hh-this.rh)return;const i=.5*(this.hh+this.rh);let s=this.hh-i,n=this.rh-i;s*=t,n*=t,this.hh=i+s,this.rh=i+n}fh(t){w(t)&&(this.hh+=t,this.rh+=t)}ph(){return{minValue:this.rh,maxValue:this.hh}}static mh(t){return null===t?null:new ui(t.minValue,t.maxValue)}}class ci{constructor(t,i){this.bh=t,this.wh=i||null}gh(){return this.bh}Mh(){return this.wh}ph(){return null===this.bh?null:{priceRange:this.bh.ph(),margins:this.wh||void 0}}static mh(t){return null===t?null:new ci(ui.mh(t.priceRange),t.margins)}}class di extends Ht{constructor(t,i){super(t),this.Sh=i}rr(t,i){const s=this.nr;s.xt=!1;const n=this.Sh.F();if(!this.Dn.xt()||!n.lineVisible)return;const e=this.Sh.yh();null!==e&&(s.xt=!0,s.et=e,s.R=n.color,s.Zt=i,s.Kt=t,s.rt=n.lineWidth,s.zt=n.lineStyle)}}class fi extends U{constructor(t,i){super(),this.Cr=t,this.Sh=i}Ni(t,i,s){t.xt=!1,i.xt=!1;const n=this.Sh.F(),e=n.axisLabelVisible,r=""!==n.title,h=this.Cr;if(!e||!h.xt())return;const l=this.Sh.yh();if(null===l)return;r&&(i.ii=n.title,i.xt=!0),i.Ot=h.qt().Et(l/h.Lt().Kt()),t.ii=this.kh(n.price),t.xt=!0;const a=v(n.color);s.t=a.t,s.R=a.i,s.ki=l}kh(t){const i=this.Cr.Tt();return null===i?"":this.Cr.Lt().zi(t,i.At)}}class pi{constructor(t,i){this.Cr=t,this.cs=i,this.Ch=new di(t,this),this.Ke=new fi(t,this),this.xh=new jt(this.Ke,t,t.qt())}Th(t){b(this.cs,t),this.wt(),this.Cr.qt().Dh()}F(){return this.cs}Ph(){return this.Ch}Rh(){return this.xh}Lh(){return this.Ke}wt(){this.Ch.wt(),this.Ke.wt()}yh(){const t=this.Cr,i=t.Lt();if(t.qt().kt().Wi()||i.Wi())return null;const s=t.Tt();return null===s?null:i.Rt(this.cs.price,s.At)}}class vi extends K{constructor(t){super(),this.Hi=t}qt(){return this.Hi}}const mi={Bar:(t,i,s,n)=>{var e;const r=i.upColor,a=i.downColor,o=h(t(s,n)),_=l(o.At[0])<=l(o.At[3]);return{se:null!==(e=o.R)&&void 0!==e?e:_?r:a}},Candlestick:(t,i,s,n)=>{var e,r,a;const o=i.upColor,_=i.downColor,u=i.borderUpColor,c=i.borderDownColor,d=i.wickUpColor,f=i.wickDownColor,p=h(t(s,n)),v=l(p.At[0])<=l(p.At[3]);return{se:null!==(e=p.R)&&void 0!==e?e:v?o:_,Pe:null!==(r=p.Ot)&&void 0!==r?r:v?u:c,De:null!==(a=p.Ah)&&void 0!==a?a:v?d:f}},Area:(t,i,s,n)=>{var e,r,l,a;const o=h(t(s,n));return{se:null!==(e=o.ot)&&void 0!==e?e:i.lineColor,ot:null!==(r=o.ot)&&void 0!==r?r:i.lineColor,mn:null!==(l=o.mn)&&void 0!==l?l:i.topColor,bn:null!==(a=o.bn)&&void 0!==a?a:i.bottomColor}},Baseline:(t,i,s,n)=>{var e,r,l,a,o,_;const u=h(t(s,n));return{se:u.At[3]>=i.baseValue.price?i.topLineColor:i.bottomLineColor,we:null!==(e=u.we)&&void 0!==e?e:i.topLineColor,ge:null!==(r=u.ge)&&void 0!==r?r:i.bottomLineColor,fe:null!==(l=u.fe)&&void 0!==l?l:i.topFillColor1,pe:null!==(a=u.pe)&&void 0!==a?a:i.topFillColor2,ve:null!==(o=u.ve)&&void 0!==o?o:i.bottomFillColor1,me:null!==(_=u.me)&&void 0!==_?_:i.bottomFillColor2}},Line:(t,i,s,n)=>{var e,r;const l=h(t(s,n));return{se:null!==(e=l.R)&&void 0!==e?e:i.color,ot:null!==(r=l.R)&&void 0!==r?r:i.color}},Histogram:(t,i,s,n)=>{var e;return{se:null!==(e=h(t(s,n)).R)&&void 0!==e?e:i.color}}};class bi{constructor(t){this.Oh=(t,i)=>void 0!==i?i.At:this.Cr.Is().Eh(t),this.Cr=t,this.Bh=mi[t.Ih()]}En(t,i){return this.Bh(this.Oh,this.Cr.F(),t,i)}}var wi;!function(t){t[t.NearestLeft=-1]="NearestLeft",t[t.None=0]="None",t[t.NearestRight=1]="NearestRight"}(wi||(wi={}));const gi=30;class Mi{constructor(){this.Nh=[],this.Vh=new Map,this.Fh=new Map}Wh(){return this.Wn()>0?this.Nh[this.Nh.length-1]:null}zh(){return this.Wn()>0?this.jh(0):null}Bs(){return this.Wn()>0?this.jh(this.Nh.length-1):null}Wn(){return this.Nh.length}Wi(){return 0===this.Wn()}Er(t){return null!==this.$h(t,0)}Eh(t){return this.Hh(t)}Hh(t,i=0){const s=this.$h(t,i);return null===s?null:Object.assign(Object.assign({},this.Uh(s)),{Xn:this.jh(s)})}qn(){return this.Nh}qh(t,i,s){if(this.Wi())return null;let n=null;for(const e of s){n=Si(n,this.Yh(t,i,e))}return n}tt(t){this.Fh.clear(),this.Vh.clear(),this.Nh=t}jh(t){return this.Nh[t].Xn}Uh(t){return this.Nh[t]}$h(t,i){const s=this.Xh(t);if(null===s&&0!==i)switch(i){case-1:return this.Zh(t);case 1:return this.Kh(t);default:throw new TypeError("Unknown search mode")}return s}Zh(t){let i=this.Gh(t);return i>0&&(i-=1),i!==this.Nh.length&&this.jh(i)<t?i:null}Kh(t){const i=this.Jh(t);return i!==this.Nh.length&&t<this.jh(i)?i:null}Xh(t){const i=this.Gh(t);return i===this.Nh.length||t<this.Nh[i].Xn?null:i}Gh(t){return vt(this.Nh,t,((t,i)=>t.Xn<i))}Jh(t){return mt(this.Nh,t,((t,i)=>i.Xn>t))}Qh(t,i,s){let n=null;for(let e=t;e<i;e++){const t=this.Nh[e].At[s];Number.isNaN(t)||(null===n?n={tl:t,il:t}:(t<n.tl&&(n.tl=t),t>n.il&&(n.il=t)))}return n}Yh(t,i,s){if(this.Wi())return null;let n=null;const e=h(this.zh()),r=h(this.Bs()),l=Math.max(t,e),a=Math.min(i,r),o=Math.ceil(l/gi)*gi,_=Math.max(o,Math.floor(a/gi)*gi);{const t=this.Gh(l),e=this.Jh(Math.min(a,o,i));n=Si(n,this.Qh(t,e,s))}let u=this.Vh.get(s);void 0===u&&(u=new Map,this.Vh.set(s,u));for(let t=Math.max(o+1,l);t<_;t+=gi){const i=Math.floor(t/gi);let e=u.get(i);if(void 0===e){const t=this.Gh(i*gi),n=this.Jh((i+1)*gi-1);e=this.Qh(t,n,s),u.set(i,e)}n=Si(n,e)}{const t=this.Gh(_),i=this.Jh(a);n=Si(n,this.Qh(t,i,s))}return n}}function Si(t,i){if(null===t)return i;if(null===i)return t;return{tl:Math.min(t.tl,i.tl),il:Math.max(t.il,i.il)}}class yi extends vi{constructor(t,i,s){super(t),this.It=new Mi,this.Ch=new oi(this),this.sl=[],this.nl=new Ut(this),this.el=null,this.rl=null,this.hl=[],this.ll=[],this.al=null,this.cs=i,this.ol=s;const n=new _i(this);this.rs=[n],this.xh=new jt(n,this,t),"Area"!==s&&"Line"!==s&&"Baseline"!==s||(this.el=new Kt(this)),this._l(),this.ul()}M(){null!==this.al&&clearTimeout(this.al)}Jr(t){return this.cs.priceLineColor||t}Ar(t){const i={Or:!0},s=this.Lt();if(this.qt().kt().Wi()||s.Wi()||this.It.Wi())return i;const n=this.qt().kt().Fn(),e=this.Tt();if(null===n||null===e)return i;let r,h;if(t){const t=this.It.Wh();if(null===t)return i;r=t,h=t.Xn}else{const t=this.It.Hh(n.Sn(),-1);if(null===t)return i;if(r=this.It.Eh(t.Xn),null===r)return i;h=t.Xn}const l=r.At[3],a=this.Bn().En(h,{At:r}),o=s.Rt(l,e.At);return{Or:!1,ut:l,ii:s.zi(l,e.At),nh:s.cl(l),eh:s.dl(l,e.At),R:a.se,ki:o,Xn:h}}Bn(){return null!==this.rl||(this.rl=new bi(this)),this.rl}F(){return this.cs}Th(t){const i=t.priceScaleId;void 0!==i&&i!==this.cs.priceScaleId&&this.qt().fl(this,i),b(this.cs,t),void 0!==t.priceFormat&&(this._l(),this.qt().pl()),this.qt().vl(this),this.qt().ml(),this.gs.wt("options")}tt(t,i){this.It.tt(t),this.bl(),this.gs.wt("data"),this.ds.wt("data"),null!==this.el&&(i&&i.wl?this.el.Dr():0===t.length&&this.el.Tr());const s=this.qt().Je(this);this.qt().gl(s),this.qt().vl(this),this.qt().ml(),this.qt().Dh()}Ml(t){this.hl=t,this.bl();const i=this.qt().Je(this);this.ds.wt("data"),this.qt().gl(i),this.qt().vl(this),this.qt().ml(),this.qt().Dh()}Sl(){return this.hl}Kr(){return this.ll}yl(t){const i=new pi(this,t);return this.sl.push(i),this.qt().vl(this),i}kl(t){const i=this.sl.indexOf(t);-1!==i&&this.sl.splice(i,1),this.qt().vl(this)}Ih(){return this.ol}Tt(){const t=this.Cl();return null===t?null:{At:t.At[3],xl:t._t}}Cl(){const t=this.qt().kt().Fn();if(null===t)return null;const i=t.Mn();return this.It.Hh(i,1)}Is(){return this.It}Gr(t){const i=this.It.Eh(t);return null===i?null:"Bar"===this.ol||"Candlestick"===this.ol?{_e:i.At[0],ue:i.At[1],ce:i.At[2],de:i.At[3]}:i.At[3]}Tl(t){const i=this.el;return null!==i&&i.xt()?(null===this.al&&i.Rr()&&(this.al=setTimeout((()=>{this.al=null,this.qt().Dl()}),0)),i.Pr(),[i]):[]}Ps(){const t=[];this.Pl()||t.push(this.nl),t.push(this.gs,this.Ch,this.ds);const i=this.sl.map((t=>t.Ph()));return t.push(...i),t}Ji(t){return[this.xh,...this.sl.map((t=>t.Rh()))]}Rs(t,i){if(i!==this.Yi&&!this.Pl())return[];const s=[...this.rs];for(const t of this.sl)s.push(t.Lh());return s}Rl(t,i){if(void 0!==this.cs.autoscaleInfoProvider){const s=this.cs.autoscaleInfoProvider((()=>{const s=this.Ll(t,i);return null===s?null:s.ph()}));return ci.mh(s)}return this.Ll(t,i)}Al(){return this.cs.priceFormat.minMove}Ol(){return this.El}As(){var t;this.gs.wt(),this.ds.wt();for(const t of this.rs)t.wt();for(const t of this.sl)t.wt();this.Ch.wt(),this.nl.wt(),null===(t=this.el)||void 0===t||t.wt()}Lt(){return h(super.Lt())}Ct(t){if(!(("Line"===this.ol||"Area"===this.ol||"Baseline"===this.ol)&&this.cs.crosshairMarkerVisible))return null;const i=this.It.Eh(t);if(null===i)return null;return{ut:i.At[3],lt:this.Bl(),Ot:this.Il(),Pt:this.Nl(),Dt:this.Vl(t)}}Qr(){return this.cs.title}xt(){return this.cs.visible}Pl(){return!Q(this.Lt().Fl())}Ll(t,i){if(!g(t)||!g(i)||this.It.Wi())return null;const s="Line"===this.ol||"Area"===this.ol||"Baseline"===this.ol||"Histogram"===this.ol?[3]:[2,1],n=this.It.qh(t,i,s);let e=null!==n?new ui(n.tl,n.il):null;if("Histogram"===this.Ih()){const t=this.cs.base,i=new ui(t,t);e=null!==e?e.sn(i):i}return new ci(e,this.ds.Zr())}Bl(){switch(this.ol){case"Line":case"Area":case"Baseline":return this.cs.crosshairMarkerRadius}return 0}Il(){switch(this.ol){case"Line":case"Area":case"Baseline":{const t=this.cs.crosshairMarkerBorderColor;if(0!==t.length)return t}}return null}Nl(){switch(this.ol){case"Line":case"Area":case"Baseline":return this.cs.crosshairMarkerBorderWidth}return 0}Vl(t){switch(this.ol){case"Line":case"Area":case"Baseline":{const t=this.cs.crosshairMarkerBackgroundColor;if(0!==t.length)return t}}return this.Bn().En(t).se}_l(){switch(this.cs.priceFormat.type){case"custom":this.El={format:this.cs.priceFormat.formatter};break;case"volume":this.El=new rt(this.cs.priceFormat.precision);break;case"percent":this.El=new et(this.cs.priceFormat.precision);break;default:{const t=Math.pow(10,this.cs.priceFormat.precision);this.El=new nt(t,this.cs.priceFormat.minMove*t)}}null!==this.Yi&&this.Yi.Wl()}bl(){const t=this.qt().kt();if(t.Wi()||0===this.It.Wn())return void(this.ll=[]);const i=h(this.It.zh());this.ll=this.hl.map(((s,n)=>{const e=h(t.zl(s.time,!0)),r=e<i?1:-1;return{time:h(this.It.Hh(e,r)).Xn,position:s.position,shape:s.shape,color:s.color,id:s.id,internalId:n,text:s.text,size:s.size}}))}ul(){switch(this.ds=new ai(this,this.qt()),this.ol){case"Bar":this.gs=new xt(this,this.qt());break;case"Candlestick":this.gs=new Bt(this,this.qt());break;case"Line":this.gs=new Vt(this,this.qt());break;case"Area":this.gs=new yt(this,this.qt());break;case"Baseline":this.gs=new Ot(this,this.qt());break;case"Histogram":this.gs=new Nt(this,this.qt());break;default:throw Error("Unknown chart style assigned: "+this.ol)}}}class ki{constructor(t){this.cs=t}jl(t,i,s){let n=t;if(0===this.cs.mode)return n;const e=s.ps(),r=e.Tt();if(null===r)return n;const h=e.Rt(t,r),a=s.$l().filter((t=>t instanceof yi)).reduce(((t,n)=>{if(s.Qe(n)||!n.xt())return t;const e=n.Lt(),r=n.Is();if(e.Wi()||!r.Er(i))return t;const h=r.Eh(i);if(null===h)return t;const a=l(n.Tt());return t.concat([e.Rt(h.At[3],a.At)])}),[]);if(0===a.length)return n;a.sort(((t,i)=>Math.abs(t-h)-Math.abs(i-h)));const o=a[0];return n=e.vs(o,r),n}}class Ci{constructor(){this.It=null}tt(t){this.It=t}X(t,i,n,e){if(null===this.It)return;const r=Math.max(1,Math.floor(i));t.lineWidth=r;const l=Math.ceil(this.It.Wt*i),a=Math.ceil(this.It.Ft*i);!function(t,i){t.save(),t.lineWidth%2&&t.translate(.5,.5),i(),t.restore()}(t,(()=>{const n=h(this.It);if(n.Hl){t.strokeStyle=n.Ul,s(t,n.ql),t.beginPath();for(const s of n.Yl){const n=Math.round(s.Xl*i);t.moveTo(n,-r),t.lineTo(n,l+r)}t.stroke()}if(n.Zl){t.strokeStyle=n.Kl,s(t,n.Gl),t.beginPath();for(const s of n.Jl){const n=Math.round(s.Xl*i);t.moveTo(-r,n),t.lineTo(a+r,n)}t.stroke()}}))}}class xi{constructor(t){this.$t=new Ci,this.vt=!0,this.ts=t}wt(){this.vt=!0}Mt(t,i){if(this.vt){const s=this.ts.qt().F().grid,n={Wt:t,Ft:i,Zl:s.horzLines.visible,Hl:s.vertLines.visible,Kl:s.horzLines.color,Ul:s.vertLines.color,Gl:s.horzLines.style,ql:s.vertLines.style,Jl:this.ts.ps().Ql(),Yl:this.ts.qt().kt().Ql()||[]};this.$t.tt(n),this.vt=!1}return this.$t}}class Ti{constructor(t){this.gs=new xi(t)}Ph(){return this.gs}}const Di={ta:4,ia:1e-4};function Pi(t,i){const s=100*(t-i)/i;return i<0?-s:s}function Ri(t,i){const s=Pi(t.oh(),i),n=Pi(t._h(),i);return new ui(s,n)}function Li(t,i){const s=100*(t-i)/i+100;return i<0?-s:s}function Ai(t,i){const s=Li(t.oh(),i),n=Li(t._h(),i);return new ui(s,n)}function Oi(t,i){const s=Math.abs(t);if(s<1e-15)return 0;const n=Pt(s+i.ia)+i.ta;return t<0?-n:n}function Ei(t,i){const s=Math.abs(t);if(s<1e-15)return 0;const n=Math.pow(10,s-i.ta)-i.ia;return t<0?-n:n}function Bi(t,i){if(null===t)return null;const s=Oi(t.oh(),i),n=Oi(t._h(),i);return new ui(s,n)}function Ii(t,i){if(null===t)return null;const s=Ei(t.oh(),i),n=Ei(t._h(),i);return new ui(s,n)}function Ni(t){if(null===t)return Di;const i=Math.abs(t._h()-t.oh());if(i>=1||i<1e-15)return Di;const s=Math.ceil(Math.abs(Math.log10(i))),n=Di.ta+s;return{ta:n,ia:1/Math.pow(10,n)}}class Vi{constructor(t,i){if(this.sa=t,this.na=i,function(t){if(t<0)return!1;for(let i=t;i>1;i/=10)if(i%10!=0)return!1;return!0}(this.sa))this.ea=[2,2.5,2];else{this.ea=[];for(let t=this.sa;1!==t;){if(t%2==0)this.ea.push(2),t/=2;else{if(t%5!=0)throw new Error("unexpected base");this.ea.push(2,2.5),t/=5}if(this.ea.length>100)throw new Error("something wrong with base")}}}ra(t,i,s){const n=0===this.sa?0:1/this.sa;let e=Math.pow(10,Math.max(0,Math.ceil(Pt(t-i)))),r=0,h=this.na[0];for(;;){const t=Dt(e,n,1e-14)&&e>n+1e-14,i=Dt(e,s*h,1e-14),l=Dt(e,1,1e-14);if(!(t&&i&&l))break;e/=h,h=this.na[++r%this.na.length]}if(e<=n+1e-14&&(e=n),e=Math.max(1,e),this.ea.length>0&&(l=e,a=1,o=1e-14,Math.abs(l-a)<o))for(r=0,h=this.ea[0];Dt(e,s*h,1e-14)&&e>n+1e-14;)e/=h,h=this.ea[++r%this.ea.length];var l,a,o;return e}}class Fi{constructor(t,i,s,n){this.ha=[],this.Vi=t,this.sa=i,this.la=s,this.aa=n}ra(t,i){if(t<i)throw new Error("high < low");const s=this.Vi.Kt(),n=(t-i)*this.oa()/s,e=new Vi(this.sa,[2,2.5,2]),r=new Vi(this.sa,[2,2,2.5]),h=new Vi(this.sa,[2.5,2,2]),l=[];return l.push(e.ra(t,i,n),r.ra(t,i,n),h.ra(t,i,n)),function(t){if(t.length<1)throw Error("array is empty");let i=t[0];for(let s=1;s<t.length;++s)t[s]<i&&(i=t[s]);return i}(l)}_a(){const t=this.Vi,i=t.Tt();if(null===i)return void(this.ha=[]);const s=t.Kt(),n=this.la(s-1,i),e=this.la(0,i),r=this.Vi.F().entireTextOnly?this.ua()/2:0,h=r,l=s-1-r,a=Math.max(n,e),o=Math.min(n,e);if(a===o)return void(this.ha=[]);let _=this.ra(a,o),u=a%_;u+=u<0?_:0;const c=a>=o?1:-1;let d=null,f=0;for(let s=a-u;s>o;s-=_){const n=this.aa(s,i,!0);null!==d&&Math.abs(n-d)<this.oa()||(n<h||n>l||(f<this.ha.length?(this.ha[f].Xl=n,this.ha[f].ca=t.da(s)):this.ha.push({Xl:n,ca:t.da(s)}),f++,d=n,t.fa()&&(_=this.ra(s*c,o))))}this.ha.length=f}Ql(){return this.ha}ua(){return this.Vi.T()}oa(){return Math.ceil(2.5*this.ua())}}function Wi(t){return t.slice().sort(((t,i)=>h(t.Zi())-h(i.Zi())))}var zi;!function(t){t[t.Normal=0]="Normal",t[t.Logarithmic=1]="Logarithmic",t[t.Percentage=2]="Percentage",t[t.IndexedTo100=3]="IndexedTo100"}(zi||(zi={}));const ji=new et,$i=new nt(100,1);class Hi{constructor(t,i,s,n){this.pa=0,this.va=null,this.bh=null,this.ma=null,this.ba={wa:!1,ga:null},this.Ma=0,this.Sa=0,this.ya=new m,this.ka=new m,this.Ca=[],this.xa=null,this.Ta=null,this.Da=null,this.Pa=null,this.El=$i,this.Ra=Ni(null),this.La=t,this.cs=i,this.Aa=s,this.Oa=n,this.Ea=new Fi(this,100,this.Ba.bind(this),this.Ia.bind(this))}Fl(){return this.La}F(){return this.cs}Th(t){if(b(this.cs,t),this.Wl(),void 0!==t.mode&&this.Na({hr:t.mode}),void 0!==t.scaleMargins){const i=r(t.scaleMargins.top),s=r(t.scaleMargins.bottom);if(i<0||i>1)throw new Error(`Invalid top margin - expect value between 0 and 1, given=${i}`);if(s<0||s>1||i+s>1)throw new Error(`Invalid bottom margin - expect value between 0 and 1, given=${s}`);if(i+s>1)throw new Error(`Invalid margins - sum of margins must be less than 1, given=${i+s}`);this.Va(),this.Ta=null}}Fa(){return this.cs.autoScale}fa(){return 1===this.cs.mode}sh(){return 2===this.cs.mode}Wa(){return 3===this.cs.mode}hr(){return{js:this.cs.autoScale,za:this.cs.invertScale,hr:this.cs.mode}}Na(t){const i=this.hr();let s=null;void 0!==t.js&&(this.cs.autoScale=t.js),void 0!==t.hr&&(this.cs.mode=t.hr,2!==t.hr&&3!==t.hr||(this.cs.autoScale=!0),this.ba.wa=!1),1===i.hr&&t.hr!==i.hr&&(!function(t,i){if(null===t)return!1;const s=Ei(t.oh(),i),n=Ei(t._h(),i);return isFinite(s)&&isFinite(n)}(this.bh,this.Ra)?this.cs.autoScale=!0:(s=Ii(this.bh,this.Ra),null!==s&&this.ja(s))),1===t.hr&&t.hr!==i.hr&&(s=Bi(this.bh,this.Ra),null!==s&&this.ja(s));const n=i.hr!==this.cs.mode;n&&(2===i.hr||this.sh())&&this.Wl(),n&&(3===i.hr||this.Wa())&&this.Wl(),void 0!==t.za&&i.za!==t.za&&(this.cs.invertScale=t.za,this.$a()),this.ka.m(i,this.hr())}Ha(){return this.ka}T(){return this.Aa.fontSize}Kt(){return this.pa}Ua(t){this.pa!==t&&(this.pa=t,this.Va(),this.Ta=null)}qa(){if(this.va)return this.va;const t=this.Kt()-this.Ya()-this.Xa();return this.va=t,t}gh(){return this.Za(),this.bh}ja(t,i){const s=this.bh;(i||null===s&&null!==t||null!==s&&!s.lh(t))&&(this.Ta=null,this.bh=t)}Wi(){return this.Za(),0===this.pa||!this.bh||this.bh.Wi()}Ka(t){return this.za()?t:this.Kt()-1-t}Rt(t,i){return this.sh()?t=Pi(t,i):this.Wa()&&(t=Li(t,i)),this.Ia(t,i)}Hn(t,i,s){this.Za();const n=this.Xa(),e=h(this.gh()),r=e.oh(),l=e._h(),a=this.qa()-1,o=this.za(),_=a/(l-r),u=void 0===s?0:s.from,c=void 0===s?t.length:s.to,d=this.Ga();for(let s=u;s<c;s++){const e=t[s],h=e.ut;if(isNaN(h))continue;let l=h;null!==d&&(l=d(e.ut,i));const a=n+_*(l-r),u=o?a:this.pa-1-a;e.et=u}}ae(t,i,s){this.Za();const n=this.Xa(),e=h(this.gh()),r=e.oh(),l=e._h(),a=this.qa()-1,o=this.za(),_=a/(l-r),u=void 0===s?0:s.from,c=void 0===s?t.length:s.to,d=this.Ga();for(let s=u;s<c;s++){const e=t[s];let h=e._e,l=e.ue,a=e.ce,u=e.de;null!==d&&(h=d(e._e,i),l=d(e.ue,i),a=d(e.ce,i),u=d(e.de,i));let c=n+_*(h-r),f=o?c:this.pa-1-c;e.he=f,c=n+_*(l-r),f=o?c:this.pa-1-c,e.ne=f,c=n+_*(a-r),f=o?c:this.pa-1-c,e.ee=f,c=n+_*(u-r),f=o?c:this.pa-1-c,e.le=f}}vs(t,i){const s=this.Ba(t,i);return this.Ja(s,i)}Ja(t,i){let s=t;return this.sh()?s=function(t,i){return i<0&&(t=-t),t/100*i+i}(s,i):this.Wa()&&(s=function(t,i){return t-=100,i<0&&(t=-t),t/100*i+i}(s,i)),s}$l(){return this.Ca}Qa(){if(this.xa)return this.xa;let t=[];for(let i=0;i<this.Ca.length;i++){const s=this.Ca[i];null===s.Zi()&&s.Ki(i+1),t.push(s)}return t=Wi(t),this.xa=t,this.xa}io(t){-1===this.Ca.indexOf(t)&&(this.Ca.push(t),this.Wl(),this.so())}no(t){const i=this.Ca.indexOf(t);if(-1===i)throw new Error("source is not attached to scale");this.Ca.splice(i,1),0===this.Ca.length&&(this.Na({js:!0}),this.ja(null)),this.Wl(),this.so()}Tt(){let t=null;for(const i of this.Ca){const s=i.Tt();null!==s&&((null===t||s.xl<t.xl)&&(t=s))}return null===t?null:t.At}za(){return this.cs.invertScale}Ql(){const t=null===this.Tt();if(null!==this.Ta&&(t||this.Ta.eo===t))return this.Ta.Ql;this.Ea._a();const i=this.Ea.Ql();return this.Ta={Ql:i,eo:t},this.ya.m(),i}ro(){return this.ya}ho(t){this.sh()||this.Wa()||null===this.Da&&null===this.ma&&(this.Wi()||(this.Da=this.pa-t,this.ma=h(this.gh()).ah()))}lo(t){if(this.sh()||this.Wa())return;if(null===this.Da)return;this.Na({js:!1}),(t=this.pa-t)<0&&(t=0);let i=(this.Da+.2*(this.pa-1))/(t+.2*(this.pa-1));const s=h(this.ma).ah();i=Math.max(i,.1),s.dh(i),this.ja(s)}ao(){this.sh()||this.Wa()||(this.Da=null,this.ma=null)}oo(t){this.Fa()||null===this.Pa&&null===this.ma&&(this.Wi()||(this.Pa=t,this.ma=h(this.gh()).ah()))}_o(t){if(this.Fa())return;if(null===this.Pa)return;const i=h(this.gh()).uh()/(this.qa()-1);let s=t-this.Pa;this.za()&&(s*=-1);const n=s*i,e=h(this.ma).ah();e.fh(n),this.ja(e,!0),this.Ta=null}uo(){this.Fa()||null!==this.Pa&&(this.Pa=null,this.ma=null)}Ol(){return this.El||this.Wl(),this.El}zi(t,i){switch(this.cs.mode){case 2:return this.Ol().format(Pi(t,i));case 3:return this.Ol().format(Li(t,i));default:return this.kh(t)}}da(t){switch(this.cs.mode){case 2:case 3:return this.Ol().format(t);default:return this.kh(t)}}cl(t){return this.kh(t,h(this.co()).Ol())}dl(t,i){return t=Pi(t,i),ji.format(t)}do(){return this.Ca}fo(t){this.ba={ga:t,wa:!1}}As(){this.Ca.forEach((t=>t.As()))}Wl(){this.Ta=null;const t=this.co();let i=100;null!==t&&(i=Math.round(1/t.Al())),this.El=$i,this.sh()?(this.El=ji,i=100):this.Wa()?(this.El=new nt(100,1),i=100):null!==t&&(this.El=t.Ol()),this.Ea=new Fi(this,i,this.Ba.bind(this),this.Ia.bind(this)),this.Ea._a()}so(){this.xa=null}co(){return this.Ca[0]||null}Ya(){return this.za()?this.cs.scaleMargins.bottom*this.Kt()+this.Sa:this.cs.scaleMargins.top*this.Kt()+this.Ma}Xa(){return this.za()?this.cs.scaleMargins.top*this.Kt()+this.Ma:this.cs.scaleMargins.bottom*this.Kt()+this.Sa}Za(){this.ba.wa||(this.ba.wa=!0,this.po())}Va(){this.va=null}Ia(t,i){if(this.Za(),this.Wi())return 0;t=this.fa()&&t?Oi(t,this.Ra):t;const s=h(this.gh()),n=this.Xa()+(this.qa()-1)*(t-s.oh())/s.uh();return this.Ka(n)}Ba(t,i){if(this.Za(),this.Wi())return 0;const s=this.Ka(t),n=h(this.gh()),e=n.oh()+n.uh()*((s-this.Xa())/(this.qa()-1));return this.fa()?Ei(e,this.Ra):e}$a(){this.Ta=null,this.Ea._a()}po(){const t=this.ba.ga;if(null===t)return;let i=null;const s=this.do();let n=0,e=0;for(const r of s){if(!r.xt())continue;const s=r.Tt();if(null===s)continue;const l=r.Rl(t.Mn(),t.Sn());let a=l&&l.gh();if(null!==a){switch(this.cs.mode){case 1:a=Bi(a,this.Ra);break;case 2:a=Ri(a,s.At);break;case 3:a=Ai(a,s.At)}if(i=null===i?a:i.sn(h(a)),null!==l){const t=l.Mh();null!==t&&(n=Math.max(n,t.above),e=Math.max(n,t.below))}}}if(n===this.Ma&&e===this.Sa||(this.Ma=n,this.Sa=e,this.Ta=null,this.Va()),null!==i){if(i.oh()===i._h()){const t=this.co(),s=5*(null===t||this.sh()||this.Wa()?1:t.Al());this.fa()&&(i=Ii(i,this.Ra)),i=new ui(i.oh()-s,i._h()+s),this.fa()&&(i=Bi(i,this.Ra))}if(this.fa()){const t=Ii(i,this.Ra),s=Ni(t);if(r=s,l=this.Ra,r.ta!==l.ta||r.ia!==l.ia){const n=null!==this.ma?Ii(this.ma,this.Ra):null;this.Ra=s,i=Bi(t,s),null!==n&&(this.ma=Bi(n,s))}}this.ja(i)}else null===this.bh&&(this.ja(new ui(-.5,.5)),this.Ra=Ni(null));var r,l;this.ba.wa=!0}Ga(){return this.sh()?Pi:this.Wa()?Li:this.fa()?t=>Oi(t,this.Ra):null}kh(t,i){return void 0===this.Oa.priceFormatter?(void 0===i&&(i=this.Ol()),i.format(t)):this.Oa.priceFormatter(t)}}class Ui{constructor(t,i){this.Ca=[],this.vo=new Map,this.pa=0,this.Ye=0,this.mo=1e3,this.xa=null,this.bo=new m,this.wo=t,this.Hi=i,this.Mo=new Ti(this);const s=i.F();this.So=this.yo("left",s.leftPriceScale),this.ko=this.yo("right",s.rightPriceScale),this.So.Ha().l(this.Co.bind(this,this.So),this),this.ko.Ha().l(this.Co.bind(this,this.ko),this),this.xo(s)}xo(t){if(t.leftPriceScale&&this.So.Th(t.leftPriceScale),t.rightPriceScale&&this.ko.Th(t.rightPriceScale),t.localization&&(this.So.Wl(),this.ko.Wl()),t.overlayPriceScales){const i=Array.from(this.vo.values());for(const s of i){const i=h(s[0].Lt());i.Th(t.overlayPriceScales),t.localization&&i.Wl()}}}To(t){switch(t){case"left":return this.So;case"right":return this.ko}return this.vo.has(t)?r(this.vo.get(t))[0].Lt():null}M(){this.qt().Do().v(this),this.So.Ha().v(this),this.ko.Ha().v(this),this.Ca.forEach((t=>{t.M&&t.M()})),this.bo.m()}Po(){return this.mo}Ro(t){this.mo=t}qt(){return this.Hi}Zt(){return this.Ye}Kt(){return this.pa}Lo(t){this.Ye=t,this.Ao()}Ua(t){this.pa=t,this.So.Ua(t),this.ko.Ua(t),this.Ca.forEach((i=>{if(this.Qe(i)){const s=i.Lt();null!==s&&s.Ua(t)}})),this.Ao()}$l(){return this.Ca}Qe(t){const i=t.Lt();return null===i||this.So!==i&&this.ko!==i}io(t,i,s){const n=void 0!==s?s:this.Eo().Oo+1;this.Bo(t,i,n)}no(t){const i=this.Ca.indexOf(t);e(-1!==i,"removeDataSource: invalid data source"),this.Ca.splice(i,1);const s=h(t.Lt()).Fl();if(this.vo.has(s)){const i=r(this.vo.get(s)),n=i.indexOf(t);-1!==n&&(i.splice(n,1),0===i.length&&this.vo.delete(s))}const n=t.Lt();n&&n.$l().indexOf(t)>=0&&n.no(t),null!==n&&(n.so(),this.Io(n)),this.xa=null}ir(t){return t===this.So?"left":t===this.ko?"right":"overlay"}No(){return this.So}Vo(){return this.ko}Fo(t,i){t.ho(i)}Wo(t,i){t.lo(i),this.Ao()}zo(t){t.ao()}jo(t,i){t.oo(i)}$o(t,i){t._o(i),this.Ao()}Ho(t){t.uo()}Ao(){this.Ca.forEach((t=>{t.As()}))}ps(){let t=null;return this.Hi.F().rightPriceScale.visible&&0!==this.ko.$l().length?t=this.ko:this.Hi.F().leftPriceScale.visible&&0!==this.So.$l().length?t=this.So:0!==this.Ca.length&&(t=this.Ca[0].Lt()),null===t&&(t=this.ko),t}tr(){let t=null;return this.Hi.F().rightPriceScale.visible?t=this.ko:this.Hi.F().leftPriceScale.visible&&(t=this.So),t}Io(t){null!==t&&t.Fa()&&this.Uo(t)}qo(t){const i=this.wo.Fn();t.Na({js:!0}),null!==i&&t.fo(i),this.Ao()}Yo(){this.Uo(this.So),this.Uo(this.ko)}Xo(){this.Io(this.So),this.Io(this.ko),this.Ca.forEach((t=>{this.Qe(t)&&this.Io(t.Lt())})),this.Ao(),this.Hi.Dh()}Qa(){return null===this.xa&&(this.xa=Wi(this.Ca)),this.xa}Zo(){return this.bo}Ko(){return this.Mo}Uo(t){const i=t.do();if(i&&i.length>0&&!this.wo.Wi()){const i=this.wo.Fn();null!==i&&t.fo(i)}t.As()}Eo(){const t=this.Qa();if(0===t.length)return{Go:0,Oo:0};let i=0,s=0;for(let n=0;n<t.length;n++){const e=t[n].Zi();null!==e&&(e<i&&(i=e),e>s&&(s=e))}return{Go:i,Oo:s}}Bo(t,i,s){let n=this.To(i);if(null===n&&(n=this.yo(i,this.Hi.F().overlayPriceScales)),this.Ca.push(t),!Q(i)){const s=this.vo.get(i)||[];s.push(t),this.vo.set(i,s)}n.io(t),t.Gi(n),t.Ki(s),this.Io(n),this.xa=null}Co(t,i,s){i.hr!==s.hr&&this.Uo(t)}yo(t,i){const s=Object.assign({visible:!0,autoScale:!0},y(i)),n=new Hi(t,s,this.Hi.F().layout,this.Hi.F().localization);return n.Ua(this.Kt()),n}}const qi=t=>t.getUTCFullYear();function Yi(t,i,s){return i.replace(/yyyy/g,(t=>st(qi(t),4))(t)).replace(/yy/g,(t=>st(qi(t)%100,2))(t)).replace(/MMMM/g,((t,i)=>new Date(t.getUTCFullYear(),t.getUTCMonth(),1).toLocaleString(i,{month:"long"}))(t,s)).replace(/MMM/g,((t,i)=>new Date(t.getUTCFullYear(),t.getUTCMonth(),1).toLocaleString(i,{month:"short"}))(t,s)).replace(/MM/g,(t=>st((t=>t.getUTCMonth()+1)(t),2))(t)).replace(/dd/g,(t=>st((t=>t.getUTCDate())(t),2))(t))}class Xi{constructor(t="yyyy-MM-dd",i="default"){this.Jo=t,this.Qo=i}t_(t){return Yi(t,this.Jo,this.Qo)}}class Zi{constructor(t){this.i_=t||"%h:%m:%s"}t_(t){return this.i_.replace("%h",st(t.getUTCHours(),2)).replace("%m",st(t.getUTCMinutes(),2)).replace("%s",st(t.getUTCSeconds(),2))}}const Ki={s_:"yyyy-MM-dd",n_:"%h:%m:%s",e_:" ",r_:"default"};class Gi{constructor(t={}){const i=Object.assign(Object.assign({},Ki),t);this.h_=new Xi(i.s_,i.r_),this.l_=new Zi(i.n_),this.a_=i.e_}t_(t){return`${this.h_.t_(t)}${this.a_}${this.l_.t_(t)}`}}class Ji{constructor(t,i=50){this.Be=0,this.Ie=1,this.Ne=1,this.Fe=new Map,this.Ve=new Map,this.o_=t,this.We=i}t_(t){const i=t._t,s=void 0===i.__?new Date(1e3*i.u_).getTime():new Date(Date.UTC(i.__.year,i.__.month-1,i.__.day)).getTime(),n=this.Fe.get(s);if(void 0!==n)return n.c_;if(this.Be===this.We){const t=this.Ve.get(this.Ne);this.Ve.delete(this.Ne),this.Fe.delete(r(t)),this.Ne++,this.Be--}const e=this.o_(t);return this.Fe.set(s,{c_:e,He:this.Ie}),this.Ve.set(this.Ie,s),this.Be++,this.Ie++,e}}class Qi{constructor(t,i){e(t<=i,"right should be >= left"),this.d_=t,this.f_=i}Mn(){return this.d_}Sn(){return this.f_}p_(){return this.f_-this.d_+1}Er(t){return this.d_<=t&&t<=this.f_}lh(t){return this.d_===t.Mn()&&this.f_===t.Sn()}}function ts(t,i){return null===t||null===i?t===i:t.lh(i)}class is{constructor(){this.v_=new Map,this.Fe=null}m_(t,i){this.b_(i),this.Fe=null;for(let s=i;s<t.length;++s){const i=t[s];let n=this.v_.get(i.w_);void 0===n&&(n=[],this.v_.set(i.w_,n)),n.push({Xn:s,_t:i._t,g_:i.w_,M_:i.M_})}}S_(t,i){const s=Math.ceil(i/t);return null!==this.Fe&&this.Fe.y_===s||(this.Fe={Ql:this.k_(s),y_:s}),this.Fe.Ql}b_(t){if(0===t)return void this.v_.clear();const i=[];this.v_.forEach(((s,n)=>{t<=s[0].Xn?i.push(n):s.splice(vt(s,t,(i=>i.Xn<t)),1/0)}));for(const t of i)this.v_.delete(t)}k_(t){let i=[];for(const s of Array.from(this.v_.keys()).sort(((t,i)=>i-t))){if(!this.v_.get(s))continue;const n=i;i=[];const e=n.length;let h=0;const l=r(this.v_.get(s)),a=l.length;let o=1/0,_=-1/0;for(let s=0;s<a;s++){const r=l[s],a=r.Xn;for(;h<e;){const t=n[h],s=t.Xn;if(!(s<a)){o=s;break}h++,i.push(t),_=s,o=1/0}o-a>=t&&a-_>=t&&(i.push(r),_=a)}for(;h<e;h++)i.push(n[h])}return i}}class ss{constructor(t){this.C_=t}x_(){return null===this.C_?null:new Qi(Math.floor(this.C_.Mn()),Math.ceil(this.C_.Sn()))}T_(){return this.C_}static D_(){return new ss(null)}}var ns,es,rs,hs,ls;!function(t){t[t.Year=0]="Year",t[t.Month=1]="Month",t[t.DayOfMonth=2]="DayOfMonth",t[t.Time=3]="Time",t[t.TimeWithSeconds=4]="TimeWithSeconds"}(ns||(ns={}));class as{constructor(t,i,s){this.Ye=0,this.P_=null,this.R_=[],this.Pa=null,this.Da=null,this.L_=new is,this.A_=new Map,this.O_=ss.D_(),this.E_=!0,this.B_=new m,this.I_=new m,this.N_=new m,this.V_=null,this.F_=null,this.W_=[],this.cs=i,this.Oa=s,this.z_=i.rightOffset,this.j_=i.barSpacing,this.Hi=t,this.H_()}F(){return this.cs}U_(t){b(this.Oa,t),this.q_(),this.H_()}Th(t,i){var s;b(this.cs,t),this.cs.fixLeftEdge&&this.Y_(),this.cs.fixRightEdge&&this.X_(),void 0!==t.barSpacing&&this.Hi.Js(t.barSpacing),void 0!==t.rightOffset&&this.Hi.Qs(t.rightOffset),void 0!==t.minBarSpacing&&this.Hi.Js(null!==(s=t.barSpacing)&&void 0!==s?s:this.j_),this.q_(),this.H_(),this.N_.m()}bs(t){var i,s;return null!==(s=null===(i=this.R_[t])||void 0===i?void 0:i._t)&&void 0!==s?s:null}Ui(t){var i;return null!==(i=this.R_[t])&&void 0!==i?i:null}zl(t,i){if(this.R_.length<1)return null;if(t.u_>this.R_[this.R_.length-1]._t.u_)return i?this.R_.length-1:null;const s=vt(this.R_,t.u_,((t,i)=>t._t.u_<i));return t.u_<this.R_[s]._t.u_?i?s:null:s}Wi(){return 0===this.Ye||0===this.R_.length||null===this.P_}Fn(){return this.Z_(),this.O_.x_()}K_(){return this.Z_(),this.O_.T_()}G_(){const t=this.Fn();if(null===t)return null;const i={from:t.Mn(),to:t.Sn()};return this.J_(i)}J_(t){const i=Math.round(t.from),s=Math.round(t.to),n=h(this.Q_()),e=h(this.tu());return{from:h(this.bs(Math.max(n,i))),to:h(this.bs(Math.min(e,s)))}}iu(t){return{from:h(this.zl(t.from,!0)),to:h(this.zl(t.to,!0))}}Zt(){return this.Ye}Lo(t){if(!isFinite(t)||t<=0)return;if(this.Ye===t)return;const i=this.K_(),s=this.Ye;if(this.Ye=t,this.E_=!0,this.cs.lockVisibleTimeRangeOnResize&&0!==s){const i=this.j_*t/s;this.j_=i}if(this.cs.fixLeftEdge&&null!==i&&i.Mn()<=0){const i=s-t;this.z_-=Math.round(i/this.j_)+1,this.E_=!0}this.su(),this.nu()}Bt(t){if(this.Wi()||!g(t))return 0;const i=this.eu()+this.z_-t;return this.Ye-(i+.5)*this.j_-1}$n(t,i){const s=this.eu(),n=void 0===i?0:i.from,e=void 0===i?t.length:i.to;for(let i=n;i<e;i++){const n=t[i]._t,e=s+this.z_-n,r=this.Ye-(e+.5)*this.j_-1;t[i].nt=r}}ru(t){return Math.ceil(this.hu(t))}Qs(t){this.E_=!0,this.z_=t,this.nu(),this.Hi.lu(),this.Hi.Dh()}Gn(){return this.j_}Js(t){this.au(t),this.nu(),this.Hi.lu(),this.Hi.Dh()}ou(){return this.z_}Ql(){if(this.Wi())return null;if(null!==this.F_)return this.F_;const t=this.j_,i=5*(this.Hi.F().layout.fontSize+4),s=Math.round(i/t),n=h(this.Fn()),e=Math.max(n.Mn(),n.Mn()-s),r=Math.max(n.Sn(),n.Sn()-s),l=this.L_.S_(t,i),a=this.Q_()+s,o=this.tu()-s,_=this._u(),u=this.cs.fixLeftEdge||_,c=this.cs.fixRightEdge||_;let d=0;for(const t of l){if(!(e<=t.Xn&&t.Xn<=r))continue;let s;d<this.W_.length?(s=this.W_[d],s.Xl=this.Bt(t.Xn),s.ca=this.uu(t),s.g_=t.g_):(s={cu:!1,Xl:this.Bt(t.Xn),ca:this.uu(t),g_:t.g_},this.W_.push(s)),this.j_>i/2&&!_?s.cu=!1:s.cu=u&&t.Xn<=a||c&&t.Xn>=o,d++}return this.W_.length=d,this.F_=this.W_,this.W_}du(){this.E_=!0,this.Js(this.cs.barSpacing),this.Qs(this.cs.rightOffset)}fu(t){this.E_=!0,this.P_=t,this.nu(),this.Y_()}pu(t,i){const s=this.hu(t),n=this.Gn(),e=n+i*(n/10);this.Js(e),this.cs.rightBarStaysOnScroll||this.Qs(this.ou()+(s-this.hu(t)))}ho(t){this.Pa&&this.uo(),null===this.Da&&null===this.V_&&(this.Wi()||(this.Da=t,this.vu()))}lo(t){if(null===this.V_)return;const i=Tt(this.Ye-t,0,this.Ye),s=Tt(this.Ye-h(this.Da),0,this.Ye);0!==i&&0!==s&&this.Js(this.V_.Gn*i/s)}ao(){null!==this.Da&&(this.Da=null,this.mu())}oo(t){null===this.Pa&&null===this.V_&&(this.Wi()||(this.Pa=t,this.vu()))}_o(t){if(null===this.Pa)return;const i=(this.Pa-t)/this.Gn();this.z_=h(this.V_).ou+i,this.E_=!0,this.nu()}uo(){null!==this.Pa&&(this.Pa=null,this.mu())}bu(){this.wu(this.cs.rightOffset)}wu(t,i=400){if(!isFinite(t))throw new RangeError("offset is required and must be finite number");if(!isFinite(i)||i<=0)throw new RangeError("animationDuration (optional) must be finite positive number");const s=this.z_,n=performance.now();this.Hi.Zs({gu:t=>(t-n)/i>=1,Mu:e=>{const r=(e-n)/i;return r>=1?t:s+(t-s)*r}})}wt(t,i){this.E_=!0,this.R_=t,this.L_.m_(t,i),this.nu()}Su(){return this.B_}yu(){return this.I_}ku(){return this.N_}eu(){return this.P_||0}Cu(t){const i=t.p_();this.au(this.Ye/i),this.z_=t.Sn()-this.eu(),this.nu(),this.E_=!0,this.Hi.lu(),this.Hi.Dh()}xu(){const t=this.Q_(),i=this.tu();null!==t&&null!==i&&this.Cu(new Qi(t,i+this.cs.rightOffset))}Tu(t){const i=new Qi(t.from,t.to);this.Cu(i)}qi(t){return void 0!==this.Oa.timeFormatter?this.Oa.timeFormatter(t.M_):this.Du.t_(new Date(1e3*t._t.u_))}_u(){const{handleScroll:t,handleScale:i}=this.Hi.F();return!(t.horzTouchDrag||t.mouseWheel||t.pressedMouseMove||t.vertTouchDrag||i.axisDoubleClickReset.time||i.axisPressedMouseMove.time||i.mouseWheel||i.pinch)}Q_(){return 0===this.R_.length?null:0}tu(){return 0===this.R_.length?null:this.R_.length-1}Pu(t){return(this.Ye-1-t)/this.j_}hu(t){const i=this.Pu(t),s=this.eu()+this.z_-i;return Math.round(1e6*s)/1e6}au(t){const i=this.j_;this.j_=t,this.su(),i!==this.j_&&(this.E_=!0,this.Ru())}Z_(){if(!this.E_)return;if(this.E_=!1,this.Wi())return void this.Lu(ss.D_());const t=this.eu(),i=this.Ye/this.j_,s=this.z_+t,n=new Qi(s-i+1,s);this.Lu(new ss(n))}su(){const t=this.Au();if(this.j_<t&&(this.j_=t,this.E_=!0),0!==this.Ye){const t=.5*this.Ye;this.j_>t&&(this.j_=t,this.E_=!0)}}Au(){return this.cs.fixLeftEdge&&this.cs.fixRightEdge&&0!==this.R_.length?this.Ye/this.R_.length:this.cs.minBarSpacing}nu(){const t=this.Ou();this.z_>t&&(this.z_=t,this.E_=!0);const i=this.Eu();null!==i&&this.z_<i&&(this.z_=i,this.E_=!0)}Eu(){const t=this.Q_(),i=this.P_;if(null===t||null===i)return null;return t-i-1+(this.cs.fixLeftEdge?this.Ye/this.j_:Math.min(2,this.R_.length))}Ou(){return this.cs.fixRightEdge?0:this.Ye/this.j_-Math.min(2,this.R_.length)}vu(){this.V_={Gn:this.Gn(),ou:this.ou()}}mu(){this.V_=null}uu(t){let i=this.A_.get(t.g_);return void 0===i&&(i=new Ji((t=>this.Bu(t))),this.A_.set(t.g_,i)),i.t_(t)}Bu(t){const i=function(t,i,s){switch(t){case 0:case 10:return i?s?4:3:2;case 20:case 21:case 22:case 30:case 31:case 32:case 33:return i?3:2;case 50:return 2;case 60:return 1;case 70:return 0}}(t.g_,this.cs.timeVisible,this.cs.secondsVisible);return void 0!==this.cs.tickMarkFormatter?this.cs.tickMarkFormatter(t.M_,i,this.Oa.locale):function(t,i,s){const n={};switch(i){case 0:n.year="numeric";break;case 1:n.month="short";break;case 2:n.day="numeric";break;case 3:n.hour12=!1,n.hour="2-digit",n.minute="2-digit";break;case 4:n.hour12=!1,n.hour="2-digit",n.minute="2-digit",n.second="2-digit"}const e=void 0===t.__?new Date(1e3*t.u_):new Date(Date.UTC(t.__.year,t.__.month-1,t.__.day));return new Date(e.getUTCFullYear(),e.getUTCMonth(),e.getUTCDate(),e.getUTCHours(),e.getUTCMinutes(),e.getUTCSeconds(),e.getUTCMilliseconds()).toLocaleString(s,n)}(t._t,i,this.Oa.locale)}Lu(t){const i=this.O_;this.O_=t,ts(i.x_(),this.O_.x_())||this.B_.m(),ts(i.T_(),this.O_.T_())||this.I_.m(),this.Ru()}Ru(){this.F_=null}q_(){this.Ru(),this.A_.clear()}H_(){const t=this.Oa.dateFormat;this.cs.timeVisible?this.Du=new Gi({s_:t,n_:this.cs.secondsVisible?"%h:%m:%s":"%h:%m",e_:"   ",r_:this.Oa.locale}):this.Du=new Xi(t,this.Oa.locale)}Y_(){if(!this.cs.fixLeftEdge)return;const t=this.Q_();if(null===t)return;const i=this.Fn();if(null===i)return;const s=i.Mn()-t;if(s<0){const t=this.z_-s-1;this.Qs(t)}this.su()}X_(){this.nu(),this.su()}}class os extends R{constructor(t){super(),this.Iu=new Map,this.It=t}Z(t){}G(t){if(!this.It.xt)return;t.save();let i=0;for(const s of this.It.Nu){if(0===s.ii.length)continue;t.font=s.D;const n=this.Vu(t,s.ii);n>this.It.Zt?s.pu=this.It.Zt/n:s.pu=1,i+=s.Fu*s.pu}let s=0;switch(this.It.Wu){case"top":s=0;break;case"center":s=Math.max((this.It.Kt-i)/2,0);break;case"bottom":s=Math.max(this.It.Kt-i,0)}t.fillStyle=this.It.R;for(const i of this.It.Nu){t.save();let n=0;switch(this.It.zu){case"left":t.textAlign="left",n=i.Fu/2;break;case"center":t.textAlign="center",n=this.It.Zt/2;break;case"right":t.textAlign="right",n=this.It.Zt-1-i.Fu/2}t.translate(n,s),t.textBaseline="top",t.font=i.D,t.scale(i.pu,i.pu),t.fillText(i.ii,0,i.ju),t.restore(),s+=i.Fu*i.pu}t.restore()}Vu(t,i){const s=this.$u(t.font);let n=s.get(i);return void 0===n&&(n=t.measureText(i).width,s.set(i,n)),n}$u(t){let i=this.Iu.get(t);return void 0===i&&(i=new Map,this.Iu.set(t,i)),i}}class _s{constructor(t){this.vt=!0,this.jt={xt:!1,R:"",Kt:0,Zt:0,Nu:[],Wu:"center",zu:"center"},this.$t=new os(this.jt),this.Ht=t}wt(){this.vt=!0}Mt(t,i){return this.vt&&(this.St(t,i),this.vt=!1),this.$t}St(t,i){const s=this.Ht.F(),n=this.jt;n.xt=s.visible,n.xt&&(n.R=s.color,n.Zt=i,n.Kt=t,n.zu=s.horzAlign,n.Wu=s.vertAlign,n.Nu=[{ii:s.text,D:T(s.fontSize,s.fontFamily,s.fontStyle),Fu:1.2*s.fontSize,ju:0,pu:0}])}}class us extends K{constructor(t,i){super(),this.cs=i,this.gs=new _s(this)}Rs(){return[]}Ps(){return[this.gs]}F(){return this.cs}As(){this.gs.wt()}}!function(t){t[t.OnTouchEnd=0]="OnTouchEnd",t[t.OnNextTap=1]="OnNextTap"}(es||(es={}));class cs{constructor(t,i){this.Hu=[],this.Uu=[],this.Ye=0,this.qu=null,this.Yu=new m,this.Xu=new m,this.Zu=null,this.Ku=t,this.cs=i,this.Gu=new D(this),this.wo=new as(this,i.timeScale,this.cs.localization),this.bt=new J(this,i.crosshair),this.Ju=new ki(i.crosshair),this.Qu=new us(this,i.watermark),this.tc(),this.Hu[0].Ro(2e3),this.ic=this.sc(0),this.nc=this.sc(1)}pl(){this.ec(tt.rn())}Dh(){this.ec(tt.en())}Dl(){this.ec(new tt(1))}vl(t){const i=this.rc(t);this.ec(i)}hc(){return this.qu}lc(t){const i=this.qu;this.qu=t,null!==i&&this.vl(i.ac),null!==t&&this.vl(t.ac)}F(){return this.cs}Th(t){b(this.cs,t),this.Hu.forEach((i=>i.xo(t))),void 0!==t.timeScale&&this.wo.Th(t.timeScale),void 0!==t.localization&&this.wo.U_(t.localization),(t.leftPriceScale||t.rightPriceScale)&&this.Yu.m(),this.ic=this.sc(0),this.nc=this.sc(1),this.pl()}oc(t,i){if("left"===t)return void this.Th({leftPriceScale:i});if("right"===t)return void this.Th({rightPriceScale:i});const s=this._c(t);null!==s&&(s.Lt.Th(i),this.Yu.m())}_c(t){for(const i of this.Hu){const s=i.To(t);if(null!==s)return{Ut:i,Lt:s}}return null}kt(){return this.wo}uc(){return this.Hu}cc(){return this.Qu}dc(){return this.bt}fc(){return this.Xu}vc(t,i){t.Ua(i),this.lu()}Lo(t){this.Ye=t,this.wo.Lo(this.Ye),this.Hu.forEach((i=>i.Lo(t))),this.lu()}tc(t){const i=new Ui(this.wo,this);void 0!==t?this.Hu.splice(t,0,i):this.Hu.push(i);const s=void 0===t?this.Hu.length-1:t,n=tt.rn();return n.Ws(s,{zs:0,js:!0}),this.ec(n),i}Fo(t,i,s){t.Fo(i,s)}Wo(t,i,s){t.Wo(i,s),this.ml(),this.ec(this.mc(t,2))}zo(t,i){t.zo(i),this.ec(this.mc(t,2))}jo(t,i,s){i.Fa()||t.jo(i,s)}$o(t,i,s){i.Fa()||(t.$o(i,s),this.ml(),this.ec(this.mc(t,2)))}Ho(t,i){i.Fa()||(t.Ho(i),this.ec(this.mc(t,2)))}qo(t,i){t.qo(i),this.ec(this.mc(t,2))}bc(t){this.wo.ho(t)}wc(t,i){const s=this.kt();if(s.Wi()||0===i)return;const n=s.Zt();t=Math.max(1,Math.min(t,n)),s.pu(t,i),this.lu()}gc(t){this.Mc(0),this.Sc(t),this.yc()}kc(t){this.wo.lo(t),this.lu()}Cc(){this.wo.ao(),this.Dh()}Mc(t){this.wo.oo(t)}Sc(t){this.wo._o(t),this.lu()}yc(){this.wo.uo(),this.Dh()}gt(){return this.Uu}xc(t,i,s){this.bt.Ms(t,i);let n=NaN,e=this.wo.ru(t);const r=this.wo.Fn();null!==r&&(e=Math.min(Math.max(r.Mn(),e),r.Sn()));const h=s.ps(),l=h.Tt();null!==l&&(n=h.vs(i,l)),n=this.Ju.jl(n,e,s),this.bt.Cs(e,n,s),this.Dl(),this.Xu.m(this.bt.yt(),{x:t,y:i})}Tc(){this.dc().Ts(),this.Dl(),this.Xu.m(null,null)}ml(){const t=this.bt.Ut();if(null!==t){const i=this.bt.ys(),s=this.bt.ks();this.xc(i,s,t)}this.bt.As()}Dc(t,i,s){const n=this.wo.bs(0);void 0!==i&&void 0!==s&&this.wo.wt(i,s);const e=this.wo.bs(0),r=this.wo.eu(),h=this.wo.Fn();if(null!==h&&null!==n&&null!==e){const i=h.Er(r),s=n.u_>e.u_,l=null!==t&&t>r&&!s,a=i&&this.wo.F().shiftVisibleRangeOnNewBar;if(l&&!a){const i=t-r;this.wo.Qs(this.wo.ou()-i)}}this.wo.fu(t)}gl(t){null!==t&&t.Xo()}Je(t){const i=this.Hu.find((i=>i.Qa().includes(t)));return void 0===i?null:i}lu(){this.Qu.As(),this.Hu.forEach((t=>t.Xo())),this.ml()}M(){this.Hu.forEach((t=>t.M())),this.Hu.length=0,this.cs.localization.priceFormatter=void 0,this.cs.localization.timeFormatter=void 0}Pc(){return this.Gu}sr(){return this.Gu.F()}Do(){return this.Yu}Rc(t,i){const s=this.Hu[0],n=this.Lc(i,t,s);return this.Uu.push(n),1===this.Uu.length?this.pl():this.Dh(),n}Ac(t){const i=this.Je(t),s=this.Uu.indexOf(t);e(-1!==s,"Series not found"),this.Uu.splice(s,1),h(i).no(t),t.M&&t.M()}fl(t,i){const s=h(this.Je(t));s.no(t);const n=this._c(i);if(null===n){const n=t.Zi();s.io(t,i,n)}else{const e=n.Ut===s?t.Zi():void 0;n.Ut.io(t,i,e)}}xu(){const t=tt.en();t.Us(),this.ec(t)}Oc(t){const i=tt.en();i.Xs(t),this.ec(i)}Gs(){const t=tt.en();t.Gs(),this.ec(t)}Js(t){const i=tt.en();i.Js(t),this.ec(i)}Qs(t){const i=tt.en();i.Qs(t),this.ec(i)}Zs(t){const i=tt.en();i.Zs(t),this.ec(i)}qs(){const t=tt.en();t.qs(),this.ec(t)}Ec(){return this.cs.rightPriceScale.visible?"right":"left"}Bc(){return this.nc}U(){return this.ic}Et(t){const i=this.nc,s=this.ic;if(i===s)return i;if(t=Math.max(0,Math.min(100,Math.round(100*t))),null===this.Zu||this.Zu.mn!==s||this.Zu.bn!==i)this.Zu={mn:s,bn:i,Ic:new Map};else{const i=this.Zu.Ic.get(t);if(void 0!==i)return i}const n=function(t,i,s){const[n,e,r,h]=p(t),[l,a,u,c]=p(i),d=[o(n+s*(l-n)),o(e+s*(a-e)),o(r+s*(u-r)),_(h+s*(c-h))];return`rgba(${d[0]}, ${d[1]}, ${d[2]}, ${d[3]})`}(s,i,t/100);return this.Zu.Ic.set(t,n),n}mc(t,i){const s=new tt(i);if(null!==t){const n=this.Hu.indexOf(t);s.Ws(n,{zs:i})}return s}rc(t,i){return void 0===i&&(i=2),this.mc(this.Je(t),i)}ec(t){this.Ku&&this.Ku(t),this.Hu.forEach((t=>t.Ko().Ph().wt()))}Lc(t,i,s){const n=new yi(this,t,i),e=void 0!==t.priceScaleId?t.priceScaleId:this.Ec();return s.io(n,e),Q(e)||n.Th(t),n}sc(t){const i=this.cs.layout;return"gradient"===i.background.type?0===t?i.background.topColor:i.background.bottomColor:i.background.color}}function ds(t){return!w(t)&&!M(t)}function fs(t){return w(t)}!function(t){t[t.Disabled=0]="Disabled",t[t.Continuous=1]="Continuous",t[t.OnDataUpdate=2]="OnDataUpdate"}(rs||(rs={})),function(t){t[t.LastBar=0]="LastBar",t[t.LastVisible=1]="LastVisible"}(hs||(hs={})),function(t){t.Solid="solid",t.VerticalGradient="gradient"}(ls||(ls={}));const ps="undefined"!=typeof window;function vs(){return!!ps&&window.navigator.userAgent.toLowerCase().indexOf("firefox")>-1}function ms(){return!!ps&&/iPhone|iPad|iPod/.test(window.navigator.platform)}var bs={allowDownsampling:!0};var ws=function(){function t(t,i){var s=this;this._resolutionMediaQueryList=null,this._resolutionListener=function(t){return s._onResolutionChanged()},this._canvasConfiguredListeners=[],this.canvas=t,this._canvasSize={width:this.canvas.clientWidth,height:this.canvas.clientHeight},this._options=i,this._configureCanvas(),this._installResolutionListener()}return t.prototype.destroy=function(){this._canvasConfiguredListeners.length=0,this._uninstallResolutionListener(),this.canvas=null},Object.defineProperty(t.prototype,"canvasSize",{get:function(){return{width:this._canvasSize.width,height:this._canvasSize.height}},enumerable:!0,configurable:!0}),t.prototype.resizeCanvas=function(t){this._canvasSize={width:t.width,height:t.height},this._configureCanvas()},Object.defineProperty(t.prototype,"pixelRatio",{get:function(){var t=this.canvas.ownerDocument.defaultView;if(null==t)throw new Error("No window is associated with the canvas");return t.devicePixelRatio>1||this._options.allowDownsampling?t.devicePixelRatio:1},enumerable:!0,configurable:!0}),t.prototype.subscribeCanvasConfigured=function(t){this._canvasConfiguredListeners.push(t)},t.prototype.unsubscribeCanvasConfigured=function(t){this._canvasConfiguredListeners=this._canvasConfiguredListeners.filter((function(i){return i!=t}))},t.prototype._configureCanvas=function(){var t=this.pixelRatio;this.canvas.style.width=this._canvasSize.width+"px",this.canvas.style.height=this._canvasSize.height+"px",this.canvas.width=this._canvasSize.width*t,this.canvas.height=this._canvasSize.height*t,this._emitCanvasConfigured()},t.prototype._emitCanvasConfigured=function(){var t=this;this._canvasConfiguredListeners.forEach((function(i){return i.call(t)}))},t.prototype._installResolutionListener=function(){if(null!==this._resolutionMediaQueryList)throw new Error("Resolution listener is already installed");var t=this.canvas.ownerDocument.defaultView;if(null==t)throw new Error("No window is associated with the canvas");var i=t.devicePixelRatio;this._resolutionMediaQueryList=t.matchMedia("all and (resolution: "+i+"dppx)"),this._resolutionMediaQueryList.addListener(this._resolutionListener)},t.prototype._uninstallResolutionListener=function(){null!==this._resolutionMediaQueryList&&(this._resolutionMediaQueryList.removeListener(this._resolutionListener),this._resolutionMediaQueryList=null)},t.prototype._reinstallResolutionListener=function(){this._uninstallResolutionListener(),this._installResolutionListener()},t.prototype._onResolutionChanged=function(){this._configureCanvas(),this._reinstallResolutionListener()},t}();class gs{constructor(t,i){this.Ft=t,this.Wt=i}lh(t){return this.Ft===t.Ft&&this.Wt===t.Wt}}function Ms(t){return t.ownerDocument&&t.ownerDocument.defaultView&&t.ownerDocument.defaultView.devicePixelRatio||1}function Ss(t){const i=h(t.getContext("2d"));return i.setTransform(1,0,0,1,0,0),i}function ys(t,i){const s=h(t.ownerDocument).createElement("canvas");t.appendChild(s);const n=function(t,i){return void 0===i&&(i=bs),new ws(t,i)}(s,{allowDownsampling:!1});return n.resizeCanvas({width:i.Ft,height:i.Wt}),n}function ks(t,i){return t.Nc-i.Nc}function Cs(t,i,s){const n=(t.Nc-i.Nc)/(t._t-i._t);return Math.sign(n)*Math.min(Math.abs(n),s)}class xs{constructor(t,i,s,n){this.Vc=null,this.Fc=null,this.Wc=null,this.zc=null,this.jc=null,this.$c=0,this.Hc=0,this.Uc=t,this.qc=i,this.Yc=s,this.hn=n}Xc(t,i){if(null!==this.Vc){if(this.Vc._t===i)return void(this.Vc.Nc=t);if(Math.abs(this.Vc.Nc-t)<this.hn)return}this.zc=this.Wc,this.Wc=this.Fc,this.Fc=this.Vc,this.Vc={_t:i,Nc:t}}dr(t,i){if(null===this.Vc||null===this.Fc)return;if(i-this.Vc._t>50)return;let s=0;const n=Cs(this.Vc,this.Fc,this.qc),e=ks(this.Vc,this.Fc),r=[n],h=[e];if(s+=e,null!==this.Wc){const t=Cs(this.Fc,this.Wc,this.qc);if(Math.sign(t)===Math.sign(n)){const i=ks(this.Fc,this.Wc);if(r.push(t),h.push(i),s+=i,null!==this.zc){const t=Cs(this.Wc,this.zc,this.qc);if(Math.sign(t)===Math.sign(n)){const i=ks(this.Wc,this.zc);r.push(t),h.push(i),s+=i}}}}let l=0;for(let t=0;t<r.length;++t)l+=h[t]/s*r[t];Math.abs(l)<this.Uc||(this.jc={Nc:t,_t:i},this.Hc=l,this.$c=function(t,i){const s=Math.log(i);return Math.log(1*s/-t)/s}(Math.abs(l),this.Yc))}Mu(t){const i=h(this.jc),s=t-i._t;return i.Nc+this.Hc*(Math.pow(this.Yc,s)-1)/Math.log(this.Yc)}gu(t){return null===this.jc||this.Zc(t)===this.$c}Zc(t){const i=t-h(this.jc)._t;return Math.min(i,this.$c)}}function Ts(t){ps&&void 0!==window.chrome&&t.addEventListener("mousedown",(t=>{if(1===t.button)return t.preventDefault(),!1}))}class Ds{constructor(t,i,s){this.Kc=0,this.Gc=null,this.Jc={nt:Number.NEGATIVE_INFINITY,et:Number.POSITIVE_INFINITY},this.Qc=0,this.td=null,this.sd={nt:Number.NEGATIVE_INFINITY,et:Number.POSITIVE_INFINITY},this.nd=null,this.ed=!1,this.rd=null,this.hd=null,this.ld=!1,this.ad=!1,this.od=!1,this._d=null,this.ud=null,this.dd=null,this.fd=null,this.pd=null,this.vd=null,this.md=null,this.bd=0,this.wd=!1,this.gd=!1,this.Md=!1,this.Sd=0,this.yd=null,this.kd=!ms(),this.Cd=t=>{this.xd(t)},this.Td=t=>{if(this.Dd(t)){const i=this.Pd(t);if(++this.Qc,this.td&&this.Qc>1){const{Rd:s}=this.Ld(Ls(t),this.sd);s<30&&!this.od&&this.Ad(i,this.Ed.Od),this.Bd()}}else{const i=this.Pd(t);if(++this.Kc,this.Gc&&this.Kc>1){const{Rd:s}=this.Ld(Ls(t),this.Jc);s<5&&!this.ad&&this.Id(i,this.Ed.Nd),this.Vd()}}},this.Fd=t,this.Ed=i,this.cs=s,this.Wd()}M(){null!==this._d&&(this._d(),this._d=null),null!==this.ud&&(this.ud(),this.ud=null),null!==this.fd&&(this.fd(),this.fd=null),null!==this.pd&&(this.pd(),this.pd=null),null!==this.vd&&(this.vd(),this.vd=null),null!==this.dd&&(this.dd(),this.dd=null),this.zd(),this.Vd()}jd(t){this.fd&&this.fd();const i=this.$d.bind(this);if(this.fd=()=>{this.Fd.removeEventListener("mousemove",i)},this.Fd.addEventListener("mousemove",i),this.Dd(t))return;const s=this.Pd(t);this.Id(s,this.Ed.Hd),this.kd=!0}Vd(){null!==this.Gc&&clearTimeout(this.Gc),this.Kc=0,this.Gc=null,this.Jc={nt:Number.NEGATIVE_INFINITY,et:Number.POSITIVE_INFINITY}}Bd(){null!==this.td&&clearTimeout(this.td),this.Qc=0,this.td=null,this.sd={nt:Number.NEGATIVE_INFINITY,et:Number.POSITIVE_INFINITY}}$d(t){if(this.Md||null!==this.hd)return;if(this.Dd(t))return;const i=this.Pd(t);this.Id(i,this.Ed.Ud),this.kd=!0}qd(t){const i=Os(t.changedTouches,h(this.yd));if(null===i)return;if(this.Sd=As(t),null!==this.md)return;if(this.gd)return;this.wd=!0;const s=this.Ld(Ls(i),h(this.hd)),{Yd:n,Xd:e,Rd:r}=s;if(this.ld||!(r<5)){if(!this.ld){const t=.5*n,i=e>=t&&!this.cs.Zd(),s=t>e&&!this.cs.Kd();i||s||(this.gd=!0),this.ld=!0,this.od=!0,this.zd(),this.Bd()}if(!this.gd){const s=this.Pd(t,i);this.Ad(s,this.Ed.Gd),Rs(t)}}}Jd(t){if(0!==t.button)return;const i=this.Ld(Ls(t),h(this.rd)),{Rd:s}=i;if(s>=5&&(this.ad=!0,this.Vd()),this.ad){const i=this.Pd(t);this.Id(i,this.Ed.Qd)}}Ld(t,i){const s=Math.abs(i.nt-t.nt),n=Math.abs(i.et-t.et);return{Yd:s,Xd:n,Rd:s+n}}tf(t){let i=Os(t.changedTouches,h(this.yd));if(null===i&&0===t.touches.length&&(i=t.changedTouches[0]),null===i)return;this.yd=null,this.Sd=As(t),this.zd(),this.hd=null,this.vd&&(this.vd(),this.vd=null);const s=this.Pd(t,i);if(this.Ad(s,this.Ed.if),++this.Qc,this.td&&this.Qc>1){const{Rd:t}=this.Ld(Ls(i),this.sd);t<30&&!this.od&&this.Ad(s,this.Ed.Od),this.Bd()}else this.od||(this.Ad(s,this.Ed.sf),this.Ed.sf&&Rs(t));0===this.Qc&&Rs(t),0===t.touches.length&&this.ed&&(this.ed=!1,Rs(t))}xd(t){if(0!==t.button)return;const i=this.Pd(t);if(this.rd=null,this.Md=!1,this.pd&&(this.pd(),this.pd=null),vs()){this.Fd.ownerDocument.documentElement.removeEventListener("mouseleave",this.Cd)}if(!this.Dd(t))if(this.Id(i,this.Ed.nf),++this.Kc,this.Gc&&this.Kc>1){const{Rd:s}=this.Ld(Ls(t),this.Jc);s<5&&!this.ad&&this.Id(i,this.Ed.Nd),this.Vd()}else this.ad||this.Id(i,this.Ed.ef)}zd(){null!==this.nd&&(clearTimeout(this.nd),this.nd=null)}rf(t){if(null!==this.yd)return;const i=t.changedTouches[0];this.yd=i.identifier,this.Sd=As(t);const s=this.Fd.ownerDocument.documentElement;this.od=!1,this.ld=!1,this.gd=!1,this.hd=Ls(i),this.vd&&(this.vd(),this.vd=null);{const i=this.qd.bind(this),n=this.tf.bind(this);this.vd=()=>{s.removeEventListener("touchmove",i),s.removeEventListener("touchend",n)},s.addEventListener("touchmove",i,{passive:!1}),s.addEventListener("touchend",n,{passive:!1}),this.zd(),this.nd=setTimeout(this.hf.bind(this,t),240)}const n=this.Pd(t,i);this.Ad(n,this.Ed.lf),this.td||(this.Qc=0,this.td=setTimeout(this.Bd.bind(this),500),this.sd=Ls(i))}af(t){if(0!==t.button)return;const i=this.Fd.ownerDocument.documentElement;vs()&&i.addEventListener("mouseleave",this.Cd),this.ad=!1,this.rd=Ls(t),this.pd&&(this.pd(),this.pd=null);{const t=this.Jd.bind(this),s=this.xd.bind(this);this.pd=()=>{i.removeEventListener("mousemove",t),i.removeEventListener("mouseup",s)},i.addEventListener("mousemove",t),i.addEventListener("mouseup",s)}if(this.Md=!0,this.Dd(t))return;const s=this.Pd(t);this.Id(s,this.Ed._f),this.Gc||(this.Kc=0,this.Gc=setTimeout(this.Vd.bind(this),500),this.Jc=Ls(t))}Wd(){this.Fd.addEventListener("mouseenter",this.jd.bind(this)),this.Fd.addEventListener("touchcancel",this.zd.bind(this));{const t=this.Fd.ownerDocument,i=t=>{this.Ed.uf&&(t.composed&&this.Fd.contains(t.composedPath()[0])||t.target&&this.Fd.contains(t.target)||this.Ed.uf())};this.ud=()=>{t.removeEventListener("touchstart",i)},this._d=()=>{t.removeEventListener("mousedown",i)},t.addEventListener("mousedown",i),t.addEventListener("touchstart",i,{passive:!0})}ms()&&(this.dd=()=>{this.Fd.removeEventListener("dblclick",this.Td)},this.Fd.addEventListener("dblclick",this.Td)),this.Fd.addEventListener("mouseleave",this.cf.bind(this)),this.Fd.addEventListener("touchstart",this.rf.bind(this),{passive:!0}),Ts(this.Fd),this.Fd.addEventListener("mousedown",this.af.bind(this)),this.df(),this.Fd.addEventListener("touchmove",(()=>{}),{passive:!1})}df(){void 0===this.Ed.ff&&void 0===this.Ed.pf&&void 0===this.Ed.vf||(this.Fd.addEventListener("touchstart",(t=>this.mf(t.touches)),{passive:!0}),this.Fd.addEventListener("touchmove",(t=>{if(2===t.touches.length&&null!==this.md&&void 0!==this.Ed.pf){const i=Ps(t.touches[0],t.touches[1])/this.bd;this.Ed.pf(this.md,i),Rs(t)}}),{passive:!1}),this.Fd.addEventListener("touchend",(t=>{this.mf(t.touches)})))}mf(t){1===t.length&&(this.wd=!1),2!==t.length||this.wd||this.ed?this.bf():this.wf(t)}wf(t){const i=this.Fd.getBoundingClientRect()||{left:0,top:0};this.md={nt:(t[0].clientX-i.left+(t[1].clientX-i.left))/2,et:(t[0].clientY-i.top+(t[1].clientY-i.top))/2},this.bd=Ps(t[0],t[1]),void 0!==this.Ed.ff&&this.Ed.ff(),this.zd()}bf(){null!==this.md&&(this.md=null,void 0!==this.Ed.vf&&this.Ed.vf())}cf(t){if(this.fd&&this.fd(),this.Dd(t))return;if(!this.kd)return;const i=this.Pd(t);this.Id(i,this.Ed.gf),this.kd=!ms()}hf(t){const i=Os(t.touches,h(this.yd));if(null===i)return;const s=this.Pd(t,i);this.Ad(s,this.Ed.Mf),this.od=!0,this.ed=!0}Dd(t){return t.sourceCapabilities&&void 0!==t.sourceCapabilities.firesTouchEvents?t.sourceCapabilities.firesTouchEvents:As(t)<this.Sd+500}Ad(t,i){i&&i.call(this.Ed,t)}Id(t,i){i&&i.call(this.Ed,t)}Pd(t,i){const s=i||t,n=this.Fd.getBoundingClientRect()||{left:0,top:0};return{Sf:s.clientX,yf:s.clientY,kf:s.pageX,Cf:s.pageY,xf:s.screenX,Tf:s.screenY,Df:s.clientX-n.left,Pf:s.clientY-n.top,Rf:t.ctrlKey,Lf:t.altKey,Af:t.shiftKey,Of:t.metaKey,Ef:!t.type.startsWith("mouse")&&"contextmenu"!==t.type&&"click"!==t.type,Bf:t.type,If:s.target,Nf:t.view,Vf:()=>{"touchstart"!==t.type&&Rs(t)}}}}function Ps(t,i){const s=t.clientX-i.clientX,n=t.clientY-i.clientY;return Math.sqrt(s*s+n*n)}function Rs(t){t.cancelable&&t.preventDefault()}function Ls(t){return{nt:t.pageX,et:t.pageY}}function As(t){return t.timeStamp||performance.now()}function Os(t,i){for(let s=0;s<t.length;++s)if(t[s].identifier===i)return t[s];return null}class Es{constructor(t,i,s,n){this.Vi=null,this.Ff=null,this.Wf=!1,this.zf=new Wt(200),this.Ir=null,this.jf=0,this.$f=!1,this.Hf=()=>{this.$f||this.ts.Uf().qt().Dh()},this.qf=()=>{this.$f||this.ts.Uf().qt().Dh()},this.ts=t,this.cs=i,this.Aa=i.layout,this.Gu=s,this.Yf="left"===n,this.Xf=document.createElement("div"),this.Xf.style.height="100%",this.Xf.style.overflow="hidden",this.Xf.style.width="25px",this.Xf.style.left="0",this.Xf.style.position="relative",this.Zf=ys(this.Xf,new gs(16,16)),this.Zf.subscribeCanvasConfigured(this.Hf);const e=this.Zf.canvas;e.style.position="absolute",e.style.zIndex="1",e.style.left="0",e.style.top="0",this.Kf=ys(this.Xf,new gs(16,16)),this.Kf.subscribeCanvasConfigured(this.qf);const r=this.Kf.canvas;r.style.position="absolute",r.style.zIndex="2",r.style.left="0",r.style.top="0";const h={_f:this.Gf.bind(this),lf:this.Gf.bind(this),Qd:this.Jf.bind(this),Gd:this.Jf.bind(this),uf:this.Qf.bind(this),nf:this.tp.bind(this),if:this.tp.bind(this),Nd:this.ip.bind(this),Od:this.ip.bind(this),Hd:this.sp.bind(this),gf:this.np.bind(this)};this.ep=new Ds(this.Kf.canvas,h,{Zd:()=>!1,Kd:()=>!0})}M(){this.ep.M(),this.Kf.unsubscribeCanvasConfigured(this.qf),this.Kf.destroy(),this.Zf.unsubscribeCanvasConfigured(this.Hf),this.Zf.destroy(),null!==this.Vi&&this.Vi.ro().v(this),this.Vi=null}rp(){return this.Xf}T(){return this.Aa.fontSize}hp(){const t=this.Gu.F();return this.Ir!==t.D&&(this.zf.ze(),this.Ir=t.D),t}lp(){if(null===this.Vi)return 0;let t=0;const i=this.hp(),s=Ss(this.Zf.canvas),n=this.Vi.Ql();s.font=this.ap(),n.length>0&&(t=Math.max(this.zf.Si(s,n[0].ca),this.zf.Si(s,n[n.length-1].ca)));const e=this.op();for(let i=e.length;i--;){const n=this.zf.Si(s,e[i].ii());n>t&&(t=n)}const r=this.Vi.Tt();if(null!==r&&null!==this.Ff){const i=this.Vi.vs(1,r),n=this.Vi.vs(this.Ff.Wt-2,r);t=Math.max(t,this.zf.Si(s,this.Vi.zi(Math.floor(Math.min(i,n))+.11111111111111,r)),this.zf.Si(s,this.Vi.zi(Math.ceil(Math.max(i,n))-.11111111111111,r)))}const h=t||34;let l=Math.ceil(i.k+i.C+i.O+i.B+5+h);return l+=l%2,l}_p(t){if(t.Ft<0||t.Wt<0)throw new Error("Try to set invalid size to PriceAxisWidget "+JSON.stringify(t));null!==this.Ff&&this.Ff.lh(t)||(this.Ff=t,this.$f=!0,this.Zf.resizeCanvas({width:t.Ft,height:t.Wt}),this.Kf.resizeCanvas({width:t.Ft,height:t.Wt}),this.$f=!1,this.Xf.style.width=t.Ft+"px",this.Xf.style.height=t.Wt+"px",this.Xf.style.minWidth=t.Ft+"px")}up(){return h(this.Ff).Ft}Gi(t){this.Vi!==t&&(null!==this.Vi&&this.Vi.ro().v(this),this.Vi=t,t.ro().l(this.ya.bind(this),this))}Lt(){return this.Vi}ze(){const t=this.ts.cp();this.ts.Uf().qt().qo(t,h(this.Lt()))}dp(t){if(null===this.Ff)return;if(1!==t){const t=Ss(this.Zf.canvas);this.fp(),this.pp(t,this.Zf.pixelRatio),this.Ce(t,this.Zf.pixelRatio),this.vp(t,this.Zf.pixelRatio),this.mp(t,this.Zf.pixelRatio)}const i=Ss(this.Kf.canvas),s=this.Ff.Ft,n=this.Ff.Wt;V(i,this.Kf.pixelRatio,(()=>{i.clearRect(0,0,s,n)})),this.bp(i,this.Kf.pixelRatio)}wp(){return this.Zf.canvas}wt(){var t;null===(t=this.Vi)||void 0===t||t.Ql()}Gf(t){if(null===this.Vi||this.Vi.Wi()||!this.cs.handleScale.axisPressedMouseMove.price)return;const i=this.ts.Uf().qt(),s=this.ts.cp();this.Wf=!0,i.Fo(s,this.Vi,t.Pf)}Jf(t){if(null===this.Vi||!this.cs.handleScale.axisPressedMouseMove.price)return;const i=this.ts.Uf().qt(),s=this.ts.cp(),n=this.Vi;i.Wo(s,n,t.Pf)}Qf(){if(null===this.Vi||!this.cs.handleScale.axisPressedMouseMove.price)return;const t=this.ts.Uf().qt(),i=this.ts.cp(),s=this.Vi;this.Wf&&(this.Wf=!1,t.zo(i,s))}tp(t){if(null===this.Vi||!this.cs.handleScale.axisPressedMouseMove.price)return;const i=this.ts.Uf().qt(),s=this.ts.cp();this.Wf=!1,i.zo(s,this.Vi)}ip(t){this.cs.handleScale.axisDoubleClickReset.price&&this.ze()}sp(t){if(null===this.Vi)return;!this.ts.Uf().qt().F().handleScale.axisPressedMouseMove.price||this.Vi.sh()||this.Vi.Wa()||this.gp(1)}np(t){this.gp(0)}op(){const t=[],i=null===this.Vi?void 0:this.Vi;return(s=>{for(let n=0;n<s.length;++n){const e=s[n].Rs(this.ts.cp(),i);for(let i=0;i<e.length;i++)t.push(e[i])}})(this.ts.cp().Qa()),t}pp(t,i){if(null===this.Ff)return;const s=this.Ff.Ft,n=this.Ff.Wt;V(t,i,(()=>{const i=this.ts.cp().qt(),e=i.U(),r=i.Bc();e===r?F(t,0,0,s,n,e):$(t,0,0,s,n,e,r)}))}Ce(t,i){if(null===this.Ff||null===this.Vi||!this.Vi.F().borderVisible)return;t.save(),t.fillStyle=this.Vi.F().borderColor;const s=Math.max(1,Math.floor(this.hp().k*i));let n;n=this.Yf?Math.floor(this.Ff.Ft*i)-s:0,t.fillRect(n,0,s,Math.ceil(this.Ff.Wt*i)),t.restore()}vp(t,i){var s;if(null===this.Ff||null===this.Vi)return;const n=this.Vi.Ql();t.save();const e=this.Vi.F();t.strokeStyle=e.borderColor,t.font=this.ap(),t.fillStyle=e.borderColor;const r=this.hp(),h=this.Yf?Math.floor((this.Ff.Ft-r.C)*i):0,l=this.Yf?Math.round(h-r.O*i):Math.round(h+r.C*i+r.O*i),a=Math.max(1,Math.floor(i)),o=Math.floor(.5*i);if(e.borderVisible&&e.ticksVisible){const s=Math.round(r.C*i);t.beginPath();for(const e of n)t.rect(h,Math.round(e.Xl*i)-o,s,a);t.fill()}t.fillStyle=null!==(s=e.textColor)&&void 0!==s?s:this.Aa.textColor,t.textAlign=this.Yf?"right":"left",t.textBaseline="middle";const _=n.map((i=>this.zf.Mi(t,i.ca)));V(t,i,(()=>{for(let s=n.length;s--;){const e=n[s];t.fillText(e.ca,l/i,e.Xl+_[s])}})),t.restore()}fp(){if(null===this.Ff||null===this.Vi)return;let t=this.Ff.Wt/2;const i=[],s=this.Vi.Qa().slice(),n=this.ts.cp(),e=this.hp();this.Vi===n.tr()&&this.ts.cp().Qa().forEach((t=>{n.Qe(t)&&s.push(t)}));const r=this.Vi.$l()[0],h=this.Vi;s.forEach((s=>{const e=s.Rs(n,h);e.forEach((t=>{t.Oi(null),t.Ei()&&i.push(t)})),r===s&&e.length>0&&(t=e[0].ki())})),i.forEach((t=>t.Oi(t.ki())));this.Vi.F().alignLabels&&this.Mp(i,e,t)}Mp(t,i,s){if(null===this.Ff)return;const n=t.filter((t=>t.ki()<=s)),e=t.filter((t=>t.ki()>s));n.sort(((t,i)=>i.ki()-t.ki())),n.length&&e.length&&e.push(n[0]),e.sort(((t,i)=>t.ki()-i.ki()));for(const s of t){const t=Math.floor(s.Kt(i)/2),n=s.ki();n>-t&&n<t&&s.Oi(t),n>this.Ff.Wt-t&&n<this.Ff.Wt+t&&s.Oi(this.Ff.Wt-t)}for(let t=1;t<n.length;t++){const s=n[t],e=n[t-1],r=e.Kt(i,!1),h=s.ki(),l=e.Ai();h>l-r&&s.Oi(l-r)}for(let t=1;t<e.length;t++){const s=e[t],n=e[t-1],r=n.Kt(i,!0),h=s.ki(),l=n.Ai();h<l+r&&s.Oi(l+r)}}mp(t,i){if(null===this.Ff)return;t.save();const s=this.Ff,n=this.op(),e=this.hp(),r=this.Yf?"right":"left";n.forEach((n=>{if(n.Bi()){const l=n.Mt(h(this.Vi));t.save(),l.X(t,e,this.zf,s.Ft,r,i),t.restore()}})),t.restore()}bp(t,i){if(null===this.Ff||null===this.Vi)return;t.save();const s=this.Ff,n=this.ts.Uf().qt(),e=[],r=this.ts.cp(),l=n.dc().Rs(r,this.Vi);l.length&&e.push(l);const a=this.hp(),o=this.Yf?"right":"left";e.forEach((n=>{n.forEach((n=>{t.save(),n.Mt(h(this.Vi)).X(t,a,this.zf,s.Ft,o,i),t.restore()}))})),t.restore()}gp(t){this.Xf.style.cursor=1===t?"ns-resize":"default"}ya(){const t=this.lp();this.jf<t&&this.ts.Uf().qt().pl(),this.jf=t}ap(){return T(this.Aa.fontSize,this.Aa.fontFamily)}}function Bs(t,i,s,n,e){t.K&&t.K(i,s,n,e)}function Is(t,i,s,n,e){t.X(i,s,n,e)}function Ns(t,i){return t.Ps(i)}function Vs(t,i){return t.Ji(i)}function Fs(t,i){return void 0!==t.Tl?t.Tl(i):[]}class Ws{constructor(t,i){this.Ff=new gs(0,0),this.Sp=null,this.yp=null,this.kp=null,this.Cp=!1,this.xp=new m,this.Tp=0,this.Dp=!1,this.Pp=null,this.Rp=!1,this.Lp=null,this.Ap=null,this.$f=!1,this.Hf=()=>{this.$f||null===this.Op||this.Hi().Dh()},this.qf=()=>{this.$f||null===this.Op||this.Hi().Dh()},this.Ep=t,this.Op=i,this.Op.Zo().l(this.Bp.bind(this),this,!0),this.Ip=document.createElement("td"),this.Ip.style.padding="0",this.Ip.style.position="relative";const s=document.createElement("div");s.style.width="100%",s.style.height="100%",s.style.position="relative",s.style.overflow="hidden",this.Np=document.createElement("td"),this.Np.style.padding="0",this.Vp=document.createElement("td"),this.Vp.style.padding="0",this.Ip.appendChild(s),this.Zf=ys(s,new gs(16,16)),this.Zf.subscribeCanvasConfigured(this.Hf);const n=this.Zf.canvas;n.style.position="absolute",n.style.zIndex="1",n.style.left="0",n.style.top="0",this.Kf=ys(s,new gs(16,16)),this.Kf.subscribeCanvasConfigured(this.qf);const e=this.Kf.canvas;e.style.position="absolute",e.style.zIndex="2",e.style.left="0",e.style.top="0",this.Fp=document.createElement("tr"),this.Fp.appendChild(this.Np),this.Fp.appendChild(this.Ip),this.Fp.appendChild(this.Vp),this.Wp(),this.ep=new Ds(this.Kf.canvas,this,{Zd:()=>null===this.Pp&&!this.Ep.F().handleScroll.vertTouchDrag,Kd:()=>null===this.Pp&&!this.Ep.F().handleScroll.horzTouchDrag})}M(){null!==this.Sp&&this.Sp.M(),null!==this.yp&&this.yp.M(),this.Kf.unsubscribeCanvasConfigured(this.qf),this.Kf.destroy(),this.Zf.unsubscribeCanvasConfigured(this.Hf),this.Zf.destroy(),null!==this.Op&&this.Op.Zo().v(this),this.ep.M()}cp(){return h(this.Op)}zp(t){null!==this.Op&&this.Op.Zo().v(this),this.Op=t,null!==this.Op&&this.Op.Zo().l(Ws.prototype.Bp.bind(this),this,!0),this.Wp()}Uf(){return this.Ep}rp(){return this.Fp}Wp(){if(null!==this.Op&&(this.jp(),0!==this.Hi().gt().length)){if(null!==this.Sp){const t=this.Op.No();this.Sp.Gi(h(t))}if(null!==this.yp){const t=this.Op.Vo();this.yp.Gi(h(t))}}}$p(){null!==this.Sp&&this.Sp.wt(),null!==this.yp&&this.yp.wt()}Po(){return null!==this.Op?this.Op.Po():0}Ro(t){this.Op&&this.Op.Ro(t)}Hd(t){if(!this.Op)return;this.Hp();const i=t.Df,s=t.Pf;this.Up(i,s)}_f(t){this.Hp(),this.qp(),this.Up(t.Df,t.Pf)}Ud(t){if(!this.Op)return;this.Hp();const i=t.Df,s=t.Pf;this.Up(i,s);const n=this.Nr(i,s);this.Hi().lc(n&&{ac:n.ac,Yp:n.Yp})}ef(t){null!==this.Op&&(this.Hp(),this.Xp(t))}Qd(t){this.Hp(),this.Zp(t),this.Up(t.Df,t.Pf)}nf(t){null!==this.Op&&(this.Hp(),this.Dp=!1,this.Kp(t))}sf(t){null!==this.Op&&this.Xp(t)}Mf(t){if(this.Dp=!0,null===this.Pp){const i={x:t.Df,y:t.Pf};this.Gp(i,i)}}gf(t){null!==this.Op&&(this.Hp(),this.Op.qt().lc(null),this.Jp())}Qp(){return this.xp}ff(){this.Tp=1,this.Hi().qs()}pf(t,i){if(!this.Ep.F().handleScale.pinch)return;const s=5*(i-this.Tp);this.Tp=i,this.Hi().wc(t.nt,s)}lf(t){if(this.Dp=!1,this.Rp=null!==this.Pp,this.qp(),null!==this.Pp){const i=this.Hi().dc();this.Lp={x:i.Gt(),y:i.Jt()},this.Pp={x:t.Df,y:t.Pf}}}Gd(t){if(null===this.Op)return;const i=t.Df,s=t.Pf;if(null===this.Pp)this.Zp(t);else{this.Rp=!1;const t=h(this.Lp),n=t.x+(i-this.Pp.x),e=t.y+(s-this.Pp.y);this.Up(n,e)}}if(t){0===this.Uf().F().trackingMode.exitMode&&(this.Rp=!0),this.tv(),this.Kp(t)}Nr(t,i){const s=this.Op;if(null===s)return null;const n=s.Qa();for(const e of n){const n=this.iv(e.Ps(s),t,i);if(null!==n)return{ac:e,Nf:n.Nf,Yp:n.Yp}}return null}sv(t,i){h("left"===i?this.Sp:this.yp)._p(new gs(t,this.Ff.Wt))}nv(){return this.Ff}_p(t){if(t.Ft<0||t.Wt<0)throw new Error("Try to set invalid size to PaneWidget "+JSON.stringify(t));this.Ff.lh(t)||(this.Ff=t,this.$f=!0,this.Zf.resizeCanvas({width:t.Ft,height:t.Wt}),this.Kf.resizeCanvas({width:t.Ft,height:t.Wt}),this.$f=!1,this.Ip.style.width=t.Ft+"px",this.Ip.style.height=t.Wt+"px")}ev(){const t=h(this.Op);t.Io(t.No()),t.Io(t.Vo());for(const i of t.$l())if(t.Qe(i)){const s=i.Lt();null!==s&&t.Io(s),i.As()}}wp(){return this.Zf.canvas}dp(t){if(0===t)return;if(null===this.Op)return;if(t>1&&this.ev(),null!==this.Sp&&this.Sp.dp(t),null!==this.yp&&this.yp.dp(t),1!==t){const t=Ss(this.Zf.canvas);t.save(),this.pp(t,this.Zf.pixelRatio),this.Op&&(this.rv(t,this.Zf.pixelRatio),this.hv(t,this.Zf.pixelRatio),this.lv(t,this.Zf.pixelRatio,Ns),this.lv(t,this.Zf.pixelRatio,Vs)),t.restore()}const i=Ss(this.Kf.canvas);i.clearRect(0,0,Math.ceil(this.Ff.Ft*this.Kf.pixelRatio),Math.ceil(this.Ff.Wt*this.Kf.pixelRatio)),this.lv(i,this.Zf.pixelRatio,Fs),this.av(i,this.Kf.pixelRatio)}ov(){return this.Sp}_v(){return this.yp}Bp(){null!==this.Op&&this.Op.Zo().v(this),this.Op=null}Xp(t){const i=t.Df,s=t.Pf;this.xp.g()&&this.xp.m(this.Hi().kt().ru(i),{x:i,y:s})}pp(t,i){V(t,i,(()=>{const i=this.Hi(),s=i.U(),n=i.Bc();s===n?F(t,0,0,this.Ff.Ft,this.Ff.Wt,n):$(t,0,0,this.Ff.Ft,this.Ff.Wt,s,n)}))}rv(t,i){const s=h(this.Op),n=s.Ko().Ph().Mt(s.Kt(),s.Zt());null!==n&&(t.save(),n.X(t,i,!1),t.restore())}hv(t,i){const s=this.Hi().cc();this.uv(t,i,Ns,Bs,s),this.uv(t,i,Ns,Is,s)}av(t,i){this.uv(t,i,Ns,Is,this.Hi().dc())}lv(t,i,s){const n=h(this.Op).Qa();for(const e of n)this.uv(t,i,s,Bs,e);for(const e of n)this.uv(t,i,s,Is,e)}uv(t,i,s,n,e){const r=h(this.Op),l=s(e,r),a=r.Kt(),o=r.Zt(),_=r.qt().hc(),u=null!==_&&_.ac===e,c=null!==_&&u&&void 0!==_.Yp?_.Yp.Vr:void 0;for(const s of l){const e=s.Mt(a,o);null!==e&&(t.save(),n(e,t,i,u,c),t.restore())}}iv(t,i,s){for(const n of t){const t=n.Mt(this.Ff.Wt,this.Ff.Ft);if(null!==t&&t.Nr){const e=t.Nr(i,s);if(null!==e)return{Nf:n,Yp:e}}}return null}jp(){if(null===this.Op)return;const t=this.Ep,i=this.Op.No().F().visible,s=this.Op.Vo().F().visible;i||null===this.Sp||(this.Np.removeChild(this.Sp.rp()),this.Sp.M(),this.Sp=null),s||null===this.yp||(this.Vp.removeChild(this.yp.rp()),this.yp.M(),this.yp=null);const n=t.qt().Pc();i&&null===this.Sp&&(this.Sp=new Es(this,t.F(),n,"left"),this.Np.appendChild(this.Sp.rp())),s&&null===this.yp&&(this.yp=new Es(this,t.F(),n,"right"),this.Vp.appendChild(this.yp.rp()))}cv(t){return t.Ef&&this.Dp||null!==this.Pp}dv(t){return Math.max(0,Math.min(t,this.Ff.Ft-1))}fv(t){return Math.max(0,Math.min(t,this.Ff.Wt-1))}Up(t,i){this.Hi().xc(this.dv(t),this.fv(i),h(this.Op))}Jp(){this.Hi().Tc()}tv(){this.Rp&&(this.Pp=null,this.Jp())}Gp(t,i){this.Pp=t,this.Rp=!1,this.Up(i.x,i.y);const s=this.Hi().dc();this.Lp={x:s.Gt(),y:s.Jt()}}Hi(){return this.Ep.qt()}Kp(t){if(!this.Cp)return;const i=this.Hi(),s=this.cp();if(i.Ho(s,s.ps()),this.kp=null,this.Cp=!1,i.yc(),null!==this.Ap){const t=performance.now(),s=i.kt();this.Ap.dr(s.ou(),t),this.Ap.gu(t)||i.Zs(this.Ap)}}Hp(){this.Pp=null}qp(){if(!this.Op)return;if(this.Hi().qs(),document.activeElement!==document.body&&document.activeElement!==document.documentElement)h(document.activeElement).blur();else{const t=document.getSelection();null!==t&&t.removeAllRanges()}!this.Op.ps().Wi()&&this.Hi().kt().Wi()}Zp(t){if(null===this.Op)return;const i=this.Hi(),s=i.kt();if(s.Wi())return;const n=this.Ep.F(),e=n.handleScroll,r=n.kineticScroll;if((!e.pressedMouseMove||t.Ef)&&(!e.horzTouchDrag&&!e.vertTouchDrag||!t.Ef))return;const h=this.Op.ps(),l=performance.now();if(null!==this.kp||this.cv(t)||(this.kp={x:t.Sf,y:t.yf,u_:l,Df:t.Df,Pf:t.Pf}),null!==this.kp&&!this.Cp&&(this.kp.x!==t.Sf||this.kp.y!==t.yf)){if(t.Ef&&r.touch||!t.Ef&&r.mouse){const t=s.Gn();this.Ap=new xs(.2/t,7/t,.997,15/t),this.Ap.Xc(s.ou(),this.kp.u_)}else this.Ap=null;h.Wi()||i.jo(this.Op,h,t.Pf),i.Mc(t.Df),this.Cp=!0}this.Cp&&(h.Wi()||i.$o(this.Op,h,t.Pf),i.Sc(t.Df),null!==this.Ap&&this.Ap.Xc(s.ou(),l))}}class zs{constructor(t,i,s,n,e){this.vt=!0,this.Ff=new gs(0,0),this.Hf=()=>this.dp(3),this.Yf="left"===t,this.Gu=s.Pc,this.cs=i,this.pv=n,this.vv=e,this.Xf=document.createElement("div"),this.Xf.style.width="25px",this.Xf.style.height="100%",this.Xf.style.overflow="hidden",this.Zf=ys(this.Xf,new gs(16,16)),this.Zf.subscribeCanvasConfigured(this.Hf)}M(){this.Zf.unsubscribeCanvasConfigured(this.Hf),this.Zf.destroy()}rp(){return this.Xf}nv(){return this.Ff}_p(t){if(t.Ft<0||t.Wt<0)throw new Error("Try to set invalid size to PriceAxisStub "+JSON.stringify(t));this.Ff.lh(t)||(this.Ff=t,this.Zf.resizeCanvas({width:t.Ft,height:t.Wt}),this.Xf.style.width=`${t.Ft}px`,this.Xf.style.minWidth=`${t.Ft}px`,this.Xf.style.height=`${t.Wt}px`,this.vt=!0)}dp(t){if(t<3&&!this.vt)return;if(0===this.Ff.Ft||0===this.Ff.Wt)return;this.vt=!1;const i=Ss(this.Zf.canvas);this.pp(i,this.Zf.pixelRatio),this.Ce(i,this.Zf.pixelRatio)}wp(){return this.Zf.canvas}Ce(t,i){if(!this.pv())return;const s=this.Ff.Ft;t.save(),t.fillStyle=this.cs.timeScale.borderColor;const n=Math.floor(this.Gu.F().k*i),e=this.Yf?Math.round(s*i)-n:0;t.fillRect(e,0,n,n),t.restore()}pp(t,i){V(t,i,(()=>{F(t,0,0,this.Ff.Ft,this.Ff.Wt,this.vv())}))}}function js(t,i){return t.g_>i.g_?t:i}class $s{constructor(t){this.mv=null,this.bv=null,this.S=null,this.wv=!1,this.Ff=new gs(0,0),this.gv=new m,this.zf=new Wt(5),this.$f=!1,this.Hf=()=>{this.$f||this.Ep.qt().Dh()},this.qf=()=>{this.$f||this.Ep.qt().Dh()},this.Ep=t,this.cs=t.F().layout,this.Mv=document.createElement("tr"),this.Sv=document.createElement("td"),this.Sv.style.padding="0",this.yv=document.createElement("td"),this.yv.style.padding="0",this.Xf=document.createElement("td"),this.Xf.style.height="25px",this.Xf.style.padding="0",this.kv=document.createElement("div"),this.kv.style.width="100%",this.kv.style.height="100%",this.kv.style.position="relative",this.kv.style.overflow="hidden",this.Xf.appendChild(this.kv),this.Zf=ys(this.kv,new gs(16,16)),this.Zf.subscribeCanvasConfigured(this.Hf);const i=this.Zf.canvas;i.style.position="absolute",i.style.zIndex="1",i.style.left="0",i.style.top="0",this.Kf=ys(this.kv,new gs(16,16)),this.Kf.subscribeCanvasConfigured(this.qf);const s=this.Kf.canvas;s.style.position="absolute",s.style.zIndex="2",s.style.left="0",s.style.top="0",this.Mv.appendChild(this.Sv),this.Mv.appendChild(this.Xf),this.Mv.appendChild(this.yv),this.Cv(),this.Ep.qt().Do().l(this.Cv.bind(this),this),this.ep=new Ds(this.Kf.canvas,this,{Zd:()=>!0,Kd:()=>!1})}M(){this.ep.M(),null!==this.mv&&this.mv.M(),null!==this.bv&&this.bv.M(),this.Kf.unsubscribeCanvasConfigured(this.qf),this.Kf.destroy(),this.Zf.unsubscribeCanvasConfigured(this.Hf),this.Zf.destroy()}rp(){return this.Mv}xv(){return this.mv}Tv(){return this.bv}_f(t){if(this.wv)return;this.wv=!0;const i=this.Ep.qt();!i.kt().Wi()&&this.Ep.F().handleScale.axisPressedMouseMove.time&&i.bc(t.Df)}lf(t){this._f(t)}uf(){const t=this.Ep.qt();!t.kt().Wi()&&this.wv&&(this.wv=!1,this.Ep.F().handleScale.axisPressedMouseMove.time&&t.Cc())}Qd(t){const i=this.Ep.qt();!i.kt().Wi()&&this.Ep.F().handleScale.axisPressedMouseMove.time&&i.kc(t.Df)}Gd(t){this.Qd(t)}nf(){this.wv=!1;const t=this.Ep.qt();t.kt().Wi()&&!this.Ep.F().handleScale.axisPressedMouseMove.time||t.Cc()}if(){this.nf()}Nd(){this.Ep.F().handleScale.axisDoubleClickReset.time&&this.Ep.qt().Gs()}Od(){this.Nd()}Hd(){this.Ep.qt().F().handleScale.axisPressedMouseMove.time&&this.gp(1)}gf(){this.gp(0)}nv(){return this.Ff}Dv(){return this.gv}Pv(t,i,s){this.Ff&&this.Ff.lh(t)||(this.Ff=t,this.$f=!0,this.Zf.resizeCanvas({width:t.Ft,height:t.Wt}),this.Kf.resizeCanvas({width:t.Ft,height:t.Wt}),this.$f=!1,this.Xf.style.width=t.Ft+"px",this.Xf.style.height=t.Wt+"px",this.gv.m(t)),null!==this.mv&&this.mv._p(new gs(i,t.Wt)),null!==this.bv&&this.bv._p(new gs(s,t.Wt))}Rv(){const t=this.Lv();return Math.ceil(t.k+t.C+t.T+t.I+t.A+t.Av)}wt(){this.Ep.qt().kt().Ql()}wp(){return this.Zf.canvas}dp(t){if(0===t)return;if(1!==t){const i=Ss(this.Zf.canvas);this.pp(i,this.Zf.pixelRatio),this.Ce(i,this.Zf.pixelRatio),this.vp(i,this.Zf.pixelRatio),null!==this.mv&&this.mv.dp(t),null!==this.bv&&this.bv.dp(t)}const i=Ss(this.Kf.canvas),s=this.Kf.pixelRatio;i.clearRect(0,0,Math.ceil(this.Ff.Ft*s),Math.ceil(this.Ff.Wt*s)),this.Ov([this.Ep.qt().dc()],i,s)}pp(t,i){V(t,i,(()=>{F(t,0,0,this.Ff.Ft,this.Ff.Wt,this.Ep.qt().Bc())}))}Ce(t,i){if(this.Ep.F().timeScale.borderVisible){t.save(),t.fillStyle=this.Ev();const s=Math.max(1,Math.floor(this.Lv().k*i));t.fillRect(0,0,Math.ceil(this.Ff.Ft*i),s),t.restore()}}vp(t,i){const s=this.Ep.qt().kt(),n=s.Ql();if(!n||0===n.length)return;let e=n.reduce(js,n[0]).g_;e>30&&e<50&&(e=30),t.save(),t.strokeStyle=this.Ev();const r=this.Lv(),h=r.k+r.C+r.I+r.T/2;t.textAlign="center",t.textBaseline="middle",t.fillStyle=this.Ev();const l=Math.max(1,Math.floor(i)),a=Math.floor(.5*i),o=s.F();if(o.borderVisible&&o.ticksVisible){t.beginPath();const s=Math.round(r.C*i);for(let e=n.length;e--;){const r=Math.round(n[e].Xl*i);t.rect(r-a,0,l,s)}t.fill()}t.fillStyle=this.$(),V(t,i,(()=>{t.font=this.ap();for(const i of n)if(i.g_<e){const s=i.cu?this.Bv(t,i.Xl,i.ca):i.Xl;t.fillText(i.ca,s,h)}t.font=this.Iv();for(const i of n)if(i.g_>=e){const s=i.cu?this.Bv(t,i.Xl,i.ca):i.Xl;t.fillText(i.ca,s,h)}})),t.restore()}Bv(t,i,s){const n=this.zf.Si(t,s),e=n/2,r=Math.floor(i-e)+.5;return r<0?i+=Math.abs(0-r):r+n>this.Ff.Ft&&(i-=Math.abs(this.Ff.Ft-(r+n))),i}Ov(t,i,s){const n=this.Lv();for(const e of t)for(const t of e.Qi())i.save(),t.Mt().X(i,n,s),i.restore()}Ev(){return this.Ep.F().timeScale.borderColor}$(){return this.cs.textColor}W(){return this.cs.fontSize}ap(){return T(this.W(),this.cs.fontFamily)}Iv(){return T(this.W(),this.cs.fontFamily,"bold")}Lv(){null===this.S&&(this.S={k:1,N:NaN,I:NaN,A:NaN,$i:NaN,C:5,T:NaN,D:"",ji:new Wt,Av:0});const t=this.S,i=this.ap();if(t.D!==i){const s=this.W();t.T=s,t.D=i,t.I=3*s/12,t.A=3*s/12,t.$i=9*s/12,t.N=0,t.Av=4*s/12,t.ji.ze()}return this.S}gp(t){this.Xf.style.cursor=1===t?"ew-resize":"default"}Cv(){const t=this.Ep.qt(),i=t.F();i.leftPriceScale.visible||null===this.mv||(this.Sv.removeChild(this.mv.rp()),this.mv.M(),this.mv=null),i.rightPriceScale.visible||null===this.bv||(this.yv.removeChild(this.bv.rp()),this.bv.M(),this.bv=null);const s={Pc:this.Ep.qt().Pc()},n=()=>i.leftPriceScale.borderVisible&&t.kt().F().borderVisible,e=()=>t.Bc();i.leftPriceScale.visible&&null===this.mv&&(this.mv=new zs("left",i,s,n,e),this.Sv.appendChild(this.mv.rp())),i.rightPriceScale.visible&&null===this.bv&&(this.bv=new zs("right",i,s,n,e),this.yv.appendChild(this.bv.rp()))}}const Hs=!!navigator.userAgentData&&navigator.userAgentData.brands.some((t=>t.brand.includes("Chromium")))&&((null===(Us=null===navigator||void 0===navigator?void 0:navigator.userAgentData)||void 0===Us?void 0:Us.platform)?"Windows"===navigator.userAgentData.platform:navigator.userAgent.toLowerCase().indexOf("win")>=0);var Us;class qs{constructor(t,i){var s;this.Nv=[],this.Vv=0,this.pa=0,this.Ye=0,this.Fv=0,this.Wv=0,this.zv=null,this.jv=!1,this.xp=new m,this.Xu=new m,this.cs=i,this.Mv=document.createElement("div"),this.Mv.classList.add("tv-lightweight-charts"),this.Mv.style.overflow="hidden",this.Mv.style.width="100%",this.Mv.style.height="100%",(s=this.Mv).style.userSelect="none",s.style.webkitUserSelect="none",s.style.msUserSelect="none",s.style.MozUserSelect="none",s.style.webkitTapHighlightColor="transparent",this.$v=document.createElement("table"),this.$v.setAttribute("cellspacing","0"),this.Mv.appendChild(this.$v),this.Hv=this.Uv.bind(this),Ys(this.cs)&&this.qv(!0),this.Hi=new cs(this.Ku.bind(this),this.cs),this.qt().fc().l(this.Yv.bind(this),this),this.Xv=new $s(this),this.$v.appendChild(this.Xv.rp());let n=this.cs.width,e=this.cs.height;if(0===n||0===e){const i=t.getBoundingClientRect();0===n&&(n=Math.floor(i.width),n-=n%2),0===e&&(e=Math.floor(i.height),e-=e%2)}this.Zv(n,e),this.Kv(),t.appendChild(this.Mv),this.Gv(),this.Hi.kt().ku().l(this.Hi.pl.bind(this.Hi),this),this.Hi.Do().l(this.Hi.pl.bind(this.Hi),this)}qt(){return this.Hi}F(){return this.cs}Jv(){return this.Nv}Qv(){return this.Xv}M(){this.qv(!1),0!==this.Vv&&window.cancelAnimationFrame(this.Vv),this.Hi.fc().v(this),this.Hi.kt().ku().v(this),this.Hi.Do().v(this),this.Hi.M();for(const t of this.Nv)this.$v.removeChild(t.rp()),t.Qp().v(this),t.M();this.Nv=[],h(this.Xv).M(),null!==this.Mv.parentElement&&this.Mv.parentElement.removeChild(this.Mv),this.Xu.M(),this.xp.M()}Zv(t,i,s=!1){if(this.pa===i&&this.Ye===t)return;this.pa=i,this.Ye=t;const n=i+"px",e=t+"px";h(this.Mv).style.height=n,h(this.Mv).style.width=e,this.$v.style.height=n,this.$v.style.width=e,s?this.tm(tt.rn(),performance.now()):this.Hi.pl()}dp(t){void 0===t&&(t=tt.rn());for(let i=0;i<this.Nv.length;i++)this.Nv[i].dp(t.Hs(i).zs);this.cs.timeScale.visible&&this.Xv.dp(t.$s())}Th(t){const i=Ys(this.cs);this.Hi.Th(t);const s=Ys(this.cs);s!==i&&this.qv(s),this.Gv();const n=t.width||this.Ye,e=t.height||this.pa;this.Zv(n,e)}Qp(){return this.xp}fc(){return this.Xu}im(){null!==this.zv&&(this.tm(this.zv,performance.now()),this.zv=null);const t=this.Nv[0],i=function(t,i){const s=t.createElement("canvas"),n=Ms(s);return s.style.width=`${i.Ft}px`,s.style.height=`${i.Wt}px`,s.width=i.Ft*n,s.height=i.Wt*n,s}(document,new gs(this.Ye,this.pa)),s=Ss(i),n=Ms(i);return V(s,n,(()=>{let i=0,n=0;const e=t=>{for(let e=0;e<this.Nv.length;e++){const r=this.Nv[e],l=r.nv().Wt,a=h("left"===t?r.ov():r._v()),o=a.wp();s.drawImage(o,i,n,a.up(),l),n+=l}};this.sm()&&(e("left"),i=h(t.ov()).up()),n=0;for(let t=0;t<this.Nv.length;t++){const e=this.Nv[t],r=e.nv(),h=e.wp();s.drawImage(h,i,n,r.Ft,r.Wt),n+=r.Wt}i+=t.nv().Ft,this.nm()&&(n=0,e("right"));const r=t=>{const e=h("left"===t?this.Xv.xv():this.Xv.Tv()),r=e.nv(),l=e.wp();s.drawImage(l,i,n,r.Ft,r.Wt)};if(this.cs.timeScale.visible){i=0,this.sm()&&(r("left"),i=h(t.ov()).up());const e=this.Xv.nv(),l=this.Xv.wp();s.drawImage(l,i,n,e.Ft,e.Wt),this.nm()&&(i+=t.nv().Ft,r("right"),s.restore())}})),i}rm(t){if("left"===t&&!this.sm())return 0;if("right"===t&&!this.nm())return 0;if(0===this.Nv.length)return 0;return h("left"===t?this.Nv[0].ov():this.Nv[0]._v()).up()}hm(){let t=0,i=0,s=0;for(const n of this.Nv)this.sm()&&(i=Math.max(i,h(n.ov()).lp())),this.nm()&&(s=Math.max(s,h(n._v()).lp())),t+=n.Po();const n=this.Ye,e=this.pa,r=Math.max(n-i-s,0),l=this.cs.timeScale.visible;let a=l?this.Xv.Rv():0;a%2&&(a+=1);const o=0+a,_=e<o?0:e-o,u=_/t;let c=0;for(let t=0;t<this.Nv.length;++t){const n=this.Nv[t];n.zp(this.Hi.uc()[t]);let e=0,h=0;h=t===this.Nv.length-1?_-c:Math.round(n.Po()*u),e=Math.max(h,2),c+=e,n._p(new gs(r,e)),this.sm()&&n.sv(i,"left"),this.nm()&&n.sv(s,"right"),n.cp()&&this.Hi.vc(n.cp(),e)}this.Xv.Pv(new gs(l?r:0,a),l?i:0,l?s:0),this.Hi.Lo(r),this.Fv!==i&&(this.Fv=i),this.Wv!==s&&(this.Wv=s)}qv(t){t?this.Mv.addEventListener("wheel",this.Hv,{passive:!1}):this.Mv.removeEventListener("wheel",this.Hv)}lm(t){switch(t.deltaMode){case t.DOM_DELTA_PAGE:return 120;case t.DOM_DELTA_LINE:return 32}return Hs?1/window.devicePixelRatio:1}Uv(t){if(!(0!==t.deltaX&&this.cs.handleScroll.mouseWheel||0!==t.deltaY&&this.cs.handleScale.mouseWheel))return;const i=this.lm(t),s=i*t.deltaX/100,n=-i*t.deltaY/100;if(t.cancelable&&t.preventDefault(),0!==n&&this.cs.handleScale.mouseWheel){const i=Math.sign(n)*Math.min(1,Math.abs(n)),s=t.clientX-this.Mv.getBoundingClientRect().left;this.qt().wc(s,i)}0!==s&&this.cs.handleScroll.mouseWheel&&this.qt().gc(-80*s)}tm(t,i){var s;const n=t.$s();3===n&&this.am(),3!==n&&2!==n||(this.om(t),this._m(t,i),this.Xv.wt(),this.Nv.forEach((t=>{t.$p()})),3===(null===(s=this.zv)||void 0===s?void 0:s.$s())&&(this.zv.sn(t),this.am(),this.om(this.zv),this._m(this.zv,i),t=this.zv,this.zv=null)),this.dp(t)}_m(t,i){for(const s of t.tn())this.nn(s,i)}om(t){const i=this.Hi.uc();for(let s=0;s<i.length;s++)t.Hs(s).js&&i[s].Yo()}nn(t,i){const s=this.Hi.kt();switch(t.Ys){case 0:s.xu();break;case 1:s.Tu(t.At);break;case 2:s.Js(t.At);break;case 3:s.Qs(t.At);break;case 4:s.du();break;case 5:t.At.gu(i)||s.Qs(t.At.Mu(i))}}Ku(t){null!==this.zv?this.zv.sn(t):this.zv=t,this.jv||(this.jv=!0,this.Vv=window.requestAnimationFrame((t=>{if(this.jv=!1,this.Vv=0,null!==this.zv){const i=this.zv;this.zv=null,this.tm(i,t);for(const s of i.tn())if(5===s.Ys&&!s.At.gu(t)){this.qt().Zs(s.At);break}}})))}am(){this.Kv()}Kv(){const t=this.Hi.uc(),i=t.length,s=this.Nv.length;for(let t=i;t<s;t++){const t=r(this.Nv.pop());this.$v.removeChild(t.rp()),t.Qp().v(this),t.M()}for(let n=s;n<i;n++){const i=new Ws(this,t[n]);i.Qp().l(this.um.bind(this),this),this.Nv.push(i),this.$v.insertBefore(i.rp(),this.Xv.rp())}for(let s=0;s<i;s++){const i=t[s],n=this.Nv[s];n.cp()!==i?n.zp(i):n.Wp()}this.Gv(),this.hm()}dm(t,i){var s;const n=new Map;if(null!==t){this.Hi.gt().forEach((i=>{const s=i.Is().Hh(t);null!==s&&n.set(i,s)}))}let e;if(null!==t){const i=null===(s=this.Hi.kt().Ui(t))||void 0===s?void 0:s.M_;void 0!==i&&(e=i)}const r=this.qt().hc(),h=null!==r&&r.ac instanceof yi?r.ac:void 0,l=null!==r&&void 0!==r.Yp?r.Yp.Wr:void 0;return{_t:e,Xn:null!=t?t:void 0,fm:null!=i?i:void 0,pm:h,vm:n,bm:l}}um(t,i){this.xp.m((()=>this.dm(t,i)))}Yv(t,i){this.Xu.m((()=>this.dm(t,i)))}Gv(){const t=this.cs.timeScale.visible?"":"none";this.Xv.rp().style.display=t}sm(){return this.Nv[0].cp().No().F().visible}nm(){return this.Nv[0].cp().Vo().F().visible}}function Ys(t){return Boolean(t.handleScroll.mouseWheel||t.handleScale.mouseWheel)}function Xs(t,i,s,n){const e=s.value,r={Xn:i,_t:t,At:[e,e,e,e],M_:n};return void 0!==s.color&&(r.R=s.color),r}function Zs(t){return void 0!==t.At}function Ks(t){return(i,s,n,e)=>{return void 0===(r=n).open&&void 0===r.value?{_t:i,Xn:s,M_:e}:t(i,s,n,e);var r}}const Gs={Candlestick:Ks((function(t,i,s,n){const e={Xn:i,_t:t,At:[s.open,s.high,s.low,s.close],M_:n};return void 0!==s.color&&(e.R=s.color),void 0!==s.borderColor&&(e.Ot=s.borderColor),void 0!==s.wickColor&&(e.Ah=s.wickColor),e})),Bar:Ks((function(t,i,s,n){const e={Xn:i,_t:t,At:[s.open,s.high,s.low,s.close],M_:n};return void 0!==s.color&&(e.R=s.color),e})),Area:Ks((function(t,i,s,n){const e=s.value,r={Xn:i,_t:t,At:[e,e,e,e],M_:n};return void 0!==s.lineColor&&(r.ot=s.lineColor),void 0!==s.topColor&&(r.mn=s.topColor),void 0!==s.bottomColor&&(r.bn=s.bottomColor),r})),Baseline:Ks((function(t,i,s,n){const e=s.value,r={Xn:i,_t:t,At:[e,e,e,e],M_:n};return void 0!==s.topLineColor&&(r.we=s.topLineColor),void 0!==s.bottomLineColor&&(r.ge=s.bottomLineColor),void 0!==s.topFillColor1&&(r.fe=s.topFillColor1),void 0!==s.topFillColor2&&(r.pe=s.topFillColor2),void 0!==s.bottomFillColor1&&(r.ve=s.bottomFillColor1),void 0!==s.bottomFillColor2&&(r.me=s.bottomFillColor2),r})),Histogram:Ks(Xs),Line:Ks(Xs)};function Js(t){return Gs[t]}function Qs(t){return 60*t*60*1e3}function tn(t){return 60*t*1e3}const sn=[{wm:(nn=1,1e3*nn),g_:10},{wm:tn(1),g_:20},{wm:tn(5),g_:21},{wm:tn(30),g_:22},{wm:Qs(1),g_:30},{wm:Qs(3),g_:31},{wm:Qs(6),g_:32},{wm:Qs(12),g_:33}];var nn;function en(t,i){if(t.getUTCFullYear()!==i.getUTCFullYear())return 70;if(t.getUTCMonth()!==i.getUTCMonth())return 60;if(t.getUTCDate()!==i.getUTCDate())return 50;for(let s=sn.length-1;s>=0;--s)if(Math.floor(i.getTime()/sn[s].wm)!==Math.floor(t.getTime()/sn[s].wm))return sn[s].g_;return 0}function rn(t,i=0){if(0===t.length)return;let s=0===i?null:t[i-1]._t.u_,n=null!==s?new Date(1e3*s):null,e=0;for(let r=i;r<t.length;++r){const i=t[r],h=new Date(1e3*i._t.u_);null!==n&&(i.w_=en(h,n)),e+=i._t.u_-(s||i._t.u_),s=i._t.u_,n=h}if(0===i&&t.length>1){const i=Math.ceil(e/(t.length-1)),s=new Date(1e3*(t[0]._t.u_-i));t[0].w_=en(new Date(1e3*t[0]._t.u_),s)}}function hn(t){if(!ds(t))throw new Error("time must be of type BusinessDay");const i=new Date(Date.UTC(t.year,t.month-1,t.day,0,0,0,0));return{u_:Math.round(i.getTime()/1e3),__:t}}function ln(t){if(!fs(t))throw new Error("time must be of type isUTCTimestamp");return{u_:t}}function an(t){return 0===t.length?null:ds(t[0].time)?hn:ln}function on(t){return fs(t)?ln(t):ds(t)?hn(t):hn(_n(t))}function _n(t){const i=new Date(t);if(isNaN(i.getTime()))throw new Error(`Invalid date string=${t}, expected format=yyyy-mm-dd`);return{day:i.getUTCDate(),month:i.getUTCMonth()+1,year:i.getUTCFullYear()}}function un(t){M(t.time)&&(t.time=_n(t.time))}function cn(t){return{Xn:0,gm:new Map,xl:t}}function dn(t){if(void 0!==t&&0!==t.length)return{Mm:t[0]._t.u_,Sm:t[t.length-1]._t.u_}}function fn(t){let i;return t.forEach((t=>{void 0===i&&(i=t.M_)})),r(i)}function pn(t){void 0===t.M_&&(t.M_=t.time)}class vn{constructor(){this.ym=new Map,this.km=new Map,this.Cm=new Map,this.xm=[]}M(){this.ym.clear(),this.km.clear(),this.Cm.clear(),this.xm=[]}Tm(t,i){let s=0!==this.ym.size,n=!1;const e=this.km.get(t);if(void 0!==e)if(1===this.km.size)s=!1,n=!0,this.ym.clear();else for(const i of this.xm)i.pointData.gm.delete(t)&&(n=!0);let r=[];if(0!==i.length){const s=i;s.forEach((t=>pn(t))),function(t){t.forEach(un)}(i);const e=h(an(i)),l=Js(t.Ih());r=s.map((i=>{const s=e(i.time);let r=this.ym.get(s.u_);void 0===r&&(r=cn(s),this.ym.set(s.u_,r),n=!0);const h=l(s,r.Xn,i,i.M_);return r.gm.set(t,h),h}))}s&&this.Dm(),this.Pm(t,r);let l=-1;if(n){const t=[];this.ym.forEach((i=>{t.push({w_:0,_t:i.xl,pointData:i,M_:fn(i.gm)})})),t.sort(((t,i)=>t._t.u_-i._t.u_)),l=this.Rm(t)}return this.Lm(t,l,function(t,i){const s=dn(t),n=dn(i);if(void 0!==s&&void 0!==n)return{wl:s.Sm>=n.Sm&&s.Mm>=n.Mm}}(this.km.get(t),e))}Ac(t){return this.Tm(t,[])}Am(t,i){const s=i;pn(s),un(i);const n=h(an([i]))(i.time),e=this.Cm.get(t);if(void 0!==e&&n.u_<e.u_)throw new Error(`Cannot update oldest data, last time=${e.u_}, new time=${n.u_}`);let r=this.ym.get(n.u_);const l=void 0===r;void 0===r&&(r=cn(n),this.ym.set(n.u_,r));const a=Js(t.Ih())(n,r.Xn,i,s.M_);r.gm.set(t,a),this.Om(t,a);const o={wl:Zs(a)};if(!l)return this.Lm(t,-1,o);const _={w_:0,_t:r.xl,pointData:r,M_:fn(r.gm)},u=vt(this.xm,_._t.u_,((t,i)=>t._t.u_<i));this.xm.splice(u,0,_);for(let t=u;t<this.xm.length;++t)mn(this.xm[t].pointData,t);return rn(this.xm,u),this.Lm(t,u,o)}Om(t,i){let s=this.km.get(t);void 0===s&&(s=[],this.km.set(t,s));const n=0!==s.length?s[s.length-1]:null;null===n||i._t.u_>n._t.u_?Zs(i)&&s.push(i):Zs(i)?s[s.length-1]=i:s.splice(-1,1),this.Cm.set(t,i._t)}Pm(t,i){0!==i.length?(this.km.set(t,i.filter(Zs)),this.Cm.set(t,i[i.length-1]._t)):(this.km.delete(t),this.Cm.delete(t))}Dm(){for(const t of this.xm)0===t.pointData.gm.size&&this.ym.delete(t._t.u_)}Rm(t){let i=-1;for(let s=0;s<this.xm.length&&s<t.length;++s){const n=this.xm[s],e=t[s];if(n._t.u_!==e._t.u_){i=s;break}e.w_=n.w_,mn(e.pointData,s)}if(-1===i&&this.xm.length!==t.length&&(i=Math.min(this.xm.length,t.length)),-1===i)return-1;for(let s=i;s<t.length;++s)mn(t[s].pointData,s);return rn(t,i),this.xm=t,i}Em(){if(0===this.km.size)return null;let t=0;return this.km.forEach((i=>{0!==i.length&&(t=Math.max(t,i[i.length-1].Xn))})),t}Lm(t,i,s){const n={Bm:new Map,kt:{eu:this.Em()}};if(-1!==i)this.km.forEach(((i,e)=>{n.Bm.set(e,{lr:i,Im:e===t?s:void 0})})),this.km.has(t)||n.Bm.set(t,{lr:[],Im:s}),n.kt.Nm=this.xm,n.kt.Vm=i;else{const i=this.km.get(t);n.Bm.set(t,{lr:i||[],Im:s})}return n}}function mn(t,i){t.Xn=i,t.gm.forEach((t=>{t.Xn=i}))}function bn(t){return{value:t.At[3],time:t.M_}}function wn(t){const i=bn(t);return void 0!==t.R&&(i.color=t.R),i}function gn(t){return{open:t.At[0],high:t.At[1],low:t.At[2],close:t.At[3],time:t.M_}}const Mn={Area:function(t){const i=bn(t);return void 0!==t.ot&&(i.lineColor=t.ot),void 0!==t.mn&&(i.topColor=t.mn),void 0!==t.bn&&(i.bottomColor=t.bn),i},Line:wn,Baseline:function(t){const i=bn(t);return void 0!==t.we&&(i.topLineColor=t.we),void 0!==t.ge&&(i.bottomLineColor=t.ge),void 0!==t.fe&&(i.topFillColor1=t.fe),void 0!==t.pe&&(i.topFillColor2=t.pe),void 0!==t.ve&&(i.bottomFillColor1=t.ve),void 0!==t.me&&(i.bottomFillColor2=t.me),i},Histogram:wn,Bar:function(t){const i=gn(t);return void 0!==t.R&&(i.color=t.R),i},Candlestick:function(t){const i=gn(t),{R:s,Ot:n,Ah:e}=t;return void 0!==s&&(i.color=s),void 0!==n&&(i.borderColor=n),void 0!==e&&(i.wickColor=e),i}};function Sn(t){return Mn[t]}const yn={autoScale:!0,mode:0,invertScale:!1,alignLabels:!0,borderVisible:!0,borderColor:"#2B2B43",entireTextOnly:!1,visible:!1,ticksVisible:!1,scaleMargins:{bottom:.1,top:.2}},kn={color:"rgba(0, 0, 0, 0)",visible:!1,fontSize:48,fontFamily:x,fontStyle:"",text:"",horzAlign:"center",vertAlign:"center"},Cn={width:0,height:0,layout:{background:{type:"solid",color:"#FFFFFF"},textColor:"#191919",fontSize:12,fontFamily:x},crosshair:{vertLine:{color:"#9598A1",width:1,style:3,visible:!0,labelVisible:!0,labelBackgroundColor:"#131722"},horzLine:{color:"#9598A1",width:1,style:3,visible:!0,labelVisible:!0,labelBackgroundColor:"#131722"},mode:1},grid:{vertLines:{color:"#D6DCDE",style:0,visible:!0},horzLines:{color:"#D6DCDE",style:0,visible:!0}},overlayPriceScales:Object.assign({},yn),leftPriceScale:Object.assign(Object.assign({},yn),{visible:!1}),rightPriceScale:Object.assign(Object.assign({},yn),{visible:!0}),timeScale:{rightOffset:0,barSpacing:6,minBarSpacing:.5,fixLeftEdge:!1,fixRightEdge:!1,lockVisibleTimeRangeOnResize:!1,rightBarStaysOnScroll:!1,borderVisible:!0,borderColor:"#2B2B43",visible:!0,timeVisible:!1,secondsVisible:!0,shiftVisibleRangeOnNewBar:!0,ticksVisible:!1},watermark:kn,localization:{locale:ps?navigator.language:"",dateFormat:"dd MMM 'yy"},handleScroll:{mouseWheel:!0,pressedMouseMove:!0,horzTouchDrag:!0,vertTouchDrag:!0},handleScale:{axisPressedMouseMove:{time:!0,price:!0},axisDoubleClickReset:{time:!0,price:!0},mouseWheel:!0,pinch:!0},kineticScroll:{mouse:!1,touch:!0},trackingMode:{exitMode:1}},xn={upColor:"#26a69a",downColor:"#ef5350",wickVisible:!0,borderVisible:!0,borderColor:"#378658",borderUpColor:"#26a69a",borderDownColor:"#ef5350",wickColor:"#737375",wickUpColor:"#26a69a",wickDownColor:"#ef5350"},Tn={upColor:"#26a69a",downColor:"#ef5350",openVisible:!0,thinBars:!0},Dn={color:"#2196f3",lineStyle:0,lineWidth:3,lineType:0,crosshairMarkerVisible:!0,crosshairMarkerRadius:4,crosshairMarkerBorderColor:"",crosshairMarkerBorderWidth:2,crosshairMarkerBackgroundColor:"",lastPriceAnimation:0},Pn={topColor:"rgba( 46, 220, 135, 0.4)",bottomColor:"rgba( 40, 221, 100, 0)",invertFilledArea:!1,lineColor:"#33D778",lineStyle:0,lineWidth:3,lineType:0,crosshairMarkerVisible:!0,crosshairMarkerRadius:4,crosshairMarkerBorderColor:"",crosshairMarkerBorderWidth:2,crosshairMarkerBackgroundColor:"",lastPriceAnimation:0},Rn={baseValue:{type:"price",price:0},topFillColor1:"rgba(38, 166, 154, 0.28)",topFillColor2:"rgba(38, 166, 154, 0.05)",topLineColor:"rgba(38, 166, 154, 1)",bottomFillColor1:"rgba(239, 83, 80, 0.05)",bottomFillColor2:"rgba(239, 83, 80, 0.28)",bottomLineColor:"rgba(239, 83, 80, 1)",lineWidth:3,lineStyle:0,lineType:0,crosshairMarkerVisible:!0,crosshairMarkerRadius:4,crosshairMarkerBorderColor:"",crosshairMarkerBorderWidth:2,crosshairMarkerBackgroundColor:"",lastPriceAnimation:0},Ln={color:"#26a69a",base:0},An={title:"",visible:!0,lastValueVisible:!0,priceLineVisible:!0,priceLineSource:0,priceLineWidth:1,priceLineColor:"",priceLineStyle:2,baseLineVisible:!0,baseLineWidth:1,baseLineColor:"#B2B5BE",baseLineStyle:0,priceFormat:{type:"price",precision:2,minMove:.01}};class On{constructor(t,i){this.Fm=t,this.Wm=i}applyOptions(t){this.Fm.qt().oc(this.Wm,t)}options(){return this.Vi().F()}width(){return Q(this.Wm)?this.Fm.rm(this.Wm):0}Vi(){return h(this.Fm.qt()._c(this.Wm)).Lt}}const En={color:"#FF0000",price:0,lineStyle:2,lineWidth:1,lineVisible:!0,axisLabelVisible:!0,title:""};class Bn{constructor(t){this.Sh=t}applyOptions(t){this.Sh.Th(t)}options(){return this.Sh.F()}zm(){return this.Sh}}class In{constructor(t,i,s){this.Dn=t,this.jm=i,this.$m=s}priceFormatter(){return this.Dn.Ol()}priceToCoordinate(t){const i=this.Dn.Tt();return null===i?null:this.Dn.Lt().Rt(t,i.At)}coordinateToPrice(t){const i=this.Dn.Tt();return null===i?null:this.Dn.Lt().vs(t,i.At)}barsInLogicalRange(t){if(null===t)return null;const i=new ss(new Qi(t.from,t.to)).x_(),s=this.Dn.Is();if(s.Wi())return null;const n=s.Hh(i.Mn(),1),e=s.Hh(i.Sn(),-1),r=h(s.zh()),l=h(s.Bs());if(null!==n&&null!==e&&n.Xn>e.Xn)return{barsBefore:t.from-r,barsAfter:l-t.to};const a={barsBefore:null===n||n.Xn===r?t.from-r:n.Xn-r,barsAfter:null===e||e.Xn===l?l-t.to:l-e.Xn};return null!==n&&null!==e&&(a.from=n._t.__||n._t.u_,a.to=e._t.__||e._t.u_),a}setData(t){this.Dn.Ih(),this.jm.Hm(this.Dn,t)}update(t){this.Dn.Ih(),this.jm.Um(this.Dn,t)}dataByIndex(t,i){const s=this.Dn.Is().Hh(t,i);return null===s?null:Sn(this.seriesType())(s)}setMarkers(t){const i=t.map((t=>Object.assign(Object.assign({},t),{originalTime:t.time,time:on(t.time)})));this.Dn.Ml(i)}markers(){return this.Dn.Sl().map((t=>{const{originalTime:i,time:s}=t,n=function(t,i){var s={};for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&i.indexOf(n)<0&&(s[n]=t[n]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var e=0;for(n=Object.getOwnPropertySymbols(t);e<n.length;e++)i.indexOf(n[e])<0&&Object.prototype.propertyIsEnumerable.call(t,n[e])&&(s[n[e]]=t[n[e]])}return s}(t,["originalTime","time"]);return Object.assign({time:i},n)}))}applyOptions(t){this.Dn.Th(t)}options(){return y(this.Dn.F())}priceScale(){return this.$m.priceScale(this.Dn.Lt().Fl())}createPriceLine(t){const i=b(y(En),t),s=this.Dn.yl(i);return new Bn(s)}removePriceLine(t){this.Dn.kl(t.zm())}seriesType(){return this.Dn.Ih()}}class Nn{constructor(t,i){this.qm=new m,this.I_=new m,this.gv=new m,this.Hi=t,this.wo=t.kt(),this.Xv=i,this.wo.Su().l(this.Ym.bind(this)),this.wo.yu().l(this.Xm.bind(this)),this.Xv.Dv().l(this.Zm.bind(this))}M(){this.wo.Su().v(this),this.wo.yu().v(this),this.Xv.Dv().v(this),this.qm.M(),this.I_.M(),this.gv.M()}scrollPosition(){return this.wo.ou()}scrollToPosition(t,i){i?this.wo.wu(t,1e3):this.Hi.Qs(t)}scrollToRealTime(){this.wo.bu()}getVisibleRange(){var t,i;const s=this.wo.G_();return null===s?null:{from:null!==(t=s.from.__)&&void 0!==t?t:s.from.u_,to:null!==(i=s.to.__)&&void 0!==i?i:s.to.u_}}setVisibleRange(t){const i={from:on(t.from),to:on(t.to)},s=this.wo.iu(i);this.Hi.Oc(s)}getVisibleLogicalRange(){const t=this.wo.K_();return null===t?null:{from:t.Mn(),to:t.Sn()}}setVisibleLogicalRange(t){e(t.from<=t.to,"The from index cannot be after the to index."),this.Hi.Oc(t)}resetTimeScale(){this.Hi.Gs()}fitContent(){this.Hi.xu()}logicalToCoordinate(t){const i=this.Hi.kt();return i.Wi()?null:i.Bt(t)}coordinateToLogical(t){return this.wo.Wi()?null:this.wo.ru(t)}timeToCoordinate(t){const i=on(t),s=this.wo.zl(i,!1);return null===s?null:this.wo.Bt(s)}coordinateToTime(t){var i;const s=this.Hi.kt(),n=s.ru(t),e=s.bs(n);return null===e?null:null!==(i=e.__)&&void 0!==i?i:e.u_}width(){return this.Xv.nv().Ft}height(){return this.Xv.nv().Wt}subscribeVisibleTimeRangeChange(t){this.qm.l(t)}unsubscribeVisibleTimeRangeChange(t){this.qm.p(t)}subscribeVisibleLogicalRangeChange(t){this.I_.l(t)}unsubscribeVisibleLogicalRangeChange(t){this.I_.p(t)}subscribeSizeChange(t){this.gv.l(t)}unsubscribeSizeChange(t){this.gv.p(t)}applyOptions(t){this.wo.Th(t)}options(){return y(this.wo.F())}Ym(){this.qm.g()&&this.qm.m(this.getVisibleRange())}Xm(){this.I_.g()&&this.I_.m(this.getVisibleLogicalRange())}Zm(t){this.gv.m(t.Ft,t.Wt)}}function Vn(t){if(void 0===t||"custom"===t.type)return;const i=t;void 0!==i.minMove&&void 0===i.precision&&(i.precision=function(t){if(t>=1)return 0;let i=0;for(;i<8;i++){const s=Math.round(t);if(Math.abs(s-t)<1e-8)return i;t*=10}return i}(i.minMove))}function Fn(t){return function(t){if(S(t.handleScale)){const i=t.handleScale;t.handleScale={axisDoubleClickReset:{time:i,price:i},axisPressedMouseMove:{time:i,price:i},mouseWheel:i,pinch:i}}else if(void 0!==t.handleScale){const{axisPressedMouseMove:i,axisDoubleClickReset:s}=t.handleScale;S(i)&&(t.handleScale.axisPressedMouseMove={time:i,price:i}),S(s)&&(t.handleScale.axisDoubleClickReset={time:s,price:s})}const i=t.handleScroll;S(i)&&(t.handleScroll={horzTouchDrag:i,vertTouchDrag:i,mouseWheel:i,pressedMouseMove:i})}(t),t}class Wn{constructor(t,i){this.Km=new vn,this.Gm=new Map,this.Jm=new Map,this.Qm=new m,this.tb=new m;const s=void 0===i?y(Cn):b(y(Cn),Fn(i));this.Fm=new qs(t,s),this.Fm.Qp().l((t=>{this.Qm.g()&&this.Qm.m(this.ib(t()))}),this),this.Fm.fc().l((t=>{this.tb.g()&&this.tb.m(this.ib(t()))}),this);const n=this.Fm.qt();this.sb=new Nn(n,this.Fm.Qv())}remove(){this.Fm.Qp().v(this),this.Fm.fc().v(this),this.sb.M(),this.Fm.M(),this.Gm.clear(),this.Jm.clear(),this.Qm.M(),this.tb.M(),this.Km.M()}resize(t,i,s){this.Fm.Zv(t,i,s)}addAreaSeries(t){return this.nb("Area",Pn,t)}addBaselineSeries(t){return this.nb("Baseline",Rn,t)}addBarSeries(t){return this.nb("Bar",Tn,t)}addCandlestickSeries(t={}){return function(t){void 0!==t.borderColor&&(t.borderUpColor=t.borderColor,t.borderDownColor=t.borderColor),void 0!==t.wickColor&&(t.wickUpColor=t.wickColor,t.wickDownColor=t.wickColor)}(t),this.nb("Candlestick",xn,t)}addHistogramSeries(t){return this.nb("Histogram",Ln,t)}addLineSeries(t){return this.nb("Line",Dn,t)}removeSeries(t){const i=r(this.Gm.get(t)),s=this.Km.Ac(i);this.Fm.qt().Ac(i),this.eb(s),this.Gm.delete(t),this.Jm.delete(i)}Hm(t,i){this.eb(this.Km.Tm(t,i))}Um(t,i){this.eb(this.Km.Am(t,i))}subscribeClick(t){this.Qm.l(t)}unsubscribeClick(t){this.Qm.p(t)}subscribeCrosshairMove(t){this.tb.l(t)}unsubscribeCrosshairMove(t){this.tb.p(t)}priceScale(t){return new On(this.Fm,t)}timeScale(){return this.sb}applyOptions(t){this.Fm.Th(Fn(t))}options(){return this.Fm.F()}takeScreenshot(){return this.Fm.im()}nb(t,i,s={}){Vn(s.priceFormat);const n=b(y(An),y(i),s),e=this.Fm.qt().Rc(t,n),r=new In(e,this,this);return this.Gm.set(r,e),this.Jm.set(e,r),r}eb(t){const i=this.Fm.qt();i.Dc(t.kt.eu,t.kt.Nm,t.kt.Vm),t.Bm.forEach(((t,i)=>i.tt(t.lr,t.Im))),i.lu()}rb(t){return r(this.Jm.get(t))}ib(t){const i=new Map;t.vm.forEach(((t,s)=>{const n=Sn(s.Ih())(t);e(function(t){return void 0!==t.open||void 0!==t.value}(n)),i.set(this.rb(s),n)}));const s=void 0===t.pm?void 0:this.rb(t.pm);return{time:t._t,logical:t.Xn,point:t.fm,hoveredSeries:s,hoveredMarkerId:t.bm,seriesData:i}}}var zn=Object.freeze({__proto__:null,version:function(){return"4.0.0"},get LineStyle(){return i},get LineType(){return t},get TrackingModeExitMode(){return es},get CrosshairMode(){return G},get MismatchDirection(){return wi},get PriceScaleMode(){return zi},get PriceLineSource(){return hs},get LastPriceAnimationMode(){return rs},get TickMarkType(){return ns},get ColorType(){return ls},isBusinessDay:ds,isUTCTimestamp:fs,createChart:function(t,i){let s;if(M(t)){const i=document.getElementById(t);e(null!==i,`Cannot find element in DOM with id=${t}`),s=i}else s=t;return new Wn(s,i)}});window.LightweightCharts=zn}();
diff --git a/node_modules/lightweight-charts/dist/typings.d.ts b/node_modules/lightweight-charts/dist/typings.d.ts
index eed714f..41a16fd 100644
--- a/node_modules/lightweight-charts/dist/typings.d.ts
+++ b/node_modules/lightweight-charts/dist/typings.d.ts
@@ -1,4 +1,4 @@
-// Generated by dts-bundle-generator v6.4.0
+// Generated by dts-bundle-generator v6.12.0
 
 /**
  * Represents a type of color.
@@ -75,7 +75,28 @@ export declare enum LineType {
 	/**
 	 * A stepped line.
 	 */
-	WithSteps = 1
+	WithSteps = 1,
+	/**
+	 * A curved line.
+	 */
+	Curved = 2
+}
+/**
+ * Search direction if no data found at provided index
+ */
+export declare enum MismatchDirection {
+	/**
+	 * Search the nearest left item
+	 */
+	NearestLeft = -1,
+	/**
+	 * Do not search
+	 */
+	None = 0,
+	/**
+	 * Search the nearest right item
+	 */
+	NearestRight = 1
 }
 /**
  * Represents the source of data to be used for the horizontal price line.
@@ -233,6 +254,12 @@ export declare type CandlestickSeriesPartialOptions = SeriesPartialOptions<Candl
  * Represents a coordiate as a `number`.
  */
 export declare type Coordinate = Nominal<number, "Coordinate">;
+/**
+ * Price line options for the {@link ISeriesApi.createPriceLine} method.
+ *
+ * `price` is required, while the rest of the options are optional.
+ */
+export declare type CreatePriceLineOptions = Partial<PriceLineOptions> & Pick<PriceLineOptions, "price">;
 /**
  * Represents a type `T` where every property is optional.
  */
@@ -363,7 +390,7 @@ export declare type SizeChangeEventHandler = (width: number, height: number) =>
  * };
  * ```
  */
-export declare type TickMarkFormatter = (time: UTCTimestamp | BusinessDay, tickMarkType: TickMarkType, locale: string) => string;
+export declare type TickMarkFormatter = (time: Time, tickMarkType: TickMarkType, locale: string) => string;
 /**
  * The Time type is used to represent the time of data items.
  *
@@ -380,7 +407,7 @@ export declare type Time = UTCTimestamp | BusinessDay | string;
 /**
  * A custom function used to override formatting of a time to a string.
  */
-export declare type TimeFormatterFn = (time: BusinessDay | UTCTimestamp) => string;
+export declare type TimeFormatterFn = (time: Time) => string;
 /**
  * Represents a {@link Time} range.
  */
@@ -415,6 +442,23 @@ export declare type VertAlign = "top" | "center" | "bottom";
  * @see {@link PriceScaleOptions}
  */
 export declare type VisiblePriceScaleOptions = PriceScaleOptions;
+/**
+ * Structure describing a single item of data for area series
+ */
+export interface AreaData extends SingleValueData {
+	/**
+	 * Optional line color value for certain data item. If missed, color from options is used
+	 */
+	lineColor?: string;
+	/**
+	 * Optional top color value for certain data item. If missed, color from options is used
+	 */
+	topColor?: string;
+	/**
+	 * Optional bottom color value for certain data item. If missed, color from options is used
+	 */
+	bottomColor?: string;
+}
 /**
  * Represents style options for an area series.
  */
@@ -431,6 +475,12 @@ export interface AreaStyleOptions {
 	 * @defaultValue `'rgba( 40, 221, 100, 0)'`
 	 */
 	bottomColor: string;
+	/**
+	 * Invert the filled area. Fills the area above the line if set to true.
+	 *
+	 * @defaultValue `false`
+	 */
+	invertFilledArea: boolean;
 	/**
 	 * Line color.
 	 *
@@ -479,6 +529,12 @@ export interface AreaStyleOptions {
 	 * @defaultValue `''`
 	 */
 	crosshairMarkerBackgroundColor: string;
+	/**
+	 * Crosshair marker border width in pixels.
+	 *
+	 * @defaultValue `2`
+	 */
+	crosshairMarkerBorderWidth: number;
 	/**
 	 * Last price animation mode.
 	 *
@@ -508,6 +564,23 @@ export interface AutoscaleInfo {
 	 */
 	margins?: AutoScaleMargins;
 }
+/**
+ * Represents options for how the time and price axes react to mouse double click.
+ */
+export interface AxisDoubleClickOptions {
+	/**
+	 * Enable resetting scaling the time axis by double-clicking the left mouse button.
+	 *
+	 * @defaultValue `true`
+	 */
+	time: boolean;
+	/**
+	 * Enable reseting scaling the price axis by by double-clicking the left mouse button.
+	 *
+	 * @defaultValue `true`
+	 */
+	price: boolean;
+}
 /**
  * Represents options for how the time and price axes react to mouse movements.
  */
@@ -534,27 +607,6 @@ export interface BarData extends OhlcData {
 	 */
 	color?: string;
 }
-/**
- * Represents a bar's open, high, low, close (OHLC) prices.
- */
-export interface BarPrices {
-	/**
-	 * The open price.
-	 */
-	open: BarPrice;
-	/**
-	 * The high price.
-	 */
-	high: BarPrice;
-	/**
-	 * The low price.
-	 */
-	low: BarPrice;
-	/**
-	 * The close price.
-	 */
-	close: BarPrice;
-}
 /**
  * Represents style options for a bar series.
  */
@@ -614,6 +666,35 @@ export interface BaseValuePrice {
 	 */
 	price: number;
 }
+/**
+ * Structure describing a single item of data for baseline series
+ */
+export interface BaselineData extends SingleValueData {
+	/**
+	 * Optional top area top fill color value for certain data item. If missed, color from options is used
+	 */
+	topFillColor1?: string;
+	/**
+	 * Optional top area bottom fill color value for certain data item. If missed, color from options is used
+	 */
+	topFillColor2?: string;
+	/**
+	 * Optional top area line color value for certain data item. If missed, color from options is used
+	 */
+	topLineColor?: string;
+	/**
+	 * Optional bottom area top fill color value for certain data item. If missed, color from options is used
+	 */
+	bottomFillColor1?: string;
+	/**
+	 * Optional bottom area bottom fill color value for certain data item. If missed, color from options is used
+	 */
+	bottomFillColor2?: string;
+	/**
+	 * Optional bottom area line color value for certain data item. If missed, color from options is used
+	 */
+	bottomLineColor?: string;
+}
 /**
  * Represents style options for a baseline series.
  */
@@ -672,6 +753,12 @@ export interface BaselineStyleOptions {
 	 * @defaultValue {@link LineStyle.Solid}
 	 */
 	lineStyle: LineStyle;
+	/**
+	 * Line type.
+	 *
+	 * @defaultValue {@link LineType.Simple}
+	 */
+	lineType: LineType;
 	/**
 	 * Show the crosshair marker.
 	 *
@@ -696,6 +783,12 @@ export interface BaselineStyleOptions {
 	 * @defaultValue `''`
 	 */
 	crosshairMarkerBackgroundColor: string;
+	/**
+	 * Crosshair marker border width in pixels.
+	 *
+	 * @defaultValue `2`
+	 */
+	crosshairMarkerBorderWidth: number;
 	/**
 	 * Last price animation mode.
 	 *
@@ -997,10 +1090,8 @@ export interface HandleScaleOptions {
 	axisPressedMouseMove: AxisPressedMouseMoveOptions | boolean;
 	/**
 	 * Enable resetting scaling by double-clicking the left mouse button.
-	 *
-	 * @defaultValue `true`
 	 */
-	axisDoubleClickReset: boolean;
+	axisDoubleClickReset: AxisDoubleClickOptions | boolean;
 }
 /**
  * Represents options for how the chart is scrolled by the mouse and touch gestures.
@@ -1194,7 +1285,7 @@ export interface IChartApi {
 	 *     console.log(`Crosshair moved to ${param.point.x}, ${param.point.y}. The time is ${param.time}.`);
 	 * }
 	 *
-	 * chart.subscribeClick(myCrosshairMoveHandler);
+	 * chart.subscribeCrosshairMove(myCrosshairMoveHandler);
 	 * ```
 	 */
 	subscribeCrosshairMove(handler: MouseEventHandler): void;
@@ -1214,7 +1305,7 @@ export interface IChartApi {
 	 * @param priceScaleId - ID of the price scale.
 	 * @returns Price scale API.
 	 */
-	priceScale(priceScaleId?: string): IPriceScaleApi;
+	priceScale(priceScaleId: string): IPriceScaleApi;
 	/**
 	 * Returns API to manipulate the time scale
 	 *
@@ -1408,6 +1499,18 @@ export interface ISeriesApi<TSeriesType extends SeriesType> {
 	 * ```
 	 */
 	update(bar: SeriesDataItemTypeMap[TSeriesType]): void;
+	/**
+	 * Returns a bar data by provided logical index.
+	 *
+	 * @param logicalIndex - Logical index
+	 * @param mismatchDirection - Search direction if no data found at provided logical index.
+	 * @returns Original data item provided via setData or update methods.
+	 * @example
+	 * ```js
+	 * const originalData = series.dataByIndex(10, LightweightCharts.MismatchDirection.NearestLeft);
+	 * ```
+	 */
+	dataByIndex(logicalIndex: number, mismatchDirection?: MismatchDirection): SeriesDataItemTypeMap[TSeriesType] | null;
 	/**
 	 * Allows to set/replace all existing series markers with new ones.
 	 *
@@ -1449,10 +1552,14 @@ export interface ISeriesApi<TSeriesType extends SeriesType> {
 	 * ```
 	 */
 	setMarkers(data: SeriesMarker<Time>[]): void;
+	/**
+	 * Returns an array of series markers.
+	 */
+	markers(): SeriesMarker<Time>[];
 	/**
 	 * Creates a new price line
 	 *
-	 * @param options - Any subset of options.
+	 * @param options - Any subset of options, however `price` is required.
 	 * @example
 	 * ```js
 	 * const priceLine = series.createPriceLine({
@@ -1465,7 +1572,7 @@ export interface ISeriesApi<TSeriesType extends SeriesType> {
 	 * });
 	 * ```
 	 */
-	createPriceLine(options: PriceLineOptions): IPriceLine;
+	createPriceLine(options: CreatePriceLineOptions): IPriceLine;
 	/**
 	 * Removes the price line that was created before.
 	 *
@@ -1706,10 +1813,6 @@ export interface LayoutOptions {
 	 * @defaultValue `{ type: ColorType.Solid, color: '#FFFFFF' }`
 	 */
 	background: Background;
-	/**
-	 * @deprecated Use background instead.
-	 */
-	backgroundColor: string;
 	/**
 	 * Color of text on the scales.
 	 *
@@ -1790,6 +1893,12 @@ export interface LineStyleOptions {
 	 * @defaultValue `''`
 	 */
 	crosshairMarkerBackgroundColor: string;
+	/**
+	 * Crosshair marker border width in pixels.
+	 *
+	 * @defaultValue `2`
+	 */
+	crosshairMarkerBorderWidth: number;
 	/**
 	 * Last price animation mode.
 	 *
@@ -1841,7 +1950,11 @@ export interface MouseEventParams {
 	 *
 	 * The value will be `undefined` if the location of the event in the chart is outside the range of available data.
 	 */
-	time?: UTCTimestamp | BusinessDay;
+	time?: Time;
+	/**
+	 * Logical index
+	 */
+	logical?: Logical;
 	/**
 	 * Location of the event in the chart.
 	 *
@@ -1849,12 +1962,12 @@ export interface MouseEventParams {
 	 */
 	point?: Point;
 	/**
-	 * Prices of all series at the location of the event in the chart.
+	 * Data of all series at the location of the event in the chart.
 	 *
 	 * Keys of the map are {@link ISeriesApi} instances. Values are prices.
-	 * Each price is a number for line, area, and histogram series or a OHLC object for candlestick and bar series.
+	 * Values of the map are original data items
 	 */
-	seriesPrices: Map<ISeriesApi<SeriesType>, BarPrice | BarPrices>;
+	seriesData: Map<ISeriesApi<SeriesType>, BarData | LineData | HistogramData>;
 	/**
 	 * The {@link ISeriesApi} for the series at the point of the mouse event.
 	 */
@@ -2080,6 +2193,13 @@ export interface PriceScaleOptions {
 	 * @defaultValue `'#2B2B43'`
 	 */
 	borderColor: string;
+	/**
+	 * Price scale text color.
+	 * If not provided {@link LayoutOptions.textColor} is used.
+	 *
+	 * @defaultValue `undefined`
+	 */
+	textColor?: string;
 	/**
 	 * Show top and bottom corner labels only if entire text is visible.
 	 *
@@ -2095,9 +2215,9 @@ export interface PriceScaleOptions {
 	/**
 	 * Draw small horizontal line on price axis labels.
 	 *
-	 * @defaultValue `true`
+	 * @defaultValue `false`
 	 */
-	drawTicks: boolean;
+	ticksVisible: boolean;
 }
 /**
  * Represents a generic range `from` one value `to` another.
@@ -2129,11 +2249,11 @@ export interface SeriesDataItemTypeMap {
 	/**
 	 * The types of area series data.
 	 */
-	Area: SingleValueData | WhitespaceData;
+	Area: AreaData | WhitespaceData;
 	/**
 	 * The types of baseline series data.
 	 */
-	Baseline: SingleValueData | WhitespaceData;
+	Baseline: BaselineData | WhitespaceData;
 	/**
 	 * The types of line series data.
 	 */
@@ -2316,10 +2436,6 @@ export interface SeriesOptionsCommon {
 	 * ```
 	 */
 	autoscaleInfoProvider?: AutoscaleInfoProvider;
-	/**
-	 * @deprecated Use {@link ISeriesApi.priceScale} method of the series to apply options instead.
-	 */
-	scaleMargins?: PriceScaleMargins;
 }
 /**
  * Represents the type of options for each series type.
@@ -2499,6 +2615,12 @@ export interface TimeScaleOptions {
 	 * @defaultValue `undefined`
 	 */
 	tickMarkFormatter?: TickMarkFormatter;
+	/**
+	 * Draw small vertical line on time axis labels.
+	 *
+	 * @defaultValue `false`
+	 */
+	ticksVisible: boolean;
 }
 /**
  * Represent options for the tracking mode's behavior.
@@ -2508,7 +2630,7 @@ export interface TimeScaleOptions {
  * and make it possible to check values and dates.
  */
 export interface TrackingModeOptions {
-	/** @inheritdoc TrackingModeExitMode
+	/** @inheritDoc TrackingModeExitMode
 	 *
 	 * @defaultValue {@link TrackingModeExitMode.OnNextTap}
 	 */
@@ -2605,8 +2727,4 @@ export interface WhitespaceData {
 	time: Time;
 }
 
-export {
-	LastPriceAnimationMode as LasPriceAnimationMode,
-};
-
 export {};
